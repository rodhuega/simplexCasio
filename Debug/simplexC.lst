SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include "limits.h"
      simplexC.c     4    #include <stdlib.h>
      simplexC.c     5    #include "stdio.h"
      simplexC.c     6    #include "SH4_compatibility.h"
      simplexC.c     7    
      simplexC.c     8    #define NO_EVAL_VALUE INT_MAX
      simplexC.c     9    
      simplexC.c    10    #define TYPE_LP 1
      simplexC.c    11    #define TYPE_ILP 2
      simplexC.c    12    #define TYPE_CUT 3
      simplexC.c    13    
      simplexC.c    14    #define TYPE_INPUT 1
      simplexC.c    15    #define TYPE_SOLVE 2
      simplexC.c    16    
      simplexC.c    17    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    18    #define INITIALIZE_VALUE_OPT_ITS_MENU -2
      simplexC.c    19    #define EXIT_OPT 0
      simplexC.c    20    #define EXIT_OPT_ITS_MENU -1
      simplexC.c    21    
      simplexC.c    22    #define INE_EQUAL 0
      simplexC.c    23    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    24    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    25    
      simplexC.c    26    
      simplexC.c    27    #define FUNC_MINIMIZE 0
      simplexC.c    28    #define FUNC_MAXIMIZE 1
      simplexC.c    29    
      simplexC.c    30    
      simplexC.c    31    #define MODE_FULL_EXECUTION 0
      simplexC.c    32    #define MODE_INPUT_TABLE 1
      simplexC.c    33    
      simplexC.c    34    
      simplexC.c    35    struct iteration
      simplexC.c    36    {
      simplexC.c    37        int numIteration;
      simplexC.c    38        int is2FasesActive; //1 si esta activado. 0 en caso contrario
      simplexC.c    39        int* idBasicVariables;//1 si esa variable es Basica. 0 sera NoBasica
      simplexC.c    40        int *idByRowOfBasicVarsInBInv;//ejemplo [0]->2. la row 0 tiene asociala la variable 3
      simplexC.c    41        int isUnbounded;//1 en caso de si, 0 en caso de no
      simplexC.c    42    
      simplexC.c    43        int idVarIn;
      simplexC.c    44        int idVarOut;
      simplexC.c    45        int indexVarOutInBInvMatrix;
      simplexC.c    46    
      simplexC.c    47        float **Binv;
      simplexC.c    48        int BinvSize;
      simplexC.c    49    
      simplexC.c    50        float *ct;
      simplexC.c    51        float *xb;
      simplexC.c    52        float *ctBinv;
      simplexC.c    53        float *zj;
      simplexC.c    54        float *cjMinusZj;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    55        float **yj;
      simplexC.c    56        float *xbDivYj;
      simplexC.c    57    
      simplexC.c    58        float zSol ;
      simplexC.c    59    };
      simplexC.c    60    
      simplexC.c    61    struct problemStatement
      simplexC.c    62    {
      simplexC.c    63        int problemType;
      simplexC.c    64        int modelType;
      simplexC.c    65        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    66        int is2fasesActive;//1 en caso de si. 0 en caso que no
      simplexC.c    67        
      simplexC.c    68        //1 array de variables por cada constraint
      simplexC.c    69        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    70        float **constraints;
      simplexC.c    71        float *rightValues;
      simplexC.c    72        int *inequalitySigns;
      simplexC.c    73        int nVariables;
      simplexC.c    74        int nVariablesSlope;
      simplexC.c    75        int nVariables2fases;
      simplexC.c    76        int nVariablesInteger;
      simplexC.c    77        int nConstraints;
      simplexC.c    78        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    79        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    80        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    81        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    82        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    83    
      simplexC.c    84        int funcObjectivePurpose;
      simplexC.c    85        float *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    86        float *funcObjtValues2Fases;
      simplexC.c    87    
      simplexC.c    88        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c    89        
      simplexC.c    90    };
      simplexC.c    91    
      simplexC.c    92    struct node
      simplexC.c    93    {
      simplexC.c    94        int id;
      simplexC.c    95        int nIterations;
      simplexC.c    96        struct iteration **its;
      simplexC.c    97    };
      simplexC.c    98    
      simplexC.c    99    struct execution
      simplexC.c   100    {
      simplexC.c   101        int mode;
      simplexC.c   102        struct problemStatement *initialProblemStatement;
      simplexC.c   103        struct problemStatement *canonicalStatement;
      simplexC.c   104        struct node nodes;
      simplexC.c   105        float *bVectorValues;//Right values;
      simplexC.c   106        float *inputCvectorValues;//Values of cost variable
      simplexC.c   107        float *fases2CvectorValues;
      simplexC.c   108        int nNodes;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   109        int currentFuncObjectivePurpose;
      simplexC.c   110        int nVariables;
      simplexC.c   111        int nConstraints;
      simplexC.c   112        int maxIterations;
      simplexC.c   113    
      simplexC.c   114        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c   115    };
      simplexC.c   116    
      simplexC.c   117    struct execution ex;
      simplexC.c   118    
      simplexC.c   119    float InputD(int, int);
      simplexC.c   120    
      simplexC.c   121    int InputI(int, int);
      simplexC.c   122    
      simplexC.c   123    float InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=532
                                                           ; used runtime library name:
                                                           ; __dtos
    00000000 4F22                   STS.L       PR,@-R15
    00000002 908F                   MOV.W       L1495,R0   ; H'FDFC
      simplexC.c   124    {
      simplexC.c   125        char *string[128], *stopstring;
      simplexC.c   126        string_input(x, y, string);
    00000004 D349                   MOV.L       L1495+8,R3 ; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c   127        return strtod(string, &stopstring);
    0000000E 7FF8                   ADD         #-8,R15
    00000010 D247                   MOV.L       L1495+12,R2; _strtod
    00000012 65F3                   MOV         R15,R5
    00000014 7508                   ADD         #8,R5
    00000016 64F3                   MOV         R15,R4
    00000018 740C                   ADD         #12,R4
    0000001A 420B                   JSR         @R2
    0000001C 2FF6                   MOV.L       R15,@-R15
    0000001E D345                   MOV.L       L1495+16,R3; __dtos
    00000020 430B                   JSR         @R3
    00000022 7F04                   ADD         #4,R15
      simplexC.c   128    }
    00000024 917F                   MOV.W       L1495+2,R1 ; H'0204
    00000026 3F1C                   ADD         R1,R15
    00000028 4F26                   LDS.L       @R15+,PR
    0000002A 000B                   RTS
    0000002C 0009                   NOP
      simplexC.c   129    
      simplexC.c   130    int InputI(int x, int y)
    0000002E              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 907A                   MOV.W       L1495+4,R0 ; H'FE00
    00000032 3F0C                   ADD         R0,R15
      simplexC.c   131    {
      simplexC.c   132        char *string[128], *stopstring;
      simplexC.c   133        string_input(x, y, string);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000034 D33D                   MOV.L       L1495+8,R3 ; _string_input
    00000036 430B                   JSR         @R3
    00000038 66F3                   MOV         R15,R6
      simplexC.c   134        return atoi(&string);
    0000003A D23F                   MOV.L       L1495+20,R2; _atoi
    0000003C 420B                   JSR         @R2
    0000003E 64F3                   MOV         R15,R4
      simplexC.c   135    }
    00000040 9173                   MOV.W       L1495+6,R1 ; H'0200
    00000042 3F1C                   ADD         R1,R15
    00000044 4F26                   LDS.L       @R15+,PR
    00000046 000B                   RTS
    00000048 0009                   NOP
      simplexC.c   136    
      simplexC.c   137    int freeMemoryStatement(struct problemStatement *pS)
    0000004A              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    0000004A 2FE6                   MOV.L       R14,@-R15
    0000004C 2FD6                   MOV.L       R13,@-R15
    0000004E 6E43                   MOV         R4,R14
    00000050 2FC6                   MOV.L       R12,@-R15
    00000052 4F22                   STS.L       PR,@-R15
      simplexC.c   138    {
      simplexC.c   139        int i;
      simplexC.c   140        for(i=0;i<pS->nConstraints;i++)
    00000054 DD39                   MOV.L       L1495+24,R13; _free
    00000056 A006                   BRA         L1172
    00000058 EC00                   MOV         #0,R12
    0000005A              L1173:                            
      simplexC.c   141        {
      simplexC.c   142            free(pS->constraints[i]);
    0000005A 64C3                   MOV         R12,R4
    0000005C 50E4                   MOV.L       @(16,R14),R0
    0000005E 4408                   SHLL2       R4
    00000060 4D0B                   JSR         @R13
    00000062 044E                   MOV.L       @(R0,R4),R4
    00000064 7C01                   ADD         #1,R12
    00000066              L1172:                            
    00000066 53EB                   MOV.L       @(44,R14),R3
    00000068 3C33                   CMP/GE      R3,R12
    0000006A 8BF6                   BF          L1173
      simplexC.c   143        }
      simplexC.c   144        free(pS->constraints);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   145        free(pS->rightValues);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   146        free(pS->inequalitySigns);
    00000074 4D0B                   JSR         @R13
    00000076 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   147        free(pS->idIntegerVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   148        free(pS->idSlopeVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   149        free(pS->id2fasesVariables);
    00000080 4D0B                   JSR         @R13
    00000082 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   150        free(pS->funcObjtValues);
    00000084 E048                   MOV         #72,R0
    00000086 4D0B                   JSR         @R13
    00000088 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   151        if(pS->modelType==TYPE_SOLVE)
    0000008A 50E1                   MOV.L       @(4,R14),R0
    0000008C 8802                   CMP/EQ      #2,R0
    0000008E 8B04                   BF          L1174
      simplexC.c   152        {
      simplexC.c   153            free(pS->idConstraintTo2fasesVar);
    00000090 E040                   MOV         #64,R0
    00000092 4D0B                   JSR         @R13
    00000094 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   154            free(pS->idConstraintToSlopeVar);
    00000096 4D0B                   JSR         @R13
    00000098 54EF                   MOV.L       @(60,R14),R4
    0000009A              L1174:                            
      simplexC.c   155        }
      simplexC.c   156        return 0;
    0000009A E000                   MOV         #0,R0
      simplexC.c   157    }
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6CF6                   MOV.L       @R15+,R12
    000000A0 6DF6                   MOV.L       @R15+,R13
    000000A2 000B                   RTS
    000000A4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   158    
      simplexC.c   159    int freeMemoryIteration(struct iteration *it)
    000000A6              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=12
    000000A6 2FE6                   MOV.L       R14,@-R15
    000000A8 2FD6                   MOV.L       R13,@-R15
    000000AA 6E43                   MOV         R4,R14
    000000AC 4F22                   STS.L       PR,@-R15
      simplexC.c   160    {
      simplexC.c   161        //TODO
      simplexC.c   162        free(it->idBasicVariables);
    000000AE DD23                   MOV.L       L1495+24,R13; _free
    000000B0 4D0B                   JSR         @R13
    000000B2 54E2                   MOV.L       @(8,R14),R4
      simplexC.c   163        free(it->idByRowOfBasicVarsInBInv);
    000000B4 4D0B                   JSR         @R13
    000000B6 54E3                   MOV.L       @(12,R14),R4
      simplexC.c   164        free(it->xb);
    000000B8 4D0B                   JSR         @R13
    000000BA 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   165        free(it->ctBinv);
    000000BC 4D0B                   JSR         @R13
    000000BE 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   166        free(it->zj);
    000000C0 4D0B                   JSR         @R13
    000000C2 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   167        free(it->cjMinusZj);
    000000C4 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C6 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   168        free(it->yj);
    000000C8 4D0B                   JSR         @R13
    000000CA 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   169        free(it->xbDivYj);
    000000CC E040                   MOV         #64,R0
    000000CE 4D0B                   JSR         @R13
    000000D0 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   170        return 0;
    000000D2 E000                   MOV         #0,R0
      simplexC.c   171    }
    000000D4 4F26                   LDS.L       @R15+,PR
    000000D6 6DF6                   MOV.L       @R15+,R13
    000000D8 000B                   RTS
    000000DA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   172    int freeMemoryNode(struct node *n)
    000000DC              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000DC 2FE6                   MOV.L       R14,@-R15
    000000DE 2FD6                   MOV.L       R13,@-R15
    000000E0 4F22                   STS.L       PR,@-R15
    000000E2 6D43                   MOV         R4,R13
      simplexC.c   173    {
      simplexC.c   174        int i;
      simplexC.c   175        for(i=0; i<n->nIterations;i++)
    000000E4 A006                   BRA         L1177
    000000E6 EE00                   MOV         #0,R14
    000000E8              L1178:                            
      simplexC.c   176        {
      simplexC.c   177            freeMemoryIteration(n->its[i]);
    000000E8 50D2                   MOV.L       @(8,R13),R0
    000000EA 64E3                   MOV         R14,R4
    000000EC 4408                   SHLL2       R4
    000000EE BFDA                   BSR         _freeMemoryIteration
    000000F0 044E                   MOV.L       @(R0,R4),R4
    000000F2 7E01                   ADD         #1,R14
    000000F4              L1177:                            
    000000F4 52D1                   MOV.L       @(4,R13),R2
    000000F6 3E23                   CMP/GE      R2,R14
    000000F8 8BF6                   BF          L1178
      simplexC.c   178        }
      simplexC.c   179        free(n->its);
    000000FA D210                   MOV.L       L1495+24,R2; _free
    000000FC 420B                   JSR         @R2
    000000FE 54D2                   MOV.L       @(8,R13),R4
      simplexC.c   180        return 0;
      simplexC.c   181    }
    00000100 4F26                   LDS.L       @R15+,PR
    00000102 E000                   MOV         #0,R0
    00000104 6DF6                   MOV.L       @R15+,R13
    00000106 000B                   RTS
    00000108 6EF6                   MOV.L       @R15+,R14
      simplexC.c   182    
      simplexC.c   183    int freeMemoryExecution()
    0000010A              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    0000010A 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010C 2FD6                   MOV.L       R13,@-R15
    0000010E 4F22                   STS.L       PR,@-R15
      simplexC.c   184    {
      simplexC.c   185        int i;
      simplexC.c   186        if(ex.mode == MODE_FULL_EXECUTION)
    00000110 DE0B                   MOV.L       L1495+28,R14; _ex
    00000112 63E2                   MOV.L       @R14,R3
    00000114 2338                   TST         R3,R3
    00000116 8B03                   BF          L1180
      simplexC.c   187        {
      simplexC.c   188            freeMemoryStatement(ex.initialProblemStatement);
    00000118 BF97                   BSR         _freeMemoryStatement
    0000011A 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   189            freeMemoryStatement(ex.canonicalStatement);
    0000011C BF95                   BSR         _freeMemoryStatement
    0000011E 54E2                   MOV.L       @(8,R14),R4
    00000120              L1180:                            
      simplexC.c   190        }
      simplexC.c   191        for(i=0;i<ex.nVariables;i++)
    00000120 A011                   BRA         L1181
    00000122 E400                   MOV         #0,R4
    00000124              L1495:                            
    00000124 FDFC                   .DATA.W     H'FDFC
    00000126 0204                   .DATA.W     H'0204
    00000128 FE00                   .DATA.W     H'FE00
    0000012A 0200                   .DATA.W     H'0200
    0000012C <00000000>             .DATA.L     _string_input
    00000130 <00000000>             .DATA.L     _strtod
    00000134 <00000000>             .DATA.L     __dtos
    00000138 <00000000>             .DATA.L     _atoi
    0000013C <00000000>             .DATA.L     _free
    00000140 <00000000>             .DATA.L     _ex
    00000144              L1182:                            
    00000144 7401                   ADD         #1,R4
    00000146              L1181:                            
    00000146 52EB                   MOV.L       @(44,R14),R2
    00000148 3423                   CMP/GE      R2,R4
    0000014A 8BFB                   BF          L1182
      simplexC.c   192        {
      simplexC.c   193            // free(ex.ajVector[i]);
      simplexC.c   194        }
      simplexC.c   195        // free(ex.ajVector);
      simplexC.c   196        free(ex.bVectorValues);
    0000014C DD8E                   MOV.L       L1496,R13  ; _free
    0000014E 4D0B                   JSR         @R13
    00000150 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   197        free(ex.inputCvectorValues);
    00000152 4D0B                   JSR         @R13
    00000154 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   198        free(ex.fases2CvectorValues);
    00000156 4D0B                   JSR         @R13
    00000158 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   199        return 0;
    0000015A E000                   MOV         #0,R0
      simplexC.c   200    }
    0000015C 4F26                   LDS.L       @R15+,PR
    0000015E 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000160 000B                   RTS
    00000162 6EF6                   MOV.L       @R15+,R14
      simplexC.c   201    
      simplexC.c   202    float* calculateVectorMatrixrMul(int size, float **M, float *V)
    00000164              _calculateVectorMatrixrMul:      ; function: calculateVectorMatrixrMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    00000164 2FE6                   MOV.L       R14,@-R15
    00000166 2FD6                   MOV.L       R13,@-R15
    00000168 2FC6                   MOV.L       R12,@-R15
    0000016A 6D43                   MOV         R4,R13
      simplexC.c   203    {
      simplexC.c   204        float *res;
      simplexC.c   205        int i,j;
      simplexC.c   206        res = calloc(size,sizeof(float));
    0000016C D387                   MOV.L       L1496+4,R3 ; _calloc
    0000016E 2FB6                   MOV.L       R11,@-R15
    00000170 2FA6                   MOV.L       R10,@-R15
    00000172 6B53                   MOV         R5,R11
    00000174 4F22                   STS.L       PR,@-R15
    00000176 6A63                   MOV         R6,R10
    00000178 430B                   JSR         @R3
    0000017A E504                   MOV         #4,R5
    0000017C 6C03                   MOV         R0,R12
      simplexC.c   207        for(i=0;i<size;i++)
    0000017E E500                   MOV         #0,R5
    00000180 A018                   BRA         L1184
    00000182 6753                   MOV         R5,R7
    00000184              L1185:                            
      simplexC.c   208        {
      simplexC.c   209            for(j=0;j<size;j++)
    00000184 6653                   MOV         R5,R6
    00000186 6453                   MOV         R5,R4
    00000188 6E73                   MOV         R7,R14
    0000018A 4D15                   CMP/PL      R13
    0000018C 8F11                   BF/S        L1186
    0000018E 4E08                   SHLL2       R14
    00000190              L1187:                            
      simplexC.c   210            {
      simplexC.c   211                res[i]+=V[j]*M[j][i];
    00000190 D27F                   MOV.L       L1496+8,R2 ; __muls
    00000192 63E3                   MOV         R14,R3
    00000194 33CC                   ADD         R12,R3
    00000196 6043                   MOV         R4,R0
    00000198 01BE                   MOV.L       @(R0,R11),R1
    0000019A 31EC                   ADD         R14,R1
    0000019C 00AE                   MOV.L       @(R0,R10),R0
    0000019E 420B                   JSR         @R2
    000001A0 6112                   MOV.L       @R1,R1
    000001A2 D27C                   MOV.L       L1496+12,R2; __adds
    000001A4 420B                   JSR         @R2
    000001A6 6132                   MOV.L       @R3,R1
    000001A8 2302                   MOV.L       R0,@R3
    000001AA 7601                   ADD         #1,R6
    000001AC 36D3                   CMP/GE      R13,R6
    000001AE 8FEF                   BF/S        L1187




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B0 7404                   ADD         #4,R4
    000001B2              L1186:                            
    000001B2 7701                   ADD         #1,R7
    000001B4              L1184:                            
    000001B4 37D3                   CMP/GE      R13,R7
    000001B6 8BE5                   BF          L1185
      simplexC.c   212            }
      simplexC.c   213        }
      simplexC.c   214        return res;
      simplexC.c   215    }
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 60C3                   MOV         R12,R0
    000001BC 6AF6                   MOV.L       @R15+,R10
    000001BE 6BF6                   MOV.L       @R15+,R11
    000001C0 6CF6                   MOV.L       @R15+,R12
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   216    
      simplexC.c   217    float* calculateMatrixVectorMul(int size, float **M, float *V)
    000001C8              _calculateMatrixVectorMul:       ; function: calculateMatrixVectorMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 6D43                   MOV         R4,R13
      simplexC.c   218    {
      simplexC.c   219        float *res;
      simplexC.c   220        int i,j;
      simplexC.c   221        res = calloc(size,sizeof(float*));
    000001D0 D36E                   MOV.L       L1496+4,R3 ; _calloc
    000001D2 2FB6                   MOV.L       R11,@-R15
    000001D4 2FA6                   MOV.L       R10,@-R15
    000001D6 6B53                   MOV         R5,R11
    000001D8 4F22                   STS.L       PR,@-R15
    000001DA 6A63                   MOV         R6,R10
    000001DC 430B                   JSR         @R3
    000001DE E504                   MOV         #4,R5
    000001E0 6C03                   MOV         R0,R12
      simplexC.c   222        for(i=0;i<size;i++)
    000001E2 E500                   MOV         #0,R5
    000001E4 A019                   BRA         L1189
    000001E6 6753                   MOV         R5,R7
    000001E8              L1190:                            
      simplexC.c   223        {
      simplexC.c   224            for(j=0;j<size;j++)
    000001E8 6653                   MOV         R5,R6
    000001EA 6453                   MOV         R5,R4
    000001EC 6E73                   MOV         R7,R14
    000001EE 4D15                   CMP/PL      R13
    000001F0 8F12                   BF/S        L1191
    000001F2 4E08                   SHLL2       R14
    000001F4              L1192:                            
      simplexC.c   225            {
      simplexC.c   226                res[i]+=M[i][j]*V[j];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F4 D266                   MOV.L       L1496+8,R2 ; __muls
    000001F6 63E3                   MOV         R14,R3
    000001F8 33CC                   ADD         R12,R3
    000001FA 60E3                   MOV         R14,R0
    000001FC 01BE                   MOV.L       @(R0,R11),R1
    000001FE 60A3                   MOV         R10,R0
    00000200 004E                   MOV.L       @(R0,R4),R0
    00000202 314C                   ADD         R4,R1
    00000204 420B                   JSR         @R2
    00000206 6112                   MOV.L       @R1,R1
    00000208 D262                   MOV.L       L1496+12,R2; __adds
    0000020A 420B                   JSR         @R2
    0000020C 6132                   MOV.L       @R3,R1
    0000020E 7601                   ADD         #1,R6
    00000210 2302                   MOV.L       R0,@R3
    00000212 36D3                   CMP/GE      R13,R6
    00000214 8FEE                   BF/S        L1192
    00000216 7404                   ADD         #4,R4
    00000218              L1191:                            
    00000218 7701                   ADD         #1,R7
    0000021A              L1189:                            
    0000021A 37D3                   CMP/GE      R13,R7
    0000021C 8BE4                   BF          L1190
      simplexC.c   227            }
      simplexC.c   228        }
      simplexC.c   229        return res;
    0000021E 60C3                   MOV         R12,R0
      simplexC.c   230    }
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 6AF6                   MOV.L       @R15+,R10
    00000224 6BF6                   MOV.L       @R15+,R11
    00000226 6CF6                   MOV.L       @R15+,R12
    00000228 6DF6                   MOV.L       @R15+,R13
    0000022A 000B                   RTS
    0000022C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   231    
      simplexC.c   232    float calculateVectorDotProduct(int size, float* A, float *B)
    0000022E              _calculateVectorDotProduct:      ; function: calculateVectorDotProduct
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __adds, __muls
      simplexC.c   233    {
      simplexC.c   234        float res;
      simplexC.c   235        int i;
      simplexC.c   236        res=0;
      simplexC.c   237        for(i=0;i<size;i++)
    0000022E 4415                   CMP/PL      R4
    00000230 2FE6                   MOV.L       R14,@-R15
    00000232 2FD6                   MOV.L       R13,@-R15
    00000234 4F22                   STS.L       PR,@-R15
    00000236 ED00                   MOV         #0,R13
    00000238 6ED3                   MOV         R13,R14
    0000023A 8F0D                   BF/S        L1194
    0000023C 67D3                   MOV         R13,R7
    0000023E              L1195:                            
      simplexC.c   238        {
      simplexC.c   239            res+=A[i]*B[i];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000023E 6073                   MOV         R7,R0
    00000240 D353                   MOV.L       L1496+8,R3 ; __muls
    00000242 015E                   MOV.L       @(R0,R5),R1
    00000244 430B                   JSR         @R3
    00000246 006E                   MOV.L       @(R0,R6),R0
    00000248 D352                   MOV.L       L1496+12,R3; __adds
    0000024A 430B                   JSR         @R3
    0000024C 61D3                   MOV         R13,R1
    0000024E 6D03                   MOV         R0,R13
    00000250 7E01                   ADD         #1,R14
    00000252 3E43                   CMP/GE      R4,R14
    00000254 8FF3                   BF/S        L1195
    00000256 7704                   ADD         #4,R7
    00000258              L1194:                            
      simplexC.c   240        }
      simplexC.c   241        return res;
      simplexC.c   242    }
    00000258 4F26                   LDS.L       @R15+,PR
    0000025A 60D3                   MOV         R13,R0
    0000025C 6DF6                   MOV.L       @R15+,R13
    0000025E 000B                   RTS
    00000260 6EF6                   MOV.L       @R15+,R14
      simplexC.c   243    
      simplexC.c   244    float* getCurrentCvectorValues(struct iteration *it)
    00000262              _getCurrentCvectorValues:        ; function: getCurrentCvectorValues
                                                           ; frame size=8
      simplexC.c   245    {
      simplexC.c   246        float* res;
      simplexC.c   247        res = calloc(ex.nVariables,sizeof(float));
    00000262 E504                   MOV         #4,R5
    00000264 D349                   MOV.L       L1496+4,R3 ; _calloc
    00000266 2FE6                   MOV.L       R14,@-R15
    00000268 4F22                   STS.L       PR,@-R15
    0000026A DE4B                   MOV.L       L1496+16,R14; _ex
    0000026C 430B                   JSR         @R3
    0000026E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   248        if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement->is2
                         +fasesActive)
    00000270 62E2                   MOV.L       @R14,R2
    00000272 2228                   TST         R2,R2
    00000274 8B09                   BF          L1197
    00000276 53E2                   MOV.L       @(8,R14),R3
    00000278 5232                   MOV.L       @(8,R3),R2
    0000027A 2228                   TST         R2,R2
    0000027C 8905                   BT          L1197
    0000027E 52E2                   MOV.L       @(8,R14),R2
    00000280 5323                   MOV.L       @(12,R2),R3
    00000282 2338                   TST         R3,R3
    00000284 8901                   BT          L1197
      simplexC.c   249        {
      simplexC.c   250            res= ex.fases2CvectorValues;
    00000286 A001                   BRA         L1198
    00000288 54E8                   MOV.L       @(32,R14),R4
    0000028A              L1197:                            
      simplexC.c   251        }else
      simplexC.c   252        {
      simplexC.c   253            res=ex.inputCvectorValues;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028A 54E7                   MOV.L       @(28,R14),R4
    0000028C              L1198:                            
      simplexC.c   254        }
      simplexC.c   255        return res;
      simplexC.c   256    }
    0000028C 4F26                   LDS.L       @R15+,PR
    0000028E 6043                   MOV         R4,R0
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
      simplexC.c   257    
      simplexC.c   258    float* getCurrentCt(struct iteration *it)
    00000294              _getCurrentCt:                   ; function: getCurrentCt
                                                           ; frame size=8
    00000294 2FD6                   MOV.L       R13,@-R15
      simplexC.c   259    {
      simplexC.c   260        float* res;
      simplexC.c   261        int i;
      simplexC.c   262        res = calloc(it->BinvSize,sizeof(float));
    00000296 E504                   MOV         #4,R5
    00000298 D33C                   MOV.L       L1496+4,R3 ; _calloc
    0000029A 6D43                   MOV         R4,R13
    0000029C 4F22                   STS.L       PR,@-R15
    0000029E 430B                   JSR         @R3
    000002A0 54D9                   MOV.L       @(36,R13),R4
    000002A2 6603                   MOV         R0,R6
      simplexC.c   263        
      simplexC.c   264        for(i=0;i<it->BinvSize;i++)
    000002A4 D43C                   MOV.L       L1496+16,R4; _ex
    000002A6 A020                   BRA         L1200
    000002A8 E500                   MOV         #0,R5
    000002AA              L1201:                            
    000002AA 6153                   MOV         R5,R1
    000002AC 6342                   MOV.L       @R4,R3
    000002AE 2338                   TST         R3,R3
    000002B0 8F12                   BF/S        L1202
    000002B2 4108                   SHLL2       R1
    000002B4 5342                   MOV.L       @(8,R4),R3
    000002B6 5232                   MOV.L       @(8,R3),R2
    000002B8 2228                   TST         R2,R2
    000002BA 890D                   BT          L1202
    000002BC 5242                   MOV.L       @(8,R4),R2
    000002BE 5323                   MOV.L       @(12,R2),R3
    000002C0 2338                   TST         R3,R3
    000002C2 8909                   BT          L1202
      simplexC.c   265        {
      simplexC.c   266            if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement-
                         +>is2fasesActive)
      simplexC.c   267            {
      simplexC.c   268                res[i]= ex.fases2CvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002C4 50D3                   MOV.L       @(12,R13),R0
    000002C6 6313                   MOV         R1,R3
    000002C8 021E                   MOV.L       @(R0,R1),R2
    000002CA 336C                   ADD         R6,R3
    000002CC 5048                   MOV.L       @(32,R4),R0
    000002CE 4208                   SHLL2       R2
    000002D0 022E                   MOV.L       @(R0,R2),R2
    000002D2 2322                   MOV.L       R2,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002D4 A008                   BRA         L1203
    000002D6 0009                   NOP
    000002D8              L1202:                            
      simplexC.c   269            }else
      simplexC.c   270            {
      simplexC.c   271                res[i]=ex.inputCvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002D8 50D3                   MOV.L       @(12,R13),R0
    000002DA 6313                   MOV         R1,R3
    000002DC 021E                   MOV.L       @(R0,R1),R2
    000002DE 336C                   ADD         R6,R3
    000002E0 5047                   MOV.L       @(28,R4),R0
    000002E2 4208                   SHLL2       R2
    000002E4 022E                   MOV.L       @(R0,R2),R2
    000002E6 2322                   MOV.L       R2,@R3
    000002E8              L1203:                            
    000002E8 7501                   ADD         #1,R5
    000002EA              L1200:                            
    000002EA 53D9                   MOV.L       @(36,R13),R3
    000002EC 3533                   CMP/GE      R3,R5
    000002EE 8BDC                   BF          L1201
      simplexC.c   272            }
      simplexC.c   273        }
      simplexC.c   274        
      simplexC.c   275        return res;
      simplexC.c   276    }
    000002F0 4F26                   LDS.L       @R15+,PR
    000002F2 6063                   MOV         R6,R0
    000002F4 000B                   RTS
    000002F6 6DF6                   MOV.L       @R15+,R13
      simplexC.c   277    
      simplexC.c   278    float** calculateNewBinv(struct iteration *oldIt)
    000002F8              _calculateNewBinv:               ; function: calculateNewBinv
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __subs, __muls, __divs
    000002F8 2FE6                   MOV.L       R14,@-R15
      simplexC.c   279    {
      simplexC.c   280        float **res;
      simplexC.c   281        int i,j,indexPivot;
      simplexC.c   282        indexPivot=-1;
      simplexC.c   283        res=calloc(oldIt->BinvSize,sizeof(float*));
    000002FA E504                   MOV         #4,R5
    000002FC 2FD6                   MOV.L       R13,@-R15
    000002FE 6E43                   MOV         R4,R14
    00000300 2FC6                   MOV.L       R12,@-R15
    00000302 2FB6                   MOV.L       R11,@-R15
    00000304 2FA6                   MOV.L       R10,@-R15
    00000306 EBFF                   MOV         #-1,R11
    00000308 2F96                   MOV.L       R9,@-R15
    0000030A 2F86                   MOV.L       R8,@-R15
    0000030C 4F22                   STS.L       PR,@-R15
    0000030E D81F                   MOV.L       L1496+4,R8 ; _calloc
    00000310 480B                   JSR         @R8
    00000312 54E9                   MOV.L       @(36,R14),R4
    00000314 6C03                   MOV         R0,R12
      simplexC.c   284        for(i=0;i<oldIt->BinvSize;i++)
    00000316 EA00                   MOV         #0,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000318 A011                   BRA         L1205
    0000031A 6DA3                   MOV         R10,R13
    0000031C              L1206:                            
      simplexC.c   285        {
      simplexC.c   286            res[i]=calloc(oldIt->BinvSize,sizeof(float));
    0000031C 69D3                   MOV         R13,R9
    0000031E 4908                   SHLL2       R9
    00000320 6393                   MOV         R9,R3
    00000322 33CC                   ADD         R12,R3
    00000324 2F36                   MOV.L       R3,@-R15
    00000326 E504                   MOV         #4,R5
    00000328 480B                   JSR         @R8
    0000032A 54E9                   MOV.L       @(36,R14),R4
    0000032C 63F6                   MOV.L       @R15+,R3
    0000032E 2302                   MOV.L       R0,@R3
      simplexC.c   287            if(oldIt->idVarOut==oldIt->idByRowOfBasicVarsInBInv[i])
    00000330 50E3                   MOV.L       @(12,R14),R0
    00000332 029E                   MOV.L       @(R0,R9),R2
    00000334 53E6                   MOV.L       @(24,R14),R3
    00000336 3320                   CMP/EQ      R2,R3
    00000338 8B00                   BF          L1207
      simplexC.c   288            {
      simplexC.c   289                indexPivot=i;
    0000033A 6BD3                   MOV         R13,R11
    0000033C              L1207:                            
    0000033C 7D01                   ADD         #1,R13
    0000033E              L1205:                            
    0000033E 53E9                   MOV.L       @(36,R14),R3
    00000340 3D33                   CMP/GE      R3,R13
    00000342 8BEB                   BF          L1206
      simplexC.c   290            }
      simplexC.c   291        }
      simplexC.c   292        //Calculo de la fila pivote
      simplexC.c   293        for(i=0;i<oldIt->BinvSize;i++)
    00000344 64A3                   MOV         R10,R4
    00000346 6DB3                   MOV         R11,R13
    00000348 A013                   BRA         L1208
    0000034A 4D08                   SHLL2       R13
    0000034C              L1209:                            
      simplexC.c   294        {
      simplexC.c   295            res[indexPivot][i]=oldIt->Binv[indexPivot][i]/oldIt->yj[oldIt->idVarIn][indexPivot];
    0000034C 52E5                   MOV.L       @(20,R14),R2
    0000034E 60D3                   MOV         R13,R0
    00000350 03CE                   MOV.L       @(R0,R12),R3
    00000352 6543                   MOV         R4,R5
    00000354 50E8                   MOV.L       @(32,R14),R0
    00000356 4208                   SHLL2       R2
    00000358 01DE                   MOV.L       @(R0,R13),R1
    0000035A 4508                   SHLL2       R5
    0000035C 50EF                   MOV.L       @(60,R14),R0
    0000035E 335C                   ADD         R5,R3
    00000360 022E                   MOV.L       @(R0,R2),R2
    00000362 315C                   ADD         R5,R1
    00000364 32DC                   ADD         R13,R2
    00000366 6022                   MOV.L       @R2,R0
    00000368 D20C                   MOV.L       L1496+20,R2; __divs
    0000036A 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000036C 6112                   MOV.L       @R1,R1
    0000036E 7401                   ADD         #1,R4
    00000370 2302                   MOV.L       R0,@R3
    00000372              L1208:                            
    00000372 53E9                   MOV.L       @(36,R14),R3
    00000374 3433                   CMP/GE      R3,R4
    00000376 8BE9                   BF          L1209
      simplexC.c   296        }
      simplexC.c   297    
      simplexC.c   298        //Calculo del resto de filas
      simplexC.c   299        for(i=0;i<oldIt->BinvSize;i++)
    00000378 64A3                   MOV         R10,R4
    0000037A 67D3                   MOV         R13,R7
    0000037C A031                   BRA         L1210
    0000037E 37CC                   ADD         R12,R7
    00000380              L1211:                            
      simplexC.c   300        {
      simplexC.c   301            for(j=0;j<oldIt->BinvSize && i!=indexPivot;j++)
    00000380 65A3                   MOV         R10,R5
    00000382 6D43                   MOV         R4,R13
    00000384 A027                   BRA         L1212
    00000386 4D08                   SHLL2       R13
    00000388              L1496:                            
    00000388 <00000000>             .DATA.L     _free
    0000038C <00000000>             .DATA.L     _calloc
    00000390 <00000000>             .DATA.L     __muls
    00000394 <00000000>             .DATA.L     __adds
    00000398 <00000000>             .DATA.L     _ex
    0000039C <00000000>             .DATA.L     __divs
    000003A0              L1213:                            
      simplexC.c   302            {
      simplexC.c   303                res[i][j]=oldIt->Binv[i][j]-(oldIt->yj[oldIt->idVarIn][i]*res[indexPivot][j]);
    000003A0 D28E                   MOV.L       L1497,R2   ; __muls
    000003A2 60D3                   MOV         R13,R0
    000003A4 03CE                   MOV.L       @(R0,R12),R3
    000003A6 6653                   MOV         R5,R6
    000003A8 4608                   SHLL2       R6
    000003AA 336C                   ADD         R6,R3
    000003AC 2F36                   MOV.L       R3,@-R15
    000003AE 50E8                   MOV.L       @(32,R14),R0
    000003B0 01DE                   MOV.L       @(R0,R13),R1
    000003B2 316C                   ADD         R6,R1
    000003B4 6312                   MOV.L       @R1,R3
    000003B6 51E5                   MOV.L       @(20,R14),R1
    000003B8 50EF                   MOV.L       @(60,R14),R0
    000003BA 4108                   SHLL2       R1
    000003BC 011E                   MOV.L       @(R0,R1),R1
    000003BE 31DC                   ADD         R13,R1
    000003C0 6072                   MOV.L       @R7,R0
    000003C2 006E                   MOV.L       @(R0,R6),R0
    000003C4 420B                   JSR         @R2
    000003C6 6112                   MOV.L       @R1,R1
    000003C8 6133                   MOV         R3,R1
    000003CA D385                   MOV.L       L1497+4,R3 ; __subs
    000003CC 430B                   JSR         @R3
    000003CE 0009                   NOP
    000003D0 63F6                   MOV.L       @R15+,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D2 7501                   ADD         #1,R5
    000003D4 2302                   MOV.L       R0,@R3
    000003D6              L1212:                            
    000003D6 52E9                   MOV.L       @(36,R14),R2
    000003D8 3523                   CMP/GE      R2,R5
    000003DA 8901                   BT          L1214
    000003DC 34B0                   CMP/EQ      R11,R4
    000003DE 8BDF                   BF          L1213
    000003E0              L1214:                            
    000003E0 7401                   ADD         #1,R4
    000003E2              L1210:                            
    000003E2 53E9                   MOV.L       @(36,R14),R3
    000003E4 3433                   CMP/GE      R3,R4
    000003E6 8BCB                   BF          L1211
      simplexC.c   304            }
      simplexC.c   305        }
      simplexC.c   306        return res;
      simplexC.c   307    }
    000003E8 4F26                   LDS.L       @R15+,PR
    000003EA 60C3                   MOV         R12,R0
    000003EC 68F6                   MOV.L       @R15+,R8
    000003EE 69F6                   MOV.L       @R15+,R9
    000003F0 6AF6                   MOV.L       @R15+,R10
    000003F2 6BF6                   MOV.L       @R15+,R11
    000003F4 6CF6                   MOV.L       @R15+,R12
    000003F6 6DF6                   MOV.L       @R15+,R13
    000003F8 000B                   RTS
    000003FA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   308    
      simplexC.c   309    struct iteration* createNewIteration(struct iteration *oldIt)
    000003FC              _createNewIteration:             ; function: createNewIteration
                                                           ; frame size=16
    000003FC 2FE6                   MOV.L       R14,@-R15
    000003FE 6E43                   MOV         R4,R14
      simplexC.c   310    {
      simplexC.c   311        struct iteration *newIt;
      simplexC.c   312        int i;
      simplexC.c   313        newIt = malloc(sizeof(struct iteration));
    00000400 D378                   MOV.L       L1497+8,R3 ; _malloc
    00000402 2FD6                   MOV.L       R13,@-R15
    00000404 2FC6                   MOV.L       R12,@-R15
    00000406 4F22                   STS.L       PR,@-R15
    00000408 430B                   JSR         @R3
    0000040A E448                   MOV         #72,R4
      simplexC.c   314        newIt->numIteration=oldIt->numIteration+1;
    0000040C 62E2                   MOV.L       @R14,R2
    0000040E 6D03                   MOV         R0,R13
    00000410 7201                   ADD         #1,R2
    00000412 2D22                   MOV.L       R2,@R13
      simplexC.c   315        newIt->BinvSize=oldIt->BinvSize;
    00000414 53E9                   MOV.L       @(36,R14),R3
    00000416 1D39                   MOV.L       R3,@(36,R13)
      simplexC.c   316        newIt->Binv=calculateNewBinv(oldIt);
    00000418 BF6E                   BSR         _calculateNewBinv
    0000041A 64E3                   MOV         R14,R4
    0000041C 1D08                   MOV.L       R0,@(32,R13)
      simplexC.c   317        newIt->idBasicVariables=calloc(ex.nVariables,sizeof(int));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000041E E504                   MOV         #4,R5
    00000420 D372                   MOV.L       L1497+16,R3; _calloc
    00000422 DC71                   MOV.L       L1497+12,R12; _ex
    00000424 430B                   JSR         @R3
    00000426 54CB                   MOV.L       @(44,R12),R4
    00000428 1D02                   MOV.L       R0,@(8,R13)
      simplexC.c   318        newIt->idByRowOfBasicVarsInBInv=calloc(newIt->BinvSize,sizeof(int));
    0000042A E504                   MOV         #4,R5
    0000042C D26F                   MOV.L       L1497+16,R2; _calloc
    0000042E 420B                   JSR         @R2
    00000430 54D9                   MOV.L       @(36,R13),R4
      simplexC.c   319        for(i=0;i<ex.nVariables;i++)
    00000432 E600                   MOV         #0,R6
    00000434 1D03                   MOV.L       R0,@(12,R13)
    00000436 A008                   BRA         L1216
    00000438 6463                   MOV         R6,R4
    0000043A              L1217:                            
      simplexC.c   320        {
      simplexC.c   321            newIt->idBasicVariables[i]=oldIt->idBasicVariables[i];
    0000043A 6543                   MOV         R4,R5
    0000043C 53D2                   MOV.L       @(8,R13),R3
    0000043E 4508                   SHLL2       R5
    00000440 50E2                   MOV.L       @(8,R14),R0
    00000442 7401                   ADD         #1,R4
    00000444 025E                   MOV.L       @(R0,R5),R2
    00000446 335C                   ADD         R5,R3
    00000448 2322                   MOV.L       R2,@R3
    0000044A              L1216:                            
    0000044A 52CB                   MOV.L       @(44,R12),R2
    0000044C 3423                   CMP/GE      R2,R4
    0000044E 8BF4                   BF          L1217
      simplexC.c   322        }
      simplexC.c   323        for(i=0;i<oldIt->BinvSize;i++)
    00000450 A011                   BRA         L1218
    00000452 6463                   MOV         R6,R4
    00000454              L1219:                            
    00000454 50E3                   MOV.L       @(12,R14),R0
    00000456 6C43                   MOV         R4,R12
    00000458 52E6                   MOV.L       @(24,R14),R2
    0000045A 4C08                   SHLL2       R12
    0000045C 03CE                   MOV.L       @(R0,R12),R3
    0000045E 3320                   CMP/EQ      R2,R3
    00000460 8D06                   BT/S        L1220
    00000462 7401                   ADD         #1,R4
      simplexC.c   324        {
      simplexC.c   325            if(oldIt->idByRowOfBasicVarsInBInv[i]!=oldIt->idVarOut)
      simplexC.c   326            {
      simplexC.c   327                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idByRowOfBasicVarsInBInv[i];
    00000464 53D3                   MOV.L       @(12,R13),R3
    00000466 33CC                   ADD         R12,R3
    00000468 50E3                   MOV.L       @(12,R14),R0
    0000046A 02CE                   MOV.L       @(R0,R12),R2
    0000046C A003                   BRA         L1221
    0000046E 2322                   MOV.L       R2,@R3
    00000470              L1220:                            
      simplexC.c   328            }else
      simplexC.c   329            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   330                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idVarIn;
    00000470 50D3                   MOV.L       @(12,R13),R0
    00000472 53E5                   MOV.L       @(20,R14),R3
    00000474 0C36                   MOV.L       R3,@(R0,R12)
    00000476              L1221:                            
    00000476              L1218:                            
    00000476 52E9                   MOV.L       @(36,R14),R2
    00000478 3423                   CMP/GE      R2,R4
    0000047A 8BEB                   BF          L1219
      simplexC.c   331            }
      simplexC.c   332        }
      simplexC.c   333        newIt->idBasicVariables[oldIt->idVarOut]=0;
    0000047C 51E6                   MOV.L       @(24,R14),R1
      simplexC.c   334        newIt->idBasicVariables[oldIt->idVarIn]=1;
    0000047E E201                   MOV         #1,R2
    00000480 50D2                   MOV.L       @(8,R13),R0
    00000482 4108                   SHLL2       R1
    00000484 0166                   MOV.L       R6,@(R0,R1)
    00000486 53E5                   MOV.L       @(20,R14),R3
    00000488 50D2                   MOV.L       @(8,R13),R0
    0000048A 4308                   SHLL2       R3
    0000048C 0326                   MOV.L       R2,@(R0,R3)
      simplexC.c   335        return newIt;
    0000048E 60D3                   MOV         R13,R0
      simplexC.c   336    }
    00000490 4F26                   LDS.L       @R15+,PR
    00000492 6CF6                   MOV.L       @R15+,R12
    00000494 6DF6                   MOV.L       @R15+,R13
    00000496 000B                   RTS
    00000498 6EF6                   MOV.L       @R15+,R14
      simplexC.c   337    
      simplexC.c   338    int calculateIteration(struct iteration *it)
    0000049A              _calculateIteration:             ; function: calculateIteration
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __subs, __divs, __eqs, __gts, __lts
    0000049A 2FE6                   MOV.L       R14,@-R15
    0000049C 2FD6                   MOV.L       R13,@-R15
    0000049E 6E43                   MOV         R4,R14
    000004A0 2FC6                   MOV.L       R12,@-R15
    000004A2 2FB6                   MOV.L       R11,@-R15
    000004A4 2FA6                   MOV.L       R10,@-R15
    000004A6 EA00                   MOV         #0,R10
    000004A8 DD4F                   MOV.L       L1497+12,R13; _ex
    000004AA 2F96                   MOV.L       R9,@-R15
    000004AC 2F86                   MOV.L       R8,@-R15
    000004AE 4F22                   STS.L       PR,@-R15
    000004B0 D94E                   MOV.L       L1497+16,R9; _calloc
    000004B2 7FFC                   ADD         #-4,R15
      simplexC.c   339    {
      simplexC.c   340        int i;
      simplexC.c   341        float * cVectorValues,*ct;
      simplexC.c   342        float bestEntryVarValue,bestExitVarValue;
      simplexC.c   343        it->is2FasesActive=ex.canonicalStatement->is2fasesActive;
    000004B4 53D2                   MOV.L       @(8,R13),R3
    000004B6 5233                   MOV.L       @(12,R3),R2
    000004B8 1E21                   MOV.L       R2,@(4,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   344        cVectorValues=getCurrentCvectorValues(it);
    000004BA BED2                   BSR         _getCurrentCvectorValues
    000004BC 64E3                   MOV         R14,R4
    000004BE 2F02                   MOV.L       R0,@R15
      simplexC.c   345        ct=getCurrentCt(it);
    000004C0 BEE8                   BSR         _getCurrentCt
    000004C2 64E3                   MOV         R14,R4
      simplexC.c   346        it->ct=ct;
    000004C4 1E0A                   MOV.L       R0,@(40,R14)
    000004C6 6C03                   MOV         R0,R12
      simplexC.c   347        it->xb=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.bVectorValues);
    000004C8 56D6                   MOV.L       @(24,R13),R6
    000004CA 55E8                   MOV.L       @(32,R14),R5
    000004CC BE7C                   BSR         _calculateMatrixVectorMul
    000004CE 54E9                   MOV.L       @(36,R14),R4
    000004D0 1E0B                   MOV.L       R0,@(44,R14)
      simplexC.c   348        it->ctBinv=calculateVectorMatrixrMul(it->BinvSize,it->Binv,ct);
    000004D2 66C3                   MOV         R12,R6
    000004D4 55E8                   MOV.L       @(32,R14),R5
    000004D6 BE45                   BSR         _calculateVectorMatrixrMul
    000004D8 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   349        it->zSol=calculateVectorDotProduct(it->BinvSize,ct,it->xb);
    000004DA 65C3                   MOV         R12,R5
    000004DC 1E0C                   MOV.L       R0,@(48,R14)
    000004DE 56EB                   MOV.L       @(44,R14),R6
    000004E0 BEA5                   BSR         _calculateVectorDotProduct
    000004E2 54E9                   MOV.L       @(36,R14),R4
    000004E4 E144                   MOV         #68,R1
    000004E6 31EC                   ADD         R14,R1
    000004E8 2102                   MOV.L       R0,@R1
      simplexC.c   350        //Calculate values for zj and cj-zj and idVarIn
      simplexC.c   351        it->zj=calloc(ex.nVariables,sizeof(float));
    000004EA E504                   MOV         #4,R5
    000004EC 490B                   JSR         @R9
    000004EE 54DB                   MOV.L       @(44,R13),R4
    000004F0 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c   352        it->cjMinusZj=calloc(ex.nVariables,sizeof(float));
    000004F2 E504                   MOV         #4,R5
    000004F4 490B                   JSR         @R9
    000004F6 54DB                   MOV.L       @(44,R13),R4
    000004F8 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   353        it->idVarIn=-1;
    000004FA E3FF                   MOV         #-1,R3
    000004FC 1E35                   MOV.L       R3,@(20,R14)
      simplexC.c   354        if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE)
    000004FE 50DA                   MOV.L       @(40,R13),R0
    00000500 8801                   CMP/EQ      #1,R0
    00000502 8F03                   BF/S        L1223
      simplexC.c   355        {
      simplexC.c   356            bestEntryVarValue=INT_MIN;
      simplexC.c   357        }else
      simplexC.c   358        {
      simplexC.c   359            bestEntryVarValue=INT_MAX;
      simplexC.c   360        }
      simplexC.c   361        
      simplexC.c   362        
      simplexC.c   363        for(i=0;i<ex.nVariables;i++)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000504 6CA3                   MOV         R10,R12
    00000506 D83A                   MOV.L       L1497+20,R8; H'CF000000
    00000508 A001                   BRA         L1224
    0000050A 0009                   NOP
    0000050C              L1223:                            
    0000050C D839                   MOV.L       L1497+24,R8; H'4F000000
    0000050E              L1224:                            
    0000050E A05C                   BRA         L1225
    00000510 0009                   NOP
    00000512              L1226:                            
      simplexC.c   364        {
      simplexC.c   365            if((!it->idBasicVariables[i] && ex.canonicalStatement->is2fasesActive) ||
      simplexC.c   366                (!it->idBasicVariables[i] && !ex.canonicalStatement->is2fasesActive && !ex.canonicalStatement-
                         +>id2fasesVariables[i]) )
    00000512 64C3                   MOV         R12,R4
    00000514 50E2                   MOV.L       @(8,R14),R0
    00000516 4408                   SHLL2       R4
    00000518 034E                   MOV.L       @(R0,R4),R3
    0000051A 2338                   TST         R3,R3
    0000051C 8B54                   BF          L1227
    0000051E D236                   MOV.L       L1497+28,R2; H'00000008+_ex
    00000520 6122                   MOV.L       @R2,R1
    00000522 5313                   MOV.L       @(12,R1),R3
    00000524 2338                   TST         R3,R3
    00000526 8B0E                   BF          L1228
    00000528 50E2                   MOV.L       @(8,R14),R0
    0000052A 034E                   MOV.L       @(R0,R4),R3
    0000052C 2338                   TST         R3,R3
    0000052E 8B4B                   BF          L1227
    00000530 D231                   MOV.L       L1497+28,R2; H'00000008+_ex
    00000532 6122                   MOV.L       @R2,R1
    00000534 5313                   MOV.L       @(12,R1),R3
    00000536 2338                   TST         R3,R3
    00000538 8B46                   BF          L1227
    0000053A D32F                   MOV.L       L1497+28,R3; H'00000008+_ex
    0000053C 6032                   MOV.L       @R3,R0
    0000053E 500E                   MOV.L       @(56,R0),R0
    00000540 014E                   MOV.L       @(R0,R4),R1
    00000542 2118                   TST         R1,R1
    00000544 8B40                   BF          L1227
    00000546              L1228:                            
      simplexC.c   367            {
      simplexC.c   368                it->zj[i]=calculateVectorDotProduct(it->BinvSize,it->ctBinv,ex.ajVector[i]);
    00000546 6BC3                   MOV         R12,R11
    00000548 50ED                   MOV.L       @(52,R14),R0
    0000054A 4B08                   SHLL2       R11
    0000054C 30BC                   ADD         R11,R0
    0000054E 2F06                   MOV.L       R0,@-R15
    00000550 50DE                   MOV.L       @(56,R13),R0
    00000552 06BE                   MOV.L       @(R0,R11),R6
    00000554 55EC                   MOV.L       @(48,R14),R5
    00000556 BE6A                   BSR         _calculateVectorDotProduct
    00000558 54E9                   MOV.L       @(36,R14),R4
    0000055A 62F6                   MOV.L       @R15+,R2
      simplexC.c   369                it->cjMinusZj[i]=cVectorValues[i]-it->zj[i];
    0000055C D320                   MOV.L       L1497+4,R3 ; __subs
    0000055E 2202                   MOV.L       R0,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000560 50EE                   MOV.L       @(56,R14),R0
    00000562 6203                   MOV         R0,R2
    00000564 60F2                   MOV.L       @R15,R0
    00000566 32BC                   ADD         R11,R2
    00000568 01BE                   MOV.L       @(R0,R11),R1
    0000056A 50ED                   MOV.L       @(52,R14),R0
    0000056C 430B                   JSR         @R3
    0000056E 00BE                   MOV.L       @(R0,R11),R0
    00000570 2202                   MOV.L       R0,@R2
      simplexC.c   370    
      simplexC.c   371                if(ex.currentFuncObjectivePurpose==FUNC_MINIMIZE && it->cjMinusZj[i]<0 && it->cjMinusZj[i]<bes
                         +tEntryVarValue )
    00000572 53DA                   MOV.L       @(40,R13),R3
    00000574 2338                   TST         R3,R3
    00000576 8B0D                   BF          L1230
    00000578 50EE                   MOV.L       @(56,R14),R0
    0000057A 01BE                   MOV.L       @(R0,R11),R1
    0000057C D31F                   MOV.L       L1497+32,R3; __lts
    0000057E 430B                   JSR         @R3
    00000580 E000                   MOV         #0,R0
    00000582 8800                   CMP/EQ      #0,R0
    00000584 8906                   BT          L1230
    00000586 50EE                   MOV.L       @(56,R14),R0
    00000588 D31C                   MOV.L       L1497+32,R3; __lts
    0000058A 01BE                   MOV.L       @(R0,R11),R1
    0000058C 430B                   JSR         @R3
    0000058E 6083                   MOV         R8,R0
    00000590 8800                   CMP/EQ      #0,R0
    00000592 8B14                   BF          L1034
    00000594              L1230:                            
      simplexC.c   372                {
      simplexC.c   373                    bestEntryVarValue=it->cjMinusZj[i];
      simplexC.c   374                    it->idVarIn=i;
      simplexC.c   375                }else if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE && it->cjMinusZj[i]>0 && it->cjMinusZj[
                         +i]>bestEntryVarValue )
    00000594 50DA                   MOV.L       @(40,R13),R0
    00000596 8801                   CMP/EQ      #1,R0
    00000598 8B16                   BF          L1227
    0000059A 61C3                   MOV         R12,R1
    0000059C 50EE                   MOV.L       @(56,R14),R0
    0000059E 4108                   SHLL2       R1
    000005A0 D317                   MOV.L       L1497+36,R3; __gts
    000005A2 011E                   MOV.L       @(R0,R1),R1
    000005A4 430B                   JSR         @R3
    000005A6 E000                   MOV         #0,R0
    000005A8 8800                   CMP/EQ      #0,R0
    000005AA 890D                   BT          L1227
    000005AC 50EE                   MOV.L       @(56,R14),R0
    000005AE 61C3                   MOV         R12,R1
    000005B0 D313                   MOV.L       L1497+36,R3; __gts
    000005B2 4108                   SHLL2       R1
    000005B4 011E                   MOV.L       @(R0,R1),R1
    000005B6 430B                   JSR         @R3
    000005B8 6083                   MOV         R8,R0
    000005BA 8800                   CMP/EQ      #0,R0
    000005BC 8904                   BT          L1227
    000005BE              L1034:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   376                {
      simplexC.c   377                    bestEntryVarValue=it->cjMinusZj[i];
    000005BE 68C3                   MOV         R12,R8
    000005C0 50EE                   MOV.L       @(56,R14),R0
    000005C2 4808                   SHLL2       R8
    000005C4 088E                   MOV.L       @(R0,R8),R8
      simplexC.c   378                    it->idVarIn=i;
    000005C6 1EC5                   MOV.L       R12,@(20,R14)
    000005C8              L1227:                            
    000005C8 7C01                   ADD         #1,R12
    000005CA              L1225:                            
    000005CA 5BDB                   MOV.L       @(44,R13),R11
    000005CC 3CB3                   CMP/GE      R11,R12
    000005CE 8BA0                   BF          L1226
      simplexC.c   379                }
      simplexC.c   380            }
      simplexC.c   381        }
      simplexC.c   382        it->yj=calloc(ex.nVariables,sizeof(float*));
    000005D0 E504                   MOV         #4,R5
    000005D2 490B                   JSR         @R9
    000005D4 64B3                   MOV         R11,R4
    000005D6 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c   383        for(i=0;i<ex.nVariables;i++)
    000005D8 A021                   BRA         L1233
    000005DA 6CA3                   MOV         R10,R12
    000005DC              L1497:                            
    000005DC <00000000>             .DATA.L     __muls
    000005E0 <00000000>             .DATA.L     __subs
    000005E4 <00000000>             .DATA.L     _malloc
    000005E8 <00000000>             .DATA.L     _ex
    000005EC <00000000>             .DATA.L     _calloc
    000005F0 CF000000               .DATA.L     H'CF000000
    000005F4 4F000000               .DATA.L     H'4F000000
    000005F8 <00000008>             .DATA.L     H'00000008+_ex
    000005FC <00000000>             .DATA.L     __lts
    00000600 <00000000>             .DATA.L     __gts
    00000604              L1234:                            
      simplexC.c   384        {
      simplexC.c   385            it->yj[i]=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.ajVector[i]);
    00000604 50EF                   MOV.L       @(60,R14),R0
    00000606 6BC3                   MOV         R12,R11
    00000608 4B08                   SHLL2       R11
    0000060A 30BC                   ADD         R11,R0
    0000060C 2F06                   MOV.L       R0,@-R15
    0000060E 50DE                   MOV.L       @(56,R13),R0
    00000610 55E8                   MOV.L       @(32,R14),R5
    00000612 06BE                   MOV.L       @(R0,R11),R6
    00000614 BDD8                   BSR         _calculateMatrixVectorMul
    00000616 54E9                   MOV.L       @(36,R14),R4
    00000618 62F6                   MOV.L       @R15+,R2
    0000061A 7C01                   ADD         #1,R12
    0000061C 2202                   MOV.L       R0,@R2
    0000061E              L1233:                            
    0000061E 53DB                   MOV.L       @(44,R13),R3
    00000620 3C33                   CMP/GE      R3,R12
    00000622 8BEF                   BF          L1234
      simplexC.c   386        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   387        if(it->idVarIn!=-1)//Check optimum criteria
    00000624 50E5                   MOV.L       @(20,R14),R0
    00000626 88FF                   CMP/EQ      #-1,R0
    00000628 895C                   BT          L1033
      simplexC.c   388        {
      simplexC.c   389            it->xbDivYj= calloc(it->BinvSize,sizeof(float));
    0000062A E504                   MOV         #4,R5
    0000062C 490B                   JSR         @R9
    0000062E 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   390            bestExitVarValue=INT_MAX;
    00000630 D67A                   MOV.L       L1498,R6   ; H'4F000000
      simplexC.c   391            it->indexVarOutInBInvMatrix=-1;
    00000632 E3FF                   MOV         #-1,R3
    00000634 E140                   MOV         #64,R1
    00000636 31EC                   ADD         R14,R1
    00000638 2102                   MOV.L       R0,@R1
      simplexC.c   392            it->isUnbounded=1;
    0000063A E201                   MOV         #1,R2
    0000063C 1E37                   MOV.L       R3,@(28,R14)
    0000063E 1E24                   MOV.L       R2,@(16,R14)
      simplexC.c   393            for(i=0;i<it->BinvSize;i++)
    00000640 A044                   BRA         L1236
    00000642 64A3                   MOV         R10,R4
    00000644              L1237:                            
      simplexC.c   394            {
      simplexC.c   395                if(it->yj[it->idVarIn][i]!=0)
    00000644 50E5                   MOV.L       @(20,R14),R0
    00000646 6143                   MOV         R4,R1
    00000648 53EF                   MOV.L       @(60,R14),R3
    0000064A 4008                   SHLL2       R0
    0000064C 003E                   MOV.L       @(R0,R3),R0
    0000064E 4108                   SHLL2       R1
    00000650 D373                   MOV.L       L1498+4,R3 ; __eqs
    00000652 011E                   MOV.L       @(R0,R1),R1
    00000654 430B                   JSR         @R3
    00000656 E000                   MOV         #0,R0
    00000658 8800                   CMP/EQ      #0,R0
    0000065A 8B30                   BF          L1035
      simplexC.c   396                {
      simplexC.c   397                    it->xbDivYj[i]=it->xb[i]/it->yj[it->idVarIn][i];
    0000065C 53EF                   MOV.L       @(60,R14),R3
    0000065E 6543                   MOV         R4,R5
    00000660 4508                   SHLL2       R5
    00000662 E040                   MOV         #64,R0
    00000664 00EE                   MOV.L       @(R0,R14),R0
    00000666 6203                   MOV         R0,R2
    00000668 50EB                   MOV.L       @(44,R14),R0
    0000066A 325C                   ADD         R5,R2
    0000066C 015E                   MOV.L       @(R0,R5),R1
    0000066E 50E5                   MOV.L       @(20,R14),R0
    00000670 4008                   SHLL2       R0
    00000672 003E                   MOV.L       @(R0,R3),R0
    00000674 D36B                   MOV.L       L1498+8,R3 ; __divs
    00000676 430B                   JSR         @R3
    00000678 005E                   MOV.L       @(R0,R5),R0
    0000067A 2202                   MOV.L       R0,@R2
      simplexC.c   398                    if(it->xbDivYj[i]>0 && it->xbDivYj[i]<bestExitVarValue)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000067C D36A                   MOV.L       L1498+12,R3; __gts
    0000067E E040                   MOV         #64,R0
    00000680 00EE                   MOV.L       @(R0,R14),R0
    00000682 075E                   MOV.L       @(R0,R5),R7
    00000684 6173                   MOV         R7,R1
    00000686 430B                   JSR         @R3
    00000688 E000                   MOV         #0,R0
    0000068A 8800                   CMP/EQ      #0,R0
    0000068C 890D                   BT          L1239
    0000068E 6173                   MOV         R7,R1
    00000690 D266                   MOV.L       L1498+16,R2; __lts
    00000692 420B                   JSR         @R2
    00000694 6063                   MOV         R6,R0
    00000696 8800                   CMP/EQ      #0,R0
    00000698 8907                   BT          L1239
      simplexC.c   399                    {
      simplexC.c   400                        it->indexVarOutInBInvMatrix=i;
      simplexC.c   401                        bestExitVarValue=it->xbDivYj[i];
    0000069A 6643                   MOV         R4,R6
    0000069C 1E47                   MOV.L       R4,@(28,R14)
    0000069E E040                   MOV         #64,R0
    000006A0 00EE                   MOV.L       @(R0,R14),R0
    000006A2 4608                   SHLL2       R6
    000006A4 066E                   MOV.L       @(R0,R6),R6
      simplexC.c   402                        it->isUnbounded=0;
    000006A6 A010                   BRA         L1242
    000006A8 1EA4                   MOV.L       R10,@(16,R14)
    000006AA              L1239:                            
      simplexC.c   403                    }else if(it->xbDivYj[i]<0)
    000006AA 6143                   MOV         R4,R1
    000006AC D35F                   MOV.L       L1498+16,R3; __lts
    000006AE E040                   MOV         #64,R0
    000006B0 00EE                   MOV.L       @(R0,R14),R0
    000006B2 4108                   SHLL2       R1
    000006B4 011E                   MOV.L       @(R0,R1),R1
    000006B6 430B                   JSR         @R3
    000006B8 E000                   MOV         #0,R0
    000006BA 8800                   CMP/EQ      #0,R0
    000006BC 8905                   BT          L1242
    000006BE              L1035:
      simplexC.c   404                    {
      simplexC.c   405                        it->xbDivYj[i]=NO_EVAL_VALUE;
      simplexC.c   406                    }
      simplexC.c   407                    
      simplexC.c   408                }else
      simplexC.c   409                {
      simplexC.c   410                    it->xbDivYj[i]=NO_EVAL_VALUE;
    000006BE 6243                   MOV         R4,R2
    000006C0 D356                   MOV.L       L1498,R3   ; H'4F000000
    000006C2 E040                   MOV         #64,R0
    000006C4 00EE                   MOV.L       @(R0,R14),R0
    000006C6 4208                   SHLL2       R2
    000006C8 0236                   MOV.L       R3,@(R0,R2)
    000006CA              L1242:                            
    000006CA 7401                   ADD         #1,R4
    000006CC              L1236:                            
    000006CC 52E9                   MOV.L       @(36,R14),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006CE 3423                   CMP/GE      R2,R4
    000006D0 8BB8                   BF          L1237
      simplexC.c   411                }
      simplexC.c   412                
      simplexC.c   413            }
      simplexC.c   414            if(!it->isUnbounded)
    000006D2 51E4                   MOV.L       @(16,R14),R1
    000006D4 2118                   TST         R1,R1
    000006D6 8B05                   BF          L1033
      simplexC.c   415            {
      simplexC.c   416                it->idVarOut=it->idByRowOfBasicVarsInBInv[it->indexVarOutInBInvMatrix];
    000006D8 53E7                   MOV.L       @(28,R14),R3
    000006DA 4308                   SHLL2       R3
    000006DC 50E3                   MOV.L       @(12,R14),R0
    000006DE 023E                   MOV.L       @(R0,R3),R2
    000006E0 A002                   BRA         L1245
    000006E2 1E26                   MOV.L       R2,@(24,R14)
    000006E4              L1033:
      simplexC.c   417            }else
      simplexC.c   418            {
      simplexC.c   419                it->idVarOut=-1;
      simplexC.c   420            }
      simplexC.c   421        }else
      simplexC.c   422        {
      simplexC.c   423            it->idVarOut=-1;
    000006E4 E1FF                   MOV         #-1,R1
    000006E6 1E16                   MOV.L       R1,@(24,R14)
    000006E8              L1245:                            
      simplexC.c   424        }
      simplexC.c   425        
      simplexC.c   426        
      simplexC.c   427    }
    000006E8 7F04                   ADD         #4,R15
    000006EA 4F26                   LDS.L       @R15+,PR
    000006EC 68F6                   MOV.L       @R15+,R8
    000006EE 69F6                   MOV.L       @R15+,R9
    000006F0 6AF6                   MOV.L       @R15+,R10
    000006F2 6BF6                   MOV.L       @R15+,R11
    000006F4 6CF6                   MOV.L       @R15+,R12
    000006F6 6DF6                   MOV.L       @R15+,R13
    000006F8 000B                   RTS
    000006FA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   428    
      simplexC.c   429    struct iteration* modelToIteration(struct problemStatement *pS)
    000006FC              _modelToIteration:               ; function: modelToIteration
                                                           ; frame size=32
    000006FC 2FE6                   MOV.L       R14,@-R15
    000006FE 2FD6                   MOV.L       R13,@-R15
    00000700 2FC6                   MOV.L       R12,@-R15
    00000702 6D43                   MOV         R4,R13
      simplexC.c   430    {
      simplexC.c   431        struct iteration *it;
      simplexC.c   432        int i;
      simplexC.c   433        it = malloc(sizeof(struct iteration));
    00000704 D34A                   MOV.L       L1498+20,R3; _malloc
    00000706 2FB6                   MOV.L       R11,@-R15
    00000708 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000070A 2F96                   MOV.L       R9,@-R15
    0000070C 2F86                   MOV.L       R8,@-R15
    0000070E 4F22                   STS.L       PR,@-R15
    00000710 430B                   JSR         @R3
    00000712 E448                   MOV         #72,R4
      simplexC.c   434        it->numIteration=0;
      simplexC.c   435        //Matriz B-1
      simplexC.c   436        it->BinvSize=pS->nConstraints;
      simplexC.c   437        it->Binv=calloc(it->BinvSize,sizeof(float));
    00000714 DA47                   MOV.L       L1498+24,R10; _calloc
    00000716 E504                   MOV         #4,R5
    00000718 6E03                   MOV         R0,R14
    0000071A E900                   MOV         #0,R9
    0000071C 2E92                   MOV.L       R9,@R14
    0000071E 52DB                   MOV.L       @(44,R13),R2
    00000720 1E29                   MOV.L       R2,@(36,R14)
    00000722 4A0B                   JSR         @R10
    00000724 6423                   MOV         R2,R4
    00000726 1E08                   MOV.L       R0,@(32,R14)
      simplexC.c   438        for(i=0;i<it->BinvSize;i++)
    00000728 A00E                   BRA         L1246
    0000072A 6C93                   MOV         R9,R12
    0000072C              L1247:                            
      simplexC.c   439        {
      simplexC.c   440            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    0000072C 58E8                   MOV.L       @(32,R14),R8
    0000072E E504                   MOV         #4,R5
    00000730 6BC3                   MOV         R12,R11
    00000732 4B08                   SHLL2       R11
    00000734 38BC                   ADD         R11,R8
    00000736 4A0B                   JSR         @R10
    00000738 54E9                   MOV.L       @(36,R14),R4
    0000073A 7C01                   ADD         #1,R12
    0000073C 2802                   MOV.L       R0,@R8
      simplexC.c   441            it->Binv[i][i]=1;
    0000073E 50E8                   MOV.L       @(32,R14),R0
    00000740 D23D                   MOV.L       L1498+28,R2; H'3F800000
    00000742 03BE                   MOV.L       @(R0,R11),R3
    00000744 33BC                   ADD         R11,R3
    00000746 2322                   MOV.L       R2,@R3
    00000748              L1246:                            
    00000748 53E9                   MOV.L       @(36,R14),R3
    0000074A 3C33                   CMP/GE      R3,R12
    0000074C 8BEE                   BF          L1247
      simplexC.c   442        }
      simplexC.c   443        it->idBasicVariables=calloc(pS->nVariables,sizeof(int));
    0000074E E504                   MOV         #4,R5
    00000750 4A0B                   JSR         @R10
    00000752 54D7                   MOV.L       @(28,R13),R4
    00000754 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c   444        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    00000756 E504                   MOV         #4,R5
    00000758 4A0B                   JSR         @R10
    0000075A 54E9                   MOV.L       @(36,R14),R4
    0000075C 1E03                   MOV.L       R0,@(12,R14)
      simplexC.c   445        for(i=0;i<it->BinvSize;i++)
    0000075E E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000760 A023                   BRA         L1248
    00000762 6593                   MOV         R9,R5
    00000764              L1249:                            
    00000764 6C53                   MOV         R5,R12
    00000766 4C08                   SHLL2       R12
    00000768 E040                   MOV         #64,R0
    0000076A 00DE                   MOV.L       @(R0,R13),R0
    0000076C 03CE                   MOV.L       @(R0,R12),R3
    0000076E 4315                   CMP/PL      R3
    00000770 8B0C                   BF          L1250
      simplexC.c   446        {
      simplexC.c   447            if(pS->idConstraintTo2fasesVar[i]>0)
      simplexC.c   448            {
      simplexC.c   449                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintTo2fasesVar[i];
    00000772 E040                   MOV         #64,R0
    00000774 52E3                   MOV.L       @(12,R14),R2
    00000776 32CC                   ADD         R12,R2
    00000778 00DE                   MOV.L       @(R0,R13),R0
    0000077A 03CE                   MOV.L       @(R0,R12),R3
    0000077C 2232                   MOV.L       R3,@R2
      simplexC.c   450                it->idBasicVariables[pS->idConstraintTo2fasesVar[i]]=1;
    0000077E E040                   MOV         #64,R0
    00000780 00DE                   MOV.L       @(R0,R13),R0
    00000782 03CE                   MOV.L       @(R0,R12),R3
    00000784 50E2                   MOV.L       @(8,R14),R0
    00000786 4308                   SHLL2       R3
    00000788 A00E                   BRA         L1251
    0000078A 0346                   MOV.L       R4,@(R0,R3)
    0000078C              L1250:                            
      simplexC.c   451            }else if(pS->idConstraintToSlopeVar[i]>0)
    0000078C 50DF                   MOV.L       @(60,R13),R0
    0000078E 03CE                   MOV.L       @(R0,R12),R3
    00000790 4315                   CMP/PL      R3
    00000792 8B09                   BF          L1251
      simplexC.c   452            {
      simplexC.c   453                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintToSlopeVar[i];
    00000794 52E3                   MOV.L       @(12,R14),R2
    00000796 32CC                   ADD         R12,R2
    00000798 50DF                   MOV.L       @(60,R13),R0
    0000079A 03CE                   MOV.L       @(R0,R12),R3
    0000079C 2232                   MOV.L       R3,@R2
      simplexC.c   454                it->idBasicVariables[pS->idConstraintToSlopeVar[i]]=1;
    0000079E 50DF                   MOV.L       @(60,R13),R0
    000007A0 03CE                   MOV.L       @(R0,R12),R3
    000007A2 4308                   SHLL2       R3
    000007A4 50E2                   MOV.L       @(8,R14),R0
    000007A6 0346                   MOV.L       R4,@(R0,R3)
    000007A8              L1251:                            
    000007A8 7501                   ADD         #1,R5
    000007AA              L1248:                            
    000007AA 52E9                   MOV.L       @(36,R14),R2
    000007AC 3523                   CMP/GE      R2,R5
    000007AE 8BD9                   BF          L1249
      simplexC.c   455            }
      simplexC.c   456        }
      simplexC.c   457        return it;
      simplexC.c   458    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007B0 4F26                   LDS.L       @R15+,PR
    000007B2 60E3                   MOV         R14,R0
    000007B4 68F6                   MOV.L       @R15+,R8
    000007B6 69F6                   MOV.L       @R15+,R9
    000007B8 6AF6                   MOV.L       @R15+,R10
    000007BA 6BF6                   MOV.L       @R15+,R11
    000007BC 6CF6                   MOV.L       @R15+,R12
    000007BE 6DF6                   MOV.L       @R15+,R13
    000007C0 000B                   RTS
    000007C2 6EF6                   MOV.L       @R15+,R14
      simplexC.c   459    
      simplexC.c   460    int lengthConcatenate(int sprintLength)
    000007C4              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   461    {
      simplexC.c   462        return (sprintLength > 0) ? sprintLength : 0;
    000007C4 4415                   CMP/PL      R4
    000007C6 8B01                   BF          L1254
    000007C8 000B                   RTS
    000007CA 6043                   MOV         R4,R0
    000007CC              L1254:                            
    000007CC E000                   MOV         #0,R0
      simplexC.c   463    }
    000007CE              L1256:                            
    000007CE 000B                   RTS
    000007D0 0009                   NOP
      simplexC.c   464    
      simplexC.c   465    char* getInequalityChar(int inequalitySign)
    000007D2              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0
      simplexC.c   466    {
      simplexC.c   467        char * res;
      simplexC.c   468        switch (inequalitySign)
    000007D2 6043                   MOV         R4,R0
    000007D4 8800                   CMP/EQ      #0,R0
    000007D6 8905                   BT          L1037
    000007D8 8801                   CMP/EQ      #1,R0
    000007DA 8906                   BT          L1039
    000007DC 8802                   CMP/EQ      #2,R0
    000007DE 8907                   BT          L1041
    000007E0 A009                   BRA         L1043
    000007E2 0009                   NOP
    000007E4              L1037:                           ; case label 
      simplexC.c   469        {
      simplexC.c   470            case INE_EQUAL: res="="; break;
    000007E4 D415                   MOV.L       L1498+32,R4; L555
    000007E6 A007                   BRA         L1257
    000007E8 0009                   NOP
    000007EA              L1039:                           ; case label 
      simplexC.c   471            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    000007EA D415                   MOV.L       L1498+36,R4; L556
    000007EC A004                   BRA         L1257
    000007EE 0009                   NOP
    000007F0              L1041:                           ; case label 
      simplexC.c   472            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    000007F0 D414                   MOV.L       L1498+40,R4; L557
    000007F2 A001                   BRA         L1257




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007F4 0009                   NOP
    000007F6              L1043:                           ; default label 
      simplexC.c   473            default: res = "ERROR"; break;
    000007F6 D414                   MOV.L       L1498+44,R4; L558
    000007F8              L1257:                            
      simplexC.c   474        }
      simplexC.c   475        return res;
      simplexC.c   476    }
    000007F8 000B                   RTS
    000007FA 6043                   MOV         R4,R0
      simplexC.c   477    
      simplexC.c   478    char * getFuncObjPurposeChar(int purpose)
    000007FC              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   479    {
      simplexC.c   480        char * res;
      simplexC.c   481        switch (purpose)
    000007FC 6043                   MOV         R4,R0
    000007FE 8800                   CMP/EQ      #0,R0
    00000800 8903                   BT          L1045
    00000802 8801                   CMP/EQ      #1,R0
    00000804 8904                   BT          L1047
    00000806 A006                   BRA         L1049
    00000808 0009                   NOP
    0000080A              L1045:                           ; case label 
      simplexC.c   482        {
      simplexC.c   483            case FUNC_MINIMIZE: res="MIN"; break;
    0000080A D410                   MOV.L       L1498+48,R4; L564
    0000080C A004                   BRA         L1259
    0000080E 0009                   NOP
    00000810              L1047:                           ; case label 
      simplexC.c   484            case FUNC_MAXIMIZE: res="MAX"; break;
    00000810 D40F                   MOV.L       L1498+52,R4; L565
    00000812 A001                   BRA         L1259
    00000814 0009                   NOP
    00000816              L1049:                           ; default label 
      simplexC.c   485            default: res = "ERROR";break;
    00000816 D40C                   MOV.L       L1498+44,R4; L558
    00000818              L1259:                            
      simplexC.c   486        }
      simplexC.c   487        return res;
      simplexC.c   488    } 
    00000818 000B                   RTS
    0000081A 6043                   MOV         R4,R0
    0000081C              L1498:                            
    0000081C 4F000000               .DATA.L     H'4F000000
    00000820 <00000000>             .DATA.L     __eqs
    00000824 <00000000>             .DATA.L     __divs
    00000828 <00000000>             .DATA.L     __gts
    0000082C <00000000>             .DATA.L     __lts
    00000830 <00000000>             .DATA.L     _malloc
    00000834 <00000000>             .DATA.L     _calloc
    00000838 3F800000               .DATA.L     H'3F800000
    0000083C <00000000>             .DATA.L     L555
    00000840 <00000000>             .DATA.L     L556
    00000844 <00000000>             .DATA.L     L557
    00000848 <00000000>             .DATA.L     L558




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084C <00000000>             .DATA.L     L564
    00000850 <00000000>             .DATA.L     L565
      simplexC.c   489    
      simplexC.c   490    int printObjFunc(struct problemStatement* pS,int modelType)
    00000854              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1212
                                                           ; used runtime library name:
                                                           ; __stod
    00000854 2FE6                   MOV.L       R14,@-R15
      simplexC.c   491    {
      simplexC.c   492        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   493        char *uselessSring[128];
      simplexC.c   494        int menuChoice;
      simplexC.c   495        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   496        sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOLVE",
                         + EXIT_OPT);
    00000856 E300                   MOV         #0,R3
    00000858 9088                   MOV.W       L1499,R0   ; H'FB7C
    0000085A 2FD6                   MOV.L       R13,@-R15
    0000085C 2FC6                   MOV.L       R12,@-R15
    0000085E 6C43                   MOV         R4,R12
    00000860 2FB6                   MOV.L       R11,@-R15
    00000862 2FA6                   MOV.L       R10,@-R15
    00000864 2F96                   MOV.L       R9,@-R15
    00000866 2F86                   MOV.L       R8,@-R15
    00000868 4F22                   STS.L       PR,@-R15
    0000086A 3F0C                   ADD         R0,R15
    0000086C DB45                   MOV.L       L1499+24,R11; _sprintf
    0000086E 2F52                   MOV.L       R5,@R15
    00000870 2F36                   MOV.L       R3,@-R15
    00000872 50C1                   MOV.L       @(4,R12),R0
    00000874 8801                   CMP/EQ      #1,R0
    00000876 8F03                   BF/S        L1261
    00000878 EDFF                   MOV         #-1,R13
    0000087A D143                   MOV.L       L1499+28,R1; L578
    0000087C A002                   BRA         L1262
    0000087E 2F16                   MOV.L       R1,@-R15
    00000880              L1261:                            
    00000880 D242                   MOV.L       L1499+32,R2; L579
    00000882 2F26                   MOV.L       R2,@-R15
    00000884              L1262:                            
    00000884 D142                   MOV.L       L1499+36,R1; L577
    00000886 2F16                   MOV.L       R1,@-R15
    00000888 9471                   MOV.W       L1499+2,R4 ; H'0410
    0000088A 4B0B                   JSR         @R11
    0000088C 34FC                   ADD         R15,R4
      simplexC.c   497        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    0000088E 53C7                   MOV.L       @(28,R12),R3
    00000890 946E                   MOV.W       L1499+4,R4 ; H'039C
    00000892 2F36                   MOV.L       R3,@-R15
    00000894 52CB                   MOV.L       @(44,R12),R2
    00000896 2F26                   MOV.L       R2,@-R15
    00000898 D33E                   MOV.L       L1499+40,R3; L580
    0000089A 2F36                   MOV.L       R3,@-R15
    0000089C 4B0B                   JSR         @R11
    0000089E 34FC                   ADD         R15,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A0 7F18                   ADD         #24,R15
      simplexC.c   498        if(modelType==TYPE_INPUT)
    000008A2 60F2                   MOV.L       @R15,R0
    000008A4 8801                   CMP/EQ      #1,R0
    000008A6 8B13                   BF          L1263
      simplexC.c   499        {
      simplexC.c   500            sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    000008A8 E044                   MOV         #68,R0
    000008AA BFA7                   BSR         _getFuncObjPurposeChar
    000008AC 04CE                   MOV.L       @(R0,R12),R4
    000008AE 2F06                   MOV.L       R0,@-R15
    000008B0 D239                   MOV.L       L1499+44,R2; L582
    000008B2 2F26                   MOV.L       R2,@-R15
    000008B4 945D                   MOV.W       L1499+6,R4 ; H'030C
    000008B6 4B0B                   JSR         @R11
    000008B8 34FC                   ADD         R15,R4
      simplexC.c   501            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    000008BA E348                   MOV         #72,R3
    000008BC D237                   MOV.L       L1499+48,R2; __stod
    000008BE 33CC                   ADD         R12,R3
    000008C0 50C7                   MOV.L       @(28,R12),R0
    000008C2 4008                   SHLL2       R0
    000008C4 6332                   MOV.L       @R3,R3
    000008C6 003E                   MOV.L       @(R0,R3),R0
    000008C8 420B                   JSR         @R2
    000008CA 2FF6                   MOV.L       R15,@-R15
    000008CC A00F                   BRA         L1489
    000008CE 0009                   NOP
    000008D0              L1263:                            
      simplexC.c   502        }else
      simplexC.c   503        {
      simplexC.c   504            sprintf(stroutBasicInfo2, "OBJ MIN");
    000008D0 D333                   MOV.L       L1499+52,R3; L585
    000008D2 2F36                   MOV.L       R3,@-R15
    000008D4 944E                   MOV.W       L1499+8,R4 ; H'0308
    000008D6 4B0B                   JSR         @R11
    000008D8 34FC                   ADD         R15,R4
      simplexC.c   505            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]);
    000008DA E34C                   MOV         #76,R3
    000008DC D22F                   MOV.L       L1499+48,R2; __stod
    000008DE 33CC                   ADD         R12,R3
    000008E0 50C7                   MOV.L       @(28,R12),R0
    000008E2 4008                   SHLL2       R0
    000008E4 6332                   MOV.L       @R3,R3
    000008E6 003E                   MOV.L       @(R0,R3),R0
    000008E8 7FFC                   ADD         #-4,R15
    000008EA 420B                   JSR         @R2
    000008EC 2FF6                   MOV.L       R15,@-R15
    000008EE              L1489:                            
    000008EE D32D                   MOV.L       L1499+56,R3; L583
    000008F0 9441                   MOV.W       L1499+10,R4; H'0290
    000008F2 2F36                   MOV.L       R3,@-R15
    000008F4 4B0B                   JSR         @R11
    000008F6 34FC                   ADD         R15,R4
    000008F8 D82B                   MOV.L       L1499+60,R8; _Bdisp_PutDisp_DD
    000008FA 7F0C                   ADD         #12,R15
    000008FC 9A3C                   MOV.W       L1499+12,R10; H'0204




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008FE DE2B                   MOV.L       L1499+64,R14; _PrintMini
      simplexC.c   506        }
      simplexC.c   507        while(menuChoice!=EXIT_OPT)
    00000900 A077                   BRA         L1265
    00000902 3AFC                   ADD         R15,R10
    00000904              L1266:                            
      simplexC.c   508        {
      simplexC.c   509            Bdisp_AllClr_DDVRAM();
    00000904 D32A                   MOV.L       L1499+68,R3; _Bdisp_AllClr_DDVRAM
    00000906 430B                   JSR         @R3
    00000908 0009                   NOP
      simplexC.c   510            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    0000090A E710                   MOV         #16,R7
    0000090C 9635                   MOV.W       L1499+14,R6; H'0404
    0000090E E500                   MOV         #0,R5
    00000910 36FC                   ADD         R15,R6
    00000912 4E0B                   JSR         @R14
    00000914 6453                   MOV         R5,R4
      simplexC.c   511            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00000916 E710                   MOV         #16,R7
    00000918 9630                   MOV.W       L1499+16,R6; H'0384
    0000091A E507                   MOV         #7,R5
    0000091C 36FC                   ADD         R15,R6
    0000091E 4E0B                   JSR         @R14
    00000920 E400                   MOV         #0,R4
      simplexC.c   512            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    00000922 E710                   MOV         #16,R7
    00000924 962B                   MOV.W       L1499+18,R6; H'0304
    00000926 E50E                   MOV         #14,R5
    00000928 36FC                   ADD         R15,R6
    0000092A 4E0B                   JSR         @R14
    0000092C E400                   MOV         #0,R4
      simplexC.c   513            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    0000092E E710                   MOV         #16,R7
    00000930 9626                   MOV.W       L1499+20,R6; H'0284
    00000932 E515                   MOV         #21,R5
    00000934 36FC                   ADD         R15,R6
    00000936 4E0B                   JSR         @R14
    00000938 E400                   MOV         #0,R4
      simplexC.c   514            menuChoice = InputI(0, 35);
    0000093A E523                   MOV         #35,R5
    0000093C BB77                   BSR         _InputI
    0000093E E400                   MOV         #0,R4
      simplexC.c   515            Bdisp_PutDisp_DD();
    00000940 480B                   JSR         @R8
    00000942 6D03                   MOV         R0,R13
      simplexC.c   516            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000944 2DD8                   TST         R13,R13
    00000946 8954                   BT          L1265
    00000948 52C7                   MOV.L       @(28,R12),R2
    0000094A 3D27                   CMP/GT      R2,R13
    0000094C 8951                   BT          L1265
    0000094E 69D3                   MOV         R13,R9
    00000950 60F2                   MOV.L       @R15,R0
    00000952 79FF                   ADD         #-1,R9
    00000954 8801                   CMP/EQ      #1,R0
    00000956 8F2D                   BF/S        L1268




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000958 4908                   SHLL2       R9
      simplexC.c   517            {
      simplexC.c   518                if(modelType==TYPE_INPUT)
      simplexC.c   519                {
      simplexC.c   520                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    0000095A E048                   MOV         #72,R0
    0000095C D30F                   MOV.L       L1499+48,R3; __stod
    0000095E 00CE                   MOV.L       @(R0,R12),R0
    00000960 009E                   MOV.L       @(R0,R9),R0
    00000962 7FF8                   ADD         #-8,R15
    00000964 430B                   JSR         @R3
    00000966 2FF6                   MOV.L       R15,@-R15
    00000968 A02B                   BRA         L1490
    0000096A 0009                   NOP
    0000096C              L1499:                            
    0000096C FB7C                   .DATA.W     H'FB7C
    0000096E 0410                   .DATA.W     H'0410
    00000970 039C                   .DATA.W     H'039C
    00000972 030C                   .DATA.W     H'030C
    00000974 0308                   .DATA.W     H'0308
    00000976 0290                   .DATA.W     H'0290
    00000978 0204                   .DATA.W     H'0204
    0000097A 0404                   .DATA.W     H'0404
    0000097C 0384                   .DATA.W     H'0384
    0000097E 0304                   .DATA.W     H'0304
    00000980 0284                   .DATA.W     H'0284
    00000982 0000                   .DATA.W     0
    00000984 <00000000>             .DATA.L     _sprintf
    00000988 <00000000>             .DATA.L     L578
    0000098C <00000000>             .DATA.L     L579
    00000990 <00000000>             .DATA.L     L577
    00000994 <00000000>             .DATA.L     L580
    00000998 <00000000>             .DATA.L     L582
    0000099C <00000000>             .DATA.L     __stod
    000009A0 <00000000>             .DATA.L     L585
    000009A4 <00000000>             .DATA.L     L583
    000009A8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000009AC <00000000>             .DATA.L     _PrintMini
    000009B0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000009B4              L1268:                            
      simplexC.c   521                }else
      simplexC.c   522                {
      simplexC.c   523                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    000009B4 D351                   MOV.L       L1500+12,R3; __stod
    000009B6 E04C                   MOV         #76,R0
    000009B8 00CE                   MOV.L       @(R0,R12),R0
    000009BA 009E                   MOV.L       @(R0,R9),R0
    000009BC 7FF8                   ADD         #-8,R15
    000009BE 430B                   JSR         @R3
    000009C0 2FF6                   MOV.L       R15,@-R15
    000009C2              L1490:                            
    000009C2 2FD6                   MOV.L       R13,@-R15
    000009C4 D24E                   MOV.L       L1500+16,R2; L589
    000009C6 2F26                   MOV.L       R2,@-R15
    000009C8 4B0B                   JSR         @R11
    000009CA 64A3                   MOV         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009CC 7F10                   ADD         #16,R15
      simplexC.c   524                }
      simplexC.c   525                
      simplexC.c   526                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    000009CE E710                   MOV         #16,R7
    000009D0 66A3                   MOV         R10,R6
    000009D2 E52A                   MOV         #42,R5
    000009D4 4E0B                   JSR         @R14
    000009D6 E400                   MOV         #0,R4
      simplexC.c   527                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    000009D8 D64A                   MOV.L       L1500+20,R6; L591
    000009DA E531                   MOV         #49,R5
    000009DC E710                   MOV         #16,R7
    000009DE 4E0B                   JSR         @R14
    000009E0 E400                   MOV         #0,R4
      simplexC.c   528                string_input(0, 56, uselessSring);
    000009E2 66F3                   MOV         R15,R6
    000009E4 D348                   MOV.L       L1500+24,R3; _string_input
    000009E6 E538                   MOV         #56,R5
    000009E8 7604                   ADD         #4,R6
    000009EA 430B                   JSR         @R3
    000009EC E400                   MOV         #0,R4
      simplexC.c   529                Bdisp_PutDisp_DD();
    000009EE 480B                   JSR         @R8
    000009F0 0009                   NOP
    000009F2              L1265:                            
    000009F2 2DD8                   TST         R13,R13
    000009F4 8B86                   BF          L1266
      simplexC.c   530            }
      simplexC.c   531        }
      simplexC.c   532        return 0;
    000009F6 E000                   MOV         #0,R0
      simplexC.c   533    }
    000009F8 917A                   MOV.W       L1500,R1   ; H'0484
    000009FA 3F1C                   ADD         R1,R15
    000009FC 4F26                   LDS.L       @R15+,PR
    000009FE 68F6                   MOV.L       @R15+,R8
    00000A00 69F6                   MOV.L       @R15+,R9
    00000A02 6AF6                   MOV.L       @R15+,R10
    00000A04 6BF6                   MOV.L       @R15+,R11
    00000A06 6CF6                   MOV.L       @R15+,R12
    00000A08 6DF6                   MOV.L       @R15+,R13
    00000A0A 000B                   RTS
    00000A0C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   534    
      simplexC.c   535    int printAjVal(int varId)
    00000A0E              _printAjVal:                     ; function: printAjVal
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   536    {
      simplexC.c   537        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   538        char *uselessSring[128];
      simplexC.c   539        int menuChoice;
      simplexC.c   540        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   541        sprintf(stroutBasicInfo, "Ax%d. nConstraints: %d, Exit %d",varId,ex.nConstraints,EXIT_OPT);
    00000A0E E300                   MOV         #0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A10 D13E                   MOV.L       L1500+28,R1; H'00000030+_ex
    00000A12 2FE6                   MOV.L       R14,@-R15
    00000A14 2FD6                   MOV.L       R13,@-R15
    00000A16 EEFF                   MOV         #-1,R14
    00000A18 906B                   MOV.W       L1500+2,R0 ; H'FCFC
    00000A1A 2FC6                   MOV.L       R12,@-R15
    00000A1C 2FB6                   MOV.L       R11,@-R15
    00000A1E 2FA6                   MOV.L       R10,@-R15
    00000A20 2F96                   MOV.L       R9,@-R15
    00000A22 6943                   MOV         R4,R9
    00000A24 2F86                   MOV.L       R8,@-R15
    00000A26 4F22                   STS.L       PR,@-R15
    00000A28 9864                   MOV.W       L1500+4,R8 ; H'0284
    00000A2A 3F0C                   ADD         R0,R15
    00000A2C 38FC                   ADD         R15,R8
    00000A2E 2F36                   MOV.L       R3,@-R15
    00000A30 6212                   MOV.L       @R1,R2
    00000A32 2F26                   MOV.L       R2,@-R15
    00000A34 2F96                   MOV.L       R9,@-R15
    00000A36 D236                   MOV.L       L1500+32,R2; L599
    00000A38 D336                   MOV.L       L1500+36,R3; _sprintf
    00000A3A 2F26                   MOV.L       R2,@-R15
    00000A3C 430B                   JSR         @R3
    00000A3E 6483                   MOV         R8,R4
    00000A40 DA35                   MOV.L       L1500+40,R10; _Bdisp_PutDisp_DD
    00000A42 6293                   MOV         R9,R2
    00000A44 DB35                   MOV.L       L1500+44,R11; _Bdisp_AllClr_DDVRAM
    00000A46 7F10                   ADD         #16,R15
    00000A48 9C55                   MOV.W       L1500+6,R12; H'0204
    00000A4A 72FF                   ADD         #-1,R2
    00000A4C DD34                   MOV.L       L1500+48,R13; _PrintMini
    00000A4E 3CFC                   ADD         R15,R12
    00000A50 4208                   SHLL2       R2
      simplexC.c   542        while(menuChoice!=EXIT_OPT)
    00000A52 A03F                   BRA         L1271
    00000A54 2F22                   MOV.L       R2,@R15
    00000A56              L1272:                            
      simplexC.c   543        {
      simplexC.c   544            Bdisp_AllClr_DDVRAM();
    00000A56 4B0B                   JSR         @R11
    00000A58 0009                   NOP
      simplexC.c   545            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000A5A E710                   MOV         #16,R7
    00000A5C 6683                   MOV         R8,R6
    00000A5E E500                   MOV         #0,R5
    00000A60 4D0B                   JSR         @R13
    00000A62 6453                   MOV         R5,R4
      simplexC.c   546            menuChoice=InputI(0,7);
    00000A64 E507                   MOV         #7,R5
    00000A66 BAE2                   BSR         _InputI
    00000A68 E400                   MOV         #0,R4
      simplexC.c   547            Bdisp_PutDisp_DD();
    00000A6A 4A0B                   JSR         @R10
    00000A6C 6E03                   MOV         R0,R14
      simplexC.c   548            if(menuChoice!=EXIT_OPT && menuChoice<=ex.nConstraints)
    00000A6E 2EE8                   TST         R14,R14
    00000A70 8930                   BT          L1271




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A72 D326                   MOV.L       L1500+28,R3; H'00000030+_ex
    00000A74 6232                   MOV.L       @R3,R2
    00000A76 3E27                   CMP/GT      R2,R14
    00000A78 892C                   BT          L1271
      simplexC.c   549            {
      simplexC.c   550                Bdisp_AllClr_DDVRAM();
    00000A7A 4B0B                   JSR         @R11
    00000A7C 0009                   NOP
      simplexC.c   551                sprintf(stroutVariable, "Ax%d. %.2f Pos %d",varId,ex.ajVector[varId-1][menuChoice-1],menuChoic
                         +e);
    00000A7E 61E3                   MOV         R14,R1
    00000A80 2FE6                   MOV.L       R14,@-R15
    00000A82 71FF                   ADD         #-1,R1
    00000A84 D227                   MOV.L       L1500+52,R2; H'00000038+_ex
    00000A86 4108                   SHLL2       R1
    00000A88 53F1                   MOV.L       @(4,R15),R3
    00000A8A 6022                   MOV.L       @R2,R0
    00000A8C 003E                   MOV.L       @(R0,R3),R0
    00000A8E 001E                   MOV.L       @(R0,R1),R0
    00000A90 D11A                   MOV.L       L1500+12,R1; __stod
    00000A92 7FF8                   ADD         #-8,R15
    00000A94 410B                   JSR         @R1
    00000A96 2FF6                   MOV.L       R15,@-R15
    00000A98 2F96                   MOV.L       R9,@-R15
    00000A9A D023                   MOV.L       L1500+56,R0; L602
    00000A9C D31D                   MOV.L       L1500+36,R3; _sprintf
    00000A9E 2F06                   MOV.L       R0,@-R15
    00000AA0 430B                   JSR         @R3
    00000AA2 64C3                   MOV         R12,R4
    00000AA4 7F14                   ADD         #20,R15
      simplexC.c   552                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000AA6 E710                   MOV         #16,R7
    00000AA8 66C3                   MOV         R12,R6
    00000AAA E500                   MOV         #0,R5
    00000AAC 4D0B                   JSR         @R13
    00000AAE 6453                   MOV         R5,R4
      simplexC.c   553                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000AB0 D614                   MOV.L       L1500+20,R6; L591
    00000AB2 E507                   MOV         #7,R5
    00000AB4 E710                   MOV         #16,R7
    00000AB6 4D0B                   JSR         @R13
    00000AB8 E400                   MOV         #0,R4
      simplexC.c   554                string_input(0, 14, uselessSring);
    00000ABA 66F3                   MOV         R15,R6
    00000ABC D212                   MOV.L       L1500+24,R2; _string_input
    00000ABE E50E                   MOV         #14,R5
    00000AC0 7604                   ADD         #4,R6
    00000AC2 420B                   JSR         @R2
    00000AC4 E400                   MOV         #0,R4
      simplexC.c   555                Bdisp_PutDisp_DD();
    00000AC6 4A0B                   JSR         @R10
    00000AC8 0009                   NOP
      simplexC.c   556                memset(stroutVariable,0,128);
    00000ACA E500                   MOV         #0,R5
    00000ACC D317                   MOV.L       L1500+60,R3; _memset
    00000ACE 9613                   MOV.W       L1500+8,R6 ; H'0080
    00000AD0 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AD2 64C3                   MOV         R12,R4
    00000AD4              L1271:                            
    00000AD4 2EE8                   TST         R14,R14
    00000AD6 8BBE                   BF          L1272
      simplexC.c   557            }
      simplexC.c   558        }
      simplexC.c   559        return 0;
      simplexC.c   560    }
    00000AD8 910F                   MOV.W       L1500+10,R1; H'0304
    00000ADA E000                   MOV         #0,R0
    00000ADC 3F1C                   ADD         R1,R15
    00000ADE 4F26                   LDS.L       @R15+,PR
    00000AE0 68F6                   MOV.L       @R15+,R8
    00000AE2 69F6                   MOV.L       @R15+,R9
    00000AE4 6AF6                   MOV.L       @R15+,R10
    00000AE6 6BF6                   MOV.L       @R15+,R11
    00000AE8 6CF6                   MOV.L       @R15+,R12
    00000AEA 6DF6                   MOV.L       @R15+,R13
    00000AEC 000B                   RTS
    00000AEE 6EF6                   MOV.L       @R15+,R14
    00000AF0              L1500:                            
    00000AF0 0484                   .DATA.W     H'0484
    00000AF2 FCFC                   .DATA.W     H'FCFC
    00000AF4 0284                   .DATA.W     H'0284
    00000AF6 0204                   .DATA.W     H'0204
    00000AF8 0080                   .DATA.W     H'0080
    00000AFA 0304                   .DATA.W     H'0304
    00000AFC <00000000>             .DATA.L     __stod
    00000B00 <00000000>             .DATA.L     L589
    00000B04 <00000000>             .DATA.L     L591
    00000B08 <00000000>             .DATA.L     _string_input
    00000B0C <00000030>             .DATA.L     H'00000030+_ex
    00000B10 <00000000>             .DATA.L     L599
    00000B14 <00000000>             .DATA.L     _sprintf
    00000B18 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000B1C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000B20 <00000000>             .DATA.L     _PrintMini
    00000B24 <00000038>             .DATA.L     H'00000038+_ex
    00000B28 <00000000>             .DATA.L     L602
    00000B2C <00000000>             .DATA.L     _memset
      simplexC.c   561    
      simplexC.c   562    int printAjVec()
    00000B30              _printAjVec:                     ; function: printAjVec
                                                           ; frame size=172
    00000B30 2FE6                   MOV.L       R14,@-R15
      simplexC.c   563    {
      simplexC.c   564        char stroutBasicInfo[128];
      simplexC.c   565        int menuChoice;
      simplexC.c   566        menuChoice=INITIALIZE_VALUE_OPT;
    00000B32 EEFF                   MOV         #-1,R14
    00000B34 2FD6                   MOV.L       R13,@-R15
    00000B36 2FC6                   MOV.L       R12,@-R15
    00000B38 2FB6                   MOV.L       R11,@-R15
    00000B3A 2FA6                   MOV.L       R10,@-R15
    00000B3C 2F96                   MOV.L       R9,@-R15
    00000B3E 2F86                   MOV.L       R8,@-R15
    00000B40 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B42 7F80                   ADD         #-128,R15
    00000B44 D825                   MOV.L       L1501+6,R8 ; _PrintMini
    00000B46 D926                   MOV.L       L1501+10,R9; _sprintf
    00000B48 DA26                   MOV.L       L1501+14,R10; L609
    00000B4A DB27                   MOV.L       L1501+18,R11; _ex
    00000B4C DC27                   MOV.L       L1501+22,R12; _Bdisp_AllClr_DDVRAM
      simplexC.c   567        while(menuChoice!=EXIT_OPT)
    00000B4E A01D                   BRA         L1275
    00000B50 6DF3                   MOV         R15,R13
    00000B52              L1276:                            
      simplexC.c   568        {
      simplexC.c   569            Bdisp_AllClr_DDVRAM();
    00000B52 4C0B                   JSR         @R12
    00000B54 0009                   NOP
      simplexC.c   570            sprintf(stroutBasicInfo, "Axj pMenu Vars %d.  %d exit",ex.nVariables,EXIT_OPT);
    00000B56 E200                   MOV         #0,R2
    00000B58 2F26                   MOV.L       R2,@-R15
    00000B5A 53BB                   MOV.L       @(44,R11),R3
    00000B5C 2F36                   MOV.L       R3,@-R15
    00000B5E 2FA6                   MOV.L       R10,@-R15
    00000B60 490B                   JSR         @R9
    00000B62 64D3                   MOV         R13,R4
    00000B64 7F0C                   ADD         #12,R15
      simplexC.c   571            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000B66 E710                   MOV         #16,R7
    00000B68 66D3                   MOV         R13,R6
    00000B6A E500                   MOV         #0,R5
    00000B6C 480B                   JSR         @R8
    00000B6E 6453                   MOV         R5,R4
      simplexC.c   572            menuChoice = InputI(0, 7);
    00000B70 E507                   MOV         #7,R5
    00000B72 BA5C                   BSR         _InputI
    00000B74 E400                   MOV         #0,R4
      simplexC.c   573            Bdisp_PutDisp_DD();
    00000B76 D31E                   MOV.L       L1501+26,R3; _Bdisp_PutDisp_DD
    00000B78 430B                   JSR         @R3
    00000B7A 6E03                   MOV         R0,R14
      simplexC.c   574            if(menuChoice!=EXIT_OPT && menuChoice<=ex.nVariables)
    00000B7C 2EE8                   TST         R14,R14
    00000B7E 8905                   BT          L1275
    00000B80 D21C                   MOV.L       L1501+30,R2; H'0000002C+_ex
    00000B82 6322                   MOV.L       @R2,R3
    00000B84 3E37                   CMP/GT      R3,R14
    00000B86 8901                   BT          L1275
      simplexC.c   575            {
      simplexC.c   576                printAjVal(menuChoice);
    00000B88 BF41                   BSR         _printAjVal
    00000B8A 64E3                   MOV         R14,R4
    00000B8C              L1275:                            
    00000B8C 2EE8                   TST         R14,R14
    00000B8E 8BE0                   BF          L1276
      simplexC.c   577            }
      simplexC.c   578        }
      simplexC.c   579        return 0;
      simplexC.c   580    }
    00000B90 9121                   MOV.W       L1501,R1   ; H'0080
    00000B92 E000                   MOV         #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B94 3F1C                   ADD         R1,R15
    00000B96 4F26                   LDS.L       @R15+,PR
    00000B98 68F6                   MOV.L       @R15+,R8
    00000B9A 69F6                   MOV.L       @R15+,R9
    00000B9C 6AF6                   MOV.L       @R15+,R10
    00000B9E 6BF6                   MOV.L       @R15+,R11
    00000BA0 6CF6                   MOV.L       @R15+,R12
    00000BA2 6DF6                   MOV.L       @R15+,R13
    00000BA4 000B                   RTS
    00000BA6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   581    
      simplexC.c   582    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    00000BA8              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
    00000BA8 2FE6                   MOV.L       R14,@-R15
    00000BAA 6343                   MOV         R4,R3
    00000BAC 9014                   MOV.W       L1501+2,R0 ; H'FCF8
    00000BAE 73FF                   ADD         #-1,R3
    00000BB0 2FD6                   MOV.L       R13,@-R15
    00000BB2 4308                   SHLL2       R3
    00000BB4 9E11                   MOV.W       L1501+4,R14; H'0208
      simplexC.c   583    {
      simplexC.c   584        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   585        char *uselessSring[128];
      simplexC.c   586        int menuChoice;
      simplexC.c   587        int lengthString;
      simplexC.c   588        lengthString=0;
    00000BB6 ED00                   MOV         #0,R13
    00000BB8 2FC6                   MOV.L       R12,@-R15
    00000BBA 2FB6                   MOV.L       R11,@-R15
    00000BBC 2FA6                   MOV.L       R10,@-R15
      simplexC.c   589        menuChoice=INITIALIZE_VALUE_OPT;
    00000BBE EBFF                   MOV         #-1,R11
    00000BC0 DC07                   MOV.L       L1501+10,R12; _sprintf
    00000BC2 6A53                   MOV         R5,R10
    00000BC4 2F96                   MOV.L       R9,@-R15
    00000BC6 2F86                   MOV.L       R8,@-R15
    00000BC8 4F22                   STS.L       PR,@-R15
    00000BCA 3F0C                   ADD         R0,R15
    00000BCC D903                   MOV.L       L1501+6,R9 ; _PrintMini
    00000BCE 3EFC                   ADD         R15,R14
    00000BD0 2F42                   MOV.L       R4,@R15
      simplexC.c   590        
      simplexC.c   591        while(menuChoice!=EXIT_OPT)
    00000BD2 A08A                   BRA         L1279
    00000BD4 1F31                   MOV.L       R3,@(4,R15)
    00000BD6              L1501:                            
    00000BD6 0080                   .DATA.W     H'0080
    00000BD8 FCF8                   .DATA.W     H'FCF8
    00000BDA 0208                   .DATA.W     H'0208
    00000BDC <00000000>             .DATA.L     _PrintMini
    00000BE0 <00000000>             .DATA.L     _sprintf
    00000BE4 <00000000>             .DATA.L     L609
    00000BE8 <00000000>             .DATA.L     _ex
    00000BEC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BF0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000BF4 <0000002C>             .DATA.L     H'0000002C+_ex
    00000BF8              L1280:                            
      simplexC.c   592        {
      simplexC.c   593            Bdisp_AllClr_DDVRAM();
    00000BF8 D145                   MOV.L       L1502+10,R1; _Bdisp_AllClr_DDVRAM
    00000BFA 410B                   JSR         @R1
    00000BFC 0009                   NOP
      simplexC.c   594            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    00000BFE E200                   MOV         #0,R2
    00000C00 9481                   MOV.W       L1502,R4   ; H'0298
    00000C02 2F26                   MOV.L       R2,@-R15
    00000C04 53A7                   MOV.L       @(28,R10),R3
    00000C06 2F36                   MOV.L       R3,@-R15
    00000C08 51F2                   MOV.L       @(8,R15),R1
    00000C0A 2F16                   MOV.L       R1,@-R15
    00000C0C D341                   MOV.L       L1502+14,R3; L621
    00000C0E 2F36                   MOV.L       R3,@-R15
    00000C10 4C0B                   JSR         @R12
    00000C12 34FC                   ADD         R15,R4
      simplexC.c   595            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000C14 9678                   MOV.W       L1502+2,R6 ; H'0288
    00000C16 E500                   MOV         #0,R5
    00000C18 7F10                   ADD         #16,R15
    00000C1A E710                   MOV         #16,R7
    00000C1C 36FC                   ADD         R15,R6
    00000C1E 490B                   JSR         @R9
    00000C20 6453                   MOV         R5,R4
      simplexC.c   596            menuChoice=InputI(0,7);
    00000C22 E507                   MOV         #7,R5
    00000C24 BA03                   BSR         _InputI
    00000C26 E400                   MOV         #0,R4
      simplexC.c   597            Bdisp_PutDisp_DD();
    00000C28 D33B                   MOV.L       L1502+18,R3; _Bdisp_PutDisp_DD
    00000C2A 430B                   JSR         @R3
    00000C2C 6B03                   MOV         R0,R11
      simplexC.c   598            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000C2E 2BB8                   TST         R11,R11
    00000C30 895B                   BT          L1279
    00000C32 53A7                   MOV.L       @(28,R10),R3
    00000C34 3B37                   CMP/GT      R3,R11
    00000C36 8958                   BT          L1279
      simplexC.c   599            {
      simplexC.c   600                Bdisp_AllClr_DDVRAM();
    00000C38 D135                   MOV.L       L1502+10,R1; _Bdisp_AllClr_DDVRAM
    00000C3A 410B                   JSR         @R1
    00000C3C 0009                   NOP
      simplexC.c   601                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    00000C3E 68B3                   MOV         R11,R8
    00000C40 D236                   MOV.L       L1502+22,R2; __stod
    00000C42 78FF                   ADD         #-1,R8
    00000C44 2FB6                   MOV.L       R11,@-R15
    00000C46 4808                   SHLL2       R8
    00000C48 53F2                   MOV.L       @(8,R15),R3
    00000C4A 50A4                   MOV.L       @(16,R10),R0
    00000C4C 003E                   MOV.L       @(R0,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C4E 008E                   MOV.L       @(R0,R8),R0
    00000C50 7FF8                   ADD         #-8,R15
    00000C52 420B                   JSR         @R2
    00000C54 2FF6                   MOV.L       R15,@-R15
    00000C56 64D3                   MOV         R13,R4
    00000C58 51F3                   MOV.L       @(12,R15),R1
    00000C5A 2F16                   MOV.L       R1,@-R15
    00000C5C D230                   MOV.L       L1502+26,R2; L623
    00000C5E 2F26                   MOV.L       R2,@-R15
    00000C60 4C0B                   JSR         @R12
    00000C62 34EC                   ADD         R14,R4
    00000C64 7F14                   ADD         #20,R15
    00000C66 BDAD                   BSR         _lengthConcatenate
    00000C68 6403                   MOV         R0,R4
    00000C6A 3D0C                   ADD         R0,R13
      simplexC.c   602    
      simplexC.c   603                if(pS->idSlopeVariables[menuChoice-1])
    00000C6C 50AD                   MOV.L       @(52,R10),R0
    00000C6E 028E                   MOV.L       @(R0,R8),R2
    00000C70 2228                   TST         R2,R2
    00000C72 8908                   BT          L1282
      simplexC.c   604                {
      simplexC.c   605                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    00000C74 D12B                   MOV.L       L1502+30,R1; L625
    00000C76 64D3                   MOV         R13,R4
    00000C78 2F16                   MOV.L       R1,@-R15
    00000C7A 4C0B                   JSR         @R12
    00000C7C 34EC                   ADD         R14,R4
    00000C7E 7F04                   ADD         #4,R15
    00000C80 BDA0                   BSR         _lengthConcatenate
    00000C82 6403                   MOV         R0,R4
    00000C84 3D0C                   ADD         R0,R13
    00000C86              L1282:                            
      simplexC.c   606                }
      simplexC.c   607                if(pS->id2fasesVariables[menuChoice-1])
    00000C86 50AE                   MOV.L       @(56,R10),R0
    00000C88 028E                   MOV.L       @(R0,R8),R2
    00000C8A 2228                   TST         R2,R2
    00000C8C 8908                   BT          L1283
      simplexC.c   608                {
      simplexC.c   609                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    00000C8E 64D3                   MOV         R13,R4
    00000C90 D125                   MOV.L       L1502+34,R1; L627
    00000C92 2F16                   MOV.L       R1,@-R15
    00000C94 4C0B                   JSR         @R12
    00000C96 34EC                   ADD         R14,R4
    00000C98 7F04                   ADD         #4,R15
    00000C9A BD93                   BSR         _lengthConcatenate
    00000C9C 6403                   MOV         R0,R4
    00000C9E 3D0C                   ADD         R0,R13
    00000CA0              L1283:                            
      simplexC.c   610                }
      simplexC.c   611                if(pS->idIntegerVariables[menuChoice-1])
    00000CA0 50AC                   MOV.L       @(48,R10),R0
    00000CA2 028E                   MOV.L       @(R0,R8),R2
    00000CA4 2228                   TST         R2,R2
    00000CA6 8907                   BT          L1284




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   612                {
      simplexC.c   613                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000CA8 D120                   MOV.L       L1502+38,R1; L629
    00000CAA 64D3                   MOV         R13,R4
    00000CAC 2F16                   MOV.L       R1,@-R15
    00000CAE 4C0B                   JSR         @R12
    00000CB0 34EC                   ADD         R14,R4
    00000CB2 7F04                   ADD         #4,R15
    00000CB4 BD86                   BSR         _lengthConcatenate
    00000CB6 6403                   MOV         R0,R4
    00000CB8              L1284:                            
      simplexC.c   614                }
      simplexC.c   615                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000CB8 E710                   MOV         #16,R7
    00000CBA 66E3                   MOV         R14,R6
    00000CBC E500                   MOV         #0,R5
    00000CBE 490B                   JSR         @R9
    00000CC0 6453                   MOV         R5,R4
      simplexC.c   616                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000CC2 E710                   MOV         #16,R7
    00000CC4 D61A                   MOV.L       L1502+42,R6; L591
    00000CC6 E507                   MOV         #7,R5
    00000CC8 490B                   JSR         @R9
    00000CCA E400                   MOV         #0,R4
      simplexC.c   617                string_input(0, 14, uselessSring);
    00000CCC D219                   MOV.L       L1502+46,R2; _string_input
    00000CCE 66F3                   MOV         R15,R6
    00000CD0 7608                   ADD         #8,R6
    00000CD2 E50E                   MOV         #14,R5
    00000CD4 420B                   JSR         @R2
    00000CD6 E400                   MOV         #0,R4
      simplexC.c   618                Bdisp_PutDisp_DD();
    00000CD8 D30F                   MOV.L       L1502+18,R3; _Bdisp_PutDisp_DD
    00000CDA 430B                   JSR         @R3
    00000CDC 0009                   NOP
      simplexC.c   619                memset(stroutVariable,0,128);
    00000CDE E500                   MOV         #0,R5
    00000CE0 D215                   MOV.L       L1502+50,R2; _memset
    00000CE2 9612                   MOV.W       L1502+4,R6 ; H'0080
    00000CE4 420B                   JSR         @R2
    00000CE6 64E3                   MOV         R14,R4
      simplexC.c   620                lengthString=0;
    00000CE8 ED00                   MOV         #0,R13
    00000CEA              L1279:                            
    00000CEA 2BB8                   TST         R11,R11
    00000CEC 8B84                   BF          L1280
      simplexC.c   621            }
      simplexC.c   622        }
      simplexC.c   623        return 0;
    00000CEE E000                   MOV         #0,R0
      simplexC.c   624    }
    00000CF0 910C                   MOV.W       L1502+6,R1 ; H'0308
    00000CF2 3F1C                   ADD         R1,R15
    00000CF4 4F26                   LDS.L       @R15+,PR
    00000CF6 68F6                   MOV.L       @R15+,R8
    00000CF8 69F6                   MOV.L       @R15+,R9
    00000CFA 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CFC 6BF6                   MOV.L       @R15+,R11
    00000CFE 6CF6                   MOV.L       @R15+,R12
    00000D00 6DF6                   MOV.L       @R15+,R13
    00000D02 000B                   RTS
    00000D04 6EF6                   MOV.L       @R15+,R14
    00000D06              L1502:                            
    00000D06 0298                   .DATA.W     H'0298
    00000D08 0288                   .DATA.W     H'0288
    00000D0A 0080                   .DATA.W     H'0080
    00000D0C 0308                   .DATA.W     H'0308
    00000D0E 0000                   .DATA.W     0
    00000D10 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000D14 <00000000>             .DATA.L     L621
    00000D18 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000D1C <00000000>             .DATA.L     __stod
    00000D20 <00000000>             .DATA.L     L623
    00000D24 <00000000>             .DATA.L     L625
    00000D28 <00000000>             .DATA.L     L627
    00000D2C <00000000>             .DATA.L     L629
    00000D30 <00000000>             .DATA.L     L591
    00000D34 <00000000>             .DATA.L     _string_input
    00000D38 <00000000>             .DATA.L     _memset
      simplexC.c   625    
      simplexC.c   626    int printIne(int contsId, struct problemStatement* pS)
    00000D3C              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000D3C 4F22                   STS.L       PR,@-R15
    00000D3E 9074                   MOV.W       L1503,R0   ; H'FD78
      simplexC.c   627    {
      simplexC.c   628        char stroutBasicInfo[128];
      simplexC.c   629        char *uselessSring[128];
      simplexC.c   630        Bdisp_AllClr_DDVRAM();
    00000D40 D33C                   MOV.L       L1503+10,R3; _Bdisp_AllClr_DDVRAM
    00000D42 3F0C                   ADD         R0,R15
    00000D44 2F42                   MOV.L       R4,@R15
    00000D46 430B                   JSR         @R3
    00000D48 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   631        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    00000D4A 50F1                   MOV.L       @(4,R15),R0
    00000D4C 64F2                   MOV.L       @R15,R4
    00000D4E 74FF                   ADD         #-1,R4
    00000D50 5006                   MOV.L       @(24,R0),R0
    00000D52 4408                   SHLL2       R4
    00000D54 BD3D                   BSR         _getInequalityChar
    00000D56 044E                   MOV.L       @(R0,R4),R4
    00000D58 2F06                   MOV.L       R0,@-R15
    00000D5A 52F1                   MOV.L       @(4,R15),R2
    00000D5C D336                   MOV.L       L1503+14,R3; L636
    00000D5E 2F26                   MOV.L       R2,@-R15
    00000D60 2F36                   MOV.L       R3,@-R15
    00000D62 9463                   MOV.W       L1503+2,R4 ; H'0214
    00000D64 D235                   MOV.L       L1503+18,R2; _sprintf
    00000D66 420B                   JSR         @R2
    00000D68 34FC                   ADD         R15,R4
      simplexC.c   632        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000D6A E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D6C 965E                   MOV.W       L1503+2,R6 ; H'0214
    00000D6E E500                   MOV         #0,R5
    00000D70 D333                   MOV.L       L1503+22,R3; _PrintMini
    00000D72 36FC                   ADD         R15,R6
    00000D74 430B                   JSR         @R3
    00000D76 6453                   MOV         R5,R4
      simplexC.c   633        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000D78 D632                   MOV.L       L1503+26,R6; L591
    00000D7A E507                   MOV         #7,R5
    00000D7C D230                   MOV.L       L1503+22,R2; _PrintMini
    00000D7E E710                   MOV         #16,R7
    00000D80 420B                   JSR         @R2
    00000D82 E400                   MOV         #0,R4
      simplexC.c   634        string_input(0, 14, uselessSring);
    00000D84 D330                   MOV.L       L1503+30,R3; _string_input
    00000D86 66F3                   MOV         R15,R6
    00000D88 7614                   ADD         #20,R6
    00000D8A E50E                   MOV         #14,R5
    00000D8C 430B                   JSR         @R3
    00000D8E E400                   MOV         #0,R4
      simplexC.c   635        Bdisp_PutDisp_DD();
    00000D90 D22E                   MOV.L       L1503+34,R2; _Bdisp_PutDisp_DD
    00000D92 420B                   JSR         @R2
    00000D94 0009                   NOP
      simplexC.c   636        return 0;
      simplexC.c   637    }
    00000D96 914A                   MOV.W       L1503+4,R1 ; H'0294
    00000D98 3F1C                   ADD         R1,R15
    00000D9A 4F26                   LDS.L       @R15+,PR
    00000D9C 000B                   RTS
    00000D9E E000                   MOV         #0,R0
      simplexC.c   638    
      simplexC.c   639    int printRVal(int contsId, struct problemStatement* pS)
    00000DA0              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
                                                           ; used runtime library name:
                                                           ; __stod
    00000DA0 4F22                   STS.L       PR,@-R15
    00000DA2 9042                   MOV.W       L1503,R0   ; H'FD78
      simplexC.c   640    {
      simplexC.c   641        char stroutBasicInfo[128];
      simplexC.c   642        char *uselessSring[128];
      simplexC.c   643        Bdisp_AllClr_DDVRAM();
    00000DA4 D323                   MOV.L       L1503+10,R3; _Bdisp_AllClr_DDVRAM
    00000DA6 3F0C                   ADD         R0,R15
    00000DA8 2F42                   MOV.L       R4,@R15
    00000DAA 430B                   JSR         @R3
    00000DAC 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   644        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    00000DAE 50F1                   MOV.L       @(4,R15),R0
    00000DB0 63F2                   MOV.L       @R15,R3
    00000DB2 73FF                   ADD         #-1,R3
    00000DB4 5005                   MOV.L       @(20,R0),R0
    00000DB6 4308                   SHLL2       R3
    00000DB8 D225                   MOV.L       L1503+38,R2; __stod
    00000DBA 003E                   MOV.L       @(R0,R3),R0
    00000DBC 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DBE 420B                   JSR         @R2
    00000DC0 2FF6                   MOV.L       R15,@-R15
    00000DC2 53F2                   MOV.L       @(8,R15),R3
    00000DC4 D223                   MOV.L       L1503+42,R2; L643
    00000DC6 2F36                   MOV.L       R3,@-R15
    00000DC8 2F26                   MOV.L       R2,@-R15
    00000DCA 9431                   MOV.W       L1503+6,R4 ; H'0218
    00000DCC D31B                   MOV.L       L1503+18,R3; _sprintf
    00000DCE 430B                   JSR         @R3
    00000DD0 34FC                   ADD         R15,R4
      simplexC.c   645        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000DD2 E710                   MOV         #16,R7
    00000DD4 962C                   MOV.W       L1503+6,R6 ; H'0218
    00000DD6 E500                   MOV         #0,R5
    00000DD8 D219                   MOV.L       L1503+22,R2; _PrintMini
    00000DDA 36FC                   ADD         R15,R6
    00000DDC 420B                   JSR         @R2
    00000DDE 6453                   MOV         R5,R4
      simplexC.c   646        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000DE0 D618                   MOV.L       L1503+26,R6; L591
    00000DE2 E507                   MOV         #7,R5
    00000DE4 D316                   MOV.L       L1503+22,R3; _PrintMini
    00000DE6 E710                   MOV         #16,R7
    00000DE8 430B                   JSR         @R3
    00000DEA E400                   MOV         #0,R4
      simplexC.c   647        string_input(0, 14, uselessSring);
    00000DEC D216                   MOV.L       L1503+30,R2; _string_input
    00000DEE 66F3                   MOV         R15,R6
    00000DF0 7618                   ADD         #24,R6
    00000DF2 E50E                   MOV         #14,R5
    00000DF4 420B                   JSR         @R2
    00000DF6 E400                   MOV         #0,R4
      simplexC.c   648        Bdisp_PutDisp_DD();
    00000DF8 D314                   MOV.L       L1503+34,R3; _Bdisp_PutDisp_DD
    00000DFA 430B                   JSR         @R3
    00000DFC 0009                   NOP
      simplexC.c   649        return 0;
      simplexC.c   650    }
    00000DFE 9118                   MOV.W       L1503+8,R1 ; H'0298
    00000E00 3F1C                   ADD         R1,R15
    00000E02 4F26                   LDS.L       @R15+,PR
    00000E04 000B                   RTS
    00000E06 E000                   MOV         #0,R0
      simplexC.c   651    
      simplexC.c   652    
      simplexC.c   653    int printInfoConstraint(int contsId, struct problemStatement* pS)
    00000E08              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    00000E08 2FE6                   MOV.L       R14,@-R15
    00000E0A 2FD6                   MOV.L       R13,@-R15
    00000E0C 2FC6                   MOV.L       R12,@-R15
      simplexC.c   654    {
      simplexC.c   655        char stroutBasicInfo[128];
      simplexC.c   656        int menuChoice;
      simplexC.c   657        menuChoice=INITIALIZE_VALUE_OPT;
    00000E0E EDFF                   MOV         #-1,R13
    00000E10 DE0B                   MOV.L       L1503+22,R14; _PrintMini




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E12 6C43                   MOV         R4,R12
    00000E14 2FB6                   MOV.L       R11,@-R15
    00000E16 6B53                   MOV         R5,R11
    00000E18 2FA6                   MOV.L       R10,@-R15
    00000E1A 2F96                   MOV.L       R9,@-R15
    00000E1C 2F86                   MOV.L       R8,@-R15
    00000E1E 4F22                   STS.L       PR,@-R15
    00000E20 D80D                   MOV.L       L1503+46,R8; L651
    00000E22 7F80                   ADD         #-128,R15
    00000E24 D905                   MOV.L       L1503+18,R9; _sprintf
      simplexC.c   658        while(menuChoice!=EXIT_OPT)
    00000E26 A058                   BRA         L1288
    00000E28 6AF3                   MOV         R15,R10
    00000E2A              L1503:                            
    00000E2A FD78                   .DATA.W     H'FD78
    00000E2C 0214                   .DATA.W     H'0214
    00000E2E 0294                   .DATA.W     H'0294
    00000E30 0218                   .DATA.W     H'0218
    00000E32 0298                   .DATA.W     H'0298
    00000E34 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000E38 <00000000>             .DATA.L     L636
    00000E3C <00000000>             .DATA.L     _sprintf
    00000E40 <00000000>             .DATA.L     _PrintMini
    00000E44 <00000000>             .DATA.L     L591
    00000E48 <00000000>             .DATA.L     _string_input
    00000E4C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000E50 <00000000>             .DATA.L     __stod
    00000E54 <00000000>             .DATA.L     L643
    00000E58 <00000000>             .DATA.L     L651
    00000E5C              L1289:                            
      simplexC.c   659        {
      simplexC.c   660            Bdisp_AllClr_DDVRAM();
    00000E5C D22F                   MOV.L       L1504+4,R2 ; _Bdisp_AllClr_DDVRAM
    00000E5E 420B                   JSR         @R2
    00000E60 0009                   NOP
      simplexC.c   661            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    00000E62 E300                   MOV         #0,R3
    00000E64 2F36                   MOV.L       R3,@-R15
    00000E66 2FC6                   MOV.L       R12,@-R15
    00000E68 2F86                   MOV.L       R8,@-R15
    00000E6A 490B                   JSR         @R9
    00000E6C 64A3                   MOV         R10,R4
    00000E6E 7F0C                   ADD         #12,R15
      simplexC.c   662            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000E70 E710                   MOV         #16,R7
    00000E72 66A3                   MOV         R10,R6
    00000E74 E500                   MOV         #0,R5
    00000E76 4E0B                   JSR         @R14
    00000E78 6453                   MOV         R5,R4
      simplexC.c   663            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    00000E7A E710                   MOV         #16,R7
    00000E7C D628                   MOV.L       L1504+8,R6 ; L652
    00000E7E E507                   MOV         #7,R5
    00000E80 4E0B                   JSR         @R14
    00000E82 E400                   MOV         #0,R4
      simplexC.c   664            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000E84 D627                   MOV.L       L1504+12,R6; L653




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E86 E50E                   MOV         #14,R5
    00000E88 E710                   MOV         #16,R7
    00000E8A 4E0B                   JSR         @R14
    00000E8C E400                   MOV         #0,R4
      simplexC.c   665            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);
    00000E8E E710                   MOV         #16,R7
    00000E90 D625                   MOV.L       L1504+16,R6; L654
    00000E92 E515                   MOV         #21,R5
    00000E94 4E0B                   JSR         @R14
    00000E96 E400                   MOV         #0,R4
      simplexC.c   666            menuChoice = InputI(0, 28);
    00000E98 E51C                   MOV         #28,R5
    00000E9A B8C8                   BSR         _InputI
    00000E9C E400                   MOV         #0,R4
      simplexC.c   667            Bdisp_PutDisp_DD();
    00000E9E D323                   MOV.L       L1504+20,R3; _Bdisp_PutDisp_DD
    00000EA0 430B                   JSR         @R3
    00000EA2 6D03                   MOV         R0,R13
      simplexC.c   668            if(menuChoice!=EXIT_OPT && menuChoice<=3)
    00000EA4 2DD8                   TST         R13,R13
    00000EA6 8918                   BT          L1288
    00000EA8 E303                   MOV         #3,R3
    00000EAA 3D37                   CMP/GT      R3,R13
    00000EAC 8915                   BT          L1288
      simplexC.c   669            {
      simplexC.c   670                switch (menuChoice)
    00000EAE 60D3                   MOV         R13,R0
    00000EB0 8801                   CMP/EQ      #1,R0
    00000EB2 8905                   BT          L1073
    00000EB4 8802                   CMP/EQ      #2,R0
    00000EB6 8908                   BT          L1074
    00000EB8 8803                   CMP/EQ      #3,R0
    00000EBA 890B                   BT          L1075
    00000EBC A00D                   BRA         L1288
    00000EBE 0009                   NOP
    00000EC0              L1073:                           ; case label 
      simplexC.c   671                {
      simplexC.c   672                case 1: printVariablesProblemStatement(contsId,pS);break;
    00000EC0 65B3                   MOV         R11,R5
    00000EC2 BE71                   BSR         _printVariablesProblemStatement
    00000EC4 64C3                   MOV         R12,R4
    00000EC6 A008                   BRA         L1288
    00000EC8 0009                   NOP
    00000ECA              L1074:                           ; case label 
      simplexC.c   673                case 2: printIne(contsId,pS);break;
    00000ECA 65B3                   MOV         R11,R5
    00000ECC BF36                   BSR         _printIne
    00000ECE 64C3                   MOV         R12,R4
    00000ED0 A003                   BRA         L1288
    00000ED2 0009                   NOP
    00000ED4              L1075:                           ; case label 
      simplexC.c   674                case 3: printRVal(contsId,pS);break;
    00000ED4 65B3                   MOV         R11,R5
    00000ED6 BF63                   BSR         _printRVal
    00000ED8 64C3                   MOV         R12,R4
      simplexC.c   675                default: break;
    00000EDA              L1288:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EDA 2DD8                   TST         R13,R13
    00000EDC 8BBE                   BF          L1289
      simplexC.c   676                }
      simplexC.c   677            }
      simplexC.c   678        }
      simplexC.c   679        return 0;
    00000EDE E000                   MOV         #0,R0
      simplexC.c   680    }
    00000EE0 911A                   MOV.W       L1504,R1   ; H'0080
    00000EE2 3F1C                   ADD         R1,R15
    00000EE4 4F26                   LDS.L       @R15+,PR
    00000EE6 68F6                   MOV.L       @R15+,R8
    00000EE8 69F6                   MOV.L       @R15+,R9
    00000EEA 6AF6                   MOV.L       @R15+,R10
    00000EEC 6BF6                   MOV.L       @R15+,R11
    00000EEE 6CF6                   MOV.L       @R15+,R12
    00000EF0 6DF6                   MOV.L       @R15+,R13
    00000EF2 000B                   RTS
    00000EF4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   681    
      simplexC.c   682    int printAllConstraintsMenu(struct problemStatement* pS)
    00000EF6              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    00000EF6 2FE6                   MOV.L       R14,@-R15
    00000EF8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   683    {
      simplexC.c   684        char stroutBasicInfo[128];
      simplexC.c   685        int menuChoice;
      simplexC.c   686        menuChoice=INITIALIZE_VALUE_OPT;
    00000EFA EEFF                   MOV         #-1,R14
    00000EFC 2FC6                   MOV.L       R12,@-R15
    00000EFE 6D43                   MOV         R4,R13
    00000F00 2FB6                   MOV.L       R11,@-R15
    00000F02 2FA6                   MOV.L       R10,@-R15
    00000F04 2F96                   MOV.L       R9,@-R15
    00000F06 2F86                   MOV.L       R8,@-R15
    00000F08 4F22                   STS.L       PR,@-R15
    00000F0A 7F80                   ADD         #-128,R15
    00000F0C D808                   MOV.L       L1504+24,R8; _PrintMini
    00000F0E D909                   MOV.L       L1504+28,R9; _sprintf
    00000F10 DA09                   MOV.L       L1504+32,R10; L663
    00000F12 DB02                   MOV.L       L1504+4,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   687        while(menuChoice!=EXIT_OPT)
    00000F14 A02F                   BRA         L1293
    00000F16 6CF3                   MOV         R15,R12
    00000F18              L1504:                            
    00000F18 0080                   .DATA.W     H'0080
    00000F1A 0000                   .DATA.W     0
    00000F1C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000F20 <00000000>             .DATA.L     L652
    00000F24 <00000000>             .DATA.L     L653
    00000F28 <00000000>             .DATA.L     L654
    00000F2C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000F30 <00000000>             .DATA.L     _PrintMini
    00000F34 <00000000>             .DATA.L     _sprintf
    00000F38 <00000000>             .DATA.L     L663
    00000F3C              L1294:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   688        {
      simplexC.c   689            Bdisp_AllClr_DDVRAM();
    00000F3C 4B0B                   JSR         @R11
    00000F3E 0009                   NOP
      simplexC.c   690            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);
    00000F40 E200                   MOV         #0,R2
    00000F42 2F26                   MOV.L       R2,@-R15
    00000F44 53DB                   MOV.L       @(44,R13),R3
    00000F46 2F36                   MOV.L       R3,@-R15
    00000F48 2FA6                   MOV.L       R10,@-R15
    00000F4A 490B                   JSR         @R9
    00000F4C 64C3                   MOV         R12,R4
    00000F4E 7F0C                   ADD         #12,R15
      simplexC.c   691            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000F50 E710                   MOV         #16,R7
    00000F52 66C3                   MOV         R12,R6
    00000F54 E500                   MOV         #0,R5
    00000F56 480B                   JSR         @R8
    00000F58 6453                   MOV         R5,R4
      simplexC.c   692            menuChoice = InputI(0, 7);
    00000F5A E507                   MOV         #7,R5
    00000F5C B867                   BSR         _InputI
    00000F5E E400                   MOV         #0,R4
      simplexC.c   693            Bdisp_PutDisp_DD();
    00000F60 D32B                   MOV.L       L1505+10,R3; _Bdisp_PutDisp_DD
    00000F62 430B                   JSR         @R3
    00000F64 6E03                   MOV         R0,R14
      simplexC.c   694            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000F66 2EE8                   TST         R14,R14
    00000F68 8905                   BT          L1293
    00000F6A 53DB                   MOV.L       @(44,R13),R3
    00000F6C 3E37                   CMP/GT      R3,R14
    00000F6E 8902                   BT          L1293
      simplexC.c   695            {
      simplexC.c   696                printInfoConstraint(menuChoice,pS);
    00000F70 65D3                   MOV         R13,R5
    00000F72 BF49                   BSR         _printInfoConstraint
    00000F74 64E3                   MOV         R14,R4
    00000F76              L1293:                            
    00000F76 2EE8                   TST         R14,R14
    00000F78 8BE0                   BF          L1294
      simplexC.c   697            }
      simplexC.c   698        }
      simplexC.c   699        return 0;
    00000F7A E000                   MOV         #0,R0
      simplexC.c   700    }
    00000F7C 9143                   MOV.W       L1505,R1   ; H'0080
    00000F7E 3F1C                   ADD         R1,R15
    00000F80 4F26                   LDS.L       @R15+,PR
    00000F82 68F6                   MOV.L       @R15+,R8
    00000F84 69F6                   MOV.L       @R15+,R9
    00000F86 6AF6                   MOV.L       @R15+,R10
    00000F88 6BF6                   MOV.L       @R15+,R11
    00000F8A 6CF6                   MOV.L       @R15+,R12
    00000F8C 6DF6                   MOV.L       @R15+,R13
    00000F8E 000B                   RTS
    00000F90 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   701    
      simplexC.c   702    int printStatementMenu(struct problemStatement* pS)
    00000F92              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
      simplexC.c   703    {
      simplexC.c   704        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   705        int menuChoice;
      simplexC.c   706        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   707        sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"S
                         +OLVE", EXIT_OPT);
    00000F92 E300                   MOV         #0,R3
    00000F94 2FE6                   MOV.L       R14,@-R15
    00000F96 6E43                   MOV         R4,R14
    00000F98 2FD6                   MOV.L       R13,@-R15
    00000F9A 2FC6                   MOV.L       R12,@-R15
    00000F9C 2FB6                   MOV.L       R11,@-R15
    00000F9E 2FA6                   MOV.L       R10,@-R15
    00000FA0 2F96                   MOV.L       R9,@-R15
    00000FA2 2F86                   MOV.L       R8,@-R15
    00000FA4 4F22                   STS.L       PR,@-R15
    00000FA6 902F                   MOV.W       L1505+2,R0 ; H'FE80
    00000FA8 DD1A                   MOV.L       L1505+14,R13; _sprintf
    00000FAA 3F0C                   ADD         R0,R15
    00000FAC 9A2D                   MOV.W       L1505+4,R10; H'0100
    00000FAE 3AFC                   ADD         R15,R10
    00000FB0 2F36                   MOV.L       R3,@-R15
    00000FB2 50E1                   MOV.L       @(4,R14),R0
    00000FB4 8801                   CMP/EQ      #1,R0
    00000FB6 8F03                   BF/S        L1297
    00000FB8 ECFF                   MOV         #-1,R12
    00000FBA D117                   MOV.L       L1505+18,R1; L578
    00000FBC A002                   BRA         L1298
    00000FBE 2F16                   MOV.L       R1,@-R15
    00000FC0              L1297:                            
    00000FC0 D216                   MOV.L       L1505+22,R2; L579
    00000FC2 2F26                   MOV.L       R2,@-R15
    00000FC4              L1298:                            
    00000FC4 D116                   MOV.L       L1505+26,R1; L672
    00000FC6 2F16                   MOV.L       R1,@-R15
    00000FC8 4D0B                   JSR         @R13
    00000FCA 64A3                   MOV         R10,R4
      simplexC.c   708        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000FCC 991E                   MOV.W       L1505+6,R9 ; H'008C
    00000FCE 39FC                   ADD         R15,R9
    00000FD0 53E7                   MOV.L       @(28,R14),R3
    00000FD2 2F36                   MOV.L       R3,@-R15
    00000FD4 52EB                   MOV.L       @(44,R14),R2
    00000FD6 2F26                   MOV.L       R2,@-R15
    00000FD8 D312                   MOV.L       L1505+30,R3; L580
    00000FDA 2F36                   MOV.L       R3,@-R15
    00000FDC 4D0B                   JSR         @R13
    00000FDE 6493                   MOV         R9,R4
    00000FE0 7F18                   ADD         #24,R15
      simplexC.c   709    
      simplexC.c   710        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000FE2 50E1                   MOV.L       @(4,R14),R0
    00000FE4 8802                   CMP/EQ      #2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FE6 8F06                   BF/S        L1299
    00000FE8 6BF3                   MOV         R15,R11
    00000FEA 53E2                   MOV.L       @(8,R14),R3
    00000FEC 2338                   TST         R3,R3
    00000FEE 8902                   BT          L1299
      simplexC.c   711        {
      simplexC.c   712            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000FF0 D30D                   MOV.L       L1505+34,R3; L674
    00000FF2 A001                   BRA         L1491
    00000FF4 0009                   NOP
    00000FF6              L1299:                            
      simplexC.c   713        }else
      simplexC.c   714        {
      simplexC.c   715            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000FF6 D30D                   MOV.L       L1505+38,R3; L676
    00000FF8              L1491:                            
    00000FF8 2F36                   MOV.L       R3,@-R15
    00000FFA 4D0B                   JSR         @R13
    00000FFC 64B3                   MOV         R11,R4
    00000FFE D80C                   MOV.L       L1505+42,R8; _Bdisp_AllClr_DDVRAM
    00001000 DD0C                   MOV.L       L1505+46,R13; _PrintMini
      simplexC.c   716        }
      simplexC.c   717        
      simplexC.c   718        while(menuChoice!=EXIT_OPT)
    00001002 A05F                   BRA         L1301
    00001004 7F04                   ADD         #4,R15
    00001006              L1505:                            
    00001006 0080                   .DATA.W     H'0080
    00001008 FE80                   .DATA.W     H'FE80
    0000100A 0100                   .DATA.W     H'0100
    0000100C 008C                   .DATA.W     H'008C
    0000100E 0000                   .DATA.W     0
    00001010 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001014 <00000000>             .DATA.L     _sprintf
    00001018 <00000000>             .DATA.L     L578
    0000101C <00000000>             .DATA.L     L579
    00001020 <00000000>             .DATA.L     L672
    00001024 <00000000>             .DATA.L     L580
    00001028 <00000000>             .DATA.L     L674
    0000102C <00000000>             .DATA.L     L676
    00001030 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001034 <00000000>             .DATA.L     _PrintMini
    00001038              L1302:                            
      simplexC.c   719        {
      simplexC.c   720            Bdisp_AllClr_DDVRAM();
    00001038 480B                   JSR         @R8
    0000103A 0009                   NOP
      simplexC.c   721            
      simplexC.c   722            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    0000103C E710                   MOV         #16,R7
    0000103E 66A3                   MOV         R10,R6
    00001040 E500                   MOV         #0,R5
    00001042 4D0B                   JSR         @R13
    00001044 6453                   MOV         R5,R4
      simplexC.c   723            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001046 E710                   MOV         #16,R7
    00001048 6693                   MOV         R9,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000104A E507                   MOV         #7,R5
    0000104C 4D0B                   JSR         @R13
    0000104E E400                   MOV         #0,R4
      simplexC.c   724            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    00001050 D630                   MOV.L       L1506+8,R6 ; L678
    00001052 E50E                   MOV         #14,R5
    00001054 E710                   MOV         #16,R7
    00001056 4D0B                   JSR         @R13
    00001058 E400                   MOV         #0,R4
      simplexC.c   725            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    0000105A E710                   MOV         #16,R7
    0000105C 66B3                   MOV         R11,R6
    0000105E E515                   MOV         #21,R5
    00001060 4D0B                   JSR         @R13
    00001062 E400                   MOV         #0,R4
      simplexC.c   726            if(pS->modelType==TYPE_SOLVE)
    00001064 50E1                   MOV.L       @(4,R14),R0
    00001066 8802                   CMP/EQ      #2,R0
    00001068 8B04                   BF          L1303
      simplexC.c   727            {
      simplexC.c   728                PrintMini(0, 28, (unsigned char*)"4 Pinfo aj vec", MINI_OVER);
    0000106A E710                   MOV         #16,R7
    0000106C D62A                   MOV.L       L1506+12,R6; L680
    0000106E E51C                   MOV         #28,R5
    00001070 4D0B                   JSR         @R13
    00001072 E400                   MOV         #0,R4
    00001074              L1303:                            
      simplexC.c   729            }
      simplexC.c   730            menuChoice = InputI(0, 35);
    00001074 D229                   MOV.L       L1506+16,R2; _InputI
    00001076 E523                   MOV         #35,R5
    00001078 420B                   JSR         @R2
    0000107A E400                   MOV         #0,R4
      simplexC.c   731            Bdisp_PutDisp_DD();
    0000107C D328                   MOV.L       L1506+20,R3; _Bdisp_PutDisp_DD
    0000107E 430B                   JSR         @R3
    00001080 6C03                   MOV         R0,R12
      simplexC.c   732            switch (menuChoice)
    00001082 60C3                   MOV         R12,R0
    00001084 8801                   CMP/EQ      #1,R0
    00001086 8907                   BT          L1083
    00001088 8802                   CMP/EQ      #2,R0
    0000108A 8909                   BT          L1084
    0000108C 8803                   CMP/EQ      #3,R0
    0000108E 890C                   BT          L1085
    00001090 8804                   CMP/EQ      #4,R0
    00001092 8912                   BT          L1086
    00001094 A016                   BRA         L1301
    00001096 0009                   NOP
    00001098              L1083:                           ; case label 
      simplexC.c   733            {
      simplexC.c   734            case 1: printAllConstraintsMenu(pS);break;
    00001098 BF2D                   BSR         _printAllConstraintsMenu
    0000109A 64E3                   MOV         R14,R4
    0000109C A012                   BRA         L1301
    0000109E 0009                   NOP
    000010A0              L1084:                           ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   735            case 2: printObjFunc(pS,TYPE_INPUT);break;
    000010A0 E501                   MOV         #1,R5
    000010A2 BBD7                   BSR         _printObjFunc
    000010A4 64E3                   MOV         R14,R4
    000010A6 A00D                   BRA         L1301
    000010A8 0009                   NOP
    000010AA              L1085:                           ; case label 
      simplexC.c   736            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    000010AA 50E1                   MOV.L       @(4,R14),R0
    000010AC 8802                   CMP/EQ      #2,R0
    000010AE 8B09                   BF          L1301
    000010B0 E502                   MOV         #2,R5
    000010B2 BBCF                   BSR         _printObjFunc
    000010B4 64E3                   MOV         R14,R4
    000010B6 A005                   BRA         L1301
    000010B8 0009                   NOP
    000010BA              L1086:                           ; case label 
      simplexC.c   737            case 4: if(pS->modelType==TYPE_SOLVE){printAjVec();};break;
    000010BA 50E1                   MOV.L       @(4,R14),R0
    000010BC 8802                   CMP/EQ      #2,R0
    000010BE 8B01                   BF          L1301
    000010C0 BD36                   BSR         _printAjVec
    000010C2 0009                   NOP
      simplexC.c   738            default: break;
    000010C4              L1301:                            
    000010C4 2CC8                   TST         R12,R12
    000010C6 8BB7                   BF          L1302
      simplexC.c   739            }
      simplexC.c   740        }
      simplexC.c   741        return 0;
      simplexC.c   742    }
    000010C8 9120                   MOV.W       L1506,R1   ; H'0180
    000010CA E000                   MOV         #0,R0
    000010CC 3F1C                   ADD         R1,R15
    000010CE 4F26                   LDS.L       @R15+,PR
    000010D0 68F6                   MOV.L       @R15+,R8
    000010D2 69F6                   MOV.L       @R15+,R9
    000010D4 6AF6                   MOV.L       @R15+,R10
    000010D6 6BF6                   MOV.L       @R15+,R11
    000010D8 6CF6                   MOV.L       @R15+,R12
    000010DA 6DF6                   MOV.L       @R15+,R13
    000010DC 000B                   RTS
    000010DE 6EF6                   MOV.L       @R15+,R14
      simplexC.c   743    
      simplexC.c   744    int printCtVecByIt(int itId)
    000010E0              _printCtVecByIt:                 ; function: printCtVecByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    000010E0 2FE6                   MOV.L       R14,@-R15
      simplexC.c   745    {
      simplexC.c   746        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   747        int menuChoice;
      simplexC.c   748        char *uselessSring[128];
      simplexC.c   749        menuChoice=INITIALIZE_VALUE_OPT;
    000010E2 EEFF                   MOV         #-1,R14
    000010E4 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010E6 2FC6                   MOV.L       R12,@-R15
    000010E8 2FB6                   MOV.L       R11,@-R15
    000010EA 6B43                   MOV         R4,R11
    000010EC 9C11                   MOV.W       L1506+6,R12; H'0204
    000010EE 4B08                   SHLL2       R11
    000010F0 DD0E                   MOV.L       L1506+32,R13; _PrintMini
    000010F2 2FA6                   MOV.L       R10,@-R15
    000010F4 2F96                   MOV.L       R9,@-R15
    000010F6 2F86                   MOV.L       R8,@-R15
    000010F8 4F22                   STS.L       PR,@-R15
    000010FA 9008                   MOV.W       L1506+2,R0 ; H'FCFC
    000010FC D809                   MOV.L       L1506+24,R8; _ex
    000010FE 3F0C                   ADD         R0,R15
    00001100 D909                   MOV.L       L1506+28,R9; _sprintf
    00001102 2F42                   MOV.L       R4,@R15
    00001104 9A04                   MOV.W       L1506+4,R10; H'0284
    00001106 3AFC                   ADD         R15,R10
      simplexC.c   750        while(menuChoice!=EXIT_OPT)
    00001108 A05F                   BRA         L1308
    0000110A 3CFC                   ADD         R15,R12
    0000110C              L1506:                            
    0000110C 0180                   .DATA.W     H'0180
    0000110E FCFC                   .DATA.W     H'FCFC
    00001110 0284                   .DATA.W     H'0284
    00001112 0204                   .DATA.W     H'0204
    00001114 <00000000>             .DATA.L     L678
    00001118 <00000000>             .DATA.L     L680
    0000111C <00000000>             .DATA.L     _InputI
    00001120 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001124 <00000000>             .DATA.L     _ex
    00001128 <00000000>             .DATA.L     _sprintf
    0000112C <00000000>             .DATA.L     _PrintMini
    00001130              L1309:                            
      simplexC.c   751        {
      simplexC.c   752            Bdisp_AllClr_DDVRAM();
    00001130 D23A                   MOV.L       L1507+10,R2; _Bdisp_AllClr_DDVRAM
    00001132 420B                   JSR         @R2
    00001134 0009                   NOP
      simplexC.c   753            sprintf(stroutBasicInfo, "Ct itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT
                         +);
    00001136 E300                   MOV         #0,R3
    00001138 2F36                   MOV.L       R3,@-R15
    0000113A 5085                   MOV.L       @(20,R8),R0
    0000113C 02BE                   MOV.L       @(R0,R11),R2
    0000113E 5129                   MOV.L       @(36,R2),R1
    00001140 D237                   MOV.L       L1507+14,R2; L692
    00001142 2F16                   MOV.L       R1,@-R15
    00001144 50F2                   MOV.L       @(8,R15),R0
    00001146 2F06                   MOV.L       R0,@-R15
    00001148 2F26                   MOV.L       R2,@-R15
    0000114A 490B                   JSR         @R9
    0000114C 64A3                   MOV         R10,R4
    0000114E 7F10                   ADD         #16,R15
      simplexC.c   754            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001150 E710                   MOV         #16,R7
    00001152 66A3                   MOV         R10,R6
    00001154 E500                   MOV         #0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001156 4D0B                   JSR         @R13
    00001158 6453                   MOV         R5,R4
      simplexC.c   755            menuChoice = InputI(0, 7);
    0000115A E507                   MOV         #7,R5
    0000115C D331                   MOV.L       L1507+18,R3; _InputI
    0000115E 430B                   JSR         @R3
    00001160 E400                   MOV         #0,R4
      simplexC.c   756            Bdisp_PutDisp_DD();
    00001162 D231                   MOV.L       L1507+22,R2; _Bdisp_PutDisp_DD
    00001164 420B                   JSR         @R2
    00001166 6E03                   MOV         R0,R14
      simplexC.c   757            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001168 2EE8                   TST         R14,R14
    0000116A 8929                   BT          L1310
    0000116C D22F                   MOV.L       L1507+26,R2; H'00000014+_ex
    0000116E 6022                   MOV.L       @R2,R0
    00001170 03BE                   MOV.L       @(R0,R11),R3
    00001172 5139                   MOV.L       @(36,R3),R1
    00001174 3E17                   CMP/GT      R1,R14
    00001176 8923                   BT          L1310
      simplexC.c   758            {
      simplexC.c   759                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->ct[menuChoice-1]);
    00001178 5085                   MOV.L       @(20,R8),R0
    0000117A 63E3                   MOV         R14,R3
    0000117C D22C                   MOV.L       L1507+30,R2; __stod
    0000117E 73FF                   ADD         #-1,R3
    00001180 00BE                   MOV.L       @(R0,R11),R0
    00001182 4308                   SHLL2       R3
    00001184 500A                   MOV.L       @(40,R0),R0
    00001186 003E                   MOV.L       @(R0,R3),R0
    00001188 7FF8                   ADD         #-8,R15
    0000118A 420B                   JSR         @R2
    0000118C 2FF6                   MOV.L       R15,@-R15
    0000118E 2FE6                   MOV.L       R14,@-R15
    00001190 D328                   MOV.L       L1507+34,R3; L694
    00001192 2F36                   MOV.L       R3,@-R15
    00001194 490B                   JSR         @R9
    00001196 64C3                   MOV         R12,R4
    00001198 7F10                   ADD         #16,R15
      simplexC.c   760                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    0000119A E710                   MOV         #16,R7
    0000119C 66C3                   MOV         R12,R6
    0000119E E50E                   MOV         #14,R5
    000011A0 4D0B                   JSR         @R13
    000011A2 E400                   MOV         #0,R4
      simplexC.c   761                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000011A4 D624                   MOV.L       L1507+38,R6; L591
    000011A6 E515                   MOV         #21,R5
    000011A8 E710                   MOV         #16,R7
    000011AA 4D0B                   JSR         @R13
    000011AC E400                   MOV         #0,R4
      simplexC.c   762                string_input(0, 28, uselessSring);
    000011AE 66F3                   MOV         R15,R6
    000011B0 D222                   MOV.L       L1507+42,R2; _string_input
    000011B2 E51C                   MOV         #28,R5
    000011B4 7604                   ADD         #4,R6
    000011B6 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011B8 E400                   MOV         #0,R4
      simplexC.c   763                Bdisp_PutDisp_DD();
    000011BA D31B                   MOV.L       L1507+22,R3; _Bdisp_PutDisp_DD
    000011BC 430B                   JSR         @R3
    000011BE 0009                   NOP
    000011C0              L1310:                            
      simplexC.c   764            }
      simplexC.c   765            memset(stroutBasicInfo2,0,128);
    000011C0 9627                   MOV.W       L1507,R6   ; H'0080
    000011C2 E500                   MOV         #0,R5
    000011C4 D21E                   MOV.L       L1507+46,R2; _memset
    000011C6 420B                   JSR         @R2
    000011C8 64C3                   MOV         R12,R4
    000011CA              L1308:                            
    000011CA 2EE8                   TST         R14,R14
    000011CC 8BB0                   BF          L1309
      simplexC.c   766        }
      simplexC.c   767        return 0;
    000011CE E000                   MOV         #0,R0
      simplexC.c   768    }
    000011D0 9120                   MOV.W       L1507+2,R1 ; H'0304
    000011D2 3F1C                   ADD         R1,R15
    000011D4 4F26                   LDS.L       @R15+,PR
    000011D6 68F6                   MOV.L       @R15+,R8
    000011D8 69F6                   MOV.L       @R15+,R9
    000011DA 6AF6                   MOV.L       @R15+,R10
    000011DC 6BF6                   MOV.L       @R15+,R11
    000011DE 6CF6                   MOV.L       @R15+,R12
    000011E0 6DF6                   MOV.L       @R15+,R13
    000011E2 000B                   RTS
    000011E4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   769    
      simplexC.c   770    
      simplexC.c   771    int printXbByIt(int itId)
    000011E6              _printXbByIt:                    ; function: printXbByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    000011E6 2FE6                   MOV.L       R14,@-R15
    000011E8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   772    {
      simplexC.c   773        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   774        int menuChoice;
      simplexC.c   775        char *uselessSring[128];
      simplexC.c   776        menuChoice=INITIALIZE_VALUE_OPT;
    000011EA EEFF                   MOV         #-1,R14
    000011EC 9013                   MOV.W       L1507+4,R0 ; H'FCFC
    000011EE 2FC6                   MOV.L       R12,@-R15
    000011F0 2FB6                   MOV.L       R11,@-R15
    000011F2 6B43                   MOV         R4,R11
    000011F4 9C11                   MOV.W       L1507+8,R12; H'0204
    000011F6 4B08                   SHLL2       R11
    000011F8 DD14                   MOV.L       L1507+58,R13; _PrintMini
    000011FA 2FA6                   MOV.L       R10,@-R15
    000011FC 2F96                   MOV.L       R9,@-R15
    000011FE 2F86                   MOV.L       R8,@-R15
    00001200 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001202 3F0C                   ADD         R0,R15
    00001204 D80F                   MOV.L       L1507+50,R8; _ex
    00001206 2F42                   MOV.L       R4,@R15
    00001208 D90F                   MOV.L       L1507+54,R9; _sprintf
    0000120A 9A05                   MOV.W       L1507+6,R10; H'0284
    0000120C 3AFC                   ADD         R15,R10
      simplexC.c   777        while(menuChoice!=EXIT_OPT)
    0000120E A06C                   BRA         L1312
    00001210 3CFC                   ADD         R15,R12
    00001212              L1507:                            
    00001212 0080                   .DATA.W     H'0080
    00001214 0304                   .DATA.W     H'0304
    00001216 FCFC                   .DATA.W     H'FCFC
    00001218 0284                   .DATA.W     H'0284
    0000121A 0204                   .DATA.W     H'0204
    0000121C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001220 <00000000>             .DATA.L     L692
    00001224 <00000000>             .DATA.L     _InputI
    00001228 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000122C <00000014>             .DATA.L     H'00000014+_ex
    00001230 <00000000>             .DATA.L     __stod
    00001234 <00000000>             .DATA.L     L694
    00001238 <00000000>             .DATA.L     L591
    0000123C <00000000>             .DATA.L     _string_input
    00001240 <00000000>             .DATA.L     _memset
    00001244 <00000000>             .DATA.L     _ex
    00001248 <00000000>             .DATA.L     _sprintf
    0000124C <00000000>             .DATA.L     _PrintMini
    00001250              L1313:                            
      simplexC.c   778        {
      simplexC.c   779            Bdisp_AllClr_DDVRAM();
    00001250 D250                   MOV.L       L1508+14,R2; _Bdisp_AllClr_DDVRAM
    00001252 420B                   JSR         @R2
    00001254 0009                   NOP
      simplexC.c   780            sprintf(stroutBasicInfo, "Xb itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT
                         +);
    00001256 E300                   MOV         #0,R3
    00001258 2F36                   MOV.L       R3,@-R15
    0000125A 5085                   MOV.L       @(20,R8),R0
    0000125C 02BE                   MOV.L       @(R0,R11),R2
    0000125E 5129                   MOV.L       @(36,R2),R1
    00001260 D24D                   MOV.L       L1508+18,R2; L703
    00001262 2F16                   MOV.L       R1,@-R15
    00001264 50F2                   MOV.L       @(8,R15),R0
    00001266 2F06                   MOV.L       R0,@-R15
    00001268 2F26                   MOV.L       R2,@-R15
    0000126A 490B                   JSR         @R9
    0000126C 64A3                   MOV         R10,R4
    0000126E 7F10                   ADD         #16,R15
      simplexC.c   781            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001270 E710                   MOV         #16,R7
    00001272 66A3                   MOV         R10,R6
    00001274 E500                   MOV         #0,R5
    00001276 4D0B                   JSR         @R13
    00001278 6453                   MOV         R5,R4
      simplexC.c   782            menuChoice = InputI(0, 7);
    0000127A E507                   MOV         #7,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000127C D347                   MOV.L       L1508+22,R3; _InputI
    0000127E 430B                   JSR         @R3
    00001280 E400                   MOV         #0,R4
      simplexC.c   783            Bdisp_PutDisp_DD();
    00001282 D247                   MOV.L       L1508+26,R2; _Bdisp_PutDisp_DD
    00001284 420B                   JSR         @R2
    00001286 6E03                   MOV         R0,R14
      simplexC.c   784            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001288 2EE8                   TST         R14,R14
    0000128A 8929                   BT          L1314
    0000128C D245                   MOV.L       L1508+30,R2; H'00000014+_ex
    0000128E 6022                   MOV.L       @R2,R0
    00001290 03BE                   MOV.L       @(R0,R11),R3
    00001292 5139                   MOV.L       @(36,R3),R1
    00001294 3E17                   CMP/GT      R1,R14
    00001296 8923                   BT          L1314
      simplexC.c   785            {
      simplexC.c   786                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->xb[menuChoice-1]);
    00001298 5085                   MOV.L       @(20,R8),R0
    0000129A 63E3                   MOV         R14,R3
    0000129C D242                   MOV.L       L1508+34,R2; __stod
    0000129E 73FF                   ADD         #-1,R3
    000012A0 00BE                   MOV.L       @(R0,R11),R0
    000012A2 4308                   SHLL2       R3
    000012A4 500B                   MOV.L       @(44,R0),R0
    000012A6 003E                   MOV.L       @(R0,R3),R0
    000012A8 7FF8                   ADD         #-8,R15
    000012AA 420B                   JSR         @R2
    000012AC 2FF6                   MOV.L       R15,@-R15
    000012AE 2FE6                   MOV.L       R14,@-R15
    000012B0 D33E                   MOV.L       L1508+38,R3; L694
    000012B2 2F36                   MOV.L       R3,@-R15
    000012B4 490B                   JSR         @R9
    000012B6 64C3                   MOV         R12,R4
    000012B8 7F10                   ADD         #16,R15
      simplexC.c   787                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000012BA E710                   MOV         #16,R7
    000012BC 66C3                   MOV         R12,R6
    000012BE E50E                   MOV         #14,R5
    000012C0 4D0B                   JSR         @R13
    000012C2 E400                   MOV         #0,R4
      simplexC.c   788                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000012C4 D63A                   MOV.L       L1508+42,R6; L591
    000012C6 E515                   MOV         #21,R5
    000012C8 E710                   MOV         #16,R7
    000012CA 4D0B                   JSR         @R13
    000012CC E400                   MOV         #0,R4
      simplexC.c   789                string_input(0, 28, uselessSring);
    000012CE 66F3                   MOV         R15,R6
    000012D0 D238                   MOV.L       L1508+46,R2; _string_input
    000012D2 E51C                   MOV         #28,R5
    000012D4 7604                   ADD         #4,R6
    000012D6 420B                   JSR         @R2
    000012D8 E400                   MOV         #0,R4
      simplexC.c   790                Bdisp_PutDisp_DD();
    000012DA D331                   MOV.L       L1508+26,R3; _Bdisp_PutDisp_DD
    000012DC 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012DE 0009                   NOP
    000012E0              L1314:                            
      simplexC.c   791            }
      simplexC.c   792            memset(stroutBasicInfo2,0,128);
    000012E0 9651                   MOV.W       L1508,R6   ; H'0080
    000012E2 E500                   MOV         #0,R5
    000012E4 D234                   MOV.L       L1508+50,R2; _memset
    000012E6 420B                   JSR         @R2
    000012E8 64C3                   MOV         R12,R4
    000012EA              L1312:                            
    000012EA 2EE8                   TST         R14,R14
    000012EC 8BB0                   BF          L1313
      simplexC.c   793        }
      simplexC.c   794        return 0;
    000012EE E000                   MOV         #0,R0
      simplexC.c   795    }
    000012F0 914A                   MOV.W       L1508+2,R1 ; H'0304
    000012F2 3F1C                   ADD         R1,R15
    000012F4 4F26                   LDS.L       @R15+,PR
    000012F6 68F6                   MOV.L       @R15+,R8
    000012F8 69F6                   MOV.L       @R15+,R9
    000012FA 6AF6                   MOV.L       @R15+,R10
    000012FC 6BF6                   MOV.L       @R15+,R11
    000012FE 6CF6                   MOV.L       @R15+,R12
    00001300 6DF6                   MOV.L       @R15+,R13
    00001302 000B                   RTS
    00001304 6EF6                   MOV.L       @R15+,R14
      simplexC.c   796    
      simplexC.c   797    int printYandXbDivYByIt(int itId)
    00001306              _printYandXbDivYByIt:            ; function: printYandXbDivYByIt
                                                           ; frame size=968
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   798    {
      simplexC.c   799        char stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128];
      simplexC.c   800        int menuChoice,menuChoice2;
      simplexC.c   801        char *uselessSring[128];
      simplexC.c   802        sprintf(stroutBasicInfo, "Y & xb/y itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_O
                         +PT);
    00001306 E300                   MOV         #0,R3
    00001308 D226                   MOV.L       L1508+30,R2; H'00000014+_ex
    0000130A 2FE6                   MOV.L       R14,@-R15
    0000130C 2FD6                   MOV.L       R13,@-R15
    0000130E 2FC6                   MOV.L       R12,@-R15
    00001310 2FB6                   MOV.L       R11,@-R15
    00001312 2FA6                   MOV.L       R10,@-R15
    00001314 2F96                   MOV.L       R9,@-R15
    00001316 2F86                   MOV.L       R8,@-R15
    00001318 4F22                   STS.L       PR,@-R15
    0000131A 9036                   MOV.W       L1508+4,R0 ; H'FC74
    0000131C D927                   MOV.L       L1508+54,R9; _sprintf
    0000131E 3F0C                   ADD         R0,R15
    00001320 2F42                   MOV.L       R4,@R15
    00001322 2F36                   MOV.L       R3,@-R15
    00001324 5BF1                   MOV.L       @(4,R15),R11
    00001326 4B08                   SHLL2       R11
    00001328 6022                   MOV.L       @R2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000132A 01BE                   MOV.L       @(R0,R11),R1
    0000132C 942E                   MOV.W       L1508+6,R4 ; H'031C
    0000132E 5019                   MOV.L       @(36,R1),R0
    00001330 2F06                   MOV.L       R0,@-R15
    00001332 51F2                   MOV.L       @(8,R15),R1
    00001334 2F16                   MOV.L       R1,@-R15
    00001336 D122                   MOV.L       L1508+58,R1; L714
    00001338 2F16                   MOV.L       R1,@-R15
    0000133A 490B                   JSR         @R9
    0000133C 34FC                   ADD         R15,R4
      simplexC.c   803        if(ex.nodes.its[itId]->idVarIn==-1)
    0000133E D319                   MOV.L       L1508+30,R3; H'00000014+_ex
    00001340 6032                   MOV.L       @R3,R0
    00001342 00BE                   MOV.L       @(R0,R11),R0
    00001344 5005                   MOV.L       @(20,R0),R0
    00001346 88FF                   CMP/EQ      #-1,R0
    00001348 8F07                   BF/S        L1316
    0000134A 7F10                   ADD         #16,R15
      simplexC.c   804        {
      simplexC.c   805            sprintf(stroutBasicInfo2, "No VarIn and VarOut");
    0000134C D11D                   MOV.L       L1508+62,R1; L716
    0000134E 2F16                   MOV.L       R1,@-R15
    00001350 941D                   MOV.W       L1508+8,R4 ; H'0290
    00001352 490B                   JSR         @R9
    00001354 34FC                   ADD         R15,R4
    00001356 A011                   BRA         L1317
    00001358 7F04                   ADD         #4,R15
    0000135A              L1316:                            
      simplexC.c   806    
      simplexC.c   807        }else
      simplexC.c   808        {
      simplexC.c   809            sprintf(stroutBasicInfo2, "IdVarIn: %d, IdVarOut %d",ex.nodes.its[itId]->idVarIn+1,ex.nodes.its[it
                         +Id]->idVarOut+1);
    0000135A D212                   MOV.L       L1508+30,R2; H'00000014+_ex
    0000135C 9418                   MOV.W       L1508+10,R4; H'0298
    0000135E 6022                   MOV.L       @R2,R0
    00001360 01BE                   MOV.L       @(R0,R11),R1
    00001362 2F12                   MOV.L       R1,@R15
    00001364 5316                   MOV.L       @(24,R1),R3
    00001366 7301                   ADD         #1,R3
    00001368 2F36                   MOV.L       R3,@-R15
    0000136A 51F1                   MOV.L       @(4,R15),R1
    0000136C 5315                   MOV.L       @(20,R1),R3
    0000136E 7301                   ADD         #1,R3
    00001370 2F36                   MOV.L       R3,@-R15
    00001372 D115                   MOV.L       L1508+66,R1; L718
    00001374 2F16                   MOV.L       R1,@-R15
    00001376 490B                   JSR         @R9
    00001378 34FC                   ADD         R15,R4
    0000137A 7F0C                   ADD         #12,R15
    0000137C              L1317:                            
    0000137C 9C09                   MOV.W       L1508+12,R12; H'020C
      simplexC.c   810        }
      simplexC.c   811        
      simplexC.c   812        menuChoice=INITIALIZE_VALUE_OPT;
    0000137E EDFF                   MOV         #-1,R13
    00001380 DE12                   MOV.L       L1508+70,R14; _PrintMini




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   813        menuChoice2=INITIALIZE_VALUE_OPT;
      simplexC.c   814        while(menuChoice!=EXIT_OPT)
    00001382 A0A9                   BRA         L1318
    00001384 3CFC                   ADD         R15,R12
    00001386              L1508:                            
    00001386 0080                   .DATA.W     H'0080
    00001388 0304                   .DATA.W     H'0304
    0000138A FC74                   .DATA.W     H'FC74
    0000138C 031C                   .DATA.W     H'031C
    0000138E 0290                   .DATA.W     H'0290
    00001390 0298                   .DATA.W     H'0298
    00001392 020C                   .DATA.W     H'020C
    00001394 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001398 <00000000>             .DATA.L     L703
    0000139C <00000000>             .DATA.L     _InputI
    000013A0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000013A4 <00000014>             .DATA.L     H'00000014+_ex
    000013A8 <00000000>             .DATA.L     __stod
    000013AC <00000000>             .DATA.L     L694
    000013B0 <00000000>             .DATA.L     L591
    000013B4 <00000000>             .DATA.L     _string_input
    000013B8 <00000000>             .DATA.L     _memset
    000013BC <00000000>             .DATA.L     _sprintf
    000013C0 <00000000>             .DATA.L     L714
    000013C4 <00000000>             .DATA.L     L716
    000013C8 <00000000>             .DATA.L     L718
    000013CC <00000000>             .DATA.L     _PrintMini
    000013D0              L1319:                            
      simplexC.c   815        {
      simplexC.c   816            Bdisp_AllClr_DDVRAM();
    000013D0 D24B                   MOV.L       L1509+8,R2 ; _Bdisp_AllClr_DDVRAM
    000013D2 420B                   JSR         @R2
    000013D4 0009                   NOP
      simplexC.c   817            
      simplexC.c   818            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000013D6 E710                   MOV         #16,R7
    000013D8 968E                   MOV.W       L1509,R6   ; H'030C
    000013DA E500                   MOV         #0,R5
    000013DC 36FC                   ADD         R15,R6
    000013DE 4E0B                   JSR         @R14
    000013E0 6453                   MOV         R5,R4
      simplexC.c   819            PrintMini(0, 7, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000013E2 E710                   MOV         #16,R7
    000013E4 9689                   MOV.W       L1509+2,R6 ; H'028C
    000013E6 E507                   MOV         #7,R5
    000013E8 36FC                   ADD         R15,R6
    000013EA 4E0B                   JSR         @R14
    000013EC E400                   MOV         #0,R4
      simplexC.c   820            PrintMini(0, 14, (unsigned char*)"Var:", MINI_OVER);
    000013EE E710                   MOV         #16,R7
    000013F0 D644                   MOV.L       L1509+12,R6; L720
    000013F2 E50E                   MOV         #14,R5
    000013F4 4E0B                   JSR         @R14
    000013F6 E400                   MOV         #0,R4
      simplexC.c   821            PrintMini(0, 21, (unsigned char*)"Pos:", MINI_OVER);
    000013F8 D643                   MOV.L       L1509+16,R6; L721
    000013FA E515                   MOV         #21,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013FC E710                   MOV         #16,R7
    000013FE 4E0B                   JSR         @R14
    00001400 E400                   MOV         #0,R4
      simplexC.c   822    
      simplexC.c   823            menuChoice = InputI(28, 14);
    00001402 E50E                   MOV         #14,R5
    00001404 D341                   MOV.L       L1509+20,R3; _InputI
    00001406 430B                   JSR         @R3
    00001408 E41C                   MOV         #28,R4
    0000140A 6D03                   MOV         R0,R13
      simplexC.c   824            menuChoice2 = InputI(28, 21);
    0000140C D23F                   MOV.L       L1509+20,R2; _InputI
    0000140E E515                   MOV         #21,R5
    00001410 420B                   JSR         @R2
    00001412 E41C                   MOV         #28,R4
      simplexC.c   825            Bdisp_PutDisp_DD();
    00001414 D33E                   MOV.L       L1509+24,R3; _Bdisp_PutDisp_DD
    00001416 430B                   JSR         @R3
    00001418 6A03                   MOV         R0,R10
      simplexC.c   826            if(menuChoice!=EXIT_OPT && menuChoice2!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    0000141A 2DD8                   TST         R13,R13
    0000141C 8957                   BT          L1320
    0000141E 2AA8                   TST         R10,R10
    00001420 8955                   BT          L1320
    00001422 D23C                   MOV.L       L1509+28,R2; H'00000014+_ex
    00001424 6022                   MOV.L       @R2,R0
    00001426 03BE                   MOV.L       @(R0,R11),R3
    00001428 5139                   MOV.L       @(36,R3),R1
    0000142A 3D17                   CMP/GT      R1,R13
    0000142C 894F                   BT          L1320
    0000142E 68D3                   MOV         R13,R8
    00001430 D338                   MOV.L       L1509+28,R3; H'00000014+_ex
    00001432 61A3                   MOV         R10,R1
    00001434 6232                   MOV.L       @R3,R2
    00001436 78FF                   ADD         #-1,R8
    00001438 1F21                   MOV.L       R2,@(4,R15)
    0000143A 71FF                   ADD         #-1,R1
    0000143C 4108                   SHLL2       R1
    0000143E 2F12                   MOV.L       R1,@R15
    00001440 50F1                   MOV.L       @(4,R15),R0
    00001442 03BE                   MOV.L       @(R0,R11),R3
    00001444 5235                   MOV.L       @(20,R3),R2
    00001446 3820                   CMP/EQ      R2,R8
    00001448 8B1C                   BF          L1321
      simplexC.c   827            {
      simplexC.c   828                if(menuChoice-1==ex.nodes.its[itId]->idVarIn)
      simplexC.c   829                {
      simplexC.c   830                    sprintf(stroutBasicInfo3, "Var:%d.Pos:%d:Y:%.2f xb/y:%.2f",menuChoice,menuChoice2,ex.nodes
                         +.its[itId]->yj[menuChoice-1][menuChoice2-1],ex.nodes.its[itId]->xbDivYj[menuChoice2-1]);
    0000144A E140                   MOV         #64,R1
    0000144C D232                   MOV.L       L1509+32,R2; __stod
    0000144E 50F1                   MOV.L       @(4,R15),R0
    00001450 00BE                   MOV.L       @(R0,R11),R0
    00001452 1F02                   MOV.L       R0,@(8,R15)
    00001454 63F2                   MOV.L       @R15,R3
    00001456 001E                   MOV.L       @(R0,R1),R0
    00001458 003E                   MOV.L       @(R0,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000145A 7FF8                   ADD         #-8,R15
    0000145C 420B                   JSR         @R2
    0000145E 2FF6                   MOV.L       R15,@-R15
    00001460 50F4                   MOV.L       @(16,R15),R0
    00001462 4808                   SHLL2       R8
    00001464 53F2                   MOV.L       @(8,R15),R3
    00001466 500F                   MOV.L       @(60,R0),R0
    00001468 D22B                   MOV.L       L1509+32,R2; __stod
    0000146A 008E                   MOV.L       @(R0,R8),R0
    0000146C 003E                   MOV.L       @(R0,R3),R0
    0000146E 7FF8                   ADD         #-8,R15
    00001470 420B                   JSR         @R2
    00001472 2FF6                   MOV.L       R15,@-R15
    00001474 2FA6                   MOV.L       R10,@-R15
    00001476 2FD6                   MOV.L       R13,@-R15
    00001478 D028                   MOV.L       L1509+36,R0; L724
    0000147A 2F06                   MOV.L       R0,@-R15
    0000147C 490B                   JSR         @R9
    0000147E 64C3                   MOV         R12,R4
    00001480 A012                   BRA         L1322
    00001482 7F1C                   ADD         #28,R15
    00001484              L1321:                            
      simplexC.c   831                }else
      simplexC.c   832                {
      simplexC.c   833                    sprintf(stroutBasicInfo3, "Var:%d.Pos %d:Y:%.2f xb/y: NDisp",menuChoice,menuChoice2,ex.nod
                         +es.its[itId]->yj[menuChoice-1][menuChoice2-1]);
    00001484 50F1                   MOV.L       @(4,R15),R0
    00001486 4808                   SHLL2       R8
    00001488 63F2                   MOV.L       @R15,R3
    0000148A 00BE                   MOV.L       @(R0,R11),R0
    0000148C D222                   MOV.L       L1509+32,R2; __stod
    0000148E 500F                   MOV.L       @(60,R0),R0
    00001490 008E                   MOV.L       @(R0,R8),R0
    00001492 003E                   MOV.L       @(R0,R3),R0
    00001494 7FF8                   ADD         #-8,R15
    00001496 420B                   JSR         @R2
    00001498 2FF6                   MOV.L       R15,@-R15
    0000149A 2FA6                   MOV.L       R10,@-R15
    0000149C 2FD6                   MOV.L       R13,@-R15
    0000149E D120                   MOV.L       L1509+40,R1; L726
    000014A0 2F16                   MOV.L       R1,@-R15
    000014A2 490B                   JSR         @R9
    000014A4 64C3                   MOV         R12,R4
    000014A6 7F14                   ADD         #20,R15
    000014A8              L1322:                            
      simplexC.c   834                }
      simplexC.c   835                
      simplexC.c   836                PrintMini(0,28,(unsigned char*) stroutBasicInfo3,MINI_OVER);
    000014A8 E710                   MOV         #16,R7
    000014AA 66C3                   MOV         R12,R6
    000014AC E51C                   MOV         #28,R5
    000014AE 4E0B                   JSR         @R14
    000014B0 E400                   MOV         #0,R4
      simplexC.c   837                PrintMini(0, 35, (unsigned char*)"Press any key to continue", MINI_OVER);
    000014B2 E710                   MOV         #16,R7
    000014B4 D61B                   MOV.L       L1509+44,R6; L591
    000014B6 E523                   MOV         #35,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014B8 4E0B                   JSR         @R14
    000014BA E400                   MOV         #0,R4
      simplexC.c   838                string_input(0, 42, uselessSring);
    000014BC D31A                   MOV.L       L1509+48,R3; _string_input
    000014BE 66F3                   MOV         R15,R6
    000014C0 760C                   ADD         #12,R6
    000014C2 E52A                   MOV         #42,R5
    000014C4 430B                   JSR         @R3
    000014C6 E400                   MOV         #0,R4
      simplexC.c   839                Bdisp_PutDisp_DD();
    000014C8 D211                   MOV.L       L1509+24,R2; _Bdisp_PutDisp_DD
    000014CA 420B                   JSR         @R2
    000014CC 0009                   NOP
    000014CE              L1320:                            
      simplexC.c   840            }
      simplexC.c   841            memset(stroutBasicInfo3,0,128);
    000014CE E500                   MOV         #0,R5
    000014D0 D316                   MOV.L       L1509+52,R3; _memset
    000014D2 9613                   MOV.W       L1509+4,R6 ; H'0080
    000014D4 430B                   JSR         @R3
    000014D6 64C3                   MOV         R12,R4
    000014D8              L1318:                            
    000014D8 2DD8                   TST         R13,R13
    000014DA 8901                   BT          L1510
    000014DC AF78                   BRA         L1319
    000014DE 0009                   NOP
    000014E0              L1510:                            
      simplexC.c   842        }
      simplexC.c   843        return 0;
      simplexC.c   844    }
    000014E0 910D                   MOV.W       L1509+6,R1 ; H'038C
    000014E2 E000                   MOV         #0,R0
    000014E4 3F1C                   ADD         R1,R15
    000014E6 4F26                   LDS.L       @R15+,PR
    000014E8 68F6                   MOV.L       @R15+,R8
    000014EA 69F6                   MOV.L       @R15+,R9
    000014EC 6AF6                   MOV.L       @R15+,R10
    000014EE 6BF6                   MOV.L       @R15+,R11
    000014F0 6CF6                   MOV.L       @R15+,R12
    000014F2 6DF6                   MOV.L       @R15+,R13
    000014F4 000B                   RTS
    000014F6 6EF6                   MOV.L       @R15+,R14
    000014F8              L1509:                            
    000014F8 030C                   .DATA.W     H'030C
    000014FA 028C                   .DATA.W     H'028C
    000014FC 0080                   .DATA.W     H'0080
    000014FE 038C                   .DATA.W     H'038C
    00001500 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001504 <00000000>             .DATA.L     L720
    00001508 <00000000>             .DATA.L     L721
    0000150C <00000000>             .DATA.L     _InputI
    00001510 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001514 <00000014>             .DATA.L     H'00000014+_ex
    00001518 <00000000>             .DATA.L     __stod
    0000151C <00000000>             .DATA.L     L724
    00001520 <00000000>             .DATA.L     L726
    00001524 <00000000>             .DATA.L     L591




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001528 <00000000>             .DATA.L     _string_input
    0000152C <00000000>             .DATA.L     _memset
      simplexC.c   845    
      simplexC.c   846    
      simplexC.c   847    int printCtBinvByIt(int itId)
    00001530              _printCtBinvByIt:                ; function: printCtBinvByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    00001530 2FE6                   MOV.L       R14,@-R15
      simplexC.c   848    {
      simplexC.c   849        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   850        int menuChoice;
      simplexC.c   851        char *uselessSring[128];
      simplexC.c   852        menuChoice=INITIALIZE_VALUE_OPT;
    00001532 EEFF                   MOV         #-1,R14
    00001534 2FD6                   MOV.L       R13,@-R15
    00001536 2FC6                   MOV.L       R12,@-R15
    00001538 2FB6                   MOV.L       R11,@-R15
    0000153A 6B43                   MOV         R4,R11
    0000153C 9C81                   MOV.W       L1511+4,R12; H'0204
    0000153E 4B08                   SHLL2       R11
    00001540 DD43                   MOV.L       L1511+18,R13; _PrintMini
    00001542 2FA6                   MOV.L       R10,@-R15
    00001544 2F96                   MOV.L       R9,@-R15
    00001546 2F86                   MOV.L       R8,@-R15
    00001548 4F22                   STS.L       PR,@-R15
    0000154A 9078                   MOV.W       L1511,R0   ; H'FCFC
    0000154C D83E                   MOV.L       L1511+10,R8; _ex
    0000154E 3F0C                   ADD         R0,R15
    00001550 D93E                   MOV.L       L1511+14,R9; _sprintf
    00001552 2F42                   MOV.L       R4,@R15
    00001554 9A74                   MOV.W       L1511+2,R10; H'0284
    00001556 3AFC                   ADD         R15,R10
      simplexC.c   853        while(menuChoice!=EXIT_OPT)
    00001558 A04D                   BRA         L1324
    0000155A 3CFC                   ADD         R15,R12
    0000155C              L1325:                            
      simplexC.c   854        {
      simplexC.c   855            Bdisp_AllClr_DDVRAM();
    0000155C D23D                   MOV.L       L1511+22,R2; _Bdisp_AllClr_DDVRAM
    0000155E 420B                   JSR         @R2
    00001560 0009                   NOP
      simplexC.c   856            sprintf(stroutBasicInfo, "CtBinv itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT
                         +_OPT);
    00001562 E300                   MOV         #0,R3
    00001564 2F36                   MOV.L       R3,@-R15
    00001566 5085                   MOV.L       @(20,R8),R0
    00001568 02BE                   MOV.L       @(R0,R11),R2
    0000156A 5129                   MOV.L       @(36,R2),R1
    0000156C D23A                   MOV.L       L1511+26,R2; L735
    0000156E 2F16                   MOV.L       R1,@-R15
    00001570 50F2                   MOV.L       @(8,R15),R0
    00001572 2F06                   MOV.L       R0,@-R15
    00001574 2F26                   MOV.L       R2,@-R15
    00001576 490B                   JSR         @R9
    00001578 64A3                   MOV         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000157A 7F10                   ADD         #16,R15
      simplexC.c   857            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000157C E710                   MOV         #16,R7
    0000157E 66A3                   MOV         R10,R6
    00001580 E500                   MOV         #0,R5
    00001582 4D0B                   JSR         @R13
    00001584 6453                   MOV         R5,R4
      simplexC.c   858            menuChoice = InputI(0, 7);
    00001586 E507                   MOV         #7,R5
    00001588 D334                   MOV.L       L1511+30,R3; _InputI
    0000158A 430B                   JSR         @R3
    0000158C E400                   MOV         #0,R4
      simplexC.c   859            Bdisp_PutDisp_DD();
    0000158E D234                   MOV.L       L1511+34,R2; _Bdisp_PutDisp_DD
    00001590 420B                   JSR         @R2
    00001592 6E03                   MOV         R0,R14
      simplexC.c   860            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001594 2EE8                   TST         R14,R14
    00001596 8929                   BT          L1326
    00001598 D232                   MOV.L       L1511+38,R2; H'00000014+_ex
    0000159A 6022                   MOV.L       @R2,R0
    0000159C 03BE                   MOV.L       @(R0,R11),R3
    0000159E 5139                   MOV.L       @(36,R3),R1
    000015A0 3E17                   CMP/GT      R1,R14
    000015A2 8923                   BT          L1326
      simplexC.c   861            {
      simplexC.c   862                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->ctBinv[menuChoice-1]);
    000015A4 5085                   MOV.L       @(20,R8),R0
    000015A6 63E3                   MOV         R14,R3
    000015A8 D22F                   MOV.L       L1511+42,R2; __stod
    000015AA 73FF                   ADD         #-1,R3
    000015AC 00BE                   MOV.L       @(R0,R11),R0
    000015AE 4308                   SHLL2       R3
    000015B0 500C                   MOV.L       @(48,R0),R0
    000015B2 003E                   MOV.L       @(R0,R3),R0
    000015B4 7FF8                   ADD         #-8,R15
    000015B6 420B                   JSR         @R2
    000015B8 2FF6                   MOV.L       R15,@-R15
    000015BA 2FE6                   MOV.L       R14,@-R15
    000015BC D32B                   MOV.L       L1511+46,R3; L694
    000015BE 2F36                   MOV.L       R3,@-R15
    000015C0 490B                   JSR         @R9
    000015C2 64C3                   MOV         R12,R4
    000015C4 7F10                   ADD         #16,R15
      simplexC.c   863                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000015C6 E710                   MOV         #16,R7
    000015C8 66C3                   MOV         R12,R6
    000015CA E50E                   MOV         #14,R5
    000015CC 4D0B                   JSR         @R13
    000015CE E400                   MOV         #0,R4
      simplexC.c   864                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000015D0 D627                   MOV.L       L1511+50,R6; L591
    000015D2 E515                   MOV         #21,R5
    000015D4 E710                   MOV         #16,R7
    000015D6 4D0B                   JSR         @R13
    000015D8 E400                   MOV         #0,R4
      simplexC.c   865                string_input(0, 28, uselessSring);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015DA 66F3                   MOV         R15,R6
    000015DC D225                   MOV.L       L1511+54,R2; _string_input
    000015DE E51C                   MOV         #28,R5
    000015E0 7604                   ADD         #4,R6
    000015E2 420B                   JSR         @R2
    000015E4 E400                   MOV         #0,R4
      simplexC.c   866                Bdisp_PutDisp_DD();
    000015E6 D31E                   MOV.L       L1511+34,R3; _Bdisp_PutDisp_DD
    000015E8 430B                   JSR         @R3
    000015EA 0009                   NOP
    000015EC              L1326:                            
      simplexC.c   867            }
      simplexC.c   868            memset(stroutBasicInfo2,0,128);
    000015EC 962A                   MOV.W       L1511+6,R6 ; H'0080
    000015EE E500                   MOV         #0,R5
    000015F0 D221                   MOV.L       L1511+58,R2; _memset
    000015F2 420B                   JSR         @R2
    000015F4 64C3                   MOV         R12,R4
    000015F6              L1324:                            
    000015F6 2EE8                   TST         R14,R14
    000015F8 8BB0                   BF          L1325
      simplexC.c   869        }
      simplexC.c   870        return 0;
    000015FA E000                   MOV         #0,R0
      simplexC.c   871    }
    000015FC 9123                   MOV.W       L1511+8,R1 ; H'0304
    000015FE 3F1C                   ADD         R1,R15
    00001600 4F26                   LDS.L       @R15+,PR
    00001602 68F6                   MOV.L       @R15+,R8
    00001604 69F6                   MOV.L       @R15+,R9
    00001606 6AF6                   MOV.L       @R15+,R10
    00001608 6BF6                   MOV.L       @R15+,R11
    0000160A 6CF6                   MOV.L       @R15+,R12
    0000160C 6DF6                   MOV.L       @R15+,R13
    0000160E 000B                   RTS
    00001610 6EF6                   MOV.L       @R15+,R14
      simplexC.c   872    
      simplexC.c   873    int printBasicVarsBbyIt(int itId)
    00001612              _printBasicVarsBbyIt:            ; function: printBasicVarsBbyIt
                                                           ; frame size=820
    00001612 2FE6                   MOV.L       R14,@-R15
    00001614 2FD6                   MOV.L       R13,@-R15
      simplexC.c   874    {
      simplexC.c   875        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   876        int menuChoice;
      simplexC.c   877        char *uselessSring[128];
      simplexC.c   878        menuChoice=INITIALIZE_VALUE_OPT;
    00001616 EEFF                   MOV         #-1,R14
    00001618 9011                   MOV.W       L1511,R0   ; H'FCFC
    0000161A 2FC6                   MOV.L       R12,@-R15
    0000161C 2FB6                   MOV.L       R11,@-R15
    0000161E 6B43                   MOV         R4,R11
    00001620 9C0F                   MOV.W       L1511+4,R12; H'0204
    00001622 4B08                   SHLL2       R11
    00001624 DD0A                   MOV.L       L1511+18,R13; _PrintMini
    00001626 2FA6                   MOV.L       R10,@-R15
    00001628 2F96                   MOV.L       R9,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000162A 2F86                   MOV.L       R8,@-R15
    0000162C 4F22                   STS.L       PR,@-R15
    0000162E 3F0C                   ADD         R0,R15
    00001630 D805                   MOV.L       L1511+10,R8; _ex
    00001632 2F42                   MOV.L       R4,@R15
    00001634 D905                   MOV.L       L1511+14,R9; _sprintf
    00001636 9A03                   MOV.W       L1511+2,R10; H'0284
    00001638 3AFC                   ADD         R15,R10
      simplexC.c   879        while(menuChoice!=EXIT_OPT)
    0000163A A06A                   BRA         L1328
    0000163C 3CFC                   ADD         R15,R12
    0000163E              L1511:                            
    0000163E FCFC                   .DATA.W     H'FCFC
    00001640 0284                   .DATA.W     H'0284
    00001642 0204                   .DATA.W     H'0204
    00001644 0080                   .DATA.W     H'0080
    00001646 0304                   .DATA.W     H'0304
    00001648 <00000000>             .DATA.L     _ex
    0000164C <00000000>             .DATA.L     _sprintf
    00001650 <00000000>             .DATA.L     _PrintMini
    00001654 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001658 <00000000>             .DATA.L     L735
    0000165C <00000000>             .DATA.L     _InputI
    00001660 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001664 <00000014>             .DATA.L     H'00000014+_ex
    00001668 <00000000>             .DATA.L     __stod
    0000166C <00000000>             .DATA.L     L694
    00001670 <00000000>             .DATA.L     L591
    00001674 <00000000>             .DATA.L     _string_input
    00001678 <00000000>             .DATA.L     _memset
    0000167C              L1329:                            
      simplexC.c   880        {
      simplexC.c   881            Bdisp_AllClr_DDVRAM();
    0000167C D245                   MOV.L       L1512+16,R2; _Bdisp_AllClr_DDVRAM
    0000167E 420B                   JSR         @R2
    00001680 0009                   NOP
      simplexC.c   882            sprintf(stroutBasicInfo, "BVars itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_
                         +OPT);
    00001682 E300                   MOV         #0,R3
    00001684 2F36                   MOV.L       R3,@-R15
    00001686 5085                   MOV.L       @(20,R8),R0
    00001688 02BE                   MOV.L       @(R0,R11),R2
    0000168A 5129                   MOV.L       @(36,R2),R1
    0000168C D242                   MOV.L       L1512+20,R2; L745
    0000168E 2F16                   MOV.L       R1,@-R15
    00001690 50F2                   MOV.L       @(8,R15),R0
    00001692 2F06                   MOV.L       R0,@-R15
    00001694 2F26                   MOV.L       R2,@-R15
    00001696 490B                   JSR         @R9
    00001698 64A3                   MOV         R10,R4
    0000169A 7F10                   ADD         #16,R15
      simplexC.c   883            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000169C E710                   MOV         #16,R7
    0000169E 66A3                   MOV         R10,R6
    000016A0 E500                   MOV         #0,R5
    000016A2 4D0B                   JSR         @R13
    000016A4 6453                   MOV         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   884            menuChoice = InputI(0, 7);
    000016A6 E507                   MOV         #7,R5
    000016A8 D33C                   MOV.L       L1512+24,R3; _InputI
    000016AA 430B                   JSR         @R3
    000016AC E400                   MOV         #0,R4
      simplexC.c   885            Bdisp_PutDisp_DD();
    000016AE D23C                   MOV.L       L1512+28,R2; _Bdisp_PutDisp_DD
    000016B0 420B                   JSR         @R2
    000016B2 6E03                   MOV         R0,R14
      simplexC.c   886            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    000016B4 2EE8                   TST         R14,R14
    000016B6 8927                   BT          L1330
    000016B8 D23A                   MOV.L       L1512+32,R2; H'00000014+_ex
    000016BA 6022                   MOV.L       @R2,R0
    000016BC 03BE                   MOV.L       @(R0,R11),R3
    000016BE 5139                   MOV.L       @(36,R3),R1
    000016C0 3E17                   CMP/GT      R1,R14
    000016C2 8921                   BT          L1330
      simplexC.c   887            {
      simplexC.c   888                sprintf(stroutBasicInfo2, "Pos %d: %d",menuChoice,ex.nodes.its[itId]->idByRowOfBasicVarsInBInv
                         +[menuChoice-1]+1);
    000016C4 5085                   MOV.L       @(20,R8),R0
    000016C6 63E3                   MOV         R14,R3
    000016C8 00BE                   MOV.L       @(R0,R11),R0
    000016CA 73FF                   ADD         #-1,R3
    000016CC 5003                   MOV.L       @(12,R0),R0
    000016CE 4308                   SHLL2       R3
    000016D0 023E                   MOV.L       @(R0,R3),R2
    000016D2 7201                   ADD         #1,R2
    000016D4 2F26                   MOV.L       R2,@-R15
    000016D6 2FE6                   MOV.L       R14,@-R15
    000016D8 D333                   MOV.L       L1512+36,R3; L747
    000016DA 2F36                   MOV.L       R3,@-R15
    000016DC 490B                   JSR         @R9
    000016DE 64C3                   MOV         R12,R4
    000016E0 7F0C                   ADD         #12,R15
      simplexC.c   889                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000016E2 E710                   MOV         #16,R7
    000016E4 66C3                   MOV         R12,R6
    000016E6 E50E                   MOV         #14,R5
    000016E8 4D0B                   JSR         @R13
    000016EA E400                   MOV         #0,R4
      simplexC.c   890                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000016EC D62F                   MOV.L       L1512+40,R6; L591
    000016EE E515                   MOV         #21,R5
    000016F0 E710                   MOV         #16,R7
    000016F2 4D0B                   JSR         @R13
    000016F4 E400                   MOV         #0,R4
      simplexC.c   891                string_input(0, 28, uselessSring);
    000016F6 66F3                   MOV         R15,R6
    000016F8 D22D                   MOV.L       L1512+44,R2; _string_input
    000016FA E51C                   MOV         #28,R5
    000016FC 7604                   ADD         #4,R6
    000016FE 420B                   JSR         @R2
    00001700 E400                   MOV         #0,R4
      simplexC.c   892                Bdisp_PutDisp_DD();
    00001702 D327                   MOV.L       L1512+28,R3; _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001704 430B                   JSR         @R3
    00001706 0009                   NOP
    00001708              L1330:                            
      simplexC.c   893            }
      simplexC.c   894            memset(stroutBasicInfo2,0,128);
    00001708 963C                   MOV.W       L1512,R6   ; H'0080
    0000170A E500                   MOV         #0,R5
    0000170C D229                   MOV.L       L1512+48,R2; _memset
    0000170E 420B                   JSR         @R2
    00001710 64C3                   MOV         R12,R4
    00001712              L1328:                            
    00001712 2EE8                   TST         R14,R14
    00001714 8BB2                   BF          L1329
      simplexC.c   895        }
      simplexC.c   896        return 0;
    00001716 E000                   MOV         #0,R0
      simplexC.c   897    }
    00001718 9135                   MOV.W       L1512+2,R1 ; H'0304
    0000171A 3F1C                   ADD         R1,R15
    0000171C 4F26                   LDS.L       @R15+,PR
    0000171E 68F6                   MOV.L       @R15+,R8
    00001720 69F6                   MOV.L       @R15+,R9
    00001722 6AF6                   MOV.L       @R15+,R10
    00001724 6BF6                   MOV.L       @R15+,R11
    00001726 6CF6                   MOV.L       @R15+,R12
    00001728 6DF6                   MOV.L       @R15+,R13
    0000172A 000B                   RTS
    0000172C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   898    
      simplexC.c   899    int printResVariables()
    0000172E              _printResVariables:              ; function: printResVariables
                                                           ; frame size=1084
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   900    {
      simplexC.c   901        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutVariable[128];
      simplexC.c   902        char *uselessSring[128];
      simplexC.c   903        int menuChoice,i,idBasicVar;
      simplexC.c   904        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   905        sprintf(stroutTop,"Var res, printMenu. Exit %d", EXIT_OPT);
    0000172E E300                   MOV         #0,R3
    00001730 D222                   MOV.L       L1512+56,R2; L758
    00001732 2FE6                   MOV.L       R14,@-R15
    00001734 2FD6                   MOV.L       R13,@-R15
    00001736 EDFF                   MOV         #-1,R13
    00001738 9427                   MOV.W       L1512+6,R4 ; H'038C
    0000173A 2FC6                   MOV.L       R12,@-R15
    0000173C 2FB6                   MOV.L       R11,@-R15
    0000173E 2FA6                   MOV.L       R10,@-R15
    00001740 2F96                   MOV.L       R9,@-R15
    00001742 2F86                   MOV.L       R8,@-R15
    00001744 4F22                   STS.L       PR,@-R15
    00001746 901F                   MOV.W       L1512+4,R0 ; H'FBFC
    00001748 D81B                   MOV.L       L1512+52,R8; _sprintf
    0000174A 3F0C                   ADD         R0,R15
    0000174C 2F36                   MOV.L       R3,@-R15
    0000174E 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001750 480B                   JSR         @R8
    00001752 34FC                   ADD         R15,R4
      simplexC.c   906        sprintf(stroutBasicInfo, "Nvars: %d, NVB: %d",ex.nVariables,ex.nodes.its[ex.nodes.nIterations]->BinvSi
                         +ze);
    00001754 DC1A                   MOV.L       L1512+60,R12; _ex
    00001756 53C4                   MOV.L       @(16,R12),R3
    00001758 50C5                   MOV.L       @(20,R12),R0
    0000175A 4308                   SHLL2       R3
    0000175C 9416                   MOV.W       L1512+8,R4 ; H'0318
    0000175E 023E                   MOV.L       @(R0,R3),R2
    00001760 5129                   MOV.L       @(36,R2),R1
    00001762 2F16                   MOV.L       R1,@-R15
    00001764 53CB                   MOV.L       @(44,R12),R3
    00001766 2F36                   MOV.L       R3,@-R15
    00001768 D216                   MOV.L       L1512+64,R2; L759
    0000176A 2F26                   MOV.L       R2,@-R15
    0000176C 480B                   JSR         @R8
    0000176E 34FC                   ADD         R15,R4
      simplexC.c   907        sprintf(stroutBasicInfo2, "Select a var:");
    00001770 D315                   MOV.L       L1512+68,R3; L760
    00001772 2F36                   MOV.L       R3,@-R15
    00001774 940B                   MOV.W       L1512+10,R4; H'029C
    00001776 480B                   JSR         @R8
    00001778 34FC                   ADD         R15,R4
    0000177A 7F18                   ADD         #24,R15
    0000177C 9A08                   MOV.W       L1512+12,R10; H'0204
    0000177E DE13                   MOV.L       L1512+72,R14; _PrintMini
      simplexC.c   908    
      simplexC.c   909        while(menuChoice!=EXIT_OPT)
    00001780 A094                   BRA         L1332
    00001782 3AFC                   ADD         R15,R10
    00001784              L1512:                            
    00001784 0080                   .DATA.W     H'0080
    00001786 0304                   .DATA.W     H'0304
    00001788 FBFC                   .DATA.W     H'FBFC
    0000178A 038C                   .DATA.W     H'038C
    0000178C 0318                   .DATA.W     H'0318
    0000178E 029C                   .DATA.W     H'029C
    00001790 0204                   .DATA.W     H'0204
    00001792 0000                   .DATA.W     0
    00001794 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001798 <00000000>             .DATA.L     L745
    0000179C <00000000>             .DATA.L     _InputI
    000017A0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000017A4 <00000014>             .DATA.L     H'00000014+_ex
    000017A8 <00000000>             .DATA.L     L747
    000017AC <00000000>             .DATA.L     L591
    000017B0 <00000000>             .DATA.L     _string_input
    000017B4 <00000000>             .DATA.L     _memset
    000017B8 <00000000>             .DATA.L     _sprintf
    000017BC <00000000>             .DATA.L     L758
    000017C0 <00000000>             .DATA.L     _ex
    000017C4 <00000000>             .DATA.L     L759
    000017C8 <00000000>             .DATA.L     L760
    000017CC <00000000>             .DATA.L     _PrintMini
    000017D0              L1333:                            
      simplexC.c   910        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   911            Bdisp_AllClr_DDVRAM();
    000017D0 D34D                   MOV.L       L1513+16,R3; _Bdisp_AllClr_DDVRAM
    000017D2 430B                   JSR         @R3
    000017D4 0009                   NOP
      simplexC.c   912            
      simplexC.c   913            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000017D6 E710                   MOV         #16,R7
    000017D8 968E                   MOV.W       L1513,R6   ; H'0384
    000017DA E500                   MOV         #0,R5
    000017DC 36FC                   ADD         R15,R6
    000017DE 4E0B                   JSR         @R14
    000017E0 6453                   MOV         R5,R4
      simplexC.c   914            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000017E2 E710                   MOV         #16,R7
    000017E4 9689                   MOV.W       L1513+2,R6 ; H'0304
    000017E6 E507                   MOV         #7,R5
    000017E8 36FC                   ADD         R15,R6
    000017EA 4E0B                   JSR         @R14
    000017EC E400                   MOV         #0,R4
      simplexC.c   915            PrintMini(0,14,  (unsigned char *)stroutBasicInfo2, MINI_OVER);
    000017EE E710                   MOV         #16,R7
    000017F0 9684                   MOV.W       L1513+4,R6 ; H'0284
    000017F2 E50E                   MOV         #14,R5
    000017F4 36FC                   ADD         R15,R6
    000017F6 4E0B                   JSR         @R14
    000017F8 E400                   MOV         #0,R4
      simplexC.c   916            menuChoice = InputI(0, 21);
    000017FA E515                   MOV         #21,R5
    000017FC D243                   MOV.L       L1513+20,R2; _InputI
    000017FE 420B                   JSR         @R2
    00001800 E400                   MOV         #0,R4
      simplexC.c   917            Bdisp_PutDisp_DD();
    00001802 D343                   MOV.L       L1513+24,R3; _Bdisp_PutDisp_DD
    00001804 430B                   JSR         @R3
    00001806 6D03                   MOV         R0,R13
      simplexC.c   918            if(menuChoice<=ex.nVariables)
    00001808 52CB                   MOV.L       @(44,R12),R2
    0000180A 3D27                   CMP/GT      R2,R13
    0000180C 8936                   BT          L1334
    0000180E 69D3                   MOV         R13,R9
    00001810 5BC4                   MOV.L       @(16,R12),R11
    00001812 79FF                   ADD         #-1,R9
    00001814 53C5                   MOV.L       @(20,R12),R3
    00001816 4B08                   SHLL2       R11
    00001818 3B3C                   ADD         R3,R11
    0000181A 6393                   MOV         R9,R3
    0000181C 60B2                   MOV.L       @R11,R0
    0000181E 4308                   SHLL2       R3
    00001820 5002                   MOV.L       @(8,R0),R0
    00001822 023E                   MOV.L       @(R0,R3),R2
    00001824 2228                   TST         R2,R2
    00001826 891E                   BT          L1335
      simplexC.c   919            {
      simplexC.c   920                if(ex.nodes.its[ex.nodes.nIterations]->idBasicVariables[menuChoice-1])
      simplexC.c   921                {
      simplexC.c   922                    for(i=0;i<ex.nodes.its[ex.nodes.nIterations]->BinvSize;i++)
    00001828 A009                   BRA         L1336




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000182A E400                   MOV         #0,R4
    0000182C              L1337:                            
      simplexC.c   923                    {
      simplexC.c   924                        if(ex.nodes.its[ex.nodes.nIterations]->idByRowOfBasicVarsInBInv[i]==menuChoice-1)
    0000182C 60B2                   MOV.L       @R11,R0
    0000182E 6343                   MOV         R4,R3
    00001830 5003                   MOV.L       @(12,R0),R0
    00001832 4308                   SHLL2       R3
    00001834 023E                   MOV.L       @(R0,R3),R2
    00001836 3290                   CMP/EQ      R9,R2
    00001838 8B00                   BF          L1338
      simplexC.c   925                        {
      simplexC.c   926                            idBasicVar=i;
    0000183A 2F42                   MOV.L       R4,@R15
    0000183C              L1338:                            
    0000183C 7401                   ADD         #1,R4
    0000183E              L1336:                            
    0000183E 63B2                   MOV.L       @R11,R3
    00001840 5239                   MOV.L       @(36,R3),R2
    00001842 3423                   CMP/GE      R2,R4
    00001844 8BF2                   BF          L1337
      simplexC.c   927                        }
      simplexC.c   928                    }
      simplexC.c   929                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,ex.nodes.its[ex.nodes.nIterations]->xb[idBa
                         +sicVar]);
    00001846 60B2                   MOV.L       @R11,R0
    00001848 63F2                   MOV.L       @R15,R3
    0000184A 4308                   SHLL2       R3
    0000184C 500B                   MOV.L       @(44,R0),R0
    0000184E 003E                   MOV.L       @(R0,R3),R0
    00001850 D230                   MOV.L       L1513+28,R2; __stod
    00001852 7FF8                   ADD         #-8,R15
    00001854 420B                   JSR         @R2
    00001856 2FF6                   MOV.L       R15,@-R15
    00001858 2FD6                   MOV.L       R13,@-R15
    0000185A D32F                   MOV.L       L1513+32,R3; L766
    0000185C 2F36                   MOV.L       R3,@-R15
    0000185E 480B                   JSR         @R8
    00001860 64A3                   MOV         R10,R4
    00001862 A008                   BRA         L1339
    00001864 7F10                   ADD         #16,R15
    00001866              L1335:                            
      simplexC.c   930                }else
      simplexC.c   931                {
      simplexC.c   932                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,0);
    00001866 E300                   MOV         #0,R3
    00001868 D22B                   MOV.L       L1513+32,R2; L766
    0000186A 2F36                   MOV.L       R3,@-R15
    0000186C 2FD6                   MOV.L       R13,@-R15
    0000186E 2F26                   MOV.L       R2,@-R15
    00001870 480B                   JSR         @R8
    00001872 64A3                   MOV         R10,R4
    00001874 7F0C                   ADD         #12,R15
    00001876              L1339:                            
      simplexC.c   933                }
      simplexC.c   934                PrintMini(0,28,(unsigned char*) stroutVariable,MINI_OVER);
    00001876 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001878 A002                   BRA         L1492
    0000187A 66A3                   MOV         R10,R6
    0000187C              L1334:                            
      simplexC.c   935            }else
      simplexC.c   936            {
      simplexC.c   937                PrintMini(0,28,  (unsigned char *)"No var found", MINI_OVER);
    0000187C D627                   MOV.L       L1513+36,R6; L769
    0000187E E710                   MOV         #16,R7
    00001880              L1492:                            
    00001880 E51C                   MOV         #28,R5
    00001882 4E0B                   JSR         @R14
    00001884 E400                   MOV         #0,R4
      simplexC.c   938            }
      simplexC.c   939            PrintMini(0, 35, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001886 E710                   MOV         #16,R7
    00001888 D625                   MOV.L       L1513+40,R6; L591
    0000188A E523                   MOV         #35,R5
    0000188C 4E0B                   JSR         @R14
    0000188E E400                   MOV         #0,R4
      simplexC.c   940            string_input(0, 42, uselessSring);
    00001890 D224                   MOV.L       L1513+44,R2; _string_input
    00001892 66F3                   MOV         R15,R6
    00001894 7604                   ADD         #4,R6
    00001896 E52A                   MOV         #42,R5
    00001898 420B                   JSR         @R2
    0000189A E400                   MOV         #0,R4
      simplexC.c   941            Bdisp_PutDisp_DD();
    0000189C D31C                   MOV.L       L1513+24,R3; _Bdisp_PutDisp_DD
    0000189E 430B                   JSR         @R3
    000018A0 0009                   NOP
      simplexC.c   942            memset(stroutVariable,0,128);
    000018A2 E500                   MOV         #0,R5
    000018A4 D220                   MOV.L       L1513+48,R2; _memset
    000018A6 962A                   MOV.W       L1513+6,R6 ; H'0080
    000018A8 420B                   JSR         @R2
    000018AA 64A3                   MOV         R10,R4
    000018AC              L1332:                            
    000018AC 2DD8                   TST         R13,R13
    000018AE 8B8F                   BF          L1333
      simplexC.c   943            
      simplexC.c   944        }
      simplexC.c   945        return 0;
      simplexC.c   946    }
    000018B0 9126                   MOV.W       L1513+8,R1 ; H'0404
    000018B2 E000                   MOV         #0,R0
    000018B4 3F1C                   ADD         R1,R15
    000018B6 4F26                   LDS.L       @R15+,PR
    000018B8 68F6                   MOV.L       @R15+,R8
    000018BA 69F6                   MOV.L       @R15+,R9
    000018BC 6AF6                   MOV.L       @R15+,R10
    000018BE 6BF6                   MOV.L       @R15+,R11
    000018C0 6CF6                   MOV.L       @R15+,R12
    000018C2 6DF6                   MOV.L       @R15+,R13
    000018C4 000B                   RTS
    000018C6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   947    
      simplexC.c   948    int printCValuesByIt(int itId)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018C8              _printCValuesByIt:               ; function: printCValuesByIt
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
    000018C8 2FE6                   MOV.L       R14,@-R15
    000018CA 6343                   MOV         R4,R3
    000018CC 9019                   MOV.W       L1513+10,R0; H'FCF8
      simplexC.c   949    {
      simplexC.c   950        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   951        int menuChoice;
      simplexC.c   952        char *uselessSring[128];
      simplexC.c   953        menuChoice=INITIALIZE_VALUE_OPT;
    000018CE EEFF                   MOV         #-1,R14
    000018D0 2FD6                   MOV.L       R13,@-R15
    000018D2 4308                   SHLL2       R3
    000018D4 2FC6                   MOV.L       R12,@-R15
    000018D6 2FB6                   MOV.L       R11,@-R15
    000018D8 2FA6                   MOV.L       R10,@-R15
    000018DA 2F96                   MOV.L       R9,@-R15
    000018DC 2F86                   MOV.L       R8,@-R15
    000018DE 4F22                   STS.L       PR,@-R15
    000018E0 D812                   MOV.L       L1513+52,R8; _ex
    000018E2 3F0C                   ADD         R0,R15
    000018E4 D912                   MOV.L       L1513+56,R9; _sprintf
    000018E6 2F42                   MOV.L       R4,@R15
    000018E8 DA09                   MOV.L       L1513+24,R10; _Bdisp_PutDisp_DD
    000018EA 9B0B                   MOV.W       L1513+12,R11; H'0288
    000018EC 9C0B                   MOV.W       L1513+14,R12; H'0208
    000018EE 3BFC                   ADD         R15,R11
    000018F0 DD10                   MOV.L       L1513+60,R13; _PrintMini
    000018F2 3CFC                   ADD         R15,R12
      simplexC.c   954        while(menuChoice!=EXIT_OPT)
    000018F4 A069                   BRA         L1342
    000018F6 1F31                   MOV.L       R3,@(4,R15)
    000018F8              L1513:                            
    000018F8 0384                   .DATA.W     H'0384
    000018FA 0304                   .DATA.W     H'0304
    000018FC 0284                   .DATA.W     H'0284
    000018FE 0080                   .DATA.W     H'0080
    00001900 0404                   .DATA.W     H'0404
    00001902 FCF8                   .DATA.W     H'FCF8
    00001904 0288                   .DATA.W     H'0288
    00001906 0208                   .DATA.W     H'0208
    00001908 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000190C <00000000>             .DATA.L     _InputI
    00001910 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001914 <00000000>             .DATA.L     __stod
    00001918 <00000000>             .DATA.L     L766
    0000191C <00000000>             .DATA.L     L769
    00001920 <00000000>             .DATA.L     L591
    00001924 <00000000>             .DATA.L     _string_input
    00001928 <00000000>             .DATA.L     _memset
    0000192C <00000000>             .DATA.L     _ex
    00001930 <00000000>             .DATA.L     _sprintf
    00001934 <00000000>             .DATA.L     _PrintMini
    00001938              L1343:                            
      simplexC.c   955        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   956            Bdisp_AllClr_DDVRAM();
    00001938 D140                   MOV.L       L1514+10,R1; _Bdisp_AllClr_DDVRAM
    0000193A 410B                   JSR         @R1
    0000193C 0009                   NOP
      simplexC.c   957            sprintf(stroutBasicInfo, "Cvals itId %d. Vars: %d.  %d exit",itId, ex.nVariables,EXIT_OPT);
    0000193E E200                   MOV         #0,R2
    00001940 2F26                   MOV.L       R2,@-R15
    00001942 538B                   MOV.L       @(44,R8),R3
    00001944 2F36                   MOV.L       R3,@-R15
    00001946 51F2                   MOV.L       @(8,R15),R1
    00001948 D33D                   MOV.L       L1514+14,R3; L778
    0000194A 2F16                   MOV.L       R1,@-R15
    0000194C 2F36                   MOV.L       R3,@-R15
    0000194E 490B                   JSR         @R9
    00001950 64B3                   MOV         R11,R4
    00001952 7F10                   ADD         #16,R15
      simplexC.c   958            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001954 E710                   MOV         #16,R7
    00001956 66B3                   MOV         R11,R6
    00001958 E500                   MOV         #0,R5
    0000195A 4D0B                   JSR         @R13
    0000195C 6453                   MOV         R5,R4
      simplexC.c   959            menuChoice = InputI(0, 7);
    0000195E E507                   MOV         #7,R5
    00001960 D238                   MOV.L       L1514+18,R2; _InputI
    00001962 420B                   JSR         @R2
    00001964 E400                   MOV         #0,R4
      simplexC.c   960            Bdisp_PutDisp_DD();
    00001966 4A0B                   JSR         @R10
    00001968 6E03                   MOV         R0,R14
      simplexC.c   961            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nVariables)
    0000196A 2EE8                   TST         R14,R14
    0000196C 8928                   BT          L1344
    0000196E D336                   MOV.L       L1514+22,R3; H'0000002C+_ex
    00001970 6232                   MOV.L       @R3,R2
    00001972 3E27                   CMP/GT      R2,R14
    00001974 8924                   BT          L1344
      simplexC.c   962            {
      simplexC.c   963                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,getCurrentCvectorValues(ex.nodes.its[itId]
                         +)[menuChoice-1]);
    00001976 53F1                   MOV.L       @(4,R15),R3
    00001978 5085                   MOV.L       @(20,R8),R0
    0000197A D234                   MOV.L       L1514+26,R2; _getCurrentCvectorValues
    0000197C 420B                   JSR         @R2
    0000197E 043E                   MOV.L       @(R0,R3),R4
    00001980 D233                   MOV.L       L1514+30,R2; __stod
    00001982 63E3                   MOV         R14,R3
    00001984 73FF                   ADD         #-1,R3
    00001986 4308                   SHLL2       R3
    00001988 003E                   MOV.L       @(R0,R3),R0
    0000198A 7FF8                   ADD         #-8,R15
    0000198C 420B                   JSR         @R2
    0000198E 2FF6                   MOV.L       R15,@-R15
    00001990 2FE6                   MOV.L       R14,@-R15
    00001992 D330                   MOV.L       L1514+34,R3; L694
    00001994 2F36                   MOV.L       R3,@-R15
    00001996 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001998 64C3                   MOV         R12,R4
    0000199A 7F10                   ADD         #16,R15
      simplexC.c   964                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    0000199C E710                   MOV         #16,R7
    0000199E 66C3                   MOV         R12,R6
    000019A0 E50E                   MOV         #14,R5
    000019A2 4D0B                   JSR         @R13
    000019A4 E400                   MOV         #0,R4
      simplexC.c   965                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000019A6 E710                   MOV         #16,R7
    000019A8 D62B                   MOV.L       L1514+38,R6; L591
    000019AA E515                   MOV         #21,R5
    000019AC 4D0B                   JSR         @R13
    000019AE E400                   MOV         #0,R4
      simplexC.c   966                string_input(0, 28, uselessSring);
    000019B0 D22A                   MOV.L       L1514+42,R2; _string_input
    000019B2 66F3                   MOV         R15,R6
    000019B4 7608                   ADD         #8,R6
    000019B6 E51C                   MOV         #28,R5
    000019B8 420B                   JSR         @R2
    000019BA E400                   MOV         #0,R4
      simplexC.c   967                Bdisp_PutDisp_DD();
    000019BC 4A0B                   JSR         @R10
    000019BE 0009                   NOP
    000019C0              L1344:                            
      simplexC.c   968            }
      simplexC.c   969            memset(stroutBasicInfo2,0,128);
    000019C0 9637                   MOV.W       L1514,R6   ; H'0080
    000019C2 E500                   MOV         #0,R5
    000019C4 D326                   MOV.L       L1514+46,R3; _memset
    000019C6 430B                   JSR         @R3
    000019C8 64C3                   MOV         R12,R4
    000019CA              L1342:                            
    000019CA 2EE8                   TST         R14,R14
    000019CC 8BB4                   BF          L1343
      simplexC.c   970        }
      simplexC.c   971        return 0;
    000019CE E000                   MOV         #0,R0
      simplexC.c   972    }
    000019D0 9130                   MOV.W       L1514+2,R1 ; H'0308
    000019D2 3F1C                   ADD         R1,R15
    000019D4 4F26                   LDS.L       @R15+,PR
    000019D6 68F6                   MOV.L       @R15+,R8
    000019D8 69F6                   MOV.L       @R15+,R9
    000019DA 6AF6                   MOV.L       @R15+,R10
    000019DC 6BF6                   MOV.L       @R15+,R11
    000019DE 6CF6                   MOV.L       @R15+,R12
    000019E0 6DF6                   MOV.L       @R15+,R13
    000019E2 000B                   RTS
    000019E4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   973    
      simplexC.c   974    int printBinvByIt(int itId)
    000019E6              _printBinvByIt:                  ; function: printBinvByIt
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   975    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   976        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   977        int menuChoiceRow,menuChoiceColumn;
      simplexC.c   978        char *uselessSring[128];
      simplexC.c   979        menuChoiceRow=INITIALIZE_VALUE_OPT;
      simplexC.c   980        menuChoiceColumn=INITIALIZE_VALUE_OPT;
      simplexC.c   981        sprintf(stroutBasicInfo, "Binv itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT);
    000019E6 E300                   MOV         #0,R3
    000019E8 D21E                   MOV.L       L1514+50,R2; H'00000014+_ex
    000019EA 2FE6                   MOV.L       R14,@-R15
    000019EC 2FD6                   MOV.L       R13,@-R15
    000019EE 2FC6                   MOV.L       R12,@-R15
    000019F0 2FB6                   MOV.L       R11,@-R15
    000019F2 2FA6                   MOV.L       R10,@-R15
    000019F4 2F96                   MOV.L       R9,@-R15
    000019F6 2F86                   MOV.L       R8,@-R15
    000019F8 4F22                   STS.L       PR,@-R15
    000019FA 901C                   MOV.W       L1514+4,R0 ; H'FCFC
    000019FC 3F0C                   ADD         R0,R15
    000019FE 2F42                   MOV.L       R4,@R15
    00001A00 2F36                   MOV.L       R3,@-R15
    00001A02 E4FF                   MOV         #-1,R4
    00001A04 59F1                   MOV.L       @(4,R15),R9
    00001A06 6D43                   MOV         R4,R13
    00001A08 6022                   MOV.L       @R2,R0
    00001A0A 6C43                   MOV         R4,R12
    00001A0C D317                   MOV.L       L1514+58,R3; _sprintf
    00001A0E 4908                   SHLL2       R9
    00001A10 9412                   MOV.W       L1514+6,R4 ; H'0294
    00001A12 019E                   MOV.L       @(R0,R9),R1
    00001A14 5019                   MOV.L       @(36,R1),R0
    00001A16 2F06                   MOV.L       R0,@-R15
    00001A18 51F2                   MOV.L       @(8,R15),R1
    00001A1A 2F16                   MOV.L       R1,@-R15
    00001A1C D112                   MOV.L       L1514+54,R1; L788
    00001A1E 2F16                   MOV.L       R1,@-R15
    00001A20 430B                   JSR         @R3
    00001A22 34FC                   ADD         R15,R4
    00001A24 9805                   MOV.W       L1514,R8   ; H'0080
    00001A26 7F10                   ADD         #16,R15
    00001A28 9A07                   MOV.W       L1514+8,R10; H'0204
    00001A2A DB11                   MOV.L       L1514+62,R11; _Bdisp_PutDisp_DD
    00001A2C DE11                   MOV.L       L1514+66,R14; _PrintMini
      simplexC.c   982    
      simplexC.c   983        while(menuChoiceRow!=EXIT_OPT && menuChoiceColumn!=EXIT_OPT)
    00001A2E A081                   BRA         L1346
    00001A30 3AFC                   ADD         R15,R10
    00001A32              L1514:                            
    00001A32 0080                   .DATA.W     H'0080
    00001A34 0308                   .DATA.W     H'0308
    00001A36 FCFC                   .DATA.W     H'FCFC
    00001A38 0294                   .DATA.W     H'0294
    00001A3A 0204                   .DATA.W     H'0204
    00001A3C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001A40 <00000000>             .DATA.L     L778
    00001A44 <00000000>             .DATA.L     _InputI
    00001A48 <0000002C>             .DATA.L     H'0000002C+_ex
    00001A4C <00000000>             .DATA.L     _getCurrentCvectorValues




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A50 <00000000>             .DATA.L     __stod
    00001A54 <00000000>             .DATA.L     L694
    00001A58 <00000000>             .DATA.L     L591
    00001A5C <00000000>             .DATA.L     _string_input
    00001A60 <00000000>             .DATA.L     _memset
    00001A64 <00000014>             .DATA.L     H'00000014+_ex
    00001A68 <00000000>             .DATA.L     L788
    00001A6C <00000000>             .DATA.L     _sprintf
    00001A70 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001A74 <00000000>             .DATA.L     _PrintMini
    00001A78              L1347:                            
      simplexC.c   984        {
      simplexC.c   985            Bdisp_AllClr_DDVRAM();
    00001A78 D34A                   MOV.L       L1515+12,R3; _Bdisp_AllClr_DDVRAM
    00001A7A 430B                   JSR         @R3
    00001A7C 0009                   NOP
      simplexC.c   986            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001A7E E710                   MOV         #16,R7
    00001A80 968A                   MOV.W       L1515,R6   ; H'0284
    00001A82 E500                   MOV         #0,R5
    00001A84 36FC                   ADD         R15,R6
    00001A86 4E0B                   JSR         @R14
    00001A88 6453                   MOV         R5,R4
      simplexC.c   987            PrintMini(0, 7, (unsigned char*)"Row: ", MINI_OVER);
    00001A8A E710                   MOV         #16,R7
    00001A8C D646                   MOV.L       L1515+16,R6; L790
    00001A8E E507                   MOV         #7,R5
    00001A90 4E0B                   JSR         @R14
    00001A92 E400                   MOV         #0,R4
      simplexC.c   988            menuChoiceRow = InputI(0, 14);
    00001A94 D245                   MOV.L       L1515+20,R2; _InputI
    00001A96 E50E                   MOV         #14,R5
    00001A98 420B                   JSR         @R2
    00001A9A E400                   MOV         #0,R4
      simplexC.c   989            Bdisp_PutDisp_DD();
    00001A9C 4B0B                   JSR         @R11
    00001A9E 6D03                   MOV         R0,R13
      simplexC.c   990            PrintMini(0, 21, (unsigned char*)"Column: ", MINI_OVER);
    00001AA0 D643                   MOV.L       L1515+24,R6; L791
    00001AA2 E515                   MOV         #21,R5
    00001AA4 E710                   MOV         #16,R7
    00001AA6 4E0B                   JSR         @R14
    00001AA8 E400                   MOV         #0,R4
      simplexC.c   991            menuChoiceColumn = InputI(0, 28);
    00001AAA E51C                   MOV         #28,R5
    00001AAC D33F                   MOV.L       L1515+20,R3; _InputI
    00001AAE 430B                   JSR         @R3
    00001AB0 E400                   MOV         #0,R4
      simplexC.c   992            Bdisp_PutDisp_DD();
    00001AB2 4B0B                   JSR         @R11
    00001AB4 6C03                   MOV         R0,R12
      simplexC.c   993            if(menuChoiceRow!=EXIT_OPT && menuChoiceRow <= ex.nodes.its[itId]->BinvSize
      simplexC.c   994                && menuChoiceColumn!=EXIT_OPT && menuChoiceColumn <= ex.nodes.its[itId]->BinvSize)
    00001AB6 2DD8                   TST         R13,R13
    00001AB8 8937                   BT          L1348
    00001ABA D33E                   MOV.L       L1515+28,R3; H'00000014+_ex
    00001ABC 6032                   MOV.L       @R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001ABE 029E                   MOV.L       @(R0,R9),R2
    00001AC0 5129                   MOV.L       @(36,R2),R1
    00001AC2 3D17                   CMP/GT      R1,R13
    00001AC4 8931                   BT          L1348
    00001AC6 2CC8                   TST         R12,R12
    00001AC8 892F                   BT          L1348
    00001ACA D23A                   MOV.L       L1515+28,R2; H'00000014+_ex
    00001ACC 6022                   MOV.L       @R2,R0
    00001ACE 019E                   MOV.L       @(R0,R9),R1
    00001AD0 5119                   MOV.L       @(36,R1),R1
    00001AD2 3C17                   CMP/GT      R1,R12
    00001AD4 8929                   BT          L1348
      simplexC.c   995            {
      simplexC.c   996                sprintf(stroutBasicInfo2, "B[%d][%d]: %.2f",menuChoiceRow,menuChoiceColumn,ex.nodes.its[itId]-
                         +>Binv[menuChoiceRow-1][menuChoiceColumn-1]);
    00001AD6 62D3                   MOV         R13,R2
    00001AD8 D336                   MOV.L       L1515+28,R3; H'00000014+_ex
    00001ADA 61C3                   MOV         R12,R1
    00001ADC 6032                   MOV.L       @R3,R0
    00001ADE 72FF                   ADD         #-1,R2
    00001AE0 009E                   MOV.L       @(R0,R9),R0
    00001AE2 71FF                   ADD         #-1,R1
    00001AE4 5008                   MOV.L       @(32,R0),R0
    00001AE6 4208                   SHLL2       R2
    00001AE8 002E                   MOV.L       @(R0,R2),R0
    00001AEA 4108                   SHLL2       R1
    00001AEC D232                   MOV.L       L1515+32,R2; __stod
    00001AEE 001E                   MOV.L       @(R0,R1),R0
    00001AF0 7FF8                   ADD         #-8,R15
    00001AF2 420B                   JSR         @R2
    00001AF4 2FF6                   MOV.L       R15,@-R15
    00001AF6 2FC6                   MOV.L       R12,@-R15
    00001AF8 2FD6                   MOV.L       R13,@-R15
    00001AFA D130                   MOV.L       L1515+36,R1; L793
    00001AFC D230                   MOV.L       L1515+40,R2; _sprintf
    00001AFE 2F16                   MOV.L       R1,@-R15
    00001B00 420B                   JSR         @R2
    00001B02 64A3                   MOV         R10,R4
    00001B04 7F14                   ADD         #20,R15
      simplexC.c   997                PrintMini(0,35,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    00001B06 E710                   MOV         #16,R7
    00001B08 66A3                   MOV         R10,R6
    00001B0A E523                   MOV         #35,R5
    00001B0C 4E0B                   JSR         @R14
    00001B0E E400                   MOV         #0,R4
      simplexC.c   998                PrintMini(0, 42, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001B10 D62C                   MOV.L       L1515+44,R6; L591
    00001B12 E52A                   MOV         #42,R5
    00001B14 E710                   MOV         #16,R7
    00001B16 4E0B                   JSR         @R14
    00001B18 E400                   MOV         #0,R4
      simplexC.c   999                string_input(0, 49, uselessSring);
    00001B1A 66F3                   MOV         R15,R6
    00001B1C D32A                   MOV.L       L1515+48,R3; _string_input
    00001B1E E531                   MOV         #49,R5
    00001B20 7604                   ADD         #4,R6
    00001B22 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B24 E400                   MOV         #0,R4
      simplexC.c  1000                Bdisp_PutDisp_DD();
    00001B26 4B0B                   JSR         @R11
    00001B28 0009                   NOP
    00001B2A              L1348:                            
      simplexC.c  1001            }
      simplexC.c  1002            memset(stroutBasicInfo2,0,128);
    00001B2A 6683                   MOV         R8,R6
    00001B2C D227                   MOV.L       L1515+52,R2; _memset
    00001B2E E500                   MOV         #0,R5
    00001B30 420B                   JSR         @R2
    00001B32 64A3                   MOV         R10,R4
    00001B34              L1346:                            
    00001B34 2DD8                   TST         R13,R13
    00001B36 8901                   BT          L1349
    00001B38 2CC8                   TST         R12,R12
    00001B3A 8B9D                   BF          L1347
    00001B3C              L1349:                            
      simplexC.c  1003        }
      simplexC.c  1004        return 0;
      simplexC.c  1005    }
    00001B3C 912D                   MOV.W       L1515+2,R1 ; H'0304
    00001B3E E000                   MOV         #0,R0
    00001B40 3F1C                   ADD         R1,R15
    00001B42 4F26                   LDS.L       @R15+,PR
    00001B44 68F6                   MOV.L       @R15+,R8
    00001B46 69F6                   MOV.L       @R15+,R9
    00001B48 6AF6                   MOV.L       @R15+,R10
    00001B4A 6BF6                   MOV.L       @R15+,R11
    00001B4C 6CF6                   MOV.L       @R15+,R12
    00001B4E 6DF6                   MOV.L       @R15+,R13
    00001B50 000B                   RTS
    00001B52 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1006    
      simplexC.c  1007    int printZjAndCjMinusZj(int itId)
    00001B54              _printZjAndCjMinusZj:            ; function: printZjAndCjMinusZj
                                                           ; frame size=1092
                                                           ; used runtime library name:
                                                           ; __stod
    00001B54 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1008    {
      simplexC.c  1009        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutVariable[128];
      simplexC.c  1010        char *uselessSring[128];
      simplexC.c  1011        int menuChoice,i,idBasicVar;
      simplexC.c  1012        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c  1013        sprintf(stroutBasicInfo, "Zj & cj-zj itId %d. S: %d.  %d exit",itId, ex.nVariables,EXIT_OPT);
    00001B56 E300                   MOV         #0,R3
    00001B58 9020                   MOV.W       L1515+4,R0 ; H'FBF4
    00001B5A EEFF                   MOV         #-1,R14
    00001B5C 2FD6                   MOV.L       R13,@-R15
    00001B5E 2FC6                   MOV.L       R12,@-R15
    00001B60 2FB6                   MOV.L       R11,@-R15
    00001B62 2FA6                   MOV.L       R10,@-R15
    00001B64 2F96                   MOV.L       R9,@-R15
    00001B66 2F86                   MOV.L       R8,@-R15
    00001B68 4F22                   STS.L       PR,@-R15
    00001B6A 3F0C                   ADD         R0,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B6C D918                   MOV.L       L1515+56,R9; _ex
    00001B6E 2F42                   MOV.L       R4,@R15
    00001B70 DA13                   MOV.L       L1515+40,R10; _sprintf
    00001B72 2F36                   MOV.L       R3,@-R15
    00001B74 529B                   MOV.L       @(44,R9),R2
    00001B76 2F26                   MOV.L       R2,@-R15
    00001B78 51F2                   MOV.L       @(8,R15),R1
    00001B7A 2F16                   MOV.L       R1,@-R15
    00001B7C D215                   MOV.L       L1515+60,R2; L805
    00001B7E 2F26                   MOV.L       R2,@-R15
    00001B80 940D                   MOV.W       L1515+6,R4 ; H'031C
    00001B82 4A0B                   JSR         @R10
    00001B84 34FC                   ADD         R15,R4
    00001B86 7F10                   ADD         #16,R15
    00001B88 D813                   MOV.L       L1515+64,R8; _Bdisp_PutDisp_DD
    00001B8A 63F2                   MOV.L       @R15,R3
    00001B8C DC13                   MOV.L       L1515+68,R12; _PrintMini
    00001B8E 4308                   SHLL2       R3
    00001B90 9D06                   MOV.W       L1515+8,R13; H'020C
    00001B92 1F31                   MOV.L       R3,@(4,R15)
      simplexC.c  1014    
      simplexC.c  1015    
      simplexC.c  1016        while(menuChoice!=EXIT_OPT)
    00001B94 A079                   BRA         L1351
    00001B96 3DFC                   ADD         R15,R13
    00001B98              L1515:                            
    00001B98 0284                   .DATA.W     H'0284
    00001B9A 0304                   .DATA.W     H'0304
    00001B9C FBF4                   .DATA.W     H'FBF4
    00001B9E 031C                   .DATA.W     H'031C
    00001BA0 020C                   .DATA.W     H'020C
    00001BA2 0000                   .DATA.W     0
    00001BA4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001BA8 <00000000>             .DATA.L     L790
    00001BAC <00000000>             .DATA.L     _InputI
    00001BB0 <00000000>             .DATA.L     L791
    00001BB4 <00000014>             .DATA.L     H'00000014+_ex
    00001BB8 <00000000>             .DATA.L     __stod
    00001BBC <00000000>             .DATA.L     L793
    00001BC0 <00000000>             .DATA.L     _sprintf
    00001BC4 <00000000>             .DATA.L     L591
    00001BC8 <00000000>             .DATA.L     _string_input
    00001BCC <00000000>             .DATA.L     _memset
    00001BD0 <00000000>             .DATA.L     _ex
    00001BD4 <00000000>             .DATA.L     L805
    00001BD8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001BDC <00000000>             .DATA.L     _PrintMini
    00001BE0              L1352:                            
      simplexC.c  1017        {
      simplexC.c  1018            Bdisp_AllClr_DDVRAM();
    00001BE0 D34C                   MOV.L       L1516+12,R3; _Bdisp_AllClr_DDVRAM
    00001BE2 430B                   JSR         @R3
    00001BE4 0009                   NOP
      simplexC.c  1019            
      simplexC.c  1020            PrintMini(0,0,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001BE6 E710                   MOV         #16,R7
    00001BE8 968E                   MOV.W       L1516,R6   ; H'030C




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BEA E500                   MOV         #0,R5
    00001BEC 36FC                   ADD         R15,R6
    00001BEE 4C0B                   JSR         @R12
    00001BF0 6453                   MOV         R5,R4
      simplexC.c  1021            menuChoice = InputI(0, 7);
    00001BF2 E507                   MOV         #7,R5
    00001BF4 D248                   MOV.L       L1516+16,R2; _InputI
    00001BF6 420B                   JSR         @R2
    00001BF8 E400                   MOV         #0,R4
      simplexC.c  1022            Bdisp_PutDisp_DD();
    00001BFA 480B                   JSR         @R8
    00001BFC 6E03                   MOV         R0,R14
      simplexC.c  1023            if(menuChoice<=ex.nVariables && menuChoice!=EXIT_OPT)
    00001BFE 539B                   MOV.L       @(44,R9),R3
    00001C00 3E37                   CMP/GT      R3,R14
    00001C02 8930                   BT          L1353
    00001C04 2EE8                   TST         R14,R14
    00001C06 892E                   BT          L1353
    00001C08 5295                   MOV.L       @(20,R9),R2
    00001C0A 6BE3                   MOV         R14,R11
    00001C0C 2F22                   MOV.L       R2,@R15
    00001C0E 6023                   MOV         R2,R0
    00001C10 53F1                   MOV.L       @(4,R15),R3
    00001C12 7BFF                   ADD         #-1,R11
    00001C14 003E                   MOV.L       @(R0,R3),R0
    00001C16 4B08                   SHLL2       R11
    00001C18 5002                   MOV.L       @(8,R0),R0
    00001C1A 03BE                   MOV.L       @(R0,R11),R3
    00001C1C 2338                   TST         R3,R3
    00001C1E 8B17                   BF          L1354
      simplexC.c  1024            {
      simplexC.c  1025                if(!ex.nodes.its[itId]->idBasicVariables[menuChoice-1])
      simplexC.c  1026                {
      simplexC.c  1027                    sprintf(stroutVariable, "Zj%d: %.2f. Cj-Zj: %.2f",menuChoice,
      simplexC.c  1028                        ex.nodes.its[itId]->zj[menuChoice-1],ex.nodes.its[itId]->cjMinusZj[menuChoice-1]);
    00001C20 51F1                   MOV.L       @(4,R15),R1
    00001C22 60F2                   MOV.L       @R15,R0
    00001C24 D33D                   MOV.L       L1516+20,R3; __stod
    00001C26 001E                   MOV.L       @(R0,R1),R0
    00001C28 1F02                   MOV.L       R0,@(8,R15)
    00001C2A 500E                   MOV.L       @(56,R0),R0
    00001C2C 00BE                   MOV.L       @(R0,R11),R0
    00001C2E 7FF8                   ADD         #-8,R15
    00001C30 430B                   JSR         @R3
    00001C32 2FF6                   MOV.L       R15,@-R15
    00001C34 50F4                   MOV.L       @(16,R15),R0
    00001C36 500D                   MOV.L       @(52,R0),R0
    00001C38 D338                   MOV.L       L1516+20,R3; __stod
    00001C3A 00BE                   MOV.L       @(R0,R11),R0
    00001C3C 7FF8                   ADD         #-8,R15
    00001C3E 430B                   JSR         @R3
    00001C40 2FF6                   MOV.L       R15,@-R15
    00001C42 2FE6                   MOV.L       R14,@-R15
    00001C44 D236                   MOV.L       L1516+24,R2; L809
    00001C46 2F26                   MOV.L       R2,@-R15
    00001C48 4A0B                   JSR         @R10
    00001C4A 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C4C A006                   BRA         L1355
    00001C4E 7F18                   ADD         #24,R15
    00001C50              L1354:                            
      simplexC.c  1029                }else
      simplexC.c  1030                {
      simplexC.c  1031                    sprintf(stroutVariable, "x%d: is a basic var. Val 0.",menuChoice);
    00001C50 2FE6                   MOV.L       R14,@-R15
    00001C52 D234                   MOV.L       L1516+28,R2; L811
    00001C54 2F26                   MOV.L       R2,@-R15
    00001C56 4A0B                   JSR         @R10
    00001C58 64D3                   MOV         R13,R4
    00001C5A 7F08                   ADD         #8,R15
    00001C5C              L1355:                            
      simplexC.c  1032                }
      simplexC.c  1033                PrintMini(0,14,(unsigned char*) stroutVariable,MINI_OVER);
    00001C5C E710                   MOV         #16,R7
    00001C5E 66D3                   MOV         R13,R6
    00001C60 E50E                   MOV         #14,R5
    00001C62 4C0B                   JSR         @R12
    00001C64 E400                   MOV         #0,R4
    00001C66              L1353:                            
      simplexC.c  1034            }
      simplexC.c  1035            PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001C66 E710                   MOV         #16,R7
    00001C68 D62F                   MOV.L       L1516+32,R6; L591
    00001C6A E515                   MOV         #21,R5
    00001C6C 4C0B                   JSR         @R12
    00001C6E E400                   MOV         #0,R4
      simplexC.c  1036            string_input(0, 28, uselessSring);
    00001C70 D32E                   MOV.L       L1516+36,R3; _string_input
    00001C72 66F3                   MOV         R15,R6
    00001C74 760C                   ADD         #12,R6
    00001C76 E51C                   MOV         #28,R5
    00001C78 430B                   JSR         @R3
    00001C7A E400                   MOV         #0,R4
      simplexC.c  1037            Bdisp_PutDisp_DD();
    00001C7C 480B                   JSR         @R8
    00001C7E 0009                   NOP
      simplexC.c  1038            memset(stroutVariable,0,128);
    00001C80 9643                   MOV.W       L1516+2,R6 ; H'0080
    00001C82 E500                   MOV         #0,R5
    00001C84 D22A                   MOV.L       L1516+40,R2; _memset
    00001C86 420B                   JSR         @R2
    00001C88 64D3                   MOV         R13,R4
    00001C8A              L1351:                            
    00001C8A 2EE8                   TST         R14,R14
    00001C8C 8BA8                   BF          L1352
      simplexC.c  1039            
      simplexC.c  1040        }
      simplexC.c  1041        return 0;
    00001C8E E000                   MOV         #0,R0
      simplexC.c  1042    }
    00001C90 913C                   MOV.W       L1516+4,R1 ; H'040C
    00001C92 3F1C                   ADD         R1,R15
    00001C94 4F26                   LDS.L       @R15+,PR
    00001C96 68F6                   MOV.L       @R15+,R8
    00001C98 69F6                   MOV.L       @R15+,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C9A 6AF6                   MOV.L       @R15+,R10
    00001C9C 6BF6                   MOV.L       @R15+,R11
    00001C9E 6CF6                   MOV.L       @R15+,R12
    00001CA0 6DF6                   MOV.L       @R15+,R13
    00001CA2 000B                   RTS
    00001CA4 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1043    
      simplexC.c  1044    int printIteration(int itId)
    00001CA6              _printIteration:                 ; function: printIteration
                                                           ; frame size=312
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c  1045    {
      simplexC.c  1046        char stroutTop[128],stroutTop2[128];
      simplexC.c  1047        int menuChoice;
      simplexC.c  1048        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c  1049        sprintf(stroutTop,"It %d.ZSol: %.2f Exit %d", itId,ex.nodes.its[itId]->zSol, EXIT_OPT);
    00001CA6 E300                   MOV         #0,R3
    00001CA8 2FE6                   MOV.L       R14,@-R15
    00001CAA E244                   MOV         #68,R2
    00001CAC 902F                   MOV.W       L1516+6,R0 ; H'FEFC
    00001CAE 2FD6                   MOV.L       R13,@-R15
    00001CB0 2FC6                   MOV.L       R12,@-R15
    00001CB2 6D43                   MOV         R4,R13
    00001CB4 DE20                   MOV.L       L1516+48,R14; _ex
    00001CB6 ECFF                   MOV         #-1,R12
    00001CB8 2FB6                   MOV.L       R11,@-R15
    00001CBA 2FA6                   MOV.L       R10,@-R15
    00001CBC 2F96                   MOV.L       R9,@-R15
    00001CBE 2F86                   MOV.L       R8,@-R15
    00001CC0 4F22                   STS.L       PR,@-R15
    00001CC2 3F0C                   ADD         R0,R15
    00001CC4 D91B                   MOV.L       L1516+44,R9; _sprintf
    00001CC6 60D3                   MOV         R13,R0
    00001CC8 9A22                   MOV.W       L1516+8,R10; H'0084
    00001CCA 4008                   SHLL2       R0
    00001CCC 3AFC                   ADD         R15,R10
    00001CCE 2F36                   MOV.L       R3,@-R15
    00001CD0 1F01                   MOV.L       R0,@(4,R15)
    00001CD2 51E5                   MOV.L       @(20,R14),R1
    00001CD4 001E                   MOV.L       @(R0,R1),R0
    00001CD6 002E                   MOV.L       @(R0,R2),R0
    00001CD8 D210                   MOV.L       L1516+20,R2; __stod
    00001CDA 7FF8                   ADD         #-8,R15
    00001CDC 420B                   JSR         @R2
    00001CDE 2FF6                   MOV.L       R15,@-R15
    00001CE0 2FD6                   MOV.L       R13,@-R15
    00001CE2 D116                   MOV.L       L1516+52,R1; L818
    00001CE4 2F16                   MOV.L       R1,@-R15
    00001CE6 490B                   JSR         @R9
    00001CE8 64A3                   MOV         R10,R4
    00001CEA 7F14                   ADD         #20,R15
      simplexC.c  1050        if(ex.nodes.its[itId]->idVarIn==-1)
    00001CEC 63F2                   MOV.L       @R15,R3
    00001CEE 6BF3                   MOV         R15,R11
    00001CF0 50E5                   MOV.L       @(20,R14),R0
    00001CF2 003E                   MOV.L       @(R0,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CF4 5005                   MOV.L       @(20,R0),R0
    00001CF6 88FF                   CMP/EQ      #-1,R0
    00001CF8 8F24                   BF/S        L1357
    00001CFA 7B04                   ADD         #4,R11
      simplexC.c  1051        {
      simplexC.c  1052            sprintf(stroutTop2, "No VarIn and VarOut");
    00001CFC D210                   MOV.L       L1516+56,R2; L716
    00001CFE 2F26                   MOV.L       R2,@-R15
    00001D00 490B                   JSR         @R9
    00001D02 64B3                   MOV         R11,R4
    00001D04 A035                   BRA         L1358
    00001D06 7F04                   ADD         #4,R15
    00001D08              L1516:                            
    00001D08 030C                   .DATA.W     H'030C
    00001D0A 0080                   .DATA.W     H'0080
    00001D0C 040C                   .DATA.W     H'040C
    00001D0E FEFC                   .DATA.W     H'FEFC
    00001D10 0084                   .DATA.W     H'0084
    00001D12 0000                   .DATA.W     0
    00001D14 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001D18 <00000000>             .DATA.L     _InputI
    00001D1C <00000000>             .DATA.L     __stod
    00001D20 <00000000>             .DATA.L     L809
    00001D24 <00000000>             .DATA.L     L811
    00001D28 <00000000>             .DATA.L     L591
    00001D2C <00000000>             .DATA.L     _string_input
    00001D30 <00000000>             .DATA.L     _memset
    00001D34 <00000000>             .DATA.L     _sprintf
    00001D38 <00000000>             .DATA.L     _ex
    00001D3C <00000000>             .DATA.L     L818
    00001D40 <00000000>             .DATA.L     L716
    00001D44              L1357:                            
      simplexC.c  1053    
      simplexC.c  1054        }else
      simplexC.c  1055        {
      simplexC.c  1056            sprintf(stroutTop2, "IdVarIn: %d, IdVarOut %d  %s",ex.nodes.its[itId]->idVarIn+1,ex.nodes.its[itId
                         +]->idVarOut+1,ex.nodes.its[itId]->is2FasesActive ? "2fases": "");
    00001D44 62F2                   MOV.L       @R15,R2
    00001D46 50E5                   MOV.L       @(20,R14),R0
    00001D48 082E                   MOV.L       @(R0,R2),R8
    00001D4A 5381                   MOV.L       @(4,R8),R3
    00001D4C 2338                   TST         R3,R3
    00001D4E 8903                   BT          L1359
    00001D50 D33D                   MOV.L       L1517,R3   ; L822
    00001D52 2F36                   MOV.L       R3,@-R15
    00001D54 A002                   BRA         L1360
    00001D56 0009                   NOP
    00001D58              L1359:                            
    00001D58 D23C                   MOV.L       L1517+4,R2 ; L823
    00001D5A 2F26                   MOV.L       R2,@-R15
    00001D5C              L1360:                            
    00001D5C 5186                   MOV.L       @(24,R8),R1
    00001D5E 7101                   ADD         #1,R1
    00001D60 2F16                   MOV.L       R1,@-R15
    00001D62 5385                   MOV.L       @(20,R8),R3
    00001D64 D23A                   MOV.L       L1517+8,R2 ; L821
    00001D66 7301                   ADD         #1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D68 2F36                   MOV.L       R3,@-R15
    00001D6A 2F26                   MOV.L       R2,@-R15
    00001D6C 490B                   JSR         @R9
    00001D6E 64B3                   MOV         R11,R4
    00001D70 7F10                   ADD         #16,R15
    00001D72              L1358:                            
    00001D72 D838                   MOV.L       L1517+12,R8; _Bdisp_AllClr_DDVRAM
    00001D74 D938                   MOV.L       L1517+16,R9; _Bdisp_PutDisp_DD
    00001D76 DE39                   MOV.L       L1517+20,R14; _PrintMini
      simplexC.c  1057        }
      simplexC.c  1058        // sprintf(stroutTop2,"VarIn: %d, VarOut: %d. %s",ex.nodes.its[itId]->idVarIn,ex.nodes.its[itId]->idVa
                         +rOut,ex.nodes.its[itId]->is2FasesActive ? "2fases": "");
      simplexC.c  1059        while(menuChoice!=EXIT_OPT)
    00001D78 A084                   BRA         L1361
    00001D7A 0009                   NOP
    00001D7C              L1362:                            
      simplexC.c  1060        {
      simplexC.c  1061            Bdisp_AllClr_DDVRAM();
    00001D7C 480B                   JSR         @R8
    00001D7E 0009                   NOP
      simplexC.c  1062            
      simplexC.c  1063            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001D80 E710                   MOV         #16,R7
    00001D82 66A3                   MOV         R10,R6
    00001D84 E500                   MOV         #0,R5
    00001D86 4E0B                   JSR         @R14
    00001D88 6453                   MOV         R5,R4
      simplexC.c  1064            PrintMini(0,7,  (unsigned char *)stroutTop2, MINI_OVER);
    00001D8A E710                   MOV         #16,R7
    00001D8C 66B3                   MOV         R11,R6
    00001D8E E507                   MOV         #7,R5
    00001D90 4E0B                   JSR         @R14
    00001D92 E400                   MOV         #0,R4
      simplexC.c  1065            PrintMini(0,14, (unsigned char*)"1 Binv. 2 xb. 3 ct", MINI_OVER);
    00001D94 D632                   MOV.L       L1517+24,R6; L825
    00001D96 E50E                   MOV         #14,R5
    00001D98 E710                   MOV         #16,R7
    00001D9A 4E0B                   JSR         @R14
    00001D9C E400                   MOV         #0,R4
      simplexC.c  1066            PrintMini(0, 21, (unsigned char*)"4 CtBinv", MINI_OVER);
    00001D9E E710                   MOV         #16,R7
    00001DA0 D630                   MOV.L       L1517+28,R6; L826
    00001DA2 E515                   MOV         #21,R5
    00001DA4 4E0B                   JSR         @R14
    00001DA6 E400                   MOV         #0,R4
      simplexC.c  1067            PrintMini(0, 28, (unsigned char*)"5 zj and cj-zj", MINI_OVER);
    00001DA8 D62F                   MOV.L       L1517+32,R6; L827
    00001DAA E51C                   MOV         #28,R5
    00001DAC E710                   MOV         #16,R7
    00001DAE 4E0B                   JSR         @R14
    00001DB0 E400                   MOV         #0,R4
      simplexC.c  1068            PrintMini(0, 35, (unsigned char*)"6 yj & xb/yj", MINI_OVER);
    00001DB2 E710                   MOV         #16,R7
    00001DB4 D62D                   MOV.L       L1517+36,R6; L828
    00001DB6 E523                   MOV         #35,R5
    00001DB8 4E0B                   JSR         @R14
    00001DBA E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1069            PrintMini(0, 42, (unsigned char*)"7 aj. 8 Cv", MINI_OVER);
    00001DBC D62C                   MOV.L       L1517+40,R6; L829
    00001DBE E52A                   MOV         #42,R5
    00001DC0 E710                   MOV         #16,R7
    00001DC2 4E0B                   JSR         @R14
    00001DC4 E400                   MOV         #0,R4
      simplexC.c  1070            PrintMini(0, 49, (unsigned char*)"9 basic vars B", MINI_OVER);
    00001DC6 E710                   MOV         #16,R7
    00001DC8 D62A                   MOV.L       L1517+44,R6; L830
    00001DCA E531                   MOV         #49,R5
    00001DCC 4E0B                   JSR         @R14
    00001DCE E400                   MOV         #0,R4
      simplexC.c  1071            menuChoice = InputI(0, 56);
    00001DD0 D229                   MOV.L       L1517+48,R2; _InputI
    00001DD2 E538                   MOV         #56,R5
    00001DD4 420B                   JSR         @R2
    00001DD6 E400                   MOV         #0,R4
      simplexC.c  1072            Bdisp_PutDisp_DD();
    00001DD8 490B                   JSR         @R9
    00001DDA 6C03                   MOV         R0,R12
      simplexC.c  1073            switch (menuChoice)
    00001DDC 60C3                   MOV         R12,R0
    00001DDE 8801                   CMP/EQ      #1,R0
    00001DE0 8911                   BT          L1124
    00001DE2 8802                   CMP/EQ      #2,R0
    00001DE4 8913                   BT          L1125
    00001DE6 8803                   CMP/EQ      #3,R0
    00001DE8 8915                   BT          L1126
    00001DEA 8804                   CMP/EQ      #4,R0
    00001DEC 8917                   BT          L1127
    00001DEE 8805                   CMP/EQ      #5,R0
    00001DF0 8919                   BT          L1128
    00001DF2 8806                   CMP/EQ      #6,R0
    00001DF4 891B                   BT          L1129
    00001DF6 8807                   CMP/EQ      #7,R0
    00001DF8 891D                   BT          L1130
    00001DFA 8808                   CMP/EQ      #8,R0
    00001DFC 8920                   BT          L1131
    00001DFE 8809                   CMP/EQ      #9,R0
    00001E00 893E                   BT          L1132
    00001E02 A03F                   BRA         L1361
    00001E04 0009                   NOP
    00001E06              L1124:                           ; case label 
      simplexC.c  1074            {
      simplexC.c  1075                case 1: printBinvByIt(itId);break;
    00001E06 BDEE                   BSR         _printBinvByIt
    00001E08 64D3                   MOV         R13,R4
    00001E0A A03B                   BRA         L1361
    00001E0C 0009                   NOP
    00001E0E              L1125:                           ; case label 
      simplexC.c  1076                case 2: printXbByIt(itId);break;
    00001E0E B9EA                   BSR         _printXbByIt
    00001E10 64D3                   MOV         R13,R4
    00001E12 A037                   BRA         L1361
    00001E14 0009                   NOP
    00001E16              L1126:                           ; case label 
      simplexC.c  1077                case 3: printCtVecByIt(itId);break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E16 B963                   BSR         _printCtVecByIt
    00001E18 64D3                   MOV         R13,R4
    00001E1A A033                   BRA         L1361
    00001E1C 0009                   NOP
    00001E1E              L1127:                           ; case label 
      simplexC.c  1078                case 4: printCtBinvByIt(itId);break;
    00001E1E BB87                   BSR         _printCtBinvByIt
    00001E20 64D3                   MOV         R13,R4
    00001E22 A02F                   BRA         L1361
    00001E24 0009                   NOP
    00001E26              L1128:                           ; case label 
      simplexC.c  1079                case 5: printZjAndCjMinusZj(itId);break;
    00001E26 BE95                   BSR         _printZjAndCjMinusZj
    00001E28 64D3                   MOV         R13,R4
    00001E2A A02B                   BRA         L1361
    00001E2C 0009                   NOP
    00001E2E              L1129:                           ; case label 
      simplexC.c  1080                case 6: printYandXbDivYByIt(itId);break;
    00001E2E BA6A                   BSR         _printYandXbDivYByIt
    00001E30 64D3                   MOV         R13,R4
    00001E32 A027                   BRA         L1361
    00001E34 0009                   NOP
    00001E36              L1130:                           ; case label 
      simplexC.c  1081                case 7: printAjVec();break;
    00001E36 D311                   MOV.L       L1517+52,R3; _printAjVec
    00001E38 430B                   JSR         @R3
    00001E3A 0009                   NOP
    00001E3C A022                   BRA         L1361
    00001E3E 0009                   NOP
    00001E40              L1131:                           ; case label 
      simplexC.c  1082                case 8: printCValuesByIt(itId);break;
    00001E40 BD42                   BSR         _printCValuesByIt
    00001E42 64D3                   MOV         R13,R4
    00001E44 A01E                   BRA         L1361
    00001E46 0009                   NOP
    00001E48              L1517:                            
    00001E48 <00000000>             .DATA.L     L822
    00001E4C <00000000>             .DATA.L     L823
    00001E50 <00000000>             .DATA.L     L821
    00001E54 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001E58 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001E5C <00000000>             .DATA.L     _PrintMini
    00001E60 <00000000>             .DATA.L     L825
    00001E64 <00000000>             .DATA.L     L826
    00001E68 <00000000>             .DATA.L     L827
    00001E6C <00000000>             .DATA.L     L828
    00001E70 <00000000>             .DATA.L     L829
    00001E74 <00000000>             .DATA.L     L830
    00001E78 <00000000>             .DATA.L     _InputI
    00001E7C <00000000>             .DATA.L     _printAjVec
    00001E80              L1132:                           ; case label 
      simplexC.c  1083                case 9: printBasicVarsBbyIt(itId);break;
    00001E80 BBC7                   BSR         _printBasicVarsBbyIt
    00001E82 64D3                   MOV         R13,R4
      simplexC.c  1084                default: break;
    00001E84              L1361:                            
    00001E84 2CC8                   TST         R12,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E86 8901                   BT          L1518
    00001E88 AF78                   BRA         L1362
    00001E8A 0009                   NOP
    00001E8C              L1518:                            
      simplexC.c  1085            }
      simplexC.c  1086        }
      simplexC.c  1087        return 0;
      simplexC.c  1088    }
    00001E8C 9179                   MOV.W       L1519,R1   ; H'0104
    00001E8E E000                   MOV         #0,R0
    00001E90 3F1C                   ADD         R1,R15
    00001E92 4F26                   LDS.L       @R15+,PR
    00001E94 68F6                   MOV.L       @R15+,R8
    00001E96 69F6                   MOV.L       @R15+,R9
    00001E98 6AF6                   MOV.L       @R15+,R10
    00001E9A 6BF6                   MOV.L       @R15+,R11
    00001E9C 6CF6                   MOV.L       @R15+,R12
    00001E9E 6DF6                   MOV.L       @R15+,R13
    00001EA0 000B                   RTS
    00001EA2 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1089    
      simplexC.c  1090    int printIts()
    00001EA4              _printIts:                       ; function: printIts
                                                           ; frame size=428
    00001EA4 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1091    {
      simplexC.c  1092    
      simplexC.c  1093        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c  1094        int menuChoice;
      simplexC.c  1095        menuChoice=INITIALIZE_VALUE_OPT_ITS_MENU;
    00001EA6 E3FE                   MOV         #-2,R3
      simplexC.c  1096        sprintf(stroutTop,"Its sel. Nits: %d. Exit %d", ex.nodes.nIterations, EXIT_OPT_ITS_MENU);
    00001EA8 D139                   MOV.L       L1519+14,R1; L838
    00001EAA 2FD6                   MOV.L       R13,@-R15
    00001EAC 2FC6                   MOV.L       R12,@-R15
    00001EAE 2FB6                   MOV.L       R11,@-R15
    00001EB0 2FA6                   MOV.L       R10,@-R15
    00001EB2 2F96                   MOV.L       R9,@-R15
    00001EB4 4F22                   STS.L       PR,@-R15
    00001EB6 9065                   MOV.W       L1519+2,R0 ; H'FE7C
    00001EB8 9C63                   MOV.W       L1519,R12  ; H'0104
    00001EBA 3F0C                   ADD         R0,R15
    00001EBC DD33                   MOV.L       L1519+10,R13; _ex
    00001EBE 3CFC                   ADD         R15,R12
    00001EC0 2F32                   MOV.L       R3,@R15
    00001EC2 E3FF                   MOV         #-1,R3
    00001EC4 2F36                   MOV.L       R3,@-R15
    00001EC6 52D4                   MOV.L       @(16,R13),R2
    00001EC8 2F26                   MOV.L       R2,@-R15
    00001ECA 2F16                   MOV.L       R1,@-R15
    00001ECC D231                   MOV.L       L1519+18,R2; _sprintf
    00001ECE 420B                   JSR         @R2
    00001ED0 64C3                   MOV         R12,R4
    00001ED2 7F0C                   ADD         #12,R15
      simplexC.c  1097    
      simplexC.c  1098        while(menuChoice!=EXIT_OPT_ITS_MENU)
    00001ED4 D930                   MOV.L       L1519+22,R9; _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001ED6 DA31                   MOV.L       L1519+26,R10; _PrintMini
    00001ED8 DB31                   MOV.L       L1519+30,R11; _Bdisp_AllClr_DDVRAM
    00001EDA              L1366:                            
      simplexC.c  1099        {
      simplexC.c  1100            Bdisp_AllClr_DDVRAM();
    00001EDA 4B0B                   JSR         @R11
    00001EDC 0009                   NOP
      simplexC.c  1101            
      simplexC.c  1102            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001EDE E710                   MOV         #16,R7
    00001EE0 66C3                   MOV         R12,R6
    00001EE2 E500                   MOV         #0,R5
    00001EE4 4A0B                   JSR         @R10
    00001EE6 6453                   MOV         R5,R4
      simplexC.c  1103            menuChoice = InputI(0, 7);
    00001EE8 D32E                   MOV.L       L1519+34,R3; _InputI
    00001EEA E507                   MOV         #7,R5
    00001EEC 430B                   JSR         @R3
    00001EEE E400                   MOV         #0,R4
      simplexC.c  1104            Bdisp_PutDisp_DD();
    00001EF0 490B                   JSR         @R9
    00001EF2 6E03                   MOV         R0,R14
      simplexC.c  1105            if(menuChoice<=ex.nodes.nIterations && menuChoice!=EXIT_OPT_ITS_MENU)
    00001EF4 52D4                   MOV.L       @(16,R13),R2
    00001EF6 3E27                   CMP/GT      R2,R14
    00001EF8 8904                   BT          L1367
    00001EFA 60E3                   MOV         R14,R0
    00001EFC 88FF                   CMP/EQ      #-1,R0
    00001EFE 8901                   BT          L1367
      simplexC.c  1106            {
      simplexC.c  1107                printIteration(menuChoice);
    00001F00 BED1                   BSR         _printIteration
    00001F02 64E3                   MOV         R14,R4
    00001F04              L1367:                            
    00001F04 60E3                   MOV         R14,R0
    00001F06 88FF                   CMP/EQ      #-1,R0
    00001F08 8BE7                   BF          L1366
      simplexC.c  1108            }
      simplexC.c  1109        }
      simplexC.c  1110        return 0;
    00001F0A E000                   MOV         #0,R0
      simplexC.c  1111    }
    00001F0C 913B                   MOV.W       L1519+4,R1 ; H'0184
    00001F0E 3F1C                   ADD         R1,R15
    00001F10 4F26                   LDS.L       @R15+,PR
    00001F12 69F6                   MOV.L       @R15+,R9
    00001F14 6AF6                   MOV.L       @R15+,R10
    00001F16 6BF6                   MOV.L       @R15+,R11
    00001F18 6CF6                   MOV.L       @R15+,R12
    00001F1A 6DF6                   MOV.L       @R15+,R13
    00001F1C 000B                   RTS
    00001F1E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1112    
      simplexC.c  1113    int printSolMenu()
    00001F20              _printSolMenu:                   ; function: printSolMenu
                                                           ; frame size=436
                                                           ; used runtime library name:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; __stod
    00001F20 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1114    {
      simplexC.c  1115        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c  1116        int menuChoice;
      simplexC.c  1117        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c  1118        sprintf(stroutTop,"Problem solution, printMenu. Exit %d", EXIT_OPT);
    00001F22 E300                   MOV         #0,R3
    00001F24 D220                   MOV.L       L1519+38,R2; L847
    00001F26 2FD6                   MOV.L       R13,@-R15
    00001F28 2FC6                   MOV.L       R12,@-R15
    00001F2A EDFF                   MOV         #-1,R13
    00001F2C D119                   MOV.L       L1519+18,R1; _sprintf
    00001F2E 2FB6                   MOV.L       R11,@-R15
    00001F30 2FA6                   MOV.L       R10,@-R15
    00001F32 2F96                   MOV.L       R9,@-R15
    00001F34 2F86                   MOV.L       R8,@-R15
    00001F36 4F22                   STS.L       PR,@-R15
    00001F38 9024                   MOV.W       L1519+2,R0 ; H'FE7C
    00001F3A 3F0C                   ADD         R0,R15
    00001F3C 9B21                   MOV.W       L1519,R11  ; H'0104
    00001F3E 3BFC                   ADD         R15,R11
    00001F40 2F36                   MOV.L       R3,@-R15
    00001F42 2F26                   MOV.L       R2,@-R15
    00001F44 410B                   JSR         @R1
    00001F46 64B3                   MOV         R11,R4
      simplexC.c  1119        sprintf(stroutBasicInfo, "Nits: %d, ZSol: %.2f",ex.nodes.nIterations,ex.nodes.its[ex.nodes.nIterations
                         +]->zSol);
    00001F48 9C1E                   MOV.W       L1519+6,R12; H'0084
    00001F4A 7F08                   ADD         #8,R15
    00001F4C D317                   MOV.L       L1519+42,R3; H'00000010+_ex
    00001F4E 3CFC                   ADD         R15,R12
    00001F50 D117                   MOV.L       L1519+46,R1; H'00000014+_ex
    00001F52 6032                   MOV.L       @R3,R0
    00001F54 2F02                   MOV.L       R0,@R15
    00001F56 4008                   SHLL2       R0
    00001F58 6212                   MOV.L       @R1,R2
    00001F5A 002E                   MOV.L       @(R0,R2),R0
    00001F5C E244                   MOV         #68,R2
    00001F5E 002E                   MOV.L       @(R0,R2),R0
    00001F60 D214                   MOV.L       L1519+50,R2; __stod
    00001F62 7FF8                   ADD         #-8,R15
    00001F64 420B                   JSR         @R2
    00001F66 2FF6                   MOV.L       R15,@-R15
    00001F68 53F2                   MOV.L       @(8,R15),R3
    00001F6A 2F36                   MOV.L       R3,@-R15
    00001F6C D212                   MOV.L       L1519+54,R2; L848
    00001F6E 2F26                   MOV.L       R2,@-R15
    00001F70 D308                   MOV.L       L1519+18,R3; _sprintf
    00001F72 430B                   JSR         @R3
    00001F74 64C3                   MOV         R12,R4
    00001F76 D811                   MOV.L       L1519+58,R8; L851
    00001F78 D911                   MOV.L       L1519+62,R9; L850
    00001F7A DA09                   MOV.L       L1519+30,R10; _Bdisp_AllClr_DDVRAM
    00001F7C DE07                   MOV.L       L1519+26,R14; _PrintMini
      simplexC.c  1120    
      simplexC.c  1121        while(menuChoice!=EXIT_OPT)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F7E A04B                   BRA         L1369
    00001F80 7F10                   ADD         #16,R15
    00001F82              L1519:                            
    00001F82 0104                   .DATA.W     H'0104
    00001F84 FE7C                   .DATA.W     H'FE7C
    00001F86 0184                   .DATA.W     H'0184
    00001F88 0084                   .DATA.W     H'0084
    00001F8A 0000                   .DATA.W     0
    00001F8C <00000000>             .DATA.L     _ex
    00001F90 <00000000>             .DATA.L     L838
    00001F94 <00000000>             .DATA.L     _sprintf
    00001F98 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001F9C <00000000>             .DATA.L     _PrintMini
    00001FA0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001FA4 <00000000>             .DATA.L     _InputI
    00001FA8 <00000000>             .DATA.L     L847
    00001FAC <00000010>             .DATA.L     H'00000010+_ex
    00001FB0 <00000014>             .DATA.L     H'00000014+_ex
    00001FB4 <00000000>             .DATA.L     __stod
    00001FB8 <00000000>             .DATA.L     L848
    00001FBC <00000000>             .DATA.L     L851
    00001FC0 <00000000>             .DATA.L     L850
    00001FC4              L1370:                            
      simplexC.c  1122        {
      simplexC.c  1123            Bdisp_AllClr_DDVRAM();
    00001FC4 4A0B                   JSR         @R10
    00001FC6 0009                   NOP
      simplexC.c  1124            
      simplexC.c  1125            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001FC8 E710                   MOV         #16,R7
    00001FCA 66B3                   MOV         R11,R6
    00001FCC E500                   MOV         #0,R5
    00001FCE 4E0B                   JSR         @R14
    00001FD0 6453                   MOV         R5,R4
      simplexC.c  1126            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001FD2 E710                   MOV         #16,R7
    00001FD4 66C3                   MOV         R12,R6
    00001FD6 E507                   MOV         #7,R5
    00001FD8 4E0B                   JSR         @R14
    00001FDA E400                   MOV         #0,R4
      simplexC.c  1127            PrintMini(0, 14, (unsigned char*)"1 Pinfo res vars", MINI_OVER);
    00001FDC E710                   MOV         #16,R7
    00001FDE 6693                   MOV         R9,R6
    00001FE0 E50E                   MOV         #14,R5
    00001FE2 4E0B                   JSR         @R14
    00001FE4 E400                   MOV         #0,R4
      simplexC.c  1128            PrintMini(0, 21, (unsigned char*)"2 Pinfo its", MINI_OVER);
    00001FE6 E710                   MOV         #16,R7
    00001FE8 6683                   MOV         R8,R6
    00001FEA E515                   MOV         #21,R5
    00001FEC 4E0B                   JSR         @R14
    00001FEE E400                   MOV         #0,R4
      simplexC.c  1129            menuChoice = InputI(0, 28);
    00001FF0 D33C                   MOV.L       L1520+8,R3 ; _InputI
    00001FF2 E51C                   MOV         #28,R5
    00001FF4 430B                   JSR         @R3
    00001FF6 E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1130            Bdisp_PutDisp_DD();
    00001FF8 D23B                   MOV.L       L1520+12,R2; _Bdisp_PutDisp_DD
    00001FFA 420B                   JSR         @R2
    00001FFC 6D03                   MOV         R0,R13
      simplexC.c  1131            switch (menuChoice)
    00001FFE 60D3                   MOV         R13,R0
    00002000 8801                   CMP/EQ      #1,R0
    00002002 8903                   BT          L1139
    00002004 8802                   CMP/EQ      #2,R0
    00002006 8905                   BT          L1140
    00002008 A006                   BRA         L1369
    0000200A 0009                   NOP
    0000200C              L1139:                           ; case label 
      simplexC.c  1132            {
      simplexC.c  1133                case 1: printResVariables();break;
    0000200C BB8F                   BSR         _printResVariables
    0000200E 0009                   NOP
    00002010 A002                   BRA         L1369
    00002012 0009                   NOP
    00002014              L1140:                           ; case label 
      simplexC.c  1134                case 2: printIts();break;
    00002014 BF46                   BSR         _printIts
    00002016 0009                   NOP
      simplexC.c  1135                default: break;
    00002018              L1369:                            
    00002018 2DD8                   TST         R13,R13
    0000201A 8BD3                   BF          L1370
      simplexC.c  1136            }
      simplexC.c  1137        }
      simplexC.c  1138        return 0;
      simplexC.c  1139    }
    0000201C 915E                   MOV.W       L1520,R1   ; H'0184
    0000201E E000                   MOV         #0,R0
    00002020 3F1C                   ADD         R1,R15
    00002022 4F26                   LDS.L       @R15+,PR
    00002024 68F6                   MOV.L       @R15+,R8
    00002026 69F6                   MOV.L       @R15+,R9
    00002028 6AF6                   MOV.L       @R15+,R10
    0000202A 6BF6                   MOV.L       @R15+,R11
    0000202C 6CF6                   MOV.L       @R15+,R12
    0000202E 6DF6                   MOV.L       @R15+,R13
    00002030 000B                   RTS
    00002032 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1140    
      simplexC.c  1141    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    00002034              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    00002034 2FE6                   MOV.L       R14,@-R15
    00002036 4F22                   STS.L       PR,@-R15
    00002038 9051                   MOV.W       L1520+2,R0 ; H'FF74
    0000203A 3F0C                   ADD         R0,R15
    0000203C 2F42                   MOV.L       R4,@R15
    0000203E 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c  1142    {   
      simplexC.c  1143        char strout[128];
      simplexC.c  1144        int res;
      simplexC.c  1145        Bdisp_AllClr_DDVRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002040 D32A                   MOV.L       L1520+16,R3; _Bdisp_AllClr_DDVRAM
    00002042 430B                   JSR         @R3
    00002044 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c  1146        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);
    00002046 6EF3                   MOV         R15,R14
    00002048 62F2                   MOV.L       @R15,R2
    0000204A 7E0C                   ADD         #12,R14
    0000204C D328                   MOV.L       L1520+20,R3; L860
    0000204E 2F26                   MOV.L       R2,@-R15
    00002050 2F36                   MOV.L       R3,@-R15
    00002052 D228                   MOV.L       L1520+24,R2; _sprintf
    00002054 420B                   JSR         @R2
    00002056 64E3                   MOV         R14,R4
      simplexC.c  1147        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002058 1FE2                   MOV.L       R14,@(8,R15)
    0000205A 66E3                   MOV         R14,R6
    0000205C D326                   MOV.L       L1520+28,R3; _PrintMini
    0000205E E710                   MOV         #16,R7
    00002060 E500                   MOV         #0,R5
    00002062 430B                   JSR         @R3
    00002064 6453                   MOV         R5,R4
      simplexC.c  1148        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c  1149            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    00002066 E202                   MOV         #2,R2
    00002068 2F26                   MOV.L       R2,@-R15
    0000206A E301                   MOV         #1,R3
    0000206C D221                   MOV.L       L1520+24,R2; _sprintf
    0000206E E100                   MOV         #0,R1
    00002070 2F36                   MOV.L       R3,@-R15
    00002072 2F16                   MOV.L       R1,@-R15
    00002074 D321                   MOV.L       L1520+32,R3; L861
    00002076 2F36                   MOV.L       R3,@-R15
    00002078 420B                   JSR         @R2
    0000207A 64E3                   MOV         R14,R4
      simplexC.c  1150        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    0000207C D31E                   MOV.L       L1520+28,R3; _PrintMini
    0000207E 7F18                   ADD         #24,R15
    00002080 66F2                   MOV.L       @R15,R6
    00002082 E507                   MOV         #7,R5
    00002084 E710                   MOV         #16,R7
    00002086 430B                   JSR         @R3
    00002088 E400                   MOV         #0,R4
      simplexC.c  1151        res = InputI(0,14);
    0000208A E50E                   MOV         #14,R5
    0000208C D215                   MOV.L       L1520+8,R2 ; _InputI
    0000208E 420B                   JSR         @R2
    00002090 E400                   MOV         #0,R4
      simplexC.c  1152        Bdisp_PutDisp_DD();
    00002092 D315                   MOV.L       L1520+12,R3; _Bdisp_PutDisp_DD
    00002094 430B                   JSR         @R3
    00002096 6E03                   MOV         R0,R14
      simplexC.c  1153        switch (res)
    00002098 60E3                   MOV         R14,R0
    0000209A 8800                   CMP/EQ      #0,R0
    0000209C 8905                   BT          L1144
    0000209E 8801                   CMP/EQ      #1,R0
    000020A0 8909                   BT          L1145




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000020A2 8802                   CMP/EQ      #2,R0
    000020A4 890C                   BT          L1146
    000020A6 A013                   BRA         L1373
    000020A8 0009                   NOP
    000020AA              L1144:                           ; case label 
      simplexC.c  1154        {
      simplexC.c  1155            case INE_EQUAL: *nVariables2fases+=1; break;
    000020AA 52F2                   MOV.L       @(8,R15),R2
    000020AC 6322                   MOV.L       @R2,R3
    000020AE 7301                   ADD         #1,R3
    000020B0 2232                   MOV.L       R3,@R2
    000020B2 A00D                   BRA         L1373
    000020B4 0009                   NOP
    000020B6              L1145:                           ; case label 
      simplexC.c  1156            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    000020B6 51F1                   MOV.L       @(4,R15),R1
    000020B8 6312                   MOV.L       @R1,R3
    000020BA 7301                   ADD         #1,R3
    000020BC A008                   BRA         L1373
    000020BE 2132                   MOV.L       R3,@R1
    000020C0              L1146:                           ; case label 
      simplexC.c  1157            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    000020C0 51F1                   MOV.L       @(4,R15),R1
    000020C2 6312                   MOV.L       @R1,R3
    000020C4 7301                   ADD         #1,R3
    000020C6 2132                   MOV.L       R3,@R1
    000020C8 52F2                   MOV.L       @(8,R15),R2
    000020CA 6322                   MOV.L       @R2,R3
    000020CC 7301                   ADD         #1,R3
    000020CE 2232                   MOV.L       R3,@R2
    000020D0              L1373:                            
      simplexC.c  1158        }
      simplexC.c  1159    
      simplexC.c  1160        return res;
      simplexC.c  1161    }
    000020D0 9106                   MOV.W       L1520+4,R1 ; H'008C
    000020D2 60E3                   MOV         R14,R0
    000020D4 3F1C                   ADD         R1,R15
    000020D6 4F26                   LDS.L       @R15+,PR
    000020D8 000B                   RTS
    000020DA 6EF6                   MOV.L       @R15+,R14
    000020DC              L1520:                            
    000020DC 0184                   .DATA.W     H'0184
    000020DE FF74                   .DATA.W     H'FF74
    000020E0 008C                   .DATA.W     H'008C
    000020E2 0000                   .DATA.W     0
    000020E4 <00000000>             .DATA.L     _InputI
    000020E8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000020EC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000020F0 <00000000>             .DATA.L     L860
    000020F4 <00000000>             .DATA.L     _sprintf
    000020F8 <00000000>             .DATA.L     _PrintMini
    000020FC <00000000>             .DATA.L     L861
      simplexC.c  1162    
      simplexC.c  1163    float getRightValue(int nConstraint)
    00002100              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=144




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002100 4F22                   STS.L       PR,@-R15
    00002102 9074                   MOV.W       L1521,R0   ; H'FF7C
      simplexC.c  1164    {   
      simplexC.c  1165        char strout[128];
      simplexC.c  1166        float res;
      simplexC.c  1167        Bdisp_AllClr_DDVRAM();
    00002104 D33C                   MOV.L       L1521+10,R3; _Bdisp_AllClr_DDVRAM
    00002106 3F0C                   ADD         R0,R15
    00002108 430B                   JSR         @R3
    0000210A 2F42                   MOV.L       R4,@R15
      simplexC.c  1168        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    0000210C 62F2                   MOV.L       @R15,R2
    0000210E 2F26                   MOV.L       R2,@-R15
    00002110 D33A                   MOV.L       L1521+14,R3; L868
    00002112 2F36                   MOV.L       R3,@-R15
    00002114 D23A                   MOV.L       L1521+18,R2; _sprintf
    00002116 64F3                   MOV         R15,R4
    00002118 420B                   JSR         @R2
    0000211A 740C                   ADD         #12,R4
      simplexC.c  1169        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000211C D339                   MOV.L       L1521+22,R3; _PrintMini
    0000211E E710                   MOV         #16,R7
    00002120 66F3                   MOV         R15,R6
    00002122 760C                   ADD         #12,R6
    00002124 E500                   MOV         #0,R5
    00002126 430B                   JSR         @R3
    00002128 6453                   MOV         R5,R4
      simplexC.c  1170        Bdisp_PutDisp_DD();
    0000212A D237                   MOV.L       L1521+26,R2; _Bdisp_PutDisp_DD
    0000212C 420B                   JSR         @R2
    0000212E 0009                   NOP
      simplexC.c  1171        res = InputD(0,7);
    00002130 D336                   MOV.L       L1521+30,R3; _InputD
    00002132 E507                   MOV         #7,R5
    00002134 430B                   JSR         @R3
    00002136 E400                   MOV         #0,R4
      simplexC.c  1172        return res;
      simplexC.c  1173    }
    00002138 915A                   MOV.W       L1521+2,R1 ; H'008C
    0000213A 3F1C                   ADD         R1,R15
    0000213C 4F26                   LDS.L       @R15+,PR
    0000213E 000B                   RTS
    00002140 0009                   NOP
      simplexC.c  1174    
      simplexC.c  1175    float *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, float *rightValue, int
                         + *nVariablesSlope, int * nVariables2fases)
    00002142              _getInequation:                  ; function: getInequation
                                                           ; frame size=184
    00002142 2FE6                   MOV.L       R14,@-R15
    00002144 2FD6                   MOV.L       R13,@-R15
    00002146 2FC6                   MOV.L       R12,@-R15
    00002148 2FB6                   MOV.L       R11,@-R15
    0000214A 2FA6                   MOV.L       R10,@-R15
    0000214C 2F96                   MOV.L       R9,@-R15
    0000214E 6A43                   MOV         R4,R10
      simplexC.c  1176    {
      simplexC.c  1177        char strout[128];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1178        unsigned int i;
      simplexC.c  1179        float *constraintValues;
      simplexC.c  1180        constraintValues = (float *)malloc(sizeof(float) * nVariables);
    00002150 D32F                   MOV.L       L1521+34,R3; _malloc
    00002152 6953                   MOV         R5,R9
    00002154 2F86                   MOV.L       R8,@-R15
    00002156 64A3                   MOV         R10,R4
    00002158 904B                   MOV.W       L1521+4,R0 ; H'FF74
    0000215A 4F22                   STS.L       PR,@-R15
    0000215C 3F0C                   ADD         R0,R15
    0000215E 1F62                   MOV.L       R6,@(8,R15)
    00002160 1F71                   MOV.L       R7,@(4,R15)
    00002162 430B                   JSR         @R3
    00002164 4408                   SHLL2       R4
      simplexC.c  1181        for (i = 0; i < nVariables; i++)
    00002166 EB00                   MOV         #0,R11
    00002168 D826                   MOV.L       L1521+22,R8; _PrintMini
    0000216A 6CF3                   MOV         R15,R12
    0000216C 2F02                   MOV.L       R0,@R15
    0000216E EE00                   MOV         #0,R14
    00002170 3E0C                   ADD         R0,R14
    00002172 ED01                   MOV         #1,R13
    00002174 63B3                   MOV         R11,R3
    00002176 33A2                   CMP/HS      R10,R3
    00002178 8D1D                   BT/S        L1376
    0000217A 7C0C                   ADD         #12,R12
    0000217C              L1377:                            
      simplexC.c  1182        {
      simplexC.c  1183            Bdisp_AllClr_DDVRAM();
    0000217C D11E                   MOV.L       L1521+10,R1; _Bdisp_AllClr_DDVRAM
    0000217E 410B                   JSR         @R1
    00002180 0009                   NOP
      simplexC.c  1184            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    00002182 2FD6                   MOV.L       R13,@-R15
    00002184 2F96                   MOV.L       R9,@-R15
    00002186 D323                   MOV.L       L1521+38,R3; L881
    00002188 D21D                   MOV.L       L1521+18,R2; _sprintf
    0000218A 2F36                   MOV.L       R3,@-R15
    0000218C 420B                   JSR         @R2
    0000218E 64C3                   MOV         R12,R4
    00002190 7F0C                   ADD         #12,R15
      simplexC.c  1185            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002192 E710                   MOV         #16,R7
    00002194 66C3                   MOV         R12,R6
    00002196 E500                   MOV         #0,R5
    00002198 480B                   JSR         @R8
    0000219A 6453                   MOV         R5,R4
      simplexC.c  1186            Bdisp_PutDisp_DD();
    0000219C D31A                   MOV.L       L1521+26,R3; _Bdisp_PutDisp_DD
    0000219E 430B                   JSR         @R3
    000021A0 0009                   NOP
      simplexC.c  1187            constraintValues[i] = InputD(0, 7);
    000021A2 E507                   MOV         #7,R5
    000021A4 D219                   MOV.L       L1521+30,R2; _InputD
    000021A6 420B                   JSR         @R2
    000021A8 E400                   MOV         #0,R4
    000021AA 7B01                   ADD         #1,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021AC 2E02                   MOV.L       R0,@R14
    000021AE 3BA2                   CMP/HS      R10,R11
    000021B0 7E04                   ADD         #4,R14
    000021B2 8FE3                   BF/S        L1377
    000021B4 7D01                   ADD         #1,R13
    000021B6              L1376:                            
      simplexC.c  1188        }
      simplexC.c  1189        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    000021B6 52F2                   MOV.L       @(8,R15),R2
    000021B8 901C                   MOV.W       L1521+6,R0 ; H'00B4
    000021BA 2F26                   MOV.L       R2,@-R15
    000021BC 06FE                   MOV.L       @(R0,R15),R6
    000021BE 901A                   MOV.W       L1521+8,R0 ; H'00B0
    000021C0 05FE                   MOV.L       @(R0,R15),R5
    000021C2 BF37                   BSR         _getInequalitySign
    000021C4 6493                   MOV         R9,R4
    000021C6 61F6                   MOV.L       @R15+,R1
    000021C8 2102                   MOV.L       R0,@R1
      simplexC.c  1190        *rightValue = getRightValue(nConstraint);
    000021CA 53F1                   MOV.L       @(4,R15),R3
    000021CC 2F36                   MOV.L       R3,@-R15
    000021CE BF97                   BSR         _getRightValue
    000021D0 6493                   MOV         R9,R4
    000021D2 62F6                   MOV.L       @R15+,R2
      simplexC.c  1191        return constraintValues;
      simplexC.c  1192    }
    000021D4 910C                   MOV.W       L1521+2,R1 ; H'008C
    000021D6 2202                   MOV.L       R0,@R2
    000021D8 60F2                   MOV.L       @R15,R0
    000021DA 3F1C                   ADD         R1,R15
    000021DC 4F26                   LDS.L       @R15+,PR
    000021DE 68F6                   MOV.L       @R15+,R8
    000021E0 69F6                   MOV.L       @R15+,R9
    000021E2 6AF6                   MOV.L       @R15+,R10
    000021E4 6BF6                   MOV.L       @R15+,R11
    000021E6 6CF6                   MOV.L       @R15+,R12
    000021E8 6DF6                   MOV.L       @R15+,R13
    000021EA 000B                   RTS
    000021EC 6EF6                   MOV.L       @R15+,R14
    000021EE              L1521:                            
    000021EE FF7C                   .DATA.W     H'FF7C
    000021F0 008C                   .DATA.W     H'008C
    000021F2 FF74                   .DATA.W     H'FF74
    000021F4 00B4                   .DATA.W     H'00B4
    000021F6 00B0                   .DATA.W     H'00B0
    000021F8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000021FC <00000000>             .DATA.L     L868
    00002200 <00000000>             .DATA.L     _sprintf
    00002204 <00000000>             .DATA.L     _PrintMini
    00002208 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000220C <00000000>             .DATA.L     _InputD
    00002210 <00000000>             .DATA.L     _malloc
    00002214 <00000000>             .DATA.L     L881
      simplexC.c  1193    
      simplexC.c  1194    struct problemStatement* getProblemInputs()
    00002218              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002218 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1195    {
      simplexC.c  1196        char strout[128];
      simplexC.c  1197        unsigned int nConstraints;
      simplexC.c  1198        unsigned int nVariables;
      simplexC.c  1199        unsigned int i;
      simplexC.c  1200        int nVariablesInteger;
      simplexC.c  1201        int problemType;
      simplexC.c  1202        float **constraints;
      simplexC.c  1203        float *rightValues;
      simplexC.c  1204        float *funcObjtValues;
      simplexC.c  1205        int *inequalitiesSigns;
      simplexC.c  1206        int *idIntegerVariables;
      simplexC.c  1207        int *idSlopeVariables;
      simplexC.c  1208        int *id2fasesVariables;
      simplexC.c  1209        struct problemStatement *pInput;
      simplexC.c  1210        nVariablesInteger=0;
    0000221A E300                   MOV         #0,R3
    0000221C 90B0                   MOV.W       L1522,R0   ; H'FF4C
    0000221E 2FD6                   MOV.L       R13,@-R15
    00002220 2FC6                   MOV.L       R12,@-R15
    00002222 2FB6                   MOV.L       R11,@-R15
    00002224 2FA6                   MOV.L       R10,@-R15
    00002226 2F96                   MOV.L       R9,@-R15
    00002228 2F86                   MOV.L       R8,@-R15
    0000222A 4F22                   STS.L       PR,@-R15
      simplexC.c  1211        pInput = malloc(sizeof(struct problemStatement));
    0000222C DA55                   MOV.L       L1522+4,R10; _malloc
    0000222E 3F0C                   ADD         R0,R15
    00002230 1F37                   MOV.L       R3,@(28,R15)
    00002232 4A0B                   JSR         @R10
    00002234 E454                   MOV         #84,R4
      simplexC.c  1212        Bdisp_AllClr_DDVRAM();
    00002236 D354                   MOV.L       L1522+8,R3 ; _Bdisp_AllClr_DDVRAM
    00002238 430B                   JSR         @R3
    0000223A 6E03                   MOV         R0,R14
      simplexC.c  1213        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    0000223C DB53                   MOV.L       L1522+12,R11; _PrintMini
    0000223E E710                   MOV         #16,R7
    00002240 D653                   MOV.L       L1522+16,R6; L898
    00002242 E500                   MOV         #0,R5
    00002244 4B0B                   JSR         @R11
    00002246 6453                   MOV         R5,R4
      simplexC.c  1214        Bdisp_PutDisp_DD();
    00002248 D952                   MOV.L       L1522+20,R9; _Bdisp_PutDisp_DD
    0000224A 490B                   JSR         @R9
    0000224C 0009                   NOP
      simplexC.c  1215        nConstraints = InputI(0, 7);
    0000224E E507                   MOV         #7,R5
    00002250 D251                   MOV.L       L1522+24,R2; _InputI
    00002252 420B                   JSR         @R2
    00002254 E400                   MOV         #0,R4
      simplexC.c  1216        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    00002256 E710                   MOV         #16,R7
    00002258 D650                   MOV.L       L1522+28,R6; L899
    0000225A E50E                   MOV         #14,R5
    0000225C 1F02                   MOV.L       R0,@(8,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000225E 4B0B                   JSR         @R11
    00002260 E400                   MOV         #0,R4
      simplexC.c  1217        Bdisp_PutDisp_DD();
    00002262 490B                   JSR         @R9
    00002264 0009                   NOP
      simplexC.c  1218        nVariables = InputI(0, 21);
    00002266 E515                   MOV         #21,R5
    00002268 D34B                   MOV.L       L1522+24,R3; _InputI
    0000226A 430B                   JSR         @R3
    0000226C E400                   MOV         #0,R4
    0000226E 6C03                   MOV         R0,R12
      simplexC.c  1219        problemType = TYPE_LP;
    00002270 E201                   MOV         #1,R2
    00002272 1F2C                   MOV.L       R2,@(48,R15)
      simplexC.c  1220        constraints = (float **)malloc(sizeof(float) * nConstraints);
    00002274 54F2                   MOV.L       @(8,R15),R4
    00002276 4408                   SHLL2       R4
    00002278 4A0B                   JSR         @R10
    0000227A 2F42                   MOV.L       R4,@R15
    0000227C 1F06                   MOV.L       R0,@(24,R15)
      simplexC.c  1221        rightValues=calloc(nConstraints,sizeof(float));
    0000227E E504                   MOV         #4,R5
    00002280 DD47                   MOV.L       L1522+32,R13; _calloc
    00002282 4D0B                   JSR         @R13
    00002284 54F2                   MOV.L       @(8,R15),R4
    00002286 1F08                   MOV.L       R0,@(32,R15)
      simplexC.c  1222        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    00002288 4A0B                   JSR         @R10
    0000228A 64F2                   MOV.L       @R15,R4
    0000228C 1F05                   MOV.L       R0,@(20,R15)
      simplexC.c  1223        funcObjtValues = calloc(nVariables+1,sizeof(float));
    0000228E E504                   MOV         #4,R5
    00002290 64C3                   MOV         R12,R4
    00002292 4D0B                   JSR         @R13
    00002294 7401                   ADD         #1,R4
      simplexC.c  1224        idIntegerVariables = calloc(nVariables,sizeof(int));
    00002296 E504                   MOV         #4,R5
    00002298 1F04                   MOV.L       R0,@(16,R15)
    0000229A 4D0B                   JSR         @R13
    0000229C 64C3                   MOV         R12,R4
      simplexC.c  1225        idSlopeVariables = calloc(nVariables,sizeof(int));
    0000229E E504                   MOV         #4,R5
    000022A0 1F09                   MOV.L       R0,@(36,R15)
    000022A2 4D0B                   JSR         @R13
    000022A4 64C3                   MOV         R12,R4
      simplexC.c  1226        id2fasesVariables = calloc(nVariables,sizeof(int));
    000022A6 E504                   MOV         #4,R5
    000022A8 1F0B                   MOV.L       R0,@(44,R15)
    000022AA 4D0B                   JSR         @R13
    000022AC 64C3                   MOV         R12,R4
      simplexC.c  1227        pInput->nVariablesSlope=0;
    000022AE E300                   MOV         #0,R3
      simplexC.c  1228        pInput->nVariables2fases=0;
      simplexC.c  1229        for(i=0;i<nVariables;i++)
    000022B0 9867                   MOV.W       L1522+2,R8 ; H'0080
    000022B2 6DF3                   MOV         R15,R13
    000022B4 1F0A                   MOV.L       R0,@(40,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022B6 6233                   MOV         R3,R2
    000022B8 1E38                   MOV.L       R3,@(32,R14)
    000022BA 1E39                   MOV.L       R3,@(36,R14)
    000022BC 1F31                   MOV.L       R3,@(4,R15)
    000022BE E301                   MOV         #1,R3
    000022C0 5AF9                   MOV.L       @(36,R15),R10
    000022C2 2F32                   MOV.L       R3,@R15
    000022C4 E300                   MOV         #0,R3
    000022C6 3C36                   CMP/HI      R3,R12
    000022C8 8F09                   BF/S        L1379
    000022CA 7D34                   ADD         #52,R13
    000022CC              L1381:                            
    000022CC 53F1                   MOV.L       @(4,R15),R3
    000022CE 7A04                   ADD         #4,R10
    000022D0 7301                   ADD         #1,R3
    000022D2 33C2                   CMP/HS      R12,R3
    000022D4 1F31                   MOV.L       R3,@(4,R15)
    000022D6 62F2                   MOV.L       @R15,R2
    000022D8 7201                   ADD         #1,R2
    000022DA 8FF7                   BF/S        L1381
    000022DC 2F22                   MOV.L       R2,@R15
    000022DE              L1379:                            
      simplexC.c  1230        {
      simplexC.c  1231            if(problemType!=TYPE_LP)
      simplexC.c  1232            {
      simplexC.c  1233                Bdisp_AllClr_DDVRAM();
      simplexC.c  1234                sprintf(strout,"Variable x%d",i+1);
      simplexC.c  1235                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
      simplexC.c  1236                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
      simplexC.c  1237                idIntegerVariables[i] = InputI(0, 14);
      simplexC.c  1238                Bdisp_PutDisp_DD();
      simplexC.c  1239                memset(strout,0,128);
      simplexC.c  1240                if(idIntegerVariables[i]==1)
      simplexC.c  1241                {
      simplexC.c  1242                    nVariablesInteger+=1;
      simplexC.c  1243                }
      simplexC.c  1244            }
      simplexC.c  1245        }
      simplexC.c  1246        for (i = 0; i < nConstraints; i++)
    000022DE E300                   MOV         #0,R3
    000022E0 1F31                   MOV.L       R3,@(4,R15)
    000022E2 E201                   MOV         #1,R2
    000022E4 2F22                   MOV.L       R2,@R15
    000022E6 52F2                   MOV.L       @(8,R15),R2
    000022E8 3236                   CMP/HI      R3,R2
    000022EA 8F1D                   BF/S        L1383
    000022EC 6A33                   MOV         R3,R10
    000022EE              L1384:                            
      simplexC.c  1247        {
      simplexC.c  1248            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV
                         +ariablesSlope,&pInput->nVariables2fases);
    000022EE 63E3                   MOV         R14,R3
    000022F0 50F6                   MOV.L       @(24,R15),R0
    000022F2 7324                   ADD         #36,R3
    000022F4 30AC                   ADD         R10,R0
    000022F6 2F06                   MOV.L       R0,@-R15
    000022F8 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022FA 63E3                   MOV         R14,R3
    000022FC 7320                   ADD         #32,R3
    000022FE 2F36                   MOV.L       R3,@-R15
    00002300 57FB                   MOV.L       @(44,R15),R7
    00002302 37AC                   ADD         R10,R7
    00002304 56F8                   MOV.L       @(32,R15),R6
    00002306 36AC                   ADD         R10,R6
    00002308 55F3                   MOV.L       @(12,R15),R5
    0000230A BF1A                   BSR         _getInequation
    0000230C 64C3                   MOV         R12,R4
    0000230E 7F08                   ADD         #8,R15
    00002310 63F6                   MOV.L       @R15+,R3
    00002312 2302                   MOV.L       R0,@R3
    00002314 52F1                   MOV.L       @(4,R15),R2
    00002316 7201                   ADD         #1,R2
    00002318 1F21                   MOV.L       R2,@(4,R15)
    0000231A 63F2                   MOV.L       @R15,R3
    0000231C 7301                   ADD         #1,R3
    0000231E 2F32                   MOV.L       R3,@R15
    00002320 51F2                   MOV.L       @(8,R15),R1
    00002322 3212                   CMP/HS      R1,R2
    00002324 8FE3                   BF/S        L1384
    00002326 7A04                   ADD         #4,R10
    00002328              L1383:                            
      simplexC.c  1249        }
      simplexC.c  1250        
      simplexC.c  1251        Bdisp_AllClr_DDVRAM();
    00002328 D317                   MOV.L       L1522+8,R3 ; _Bdisp_AllClr_DDVRAM
    0000232A 430B                   JSR         @R3
    0000232C 0009                   NOP
      simplexC.c  1252        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    0000232E E201                   MOV         #1,R2
    00002330 D11C                   MOV.L       L1522+36,R1; L906
    00002332 E300                   MOV         #0,R3
    00002334 2F26                   MOV.L       R2,@-R15
    00002336 2F36                   MOV.L       R3,@-R15
    00002338 2F16                   MOV.L       R1,@-R15
    0000233A D31B                   MOV.L       L1522+40,R3; _sprintf
    0000233C 430B                   JSR         @R3
    0000233E 64D3                   MOV         R13,R4
    00002340 7F0C                   ADD         #12,R15
      simplexC.c  1253        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002342 E710                   MOV         #16,R7
    00002344 1FD3                   MOV.L       R13,@(12,R15)
    00002346 66D3                   MOV         R13,R6
    00002348 E500                   MOV         #0,R5
    0000234A 4B0B                   JSR         @R11
    0000234C 6453                   MOV         R5,R4
      simplexC.c  1254        pInput->funcObjectivePurpose = InputI(0, 7);
    0000234E E507                   MOV         #7,R5
    00002350 D311                   MOV.L       L1522+24,R3; _InputI
    00002352 430B                   JSR         @R3
    00002354 E400                   MOV         #0,R4
    00002356 E144                   MOV         #68,R1
    00002358 31EC                   ADD         R14,R1
      simplexC.c  1255        Bdisp_PutDisp_DD();
    0000235A 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000235C 2102                   MOV.L       R0,@R1
      simplexC.c  1256        memset(strout,0,128);
    0000235E 6683                   MOV         R8,R6
    00002360 D312                   MOV.L       L1522+44,R3; _memset
    00002362 E500                   MOV         #0,R5
    00002364 430B                   JSR         @R3
    00002366 64D3                   MOV         R13,R4
      simplexC.c  1257        for(i=0;i<nVariables;i++)
    00002368 E200                   MOV         #0,R2
    0000236A E301                   MOV         #1,R3
    0000236C 1F21                   MOV.L       R2,@(4,R15)
    0000236E 3C26                   CMP/HI      R2,R12
    00002370 5AF4                   MOV.L       @(16,R15),R10
    00002372 2F32                   MOV.L       R3,@R15
    00002374 8B3D                   BF          L1385
    00002376              L1386:                            
      simplexC.c  1258        {
      simplexC.c  1259            Bdisp_AllClr_DDVRAM();
    00002376 D104                   MOV.L       L1522+8,R1 ; _Bdisp_AllClr_DDVRAM
    00002378 410B                   JSR         @R1
    0000237A 0009                   NOP
      simplexC.c  1260            sprintf(strout,"Obj value var x%d",i+1);
    0000237C A018                   BRA         L1493
    0000237E 0009                   NOP
    00002380              L1522:                            
    00002380 FF4C                   .DATA.W     H'FF4C
    00002382 0080                   .DATA.W     H'0080
    00002384 <00000000>             .DATA.L     _malloc
    00002388 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000238C <00000000>             .DATA.L     _PrintMini
    00002390 <00000000>             .DATA.L     L898
    00002394 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002398 <00000000>             .DATA.L     _InputI
    0000239C <00000000>             .DATA.L     L899
    000023A0 <00000000>             .DATA.L     _calloc
    000023A4 <00000000>             .DATA.L     L906
    000023A8 <00000000>             .DATA.L     _sprintf
    000023AC <00000000>             .DATA.L     _memset
    000023B0              L1493:                            
    000023B0 63F2                   MOV.L       @R15,R3
    000023B2 2F36                   MOV.L       R3,@-R15
    000023B4 D230                   MOV.L       L1523+2,R2 ; L908
    000023B6 2F26                   MOV.L       R2,@-R15
    000023B8 D330                   MOV.L       L1523+6,R3 ; _sprintf
    000023BA 430B                   JSR         @R3
    000023BC 64D3                   MOV         R13,R4
    000023BE 7F08                   ADD         #8,R15
      simplexC.c  1261            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000023C0 56F3                   MOV.L       @(12,R15),R6
    000023C2 E500                   MOV         #0,R5
    000023C4 E710                   MOV         #16,R7
    000023C6 4B0B                   JSR         @R11
    000023C8 6453                   MOV         R5,R4
      simplexC.c  1262            funcObjtValues[i] = InputD(0, 7);
    000023CA E507                   MOV         #7,R5
    000023CC D32C                   MOV.L       L1523+10,R3; _InputD
    000023CE 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000023D0 E400                   MOV         #0,R4
      simplexC.c  1263            Bdisp_PutDisp_DD();
    000023D2 490B                   JSR         @R9
    000023D4 2A02                   MOV.L       R0,@R10
      simplexC.c  1264            memset(strout,0,128);
    000023D6 6683                   MOV         R8,R6
    000023D8 D22A                   MOV.L       L1523+14,R2; _memset
    000023DA E500                   MOV         #0,R5
    000023DC 420B                   JSR         @R2
    000023DE 64D3                   MOV         R13,R4
    000023E0 53F1                   MOV.L       @(4,R15),R3
    000023E2 7A04                   ADD         #4,R10
    000023E4 7301                   ADD         #1,R3
    000023E6 33C2                   CMP/HS      R12,R3
    000023E8 1F31                   MOV.L       R3,@(4,R15)
    000023EA 62F2                   MOV.L       @R15,R2
    000023EC 7201                   ADD         #1,R2
    000023EE 8FC2                   BF/S        L1386
    000023F0 2F22                   MOV.L       R2,@R15
    000023F2              L1385:                            
      simplexC.c  1265        }
      simplexC.c  1266        Bdisp_AllClr_DDVRAM();
    000023F2 D325                   MOV.L       L1523+18,R3; _Bdisp_AllClr_DDVRAM
    000023F4 430B                   JSR         @R3
    000023F6 0009                   NOP
      simplexC.c  1267        sprintf(strout,"Obj value Independent");
    000023F8 D224                   MOV.L       L1523+22,R2; L909
    000023FA 2F26                   MOV.L       R2,@-R15
    000023FC D31F                   MOV.L       L1523+6,R3 ; _sprintf
    000023FE 430B                   JSR         @R3
    00002400 64D3                   MOV         R13,R4
    00002402 7F04                   ADD         #4,R15
      simplexC.c  1268        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002404 56F3                   MOV.L       @(12,R15),R6
    00002406 E500                   MOV         #0,R5
    00002408 E710                   MOV         #16,R7
    0000240A 4B0B                   JSR         @R11
    0000240C 6453                   MOV         R5,R4
      simplexC.c  1269        funcObjtValues[nVariables] = InputD(0, 7);
    0000240E 63C3                   MOV         R12,R3
    00002410 50F4                   MOV.L       @(16,R15),R0
    00002412 E507                   MOV         #7,R5
    00002414 4308                   SHLL2       R3
    00002416 303C                   ADD         R3,R0
    00002418 2F06                   MOV.L       R0,@-R15
    0000241A D319                   MOV.L       L1523+10,R3; _InputD
    0000241C 430B                   JSR         @R3
    0000241E E400                   MOV         #0,R4
    00002420 62F6                   MOV.L       @R15+,R2
      simplexC.c  1270        Bdisp_PutDisp_DD();
    00002422 490B                   JSR         @R9
    00002424 2202                   MOV.L       R0,@R2
      simplexC.c  1271        pInput->constraints=constraints;
      simplexC.c  1272        pInput->rightValues=rightValues;
      simplexC.c  1273        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c  1274        pInput->nVariables=nVariables;
      simplexC.c  1275        pInput->nConstraints=nConstraints;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1276        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c  1277        pInput->idSlopeVariables=idSlopeVariables;
      simplexC.c  1278        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c  1279        pInput->funcObjtValues=funcObjtValues;
    00002426 E048                   MOV         #72,R0
    00002428 53F6                   MOV.L       @(24,R15),R3
    0000242A 1E34                   MOV.L       R3,@(16,R14)
    0000242C 52F8                   MOV.L       @(32,R15),R2
    0000242E 1E25                   MOV.L       R2,@(20,R14)
    00002430 53F5                   MOV.L       @(20,R15),R3
    00002432 1E36                   MOV.L       R3,@(24,R14)
    00002434 1EC7                   MOV.L       R12,@(28,R14)
    00002436 53F2                   MOV.L       @(8,R15),R3
    00002438 1E3B                   MOV.L       R3,@(44,R14)
    0000243A 52F9                   MOV.L       @(36,R15),R2
    0000243C 1E2C                   MOV.L       R2,@(48,R14)
    0000243E 53FB                   MOV.L       @(44,R15),R3
    00002440 1E3D                   MOV.L       R3,@(52,R14)
    00002442 52FA                   MOV.L       @(40,R15),R2
    00002444 1E2E                   MOV.L       R2,@(56,R14)
    00002446 53F4                   MOV.L       @(16,R15),R3
    00002448 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c  1280        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c  1281        pInput->modelType=TYPE_INPUT;
    0000244A E301                   MOV         #1,R3
    0000244C 52F7                   MOV.L       @(28,R15),R2
      simplexC.c  1282        pInput->problemType=problemType;
      simplexC.c  1283        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c  1284        return pInput;
    0000244E 60E3                   MOV         R14,R0
    00002450 1E2A                   MOV.L       R2,@(40,R14)
    00002452 1E31                   MOV.L       R3,@(4,R14)
    00002454 52FC                   MOV.L       @(48,R15),R2
    00002456 2E22                   MOV.L       R2,@R14
    00002458 51E9                   MOV.L       @(36,R14),R1
    0000245A 4115                   CMP/PL      R1
      simplexC.c  1285    }
    0000245C 910B                   MOV.W       L1523,R1   ; H'00B4
    0000245E 0329                   MOVT        R3
    00002460 1E32                   MOV.L       R3,@(8,R14)
    00002462 3F1C                   ADD         R1,R15
    00002464 4F26                   LDS.L       @R15+,PR
    00002466 68F6                   MOV.L       @R15+,R8
    00002468 69F6                   MOV.L       @R15+,R9
    0000246A 6AF6                   MOV.L       @R15+,R10
    0000246C 6BF6                   MOV.L       @R15+,R11
    0000246E 6CF6                   MOV.L       @R15+,R12
    00002470 6DF6                   MOV.L       @R15+,R13
    00002472 000B                   RTS
    00002474 6EF6                   MOV.L       @R15+,R14
    00002476              L1523:                            
    00002476 00B4                   .DATA.W     H'00B4
    00002478 <00000000>             .DATA.L     L908
    0000247C <00000000>             .DATA.L     _sprintf
    00002480 <00000000>             .DATA.L     _InputD
    00002484 <00000000>             .DATA.L     _memset
    00002488 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000248C <00000000>             .DATA.L     L909
      simplexC.c  1286    
      simplexC.c  1287    struct iteration* getProblemFromTableau()
    00002490              _getProblemFromTableau:          ; function: getProblemFromTableau
                                                           ; frame size=208
                                                           ; used runtime library name:
                                                           ; __negs
    00002490 2FE6                   MOV.L       R14,@-R15
    00002492 2FD6                   MOV.L       R13,@-R15
    00002494 2FC6                   MOV.L       R12,@-R15
    00002496 2FB6                   MOV.L       R11,@-R15
    00002498 2FA6                   MOV.L       R10,@-R15
    0000249A 2F96                   MOV.L       R9,@-R15
    0000249C 2F86                   MOV.L       R8,@-R15
    0000249E 4F22                   STS.L       PR,@-R15
    000024A0 909D                   MOV.W       L1524,R0   ; H'FF5C
    000024A2 3F0C                   ADD         R0,R15
      simplexC.c  1288    {
      simplexC.c  1289        char strout[128];
      simplexC.c  1290        unsigned int nConstraints;
      simplexC.c  1291        unsigned int nVariables;
      simplexC.c  1292        unsigned int i,j;
      simplexC.c  1293        int problemType;
      simplexC.c  1294        struct iteration *it;
      simplexC.c  1295        float ** temporalTableau;
      simplexC.c  1296        it=malloc(sizeof(struct iteration));
    000024A4 D34F                   MOV.L       L1524+6,R3 ; _malloc
    000024A6 430B                   JSR         @R3
    000024A8 E448                   MOV         #72,R4
    000024AA 6403                   MOV         R0,R4
      simplexC.c  1297        it->numIteration=0;
      simplexC.c  1298        it = malloc(sizeof(struct iteration));
    000024AC D24D                   MOV.L       L1524+6,R2 ; _malloc
    000024AE ED00                   MOV         #0,R13
    000024B0 24D2                   MOV.L       R13,@R4
    000024B2 420B                   JSR         @R2
    000024B4 E448                   MOV         #72,R4
      simplexC.c  1299        Bdisp_AllClr_DDVRAM();
    000024B6 D34C                   MOV.L       L1524+10,R3; _Bdisp_AllClr_DDVRAM
    000024B8 430B                   JSR         @R3
    000024BA 6C03                   MOV         R0,R12
      simplexC.c  1300        PrintMini(0, 0, (unsigned char *)"NRows?", MINI_OVER);
    000024BC D84B                   MOV.L       L1524+14,R8; _PrintMini
    000024BE E710                   MOV         #16,R7
    000024C0 D64B                   MOV.L       L1524+18,R6; L920
    000024C2 65D3                   MOV         R13,R5
    000024C4 480B                   JSR         @R8
    000024C6 64D3                   MOV         R13,R4
      simplexC.c  1301        Bdisp_PutDisp_DD();
    000024C8 D94A                   MOV.L       L1524+22,R9; _Bdisp_PutDisp_DD
    000024CA 490B                   JSR         @R9
    000024CC 0009                   NOP
      simplexC.c  1302        nConstraints = InputI(0, 7);
    000024CE E507                   MOV         #7,R5
    000024D0 D249                   MOV.L       L1524+26,R2; _InputI
    000024D2 420B                   JSR         @R2
    000024D4 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000024D6 6B03                   MOV         R0,R11
      simplexC.c  1303        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    000024D8 D648                   MOV.L       L1524+30,R6; L899
    000024DA E50E                   MOV         #14,R5
    000024DC E710                   MOV         #16,R7
    000024DE 480B                   JSR         @R8
    000024E0 64D3                   MOV         R13,R4
      simplexC.c  1304        Bdisp_PutDisp_DD();
    000024E2 490B                   JSR         @R9
    000024E4 0009                   NOP
      simplexC.c  1305        nVariables = InputI(0, 21);
    000024E6 E515                   MOV         #21,R5
    000024E8 D343                   MOV.L       L1524+26,R3; _InputI
    000024EA 430B                   JSR         @R3
    000024EC 64D3                   MOV         R13,R4
      simplexC.c  1306        problemType = TYPE_LP;
      simplexC.c  1307        it->BinvSize=nConstraints;
      simplexC.c  1308        it->idBasicVariables=calloc(nVariables,sizeof(float));
    000024EE E504                   MOV         #4,R5
    000024F0 D343                   MOV.L       L1524+34,R3; _calloc
    000024F2 1F03                   MOV.L       R0,@(12,R15)
    000024F4 1CB9                   MOV.L       R11,@(36,R12)
    000024F6 430B                   JSR         @R3
    000024F8 54F3                   MOV.L       @(12,R15),R4
      simplexC.c  1309        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(float));
    000024FA E504                   MOV         #4,R5
    000024FC D240                   MOV.L       L1524+34,R2; _calloc
    000024FE 1C02                   MOV.L       R0,@(8,R12)
    00002500 420B                   JSR         @R2
    00002502 54C9                   MOV.L       @(36,R12),R4
    00002504 1C03                   MOV.L       R0,@(12,R12)
      simplexC.c  1310        it->xb=calloc(nConstraints,sizeof(float));
    00002506 E504                   MOV         #4,R5
    00002508 D33D                   MOV.L       L1524+34,R3; _calloc
    0000250A 430B                   JSR         @R3
    0000250C 64B3                   MOV         R11,R4
      simplexC.c  1311        temporalTableau = calloc(nConstraints,sizeof(float*));
    0000250E E504                   MOV         #4,R5
    00002510 D23B                   MOV.L       L1524+34,R2; _calloc
    00002512 1C0B                   MOV.L       R0,@(44,R12)
    00002514 420B                   JSR         @R2
    00002516 64B3                   MOV         R11,R4
    00002518 1F06                   MOV.L       R0,@(24,R15)
      simplexC.c  1312        it->cjMinusZj=calloc(nVariables,sizeof(float));
    0000251A E504                   MOV         #4,R5
    0000251C D338                   MOV.L       L1524+34,R3; _calloc
    0000251E 430B                   JSR         @R3
    00002520 54F3                   MOV.L       @(12,R15),R4
      simplexC.c  1313        ex.inputCvectorValues=calloc(nVariables+1,sizeof(float));
    00002522 E504                   MOV         #4,R5
    00002524 D336                   MOV.L       L1524+34,R3; _calloc
    00002526 1C0E                   MOV.L       R0,@(56,R12)
    00002528 54F3                   MOV.L       @(12,R15),R4
    0000252A 430B                   JSR         @R3
    0000252C 7401                   ADD         #1,R4
      simplexC.c  1314        ex.bVectorValues=calloc(nConstraints,sizeof(float));
    0000252E E504                   MOV         #4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002530 D333                   MOV.L       L1524+34,R3; _calloc
    00002532 D234                   MOV.L       L1524+38,R2; H'0000001C+_ex
    00002534 2202                   MOV.L       R0,@R2
    00002536 430B                   JSR         @R3
    00002538 64B3                   MOV         R11,R4
      simplexC.c  1315        it->yj=calloc(nVariables,sizeof(float*));
    0000253A E504                   MOV         #4,R5
    0000253C D330                   MOV.L       L1524+34,R3; _calloc
    0000253E D232                   MOV.L       L1524+42,R2; H'00000018+_ex
    00002540 2202                   MOV.L       R0,@R2
    00002542 430B                   JSR         @R3
    00002544 54F3                   MOV.L       @(12,R15),R4
      simplexC.c  1316        ex.ajVector=calloc(nVariables,sizeof(float*));
    00002546 E504                   MOV         #4,R5
    00002548 D32D                   MOV.L       L1524+34,R3; _calloc
    0000254A 1C0F                   MOV.L       R0,@(60,R12)
    0000254C 430B                   JSR         @R3
    0000254E 54F3                   MOV.L       @(12,R15),R4
    00002550 D22E                   MOV.L       L1524+46,R2; H'00000038+_ex
      simplexC.c  1317        ex.nVariables=nVariables;
      simplexC.c  1318        ex.nConstraints=nConstraints;
      simplexC.c  1319    
      simplexC.c  1320        //Administracion de variables basicas
      simplexC.c  1321        for (i = 0; i < nConstraints; i++)
    00002552 6EF3                   MOV         R15,R14
    00002554 D12E                   MOV.L       L1524+50,R1; H'0000002C+_ex
    00002556 2202                   MOV.L       R0,@R2
    00002558 53F3                   MOV.L       @(12,R15),R3
    0000255A E201                   MOV         #1,R2
    0000255C 9A40                   MOV.W       L1524+2,R10; H'0080
    0000255E 2132                   MOV.L       R3,@R1
    00002560 D32C                   MOV.L       L1524+54,R3; H'00000030+_ex
    00002562 23B2                   MOV.L       R11,@R3
    00002564 2FD2                   MOV.L       R13,@R15
    00002566 1FD1                   MOV.L       R13,@(4,R15)
    00002568 1F22                   MOV.L       R2,@(8,R15)
    0000256A 62D3                   MOV         R13,R2
    0000256C 3B26                   CMP/HI      R2,R11
    0000256E 8F34                   BF/S        L1390
    00002570 7E24                   ADD         #36,R14
    00002572              L1391:                            
      simplexC.c  1322        {
      simplexC.c  1323            Bdisp_AllClr_DDVRAM();
    00002572 D31D                   MOV.L       L1524+10,R3; _Bdisp_AllClr_DDVRAM
    00002574 430B                   JSR         @R3
    00002576 0009                   NOP
      simplexC.c  1324            sprintf(strout,"id Basic var Row %d",i+1);
    00002578 51F2                   MOV.L       @(8,R15),R1
    0000257A 2F16                   MOV.L       R1,@-R15
    0000257C D326                   MOV.L       L1524+58,R3; L922
    0000257E 2F36                   MOV.L       R3,@-R15
    00002580 D226                   MOV.L       L1524+62,R2; _sprintf
    00002582 420B                   JSR         @R2
    00002584 64E3                   MOV         R14,R4
    00002586 7F08                   ADD         #8,R15
      simplexC.c  1325            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002588 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000258A 66E3                   MOV         R14,R6
    0000258C E500                   MOV         #0,R5
    0000258E 480B                   JSR         @R8
    00002590 6453                   MOV         R5,R4
      simplexC.c  1326            it->idByRowOfBasicVarsInBInv[i] = InputI(0, 7) -1;
    00002592 E507                   MOV         #7,R5
    00002594 D218                   MOV.L       L1524+26,R2; _InputI
    00002596 53F1                   MOV.L       @(4,R15),R3
    00002598 50C3                   MOV.L       @(12,R12),R0
    0000259A 303C                   ADD         R3,R0
    0000259C 2F06                   MOV.L       R0,@-R15
    0000259E 420B                   JSR         @R2
    000025A0 E400                   MOV         #0,R4
    000025A2 70FF                   ADD         #-1,R0
    000025A4 61F6                   MOV.L       @R15+,R1
      simplexC.c  1327            Bdisp_PutDisp_DD();
    000025A6 490B                   JSR         @R9
    000025A8 2102                   MOV.L       R0,@R1
      simplexC.c  1328            memset(strout,0,128);
    000025AA 66A3                   MOV         R10,R6
    000025AC D31C                   MOV.L       L1524+66,R3; _memset
    000025AE E500                   MOV         #0,R5
    000025B0 430B                   JSR         @R3
    000025B2 64E3                   MOV         R14,R4
      simplexC.c  1329            it->idBasicVariables[it->idByRowOfBasicVarsInBInv[i]]=1;
    000025B4 52F1                   MOV.L       @(4,R15),R2
    000025B6 E101                   MOV         #1,R1
    000025B8 50C3                   MOV.L       @(12,R12),R0
    000025BA 032E                   MOV.L       @(R0,R2),R3
    000025BC 50C2                   MOV.L       @(8,R12),R0
    000025BE 4308                   SHLL2       R3
    000025C0 0316                   MOV.L       R1,@(R0,R3)
    000025C2 63F2                   MOV.L       @R15,R3
    000025C4 7301                   ADD         #1,R3
    000025C6 2F32                   MOV.L       R3,@R15
    000025C8 52F1                   MOV.L       @(4,R15),R2
    000025CA 7204                   ADD         #4,R2
    000025CC 1F21                   MOV.L       R2,@(4,R15)
    000025CE 51F2                   MOV.L       @(8,R15),R1
    000025D0 7101                   ADD         #1,R1
    000025D2 1F12                   MOV.L       R1,@(8,R15)
    000025D4 63F2                   MOV.L       @R15,R3
    000025D6 33B2                   CMP/HS      R11,R3
    000025D8 8BCB                   BF          L1391
    000025DA              L1390:                            
      simplexC.c  1330        }
      simplexC.c  1331        //Valores de las variables en la tabla
      simplexC.c  1332        for(i=0;i<nConstraints;i++)
    000025DA A06C                   BRA         L1392
    000025DC 2FD2                   MOV.L       R13,@R15
    000025DE              L1524:                            
    000025DE FF5C                   .DATA.W     H'FF5C
    000025E0 0080                   .DATA.W     H'0080
    000025E2 0000                   .DATA.W     0
    000025E4 <00000000>             .DATA.L     _malloc
    000025E8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000025EC <00000000>             .DATA.L     _PrintMini




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000025F0 <00000000>             .DATA.L     L920
    000025F4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000025F8 <00000000>             .DATA.L     _InputI
    000025FC <00000000>             .DATA.L     L899
    00002600 <00000000>             .DATA.L     _calloc
    00002604 <0000001C>             .DATA.L     H'0000001C+_ex
    00002608 <00000018>             .DATA.L     H'00000018+_ex
    0000260C <00000038>             .DATA.L     H'00000038+_ex
    00002610 <0000002C>             .DATA.L     H'0000002C+_ex
    00002614 <00000030>             .DATA.L     H'00000030+_ex
    00002618 <00000000>             .DATA.L     L922
    0000261C <00000000>             .DATA.L     _sprintf
    00002620 <00000000>             .DATA.L     _memset
    00002624              L1393:                            
      simplexC.c  1333        {
      simplexC.c  1334            temporalTableau[i]= calloc(nVariables,sizeof(float*));
    00002624 62F2                   MOV.L       @R15,R2
    00002626 E504                   MOV         #4,R5
    00002628 D1B2                   MOV.L       L1525,R1   ; _calloc
    0000262A 4208                   SHLL2       R2
    0000262C 53F6                   MOV.L       @(24,R15),R3
    0000262E 323C                   ADD         R3,R2
    00002630 1F25                   MOV.L       R2,@(20,R15)
    00002632 2F26                   MOV.L       R2,@-R15
    00002634 410B                   JSR         @R1
    00002636 54F4                   MOV.L       @(16,R15),R4
    00002638 63F6                   MOV.L       @R15+,R3
    0000263A 2302                   MOV.L       R0,@R3
      simplexC.c  1335            for(j=0;j<nVariables;j++)
    0000263C 1FD4                   MOV.L       R13,@(16,R15)
    0000263E E301                   MOV         #1,R3
    00002640 1FD2                   MOV.L       R13,@(8,R15)
    00002642 1F31                   MOV.L       R3,@(4,R15)
    00002644 62F2                   MOV.L       @R15,R2
    00002646 E300                   MOV         #0,R3
    00002648 7201                   ADD         #1,R2
    0000264A 1F27                   MOV.L       R2,@(28,R15)
    0000264C 51F3                   MOV.L       @(12,R15),R1
    0000264E 3136                   CMP/HI      R3,R1
    00002650 8B2E                   BF          L1394
    00002652              L1395:                            
      simplexC.c  1336            {
      simplexC.c  1337                Bdisp_AllClr_DDVRAM();
    00002652 D2A9                   MOV.L       L1525+4,R2 ; _Bdisp_AllClr_DDVRAM
    00002654 420B                   JSR         @R2
    00002656 0009                   NOP
      simplexC.c  1338                sprintf(strout,"Value var Row %d Col %d",i+1,j+1);
    00002658 53F1                   MOV.L       @(4,R15),R3
    0000265A 2F36                   MOV.L       R3,@-R15
    0000265C 52F8                   MOV.L       @(32,R15),R2
    0000265E 2F26                   MOV.L       R2,@-R15
    00002660 D3A6                   MOV.L       L1525+8,R3 ; L925
    00002662 2F36                   MOV.L       R3,@-R15
    00002664 D2A6                   MOV.L       L1525+12,R2; _sprintf
    00002666 420B                   JSR         @R2
    00002668 64E3                   MOV         R14,R4
    0000266A 7F0C                   ADD         #12,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1339                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000266C E710                   MOV         #16,R7
    0000266E 66E3                   MOV         R14,R6
    00002670 E500                   MOV         #0,R5
    00002672 480B                   JSR         @R8
    00002674 6453                   MOV         R5,R4
      simplexC.c  1340                temporalTableau[i][j] = InputD(0, 7);
    00002676 E507                   MOV         #7,R5
    00002678 53F5                   MOV.L       @(20,R15),R3
    0000267A 52F2                   MOV.L       @(8,R15),R2
    0000267C 6032                   MOV.L       @R3,R0
    0000267E 302C                   ADD         R2,R0
    00002680 2F06                   MOV.L       R0,@-R15
    00002682 D3A0                   MOV.L       L1525+16,R3; _InputD
    00002684 430B                   JSR         @R3
    00002686 E400                   MOV         #0,R4
    00002688 61F6                   MOV.L       @R15+,R1
      simplexC.c  1341                Bdisp_PutDisp_DD();
    0000268A 490B                   JSR         @R9
    0000268C 2102                   MOV.L       R0,@R1
      simplexC.c  1342                memset(strout,0,128);
    0000268E 66A3                   MOV         R10,R6
    00002690 D39D                   MOV.L       L1525+20,R3; _memset
    00002692 E500                   MOV         #0,R5
    00002694 430B                   JSR         @R3
    00002696 64E3                   MOV         R14,R4
    00002698 52F4                   MOV.L       @(16,R15),R2
    0000269A 7201                   ADD         #1,R2
    0000269C 1F24                   MOV.L       R2,@(16,R15)
    0000269E 53F2                   MOV.L       @(8,R15),R3
    000026A0 7304                   ADD         #4,R3
    000026A2 1F32                   MOV.L       R3,@(8,R15)
    000026A4 51F1                   MOV.L       @(4,R15),R1
    000026A6 7101                   ADD         #1,R1
    000026A8 1F11                   MOV.L       R1,@(4,R15)
    000026AA 53F3                   MOV.L       @(12,R15),R3
    000026AC 3232                   CMP/HS      R3,R2
    000026AE 8BD0                   BF          L1395
    000026B0              L1394:                            
    000026B0 62F2                   MOV.L       @R15,R2
    000026B2 7201                   ADD         #1,R2
    000026B4 2F22                   MOV.L       R2,@R15
    000026B6              L1392:                            
    000026B6 63F2                   MOV.L       @R15,R3
    000026B8 33B2                   CMP/HS      R11,R3
    000026BA 8BB3                   BF          L1393
      simplexC.c  1343            }
      simplexC.c  1344        }
      simplexC.c  1345        //Valores de xB y de los bValues en las constrainsts
      simplexC.c  1346        for(i=0;i<nConstraints;i++)
    000026BC 2FD2                   MOV.L       R13,@R15
    000026BE E201                   MOV         #1,R2
    000026C0 53CB                   MOV.L       @(44,R12),R3
    000026C2 1F31                   MOV.L       R3,@(4,R15)
    000026C4 1F22                   MOV.L       R2,@(8,R15)
    000026C6 E300                   MOV         #0,R3
    000026C8 3B36                   CMP/HI      R3,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000026CA 8B28                   BF          L1396
    000026CC              L1397:                            
      simplexC.c  1347        {
      simplexC.c  1348            Bdisp_AllClr_DDVRAM();
    000026CC D18A                   MOV.L       L1525+4,R1 ; _Bdisp_AllClr_DDVRAM
    000026CE 410B                   JSR         @R1
    000026D0 0009                   NOP
      simplexC.c  1349            sprintf(strout,"Value xb Row %d",i+1);
    000026D2 52F2                   MOV.L       @(8,R15),R2
    000026D4 D38D                   MOV.L       L1525+24,R3; L927
    000026D6 2F26                   MOV.L       R2,@-R15
    000026D8 2F36                   MOV.L       R3,@-R15
    000026DA D289                   MOV.L       L1525+12,R2; _sprintf
    000026DC 420B                   JSR         @R2
    000026DE 64E3                   MOV         R14,R4
    000026E0 7F08                   ADD         #8,R15
      simplexC.c  1350            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000026E2 E710                   MOV         #16,R7
    000026E4 66E3                   MOV         R14,R6
    000026E6 E500                   MOV         #0,R5
    000026E8 480B                   JSR         @R8
    000026EA 6453                   MOV         R5,R4
      simplexC.c  1351            it->xb[i] = InputD(0, 7);
    000026EC 53F1                   MOV.L       @(4,R15),R3
    000026EE E507                   MOV         #7,R5
    000026F0 2F36                   MOV.L       R3,@-R15
    000026F2 D384                   MOV.L       L1525+16,R3; _InputD
    000026F4 430B                   JSR         @R3
    000026F6 E400                   MOV         #0,R4
    000026F8 62F6                   MOV.L       @R15+,R2
      simplexC.c  1352            Bdisp_PutDisp_DD();
    000026FA 490B                   JSR         @R9
    000026FC 2202                   MOV.L       R0,@R2
      simplexC.c  1353            memset(strout,0,128);
    000026FE 66A3                   MOV         R10,R6
    00002700 D381                   MOV.L       L1525+20,R3; _memset
    00002702 E500                   MOV         #0,R5
    00002704 430B                   JSR         @R3
    00002706 64E3                   MOV         R14,R4
    00002708 62F2                   MOV.L       @R15,R2
    0000270A 7201                   ADD         #1,R2
    0000270C 2F22                   MOV.L       R2,@R15
    0000270E 32B2                   CMP/HS      R11,R2
    00002710 53F1                   MOV.L       @(4,R15),R3
    00002712 7304                   ADD         #4,R3
    00002714 1F31                   MOV.L       R3,@(4,R15)
    00002716 51F2                   MOV.L       @(8,R15),R1
    00002718 7101                   ADD         #1,R1
    0000271A 8FD7                   BF/S        L1397
    0000271C 1F12                   MOV.L       R1,@(8,R15)
    0000271E              L1396:                            
    0000271E E301                   MOV         #1,R3
      simplexC.c  1354        }
      simplexC.c  1355        for(i=0;i<nConstraints;i++)
    00002720 2FD2                   MOV.L       R13,@R15
    00002722 E200                   MOV         #0,R2
    00002724 1FD1                   MOV.L       R13,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002726 3B26                   CMP/HI      R2,R11
    00002728 1F32                   MOV.L       R3,@(8,R15)
    0000272A 8B2C                   BF          L1398
    0000272C              L1399:                            
      simplexC.c  1356        {
      simplexC.c  1357            Bdisp_AllClr_DDVRAM();
    0000272C D172                   MOV.L       L1525+4,R1 ; _Bdisp_AllClr_DDVRAM
    0000272E 410B                   JSR         @R1
    00002730 0009                   NOP
      simplexC.c  1358            sprintf(strout,"Value b Constraint %d",i+1);
    00002732 53F2                   MOV.L       @(8,R15),R3
    00002734 D276                   MOV.L       L1525+28,R2; L929
    00002736 2F36                   MOV.L       R3,@-R15
    00002738 2F26                   MOV.L       R2,@-R15
    0000273A D371                   MOV.L       L1525+12,R3; _sprintf
    0000273C 430B                   JSR         @R3
    0000273E 64E3                   MOV         R14,R4
    00002740 7F08                   ADD         #8,R15
      simplexC.c  1359            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002742 E710                   MOV         #16,R7
    00002744 66E3                   MOV         R14,R6
    00002746 E500                   MOV         #0,R5
    00002748 480B                   JSR         @R8
    0000274A 6453                   MOV         R5,R4
      simplexC.c  1360            ex.bVectorValues[i] = InputD(0, 7);
    0000274C 52F1                   MOV.L       @(4,R15),R2
    0000274E E507                   MOV         #7,R5
    00002750 D16C                   MOV.L       L1525+16,R1; _InputD
    00002752 D370                   MOV.L       L1525+32,R3; H'00000018+_ex
    00002754 6032                   MOV.L       @R3,R0
    00002756 302C                   ADD         R2,R0
    00002758 2F06                   MOV.L       R0,@-R15
    0000275A 410B                   JSR         @R1
    0000275C E400                   MOV         #0,R4
    0000275E 63F6                   MOV.L       @R15+,R3
      simplexC.c  1361            Bdisp_PutDisp_DD();
    00002760 490B                   JSR         @R9
    00002762 2302                   MOV.L       R0,@R3
      simplexC.c  1362            memset(strout,0,128);
    00002764 D268                   MOV.L       L1525+20,R2; _memset
    00002766 66A3                   MOV         R10,R6
    00002768 E500                   MOV         #0,R5
    0000276A 420B                   JSR         @R2
    0000276C 64E3                   MOV         R14,R4
    0000276E 63F2                   MOV.L       @R15,R3
    00002770 7301                   ADD         #1,R3
    00002772 2F32                   MOV.L       R3,@R15
    00002774 52F1                   MOV.L       @(4,R15),R2
    00002776 7204                   ADD         #4,R2
    00002778 1F21                   MOV.L       R2,@(4,R15)
    0000277A 51F2                   MOV.L       @(8,R15),R1
    0000277C 7101                   ADD         #1,R1
    0000277E 1F12                   MOV.L       R1,@(8,R15)
    00002780 63F2                   MOV.L       @R15,R3
    00002782 33B2                   CMP/HS      R11,R3
    00002784 8BD2                   BF          L1399
    00002786              L1398:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002786 E201                   MOV         #1,R2
      simplexC.c  1363        }
      simplexC.c  1364        //Valores Cj-Zj
      simplexC.c  1365        for(i=0;i<nVariables;i++)
    00002788 2FD2                   MOV.L       R13,@R15
    0000278A 53CE                   MOV.L       @(56,R12),R3
    0000278C 1F31                   MOV.L       R3,@(4,R15)
    0000278E E300                   MOV         #0,R3
    00002790 1F22                   MOV.L       R2,@(8,R15)
    00002792 51F3                   MOV.L       @(12,R15),R1
    00002794 3136                   CMP/HI      R3,R1
    00002796 8B29                   BF          L1400
    00002798              L1401:                            
      simplexC.c  1366        {
      simplexC.c  1367            Bdisp_AllClr_DDVRAM();
    00002798 D357                   MOV.L       L1525+4,R3 ; _Bdisp_AllClr_DDVRAM
    0000279A 430B                   JSR         @R3
    0000279C 0009                   NOP
      simplexC.c  1368            sprintf(strout,"Value Cj-Zj x%d",i+1);
    0000279E 52F2                   MOV.L       @(8,R15),R2
    000027A0 D35D                   MOV.L       L1525+36,R3; L931
    000027A2 2F26                   MOV.L       R2,@-R15
    000027A4 2F36                   MOV.L       R3,@-R15
    000027A6 D256                   MOV.L       L1525+12,R2; _sprintf
    000027A8 420B                   JSR         @R2
    000027AA 64E3                   MOV         R14,R4
    000027AC 7F08                   ADD         #8,R15
      simplexC.c  1369            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000027AE E710                   MOV         #16,R7
    000027B0 66E3                   MOV         R14,R6
    000027B2 E500                   MOV         #0,R5
    000027B4 480B                   JSR         @R8
    000027B6 6453                   MOV         R5,R4
      simplexC.c  1370            it->cjMinusZj[i] = InputD(0, 7);
    000027B8 53F1                   MOV.L       @(4,R15),R3
    000027BA E507                   MOV         #7,R5
    000027BC 2F36                   MOV.L       R3,@-R15
    000027BE D351                   MOV.L       L1525+16,R3; _InputD
    000027C0 430B                   JSR         @R3
    000027C2 E400                   MOV         #0,R4
    000027C4 62F6                   MOV.L       @R15+,R2
      simplexC.c  1371            Bdisp_PutDisp_DD();
    000027C6 490B                   JSR         @R9
    000027C8 2202                   MOV.L       R0,@R2
      simplexC.c  1372            memset(strout,0,128);
    000027CA 66A3                   MOV         R10,R6
    000027CC D34E                   MOV.L       L1525+20,R3; _memset
    000027CE E500                   MOV         #0,R5
    000027D0 430B                   JSR         @R3
    000027D2 64E3                   MOV         R14,R4
    000027D4 62F2                   MOV.L       @R15,R2
    000027D6 7201                   ADD         #1,R2
    000027D8 2F22                   MOV.L       R2,@R15
    000027DA 53F1                   MOV.L       @(4,R15),R3
    000027DC 7304                   ADD         #4,R3
    000027DE 1F31                   MOV.L       R3,@(4,R15)
    000027E0 51F2                   MOV.L       @(8,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000027E2 7101                   ADD         #1,R1
    000027E4 1F12                   MOV.L       R1,@(8,R15)
    000027E6 53F3                   MOV.L       @(12,R15),R3
    000027E8 3232                   CMP/HS      R3,R2
    000027EA 8BD5                   BF          L1401
    000027EC              L1400:                            
      simplexC.c  1373        }
      simplexC.c  1374        // -Z
      simplexC.c  1375        Bdisp_AllClr_DDVRAM();
    000027EC D242                   MOV.L       L1525+4,R2 ; _Bdisp_AllClr_DDVRAM
    000027EE 420B                   JSR         @R2
    000027F0 0009                   NOP
      simplexC.c  1376        PrintMini(0, 0, (unsigned char *)"Z val", MINI_OVER);
    000027F2 E710                   MOV         #16,R7
    000027F4 D649                   MOV.L       L1525+40,R6; L932
    000027F6 E500                   MOV         #0,R5
    000027F8 480B                   JSR         @R8
    000027FA 6453                   MOV         R5,R4
      simplexC.c  1377        it->zSol = - InputD(0, 7);
    000027FC D341                   MOV.L       L1525+16,R3; _InputD
    000027FE E507                   MOV         #7,R5
    00002800 430B                   JSR         @R3
    00002802 E400                   MOV         #0,R4
    00002804 D246                   MOV.L       L1525+44,R2; __negs
    00002806 420B                   JSR         @R2
    00002808 0009                   NOP
    0000280A E144                   MOV         #68,R1
    0000280C 31CC                   ADD         R12,R1
      simplexC.c  1378        Bdisp_PutDisp_DD();
    0000280E 490B                   JSR         @R9
    00002810 2102                   MOV.L       R0,@R1
      simplexC.c  1379        //Funcion objetivo original
      simplexC.c  1380        Bdisp_AllClr_DDVRAM();
    00002812 D339                   MOV.L       L1525+4,R3 ; _Bdisp_AllClr_DDVRAM
    00002814 430B                   JSR         @R3
    00002816 0009                   NOP
      simplexC.c  1381        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    00002818 D142                   MOV.L       L1525+48,R1; L906
    0000281A E201                   MOV         #1,R2
    0000281C 2F26                   MOV.L       R2,@-R15
    0000281E E300                   MOV         #0,R3
    00002820 2F36                   MOV.L       R3,@-R15
    00002822 2F16                   MOV.L       R1,@-R15
    00002824 D336                   MOV.L       L1525+12,R3; _sprintf
    00002826 430B                   JSR         @R3
    00002828 64E3                   MOV         R14,R4
    0000282A 7F0C                   ADD         #12,R15
      simplexC.c  1382        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000282C 1FE4                   MOV.L       R14,@(16,R15)
    0000282E 66E3                   MOV         R14,R6
    00002830 E710                   MOV         #16,R7
    00002832 E500                   MOV         #0,R5
    00002834 480B                   JSR         @R8
    00002836 6453                   MOV         R5,R4
      simplexC.c  1383        ex.currentFuncObjectivePurpose = InputI(0, 7);
    00002838 D33B                   MOV.L       L1525+52,R3; _InputI
    0000283A E507                   MOV         #7,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000283C 430B                   JSR         @R3
    0000283E E400                   MOV         #0,R4
    00002840 D23A                   MOV.L       L1525+56,R2; H'00000028+_ex
      simplexC.c  1384        Bdisp_PutDisp_DD();
    00002842 490B                   JSR         @R9
    00002844 2202                   MOV.L       R0,@R2
      simplexC.c  1385        memset(strout,0,128);
    00002846 66A3                   MOV         R10,R6
    00002848 D32F                   MOV.L       L1525+20,R3; _memset
    0000284A E500                   MOV         #0,R5
    0000284C 430B                   JSR         @R3
    0000284E 64E3                   MOV         R14,R4
      simplexC.c  1386        for(i=0;i<nVariables;i++)
    00002850 2FD2                   MOV.L       R13,@R15
    00002852 E301                   MOV         #1,R3
    00002854 1FD2                   MOV.L       R13,@(8,R15)
    00002856 E200                   MOV         #0,R2
    00002858 1F31                   MOV.L       R3,@(4,R15)
    0000285A 51F3                   MOV.L       @(12,R15),R1
    0000285C 3126                   CMP/HI      R2,R1
    0000285E 8B2C                   BF          L1402
    00002860              L1403:                            
      simplexC.c  1387        {
      simplexC.c  1388            Bdisp_AllClr_DDVRAM();
    00002860 D325                   MOV.L       L1525+4,R3 ; _Bdisp_AllClr_DDVRAM
    00002862 430B                   JSR         @R3
    00002864 0009                   NOP
      simplexC.c  1389            sprintf(strout,"Obj value var x%d",i+1);
    00002866 53F1                   MOV.L       @(4,R15),R3
    00002868 D231                   MOV.L       L1525+60,R2; L908
    0000286A 2F36                   MOV.L       R3,@-R15
    0000286C 2F26                   MOV.L       R2,@-R15
    0000286E D324                   MOV.L       L1525+12,R3; _sprintf
    00002870 430B                   JSR         @R3
    00002872 64E3                   MOV         R14,R4
    00002874 7F08                   ADD         #8,R15
      simplexC.c  1390            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002876 E710                   MOV         #16,R7
    00002878 56F4                   MOV.L       @(16,R15),R6
    0000287A E500                   MOV         #0,R5
    0000287C 480B                   JSR         @R8
    0000287E 6453                   MOV         R5,R4
      simplexC.c  1391            ex.inputCvectorValues[i] = InputD(0, 7);
    00002880 53F2                   MOV.L       @(8,R15),R3
    00002882 E507                   MOV         #7,R5
    00002884 D11F                   MOV.L       L1525+16,R1; _InputD
    00002886 D22B                   MOV.L       L1525+64,R2; H'0000001C+_ex
    00002888 6022                   MOV.L       @R2,R0
    0000288A 303C                   ADD         R3,R0
    0000288C 2F06                   MOV.L       R0,@-R15
    0000288E 410B                   JSR         @R1
    00002890 E400                   MOV         #0,R4
    00002892 62F6                   MOV.L       @R15+,R2
      simplexC.c  1392            Bdisp_PutDisp_DD();
    00002894 490B                   JSR         @R9
    00002896 2202                   MOV.L       R0,@R2
      simplexC.c  1393            memset(strout,0,128);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002898 D31B                   MOV.L       L1525+20,R3; _memset
    0000289A 66A3                   MOV         R10,R6
    0000289C E500                   MOV         #0,R5
    0000289E 430B                   JSR         @R3
    000028A0 64E3                   MOV         R14,R4
    000028A2 62F2                   MOV.L       @R15,R2
    000028A4 7201                   ADD         #1,R2
    000028A6 2F22                   MOV.L       R2,@R15
    000028A8 53F2                   MOV.L       @(8,R15),R3
    000028AA 7304                   ADD         #4,R3
    000028AC 1F32                   MOV.L       R3,@(8,R15)
    000028AE 51F1                   MOV.L       @(4,R15),R1
    000028B0 7101                   ADD         #1,R1
    000028B2 1F11                   MOV.L       R1,@(4,R15)
    000028B4 53F3                   MOV.L       @(12,R15),R3
    000028B6 3232                   CMP/HS      R3,R2
    000028B8 8BD2                   BF          L1403
    000028BA              L1402:                            
      simplexC.c  1394        }
      simplexC.c  1395        Bdisp_AllClr_DDVRAM();
    000028BA D20F                   MOV.L       L1525+4,R2 ; _Bdisp_AllClr_DDVRAM
    000028BC 420B                   JSR         @R2
    000028BE 0009                   NOP
      simplexC.c  1396        sprintf(strout,"Obj value Independent");
    000028C0 D11D                   MOV.L       L1525+68,R1; L909
    000028C2 2F16                   MOV.L       R1,@-R15
    000028C4 D30E                   MOV.L       L1525+12,R3; _sprintf
    000028C6 430B                   JSR         @R3
    000028C8 64E3                   MOV         R14,R4
    000028CA 7F04                   ADD         #4,R15
      simplexC.c  1397        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000028CC 56F4                   MOV.L       @(16,R15),R6
    000028CE E500                   MOV         #0,R5
    000028D0 E710                   MOV         #16,R7
    000028D2 480B                   JSR         @R8
    000028D4 6453                   MOV         R5,R4
      simplexC.c  1398        ex.inputCvectorValues[nVariables] = InputD(0, 7);
    000028D6 E507                   MOV         #7,R5
    000028D8 53F3                   MOV.L       @(12,R15),R3
    000028DA 4308                   SHLL2       R3
    000028DC D215                   MOV.L       L1525+64,R2; H'0000001C+_ex
    000028DE 6022                   MOV.L       @R2,R0
    000028E0 303C                   ADD         R3,R0
    000028E2 2F06                   MOV.L       R0,@-R15
    000028E4 D307                   MOV.L       L1525+16,R3; _InputD
    000028E6 430B                   JSR         @R3
    000028E8 E400                   MOV         #0,R4
    000028EA 62F6                   MOV.L       @R15+,R2
      simplexC.c  1399        Bdisp_PutDisp_DD();
    000028EC 490B                   JSR         @R9
    000028EE 2202                   MOV.L       R0,@R2
      simplexC.c  1400        //Vectores aj
      simplexC.c  1401        for(i=0;i<nVariables;i++)
    000028F0 A06E                   BRA         L1404
    000028F2 2FD2                   MOV.L       R13,@R15
    000028F4              L1525:                            
    000028F4 <00000000>             .DATA.L     _calloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000028F8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000028FC <00000000>             .DATA.L     L925
    00002900 <00000000>             .DATA.L     _sprintf
    00002904 <00000000>             .DATA.L     _InputD
    00002908 <00000000>             .DATA.L     _memset
    0000290C <00000000>             .DATA.L     L927
    00002910 <00000000>             .DATA.L     L929
    00002914 <00000018>             .DATA.L     H'00000018+_ex
    00002918 <00000000>             .DATA.L     L931
    0000291C <00000000>             .DATA.L     L932
    00002920 <00000000>             .DATA.L     __negs
    00002924 <00000000>             .DATA.L     L906
    00002928 <00000000>             .DATA.L     _InputI
    0000292C <00000028>             .DATA.L     H'00000028+_ex
    00002930 <00000000>             .DATA.L     L908
    00002934 <0000001C>             .DATA.L     H'0000001C+_ex
    00002938 <00000000>             .DATA.L     L909
    0000293C              L1405:                            
      simplexC.c  1402        {
      simplexC.c  1403            ex.ajVector[i]=calloc(nConstraints,sizeof(float));
    0000293C 62F2                   MOV.L       @R15,R2
    0000293E E504                   MOV         #4,R5
    00002940 D13C                   MOV.L       L1526+6,R1 ; _calloc
    00002942 4208                   SHLL2       R2
    00002944 D33A                   MOV.L       L1526+2,R3 ; H'00000038+_ex
    00002946 1F27                   MOV.L       R2,@(28,R15)
    00002948 6032                   MOV.L       @R3,R0
    0000294A 302C                   ADD         R2,R0
    0000294C 2F06                   MOV.L       R0,@-R15
    0000294E 410B                   JSR         @R1
    00002950 64B3                   MOV         R11,R4
    00002952 63F6                   MOV.L       @R15+,R3
    00002954 2302                   MOV.L       R0,@R3
    00002956 E301                   MOV         #1,R3
      simplexC.c  1404            for(j=0;j<nConstraints;j++)
    00002958 1FD5                   MOV.L       R13,@(20,R15)
    0000295A 1FD1                   MOV.L       R13,@(4,R15)
    0000295C 1F32                   MOV.L       R3,@(8,R15)
    0000295E E300                   MOV         #0,R3
    00002960 62F2                   MOV.L       @R15,R2
    00002962 3B36                   CMP/HI      R3,R11
    00002964 7201                   ADD         #1,R2
    00002966 8F30                   BF/S        L1406
    00002968 1F28                   MOV.L       R2,@(32,R15)
    0000296A              L1407:                            
      simplexC.c  1405            {
      simplexC.c  1406                Bdisp_AllClr_DDVRAM();
    0000296A D233                   MOV.L       L1526+10,R2; _Bdisp_AllClr_DDVRAM
    0000296C 420B                   JSR         @R2
    0000296E 0009                   NOP
      simplexC.c  1407                sprintf(strout,"Aj[%d][%d] var: ",i+1,j+1);
    00002970 51F2                   MOV.L       @(8,R15),R1
    00002972 2F16                   MOV.L       R1,@-R15
    00002974 53F9                   MOV.L       @(36,R15),R3
    00002976 2F36                   MOV.L       R3,@-R15
    00002978 D230                   MOV.L       L1526+14,R2; L936
    0000297A 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000297C D330                   MOV.L       L1526+18,R3; _sprintf
    0000297E 430B                   JSR         @R3
    00002980 64E3                   MOV         R14,R4
    00002982 7F0C                   ADD         #12,R15
      simplexC.c  1408                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002984 56F4                   MOV.L       @(16,R15),R6
    00002986 E500                   MOV         #0,R5
    00002988 E710                   MOV         #16,R7
    0000298A 480B                   JSR         @R8
    0000298C 6453                   MOV         R5,R4
      simplexC.c  1409                ex.ajVector[i][j] = InputD(0, 7);
    0000298E E507                   MOV         #7,R5
    00002990 53F7                   MOV.L       @(28,R15),R3
    00002992 D227                   MOV.L       L1526+2,R2 ; H'00000038+_ex
    00002994 6022                   MOV.L       @R2,R0
    00002996 013E                   MOV.L       @(R0,R3),R1
    00002998 50F1                   MOV.L       @(4,R15),R0
    0000299A 301C                   ADD         R1,R0
    0000299C 2F06                   MOV.L       R0,@-R15
    0000299E D329                   MOV.L       L1526+22,R3; _InputD
    000029A0 430B                   JSR         @R3
    000029A2 E400                   MOV         #0,R4
    000029A4 62F6                   MOV.L       @R15+,R2
      simplexC.c  1410                Bdisp_PutDisp_DD();
    000029A6 490B                   JSR         @R9
    000029A8 2202                   MOV.L       R0,@R2
      simplexC.c  1411                memset(strout,0,128);
    000029AA 66A3                   MOV         R10,R6
    000029AC D326                   MOV.L       L1526+26,R3; _memset
    000029AE E500                   MOV         #0,R5
    000029B0 430B                   JSR         @R3
    000029B2 64E3                   MOV         R14,R4
    000029B4 52F5                   MOV.L       @(20,R15),R2
    000029B6 7201                   ADD         #1,R2
    000029B8 1F25                   MOV.L       R2,@(20,R15)
    000029BA 32B2                   CMP/HS      R11,R2
    000029BC 53F1                   MOV.L       @(4,R15),R3
    000029BE 7304                   ADD         #4,R3
    000029C0 1F31                   MOV.L       R3,@(4,R15)
    000029C2 51F2                   MOV.L       @(8,R15),R1
    000029C4 7101                   ADD         #1,R1
    000029C6 8FD0                   BF/S        L1407
    000029C8 1F12                   MOV.L       R1,@(8,R15)
    000029CA              L1406:                            
    000029CA 62F2                   MOV.L       @R15,R2
    000029CC 7201                   ADD         #1,R2
    000029CE 2F22                   MOV.L       R2,@R15
    000029D0              L1404:                            
    000029D0 53F3                   MOV.L       @(12,R15),R3
    000029D2 61F2                   MOV.L       @R15,R1
    000029D4 3132                   CMP/HS      R3,R1
    000029D6 8BB1                   BF          L1405
      simplexC.c  1412            }
      simplexC.c  1413        }
      simplexC.c  1414        //HARDCODED DEBUG/////////////////////////////////////////////////////////
      simplexC.c  1415        // for(i=0;i<nConstraints;i++)
      simplexC.c  1416        // {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1417        //     temporalTableau[i]= calloc(nVariables,sizeof(float*));
      simplexC.c  1418        // }
      simplexC.c  1419        // temporalTableau[0][0]=1;
      simplexC.c  1420        // temporalTableau[0][1]=2;
      simplexC.c  1421        // temporalTableau[0][2]=-3;
      simplexC.c  1422        // temporalTableau[0][3]=1;
      simplexC.c  1423        // temporalTableau[0][4]=0;
      simplexC.c  1424        // temporalTableau[1][0]=2;
      simplexC.c  1425        // temporalTableau[1][1]=1;
      simplexC.c  1426        // temporalTableau[1][2]=-4;
      simplexC.c  1427        // temporalTableau[1][3]=0;
      simplexC.c  1428        // temporalTableau[1][4]=1;
      simplexC.c  1429        // it->xb[0]=5;
      simplexC.c  1430        // it->xb[1]=7;
      simplexC.c  1431        // it->cjMinusZj[0]=-4;
      simplexC.c  1432        // it->cjMinusZj[1]=0.5;
      simplexC.c  1433        // it->cjMinusZj[2]=-1;
      simplexC.c  1434        // it->cjMinusZj[3]=0;
      simplexC.c  1435        // it->cjMinusZj[4]=0;
      simplexC.c  1436        // it->zSol=0;
      simplexC.c  1437        // it->idByRowOfBasicVarsInBInv[0]=3;
      simplexC.c  1438        // it->idByRowOfBasicVarsInBInv[1]=4;
      simplexC.c  1439        // it->idBasicVariables[it->idByRowOfBasicVarsInBInv[0]]=1;
      simplexC.c  1440        // it->idBasicVariables[it->idByRowOfBasicVarsInBInv[1]]=1;
      simplexC.c  1441        // ex.inputCvectorValues[0]=-4;
      simplexC.c  1442        // ex.inputCvectorValues[1]=0.5;
      simplexC.c  1443        // ex.inputCvectorValues[2]=-1;
      simplexC.c  1444        // ex.inputCvectorValues[3]=0;
      simplexC.c  1445        // ex.inputCvectorValues[4]=0;
      simplexC.c  1446        // ex.inputCvectorValues[5]=0;
      simplexC.c  1447        // ex.bVectorValues[0]=5;
      simplexC.c  1448        // ex.bVectorValues[1]=7;
      simplexC.c  1449        // ex.currentFuncObjectivePurpose=FUNC_MAXIMIZE;
      simplexC.c  1450        //HARDCODED DEBUG//////////////////////////////////////////////////////////////////////////
      simplexC.c  1451    
      simplexC.c  1452    
      simplexC.c  1453    
      simplexC.c  1454        //Adaptacion a iteracion de Binv
      simplexC.c  1455        it->Binv=calloc(it->BinvSize,sizeof(float*));
    000029D8 D316                   MOV.L       L1526+6,R3 ; _calloc
    000029DA E504                   MOV         #4,R5
    000029DC 430B                   JSR         @R3
    000029DE 54C9                   MOV.L       @(36,R12),R4
    000029E0 1C08                   MOV.L       R0,@(32,R12)
      simplexC.c  1456        for(i=0;i<it->BinvSize;i++)
    000029E2 A01F                   BRA         L1408
    000029E4 6AD3                   MOV         R13,R10
    000029E6              L1409:                            
      simplexC.c  1457        {
      simplexC.c  1458            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    000029E6 6EA3                   MOV         R10,R14
    000029E8 50C8                   MOV.L       @(32,R12),R0
    000029EA E504                   MOV         #4,R5
    000029EC D311                   MOV.L       L1526+6,R3 ; _calloc
    000029EE 4E08                   SHLL2       R14
    000029F0 30EC                   ADD         R14,R0
    000029F2 2F06                   MOV.L       R0,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000029F4 430B                   JSR         @R3
    000029F6 54C9                   MOV.L       @(36,R12),R4
    000029F8 62F6                   MOV.L       @R15+,R2
    000029FA 2202                   MOV.L       R0,@R2
      simplexC.c  1459            for(j=0;j<it->BinvSize;j++)
    000029FC A00E                   BRA         L1410
    000029FE 64D3                   MOV         R13,R4
    00002A00              L1411:                            
      simplexC.c  1460            {
      simplexC.c  1461                it->Binv[i][j]=temporalTableau[i][it->idByRowOfBasicVarsInBInv[j]];
    00002A00 50C8                   MOV.L       @(32,R12),R0
    00002A02 6543                   MOV         R4,R5
    00002A04 03EE                   MOV.L       @(R0,R14),R3
    00002A06 4508                   SHLL2       R5
    00002A08 50F6                   MOV.L       @(24,R15),R0
    00002A0A 7401                   ADD         #1,R4
    00002A0C 02EE                   MOV.L       @(R0,R14),R2
    00002A0E 335C                   ADD         R5,R3
    00002A10 50C3                   MOV.L       @(12,R12),R0
    00002A12 015E                   MOV.L       @(R0,R5),R1
    00002A14 4108                   SHLL2       R1
    00002A16 321C                   ADD         R1,R2
    00002A18 6222                   MOV.L       @R2,R2
    00002A1A 2322                   MOV.L       R2,@R3
    00002A1C              L1410:                            
    00002A1C 53C9                   MOV.L       @(36,R12),R3
    00002A1E 3432                   CMP/HS      R3,R4
    00002A20 8BEE                   BF          L1411
    00002A22 7A01                   ADD         #1,R10
    00002A24              L1408:                            
    00002A24 53C9                   MOV.L       @(36,R12),R3
    00002A26 3A32                   CMP/HS      R3,R10
    00002A28 8BDD                   BF          L1409
      simplexC.c  1462            }
      simplexC.c  1463        }
      simplexC.c  1464        //Adaptacion a iteracion de vectores Y
      simplexC.c  1465        for(i=0;i<nVariables;i++)
    00002A2A A02C                   BRA         L1412
    00002A2C 6AD3                   MOV         R13,R10
    00002A2E              L1526:                            
    00002A2E 0000                   .DATA.W     0
    00002A30 <00000038>             .DATA.L     H'00000038+_ex
    00002A34 <00000000>             .DATA.L     _calloc
    00002A38 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00002A3C <00000000>             .DATA.L     L936
    00002A40 <00000000>             .DATA.L     _sprintf
    00002A44 <00000000>             .DATA.L     _InputD
    00002A48 <00000000>             .DATA.L     _memset
    00002A4C              L1413:                            
      simplexC.c  1466        {
      simplexC.c  1467            it->yj[i]=calloc(nConstraints,sizeof(float));
    00002A4C 50CF                   MOV.L       @(60,R12),R0
    00002A4E E504                   MOV         #4,R5
    00002A50 D240                   MOV.L       L1527+6,R2 ; _calloc
    00002A52 6EA3                   MOV         R10,R14
    00002A54 4E08                   SHLL2       R14
    00002A56 30EC                   ADD         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A58 2F06                   MOV.L       R0,@-R15
    00002A5A 420B                   JSR         @R2
    00002A5C 64B3                   MOV         R11,R4
      simplexC.c  1468            for(j=0;j<nConstraints;j++)
    00002A5E 65D3                   MOV         R13,R5
    00002A60 63F6                   MOV.L       @R15+,R3
    00002A62 E200                   MOV         #0,R2
    00002A64 2302                   MOV.L       R0,@R3
    00002A66 3B26                   CMP/HI      R2,R11
    00002A68 8F0C                   BF/S        L1414
    00002A6A 64D3                   MOV         R13,R4
    00002A6C              L1415:                            
      simplexC.c  1469            {
      simplexC.c  1470                it->yj[i][j]=temporalTableau[j][i];
    00002A6C 50CF                   MOV.L       @(60,R12),R0
    00002A6E 7501                   ADD         #1,R5
    00002A70 03EE                   MOV.L       @(R0,R14),R3
    00002A72 35B2                   CMP/HS      R11,R5
    00002A74 50F6                   MOV.L       @(24,R15),R0
    00002A76 334C                   ADD         R4,R3
    00002A78 024E                   MOV.L       @(R0,R4),R2
    00002A7A 32EC                   ADD         R14,R2
    00002A7C 6222                   MOV.L       @R2,R2
    00002A7E 2322                   MOV.L       R2,@R3
    00002A80 8FF4                   BF/S        L1415
    00002A82 7404                   ADD         #4,R4
    00002A84              L1414:                            
    00002A84 7A01                   ADD         #1,R10
    00002A86              L1412:                            
    00002A86 52F3                   MOV.L       @(12,R15),R2
    00002A88 3A22                   CMP/HS      R2,R10
    00002A8A 8BDF                   BF          L1413
      simplexC.c  1471            }
      simplexC.c  1472        }
      simplexC.c  1473        
      simplexC.c  1474        free(temporalTableau);
    00002A8C D332                   MOV.L       L1527+10,R3; _free
    00002A8E 430B                   JSR         @R3
    00002A90 54F6                   MOV.L       @(24,R15),R4
      simplexC.c  1475        ex.canonicalStatement=malloc(sizeof(struct problemStatement));
    00002A92 D232                   MOV.L       L1527+14,R2; _malloc
    00002A94 420B                   JSR         @R2
    00002A96 E454                   MOV         #84,R4
    00002A98 D331                   MOV.L       L1527+18,R3; H'00000008+_ex
      simplexC.c  1476        ex.canonicalStatement->is2fasesActive=0;
      simplexC.c  1477        ex.canonicalStatement->is2fasesNeeded=0;
      simplexC.c  1478        ex.canonicalStatement->id2fasesVariables=calloc(nVariables,sizeof(int));
    00002A9A E504                   MOV         #4,R5
    00002A9C 2302                   MOV.L       R0,@R3
    00002A9E 6133                   MOV         R3,R1
    00002AA0 6212                   MOV.L       @R1,R2
    00002AA2 6013                   MOV         R1,R0
    00002AA4 12D3                   MOV.L       R13,@(12,R2)
    00002AA6 6202                   MOV.L       @R0,R2
    00002AA8 12D2                   MOV.L       R13,@(8,R2)
    00002AAA 6203                   MOV         R0,R2
    00002AAC 6322                   MOV.L       @R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  124


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002AAE E238                   MOV         #56,R2
    00002AB0 323C                   ADD         R3,R2
    00002AB2 2F26                   MOV.L       R2,@-R15
    00002AB4 D327                   MOV.L       L1527+6,R3 ; _calloc
    00002AB6 430B                   JSR         @R3
    00002AB8 54F4                   MOV.L       @(16,R15),R4
    00002ABA 61F6                   MOV.L       @R15+,R1
    00002ABC 2102                   MOV.L       R0,@R1
      simplexC.c  1479        return it;
    00002ABE 60C3                   MOV         R12,R0
      simplexC.c  1480    }
    00002AC0 9145                   MOV.W       L1527,R1   ; H'00A4
    00002AC2 3F1C                   ADD         R1,R15
    00002AC4 4F26                   LDS.L       @R15+,PR
    00002AC6 68F6                   MOV.L       @R15+,R8
    00002AC8 69F6                   MOV.L       @R15+,R9
    00002ACA 6AF6                   MOV.L       @R15+,R10
    00002ACC 6BF6                   MOV.L       @R15+,R11
    00002ACE 6CF6                   MOV.L       @R15+,R12
    00002AD0 6DF6                   MOV.L       @R15+,R13
    00002AD2 000B                   RTS
    00002AD4 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1481    
      simplexC.c  1482    int selectExecutionMode()
    00002AD6              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=148
    00002AD6 2FE6                   MOV.L       R14,@-R15
    00002AD8 4F22                   STS.L       PR,@-R15
    00002ADA 7F80                   ADD         #-128,R15
      simplexC.c  1483    {
      simplexC.c  1484        char strout[128];
      simplexC.c  1485        Bdisp_AllClr_DDVRAM();
    00002ADC D321                   MOV.L       L1527+22,R3; _Bdisp_AllClr_DDVRAM
    00002ADE 430B                   JSR         @R3
    00002AE0 0009                   NOP
      simplexC.c  1486        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    00002AE2 E201                   MOV         #1,R2
    00002AE4 D120                   MOV.L       L1527+26,R1; L944
    00002AE6 E300                   MOV         #0,R3
    00002AE8 2F26                   MOV.L       R2,@-R15
    00002AEA 2F36                   MOV.L       R3,@-R15
    00002AEC 2F16                   MOV.L       R1,@-R15
    00002AEE 64F3                   MOV         R15,R4
    00002AF0 D31E                   MOV.L       L1527+30,R3; _sprintf
    00002AF2 430B                   JSR         @R3
    00002AF4 740C                   ADD         #12,R4
      simplexC.c  1487        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002AF6 E710                   MOV         #16,R7
    00002AF8 D21D                   MOV.L       L1527+34,R2; _PrintMini
    00002AFA 66F3                   MOV         R15,R6
    00002AFC 760C                   ADD         #12,R6
    00002AFE E500                   MOV         #0,R5
    00002B00 420B                   JSR         @R2
    00002B02 6453                   MOV         R5,R4
      simplexC.c  1488        ex.mode = InputI(0, 7);
    00002B04 DE1B                   MOV.L       L1527+38,R14; _ex
    00002B06 E507                   MOV         #7,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  125


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B08 D31B                   MOV.L       L1527+42,R3; _InputI
    00002B0A 430B                   JSR         @R3
    00002B0C E400                   MOV         #0,R4
      simplexC.c  1489        Bdisp_PutDisp_DD();
    00002B0E D21B                   MOV.L       L1527+46,R2; _Bdisp_PutDisp_DD
    00002B10 420B                   JSR         @R2
    00002B12 2E02                   MOV.L       R0,@R14
      simplexC.c  1490        ex.nNodes=1;
      simplexC.c  1491        Bdisp_AllClr_DDVRAM();
    00002B14 D213                   MOV.L       L1527+22,R2; _Bdisp_AllClr_DDVRAM
    00002B16 E301                   MOV         #1,R3
    00002B18 420B                   JSR         @R2
    00002B1A 1E39                   MOV.L       R3,@(36,R14)
      simplexC.c  1492        PrintMini(0, 0, (unsigned char *)"Set maxIterations", MINI_OVER);
    00002B1C D618                   MOV.L       L1527+50,R6; L945
    00002B1E E500                   MOV         #0,R5
    00002B20 D313                   MOV.L       L1527+34,R3; _PrintMini
    00002B22 E710                   MOV         #16,R7
    00002B24 430B                   JSR         @R3
    00002B26 6453                   MOV         R5,R4
      simplexC.c  1493        ex.maxIterations = InputI(0, 7)+1;
    00002B28 D213                   MOV.L       L1527+42,R2; _InputI
    00002B2A E507                   MOV         #7,R5
    00002B2C 420B                   JSR         @R2
    00002B2E E400                   MOV         #0,R4
      simplexC.c  1494        Bdisp_PutDisp_DD();
    00002B30 D312                   MOV.L       L1527+46,R3; _Bdisp_PutDisp_DD
    00002B32 7001                   ADD         #1,R0
    00002B34 430B                   JSR         @R3
    00002B36 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1495        ex.nodes.its=malloc(ex.maxIterations*sizeof(struct iteration*));
    00002B38 54ED                   MOV.L       @(52,R14),R4
    00002B3A D208                   MOV.L       L1527+14,R2; _malloc
    00002B3C 420B                   JSR         @R2
    00002B3E 4408                   SHLL2       R4
    00002B40 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1496        return 0;
    00002B42 E000                   MOV         #0,R0
      simplexC.c  1497    }
    00002B44 9104                   MOV.W       L1527+2,R1 ; H'008C
    00002B46 3F1C                   ADD         R1,R15
    00002B48 4F26                   LDS.L       @R15+,PR
    00002B4A 000B                   RTS
    00002B4C 6EF6                   MOV.L       @R15+,R14
    00002B4E              L1527:                            
    00002B4E 00A4                   .DATA.W     H'00A4
    00002B50 008C                   .DATA.W     H'008C
    00002B52 0000                   .DATA.W     0
    00002B54 <00000000>             .DATA.L     _calloc
    00002B58 <00000000>             .DATA.L     _free
    00002B5C <00000000>             .DATA.L     _malloc
    00002B60 <00000008>             .DATA.L     H'00000008+_ex
    00002B64 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00002B68 <00000000>             .DATA.L     L944
    00002B6C <00000000>             .DATA.L     _sprintf
    00002B70 <00000000>             .DATA.L     _PrintMini
    00002B74 <00000000>             .DATA.L     _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  126


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B78 <00000000>             .DATA.L     _InputI
    00002B7C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002B80 <00000000>             .DATA.L     L945
      simplexC.c  1498    
      simplexC.c  1499    int convertModel()
    00002B84              _convertModel:                   ; function: convertModel
                                                           ; frame size=32
    00002B84 2FE6                   MOV.L       R14,@-R15
    00002B86 2FD6                   MOV.L       R13,@-R15
    00002B88 2FC6                   MOV.L       R12,@-R15
    00002B8A 2FB6                   MOV.L       R11,@-R15
    00002B8C 2FA6                   MOV.L       R10,@-R15
      simplexC.c  1500    {
      simplexC.c  1501        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c  1502        struct problemStatement *modelToSolve;
      simplexC.c  1503        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
    00002B8E EB00                   MOV         #0,R11
      simplexC.c  1504        modelToSolve = malloc(sizeof(struct problemStatement));
    00002B90 D385                   MOV.L       L1528,R3   ; _malloc
    00002B92 6CB3                   MOV         R11,R12
    00002B94 2F96                   MOV.L       R9,@-R15
    00002B96 69B3                   MOV         R11,R9
    00002B98 2F86                   MOV.L       R8,@-R15
    00002B9A 4F22                   STS.L       PR,@-R15
    00002B9C 430B                   JSR         @R3
    00002B9E E454                   MOV         #84,R4
      simplexC.c  1505        modelToSolve->problemType=ex.initialProblemStatement->problemType;
    00002BA0 DD82                   MOV.L       L1528+4,R13; _ex
    00002BA2 6E03                   MOV         R0,R14
      simplexC.c  1506        modelToSolve->nVariablesSlope=ex.initialProblemStatement->nVariablesSlope;
      simplexC.c  1507        modelToSolve->nVariables2fases=ex.initialProblemStatement->nVariables2fases;
      simplexC.c  1508        modelToSolve->nVariablesInteger=ex.initialProblemStatement->nVariablesInteger;
      simplexC.c  1509        modelToSolve->nConstraints=ex.initialProblemStatement->nConstraints;
      simplexC.c  1510        modelToSolve->funcObjectivePurpose=ex.initialProblemStatement->funcObjectivePurpose;
      simplexC.c  1511        modelToSolve->is2fasesNeeded=ex.initialProblemStatement->is2fasesNeeded;
      simplexC.c  1512        modelToSolve->nVariables=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariables
                         +Slope+ex.initialProblemStatement->nVariables2fases;
      simplexC.c  1513        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(float));
    00002BA4 DA82                   MOV.L       L1528+8,R10; _calloc
    00002BA6 E044                   MOV         #68,R0
    00002BA8 52D1                   MOV.L       @(4,R13),R2
    00002BAA 6322                   MOV.L       @R2,R3
    00002BAC 2E32                   MOV.L       R3,@R14
    00002BAE 52D1                   MOV.L       @(4,R13),R2
    00002BB0 5328                   MOV.L       @(32,R2),R3
    00002BB2 1E38                   MOV.L       R3,@(32,R14)
    00002BB4 52D1                   MOV.L       @(4,R13),R2
    00002BB6 5329                   MOV.L       @(36,R2),R3
    00002BB8 1E39                   MOV.L       R3,@(36,R14)
    00002BBA 52D1                   MOV.L       @(4,R13),R2
    00002BBC 532A                   MOV.L       @(40,R2),R3
    00002BBE 1E3A                   MOV.L       R3,@(40,R14)
    00002BC0 52D1                   MOV.L       @(4,R13),R2
    00002BC2 532B                   MOV.L       @(44,R2),R3
    00002BC4 1E3B                   MOV.L       R3,@(44,R14)
    00002BC6 52D1                   MOV.L       @(4,R13),R2
    00002BC8 032E                   MOV.L       @(R0,R2),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  127


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002BCA 0E36                   MOV.L       R3,@(R0,R14)
    00002BCC 52D1                   MOV.L       @(4,R13),R2
    00002BCE 5322                   MOV.L       @(8,R2),R3
    00002BD0 1E32                   MOV.L       R3,@(8,R14)
    00002BD2 54D1                   MOV.L       @(4,R13),R4
    00002BD4 5348                   MOV.L       @(32,R4),R3
    00002BD6 5247                   MOV.L       @(28,R4),R2
    00002BD8 5149                   MOV.L       @(36,R4),R1
    00002BDA 323C                   ADD         R3,R2
    00002BDC 321C                   ADD         R1,R2
    00002BDE 1E27                   MOV.L       R2,@(28,R14)
    00002BE0 E504                   MOV         #4,R5
    00002BE2 6423                   MOV         R2,R4
    00002BE4 4A0B                   JSR         @R10
    00002BE6 7401                   ADD         #1,R4
    00002BE8 E148                   MOV         #72,R1
    00002BEA 31EC                   ADD         R14,R1
    00002BEC 2102                   MOV.L       R0,@R1
      simplexC.c  1514        if(modelToSolve->is2fasesNeeded)
    00002BEE 53E2                   MOV.L       @(8,R14),R3
    00002BF0 2338                   TST         R3,R3
    00002BF2 8906                   BT          L1418
      simplexC.c  1515        {
      simplexC.c  1516            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(float));
    00002BF4 54E7                   MOV.L       @(28,R14),R4
    00002BF6 E504                   MOV         #4,R5
    00002BF8 4A0B                   JSR         @R10
    00002BFA 7401                   ADD         #1,R4
    00002BFC E14C                   MOV         #76,R1
    00002BFE 31EC                   ADD         R14,R1
    00002C00 2102                   MOV.L       R0,@R1
    00002C02              L1418:                            
      simplexC.c  1517        }
      simplexC.c  1518        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00002C02 E504                   MOV         #4,R5
    00002C04 4A0B                   JSR         @R10
    00002C06 54E7                   MOV.L       @(28,R14),R4
    00002C08 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1519        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00002C0A E504                   MOV         #4,R5
    00002C0C 4A0B                   JSR         @R10
    00002C0E 54E7                   MOV.L       @(28,R14),R4
    00002C10 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1520        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00002C12 E504                   MOV         #4,R5
    00002C14 4A0B                   JSR         @R10
    00002C16 54EB                   MOV.L       @(44,R14),R4
    00002C18 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c  1521        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00002C1A E504                   MOV         #4,R5
    00002C1C 4A0B                   JSR         @R10
    00002C1E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c  1522        memset(modelToSolve->idConstraintTo2fasesVar,-1,sizeof(modelToSolve->idConstraintTo2fasesVar));
    00002C20 D364                   MOV.L       L1528+12,R3; _memset
    00002C22 E140                   MOV         #64,R1
    00002C24 31EC                   ADD         R14,R1
    00002C26 E604                   MOV         #4,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  128


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002C28 2102                   MOV.L       R0,@R1
    00002C2A E5FF                   MOV         #-1,R5
    00002C2C E040                   MOV         #64,R0
    00002C2E 430B                   JSR         @R3
    00002C30 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c  1523        memset(modelToSolve->idConstraintToSlopeVar,-1,sizeof(modelToSolve->idConstraintToSlopeVar));
    00002C32 E604                   MOV         #4,R6
    00002C34 D25F                   MOV.L       L1528+12,R2; _memset
    00002C36 E5FF                   MOV         #-1,R5
    00002C38 420B                   JSR         @R2
    00002C3A 54EF                   MOV.L       @(60,R14),R4
      simplexC.c  1524        //SET ID TYPES OF VARIABLES
      simplexC.c  1525        for(i=0;i<modelToSolve->nVariables;i++)
    00002C3C E501                   MOV         #1,R5
    00002C3E A018                   BRA         L1419
    00002C40 64B3                   MOV         R11,R4
    00002C42              L1420:                            
      simplexC.c  1526        {
      simplexC.c  1527            if(i>=ex.initialProblemStatement->nVariables && i<ex.initialProblemStatement->nVariables+ex.initia
                         +lProblemStatement->nVariablesSlope)
    00002C42 57D1                   MOV.L       @(4,R13),R7
    00002C44 5677                   MOV.L       @(28,R7),R6
    00002C46 3463                   CMP/GE      R6,R4
    00002C48 8B08                   BF          L1421
    00002C4A 5378                   MOV.L       @(32,R7),R3
    00002C4C 336C                   ADD         R6,R3
    00002C4E 3433                   CMP/GE      R3,R4
    00002C50 8904                   BT          L1421
      simplexC.c  1528            {
      simplexC.c  1529                modelToSolve->idSlopeVariables[i]=1;
    00002C52 6343                   MOV         R4,R3
    00002C54 50ED                   MOV.L       @(52,R14),R0
    00002C56 4308                   SHLL2       R3
    00002C58 A00A                   BRA         L1422
    00002C5A 0356                   MOV.L       R5,@(R0,R3)
    00002C5C              L1421:                            
      simplexC.c  1530            }else if(i>=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope)
    00002C5C 56D1                   MOV.L       @(4,R13),R6
    00002C5E 5368                   MOV.L       @(32,R6),R3
    00002C60 5267                   MOV.L       @(28,R6),R2
    00002C62 323C                   ADD         R3,R2
    00002C64 3423                   CMP/GE      R2,R4
    00002C66 8B03                   BF          L1422
      simplexC.c  1531            {
      simplexC.c  1532                modelToSolve->id2fasesVariables[i]=1;
    00002C68 50EE                   MOV.L       @(56,R14),R0
    00002C6A 6243                   MOV         R4,R2
    00002C6C 4208                   SHLL2       R2
    00002C6E 0256                   MOV.L       R5,@(R0,R2)
    00002C70              L1422:                            
    00002C70 7401                   ADD         #1,R4
    00002C72              L1419:                            
    00002C72 53E7                   MOV.L       @(28,R14),R3
    00002C74 3433                   CMP/GE      R3,R4
    00002C76 8BE4                   BF          L1420
      simplexC.c  1533            }
      simplexC.c  1534            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  129


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1535        }
      simplexC.c  1536        for(i=0;i<modelToSolve->nVariables;i++)
    00002C78 A03D                   BRA         L1424
    00002C7A 64B3                   MOV         R11,R4
    00002C7C              L1425:                            
      simplexC.c  1537        {
      simplexC.c  1538            if(modelToSolve->idSlopeVariables[i])
    00002C7C 50ED                   MOV.L       @(52,R14),R0
    00002C7E 6243                   MOV         R4,R2
    00002C80 4208                   SHLL2       R2
    00002C82 032E                   MOV.L       @(R0,R2),R3
    00002C84 2338                   TST         R3,R3
    00002C86 8917                   BT          L1426
      simplexC.c  1539            {
      simplexC.c  1540                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    00002C88 A013                   BRA         L1427
    00002C8A 6593                   MOV         R9,R5
    00002C8C              L1428:                            
      simplexC.c  1541                {
      simplexC.c  1542                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||ex.initialProb
                         +lemStatement->inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    00002C8C 50D1                   MOV.L       @(4,R13),R0
    00002C8E 6653                   MOV         R5,R6
    00002C90 5006                   MOV.L       @(24,R0),R0
    00002C92 4608                   SHLL2       R6
    00002C94 066E                   MOV.L       @(R0,R6),R6
    00002C96 6063                   MOV         R6,R0
    00002C98 8801                   CMP/EQ      #1,R0
    00002C9A 8902                   BT          L1430
    00002C9C 6063                   MOV         R6,R0
    00002C9E 8802                   CMP/EQ      #2,R0
    00002CA0 8B06                   BF          L1429
    00002CA2              L1430:                            
      simplexC.c  1543                    {
      simplexC.c  1544                        modelToSolve->idConstraintToSlopeVar[j]=i;
    00002CA2 6353                   MOV         R5,R3
    00002CA4 50EF                   MOV.L       @(60,R14),R0
      simplexC.c  1545                        nextConstraintSlopeSet=j+1;
    00002CA6 6953                   MOV         R5,R9
    00002CA8 4308                   SHLL2       R3
    00002CAA 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1546                        break;
    00002CAC A004                   BRA         L1426
    00002CAE 7901                   ADD         #1,R9
    00002CB0              L1429:                            
    00002CB0 7501                   ADD         #1,R5
    00002CB2              L1427:                            
    00002CB2 53EB                   MOV.L       @(44,R14),R3
    00002CB4 3533                   CMP/GE      R3,R5
    00002CB6 8BE9                   BF          L1428
    00002CB8              L1426:                            
      simplexC.c  1547                    }
      simplexC.c  1548                }
      simplexC.c  1549            }
      simplexC.c  1550            if(modelToSolve->id2fasesVariables[i])
    00002CB8 50EE                   MOV.L       @(56,R14),R0
    00002CBA 6143                   MOV         R4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  130


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002CBC 4108                   SHLL2       R1
    00002CBE 031E                   MOV.L       @(R0,R1),R3
    00002CC0 2338                   TST         R3,R3
    00002CC2 8917                   BT          L1432
      simplexC.c  1551            {
      simplexC.c  1552                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    00002CC4 A013                   BRA         L1433
    00002CC6 65C3                   MOV         R12,R5
    00002CC8              L1434:                            
      simplexC.c  1553                {
      simplexC.c  1554                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_EQUAL ||ex.initialProblemStatement-
                         +>inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    00002CC8 50D1                   MOV.L       @(4,R13),R0
    00002CCA 6653                   MOV         R5,R6
    00002CCC 5006                   MOV.L       @(24,R0),R0
    00002CCE 4608                   SHLL2       R6
    00002CD0 066E                   MOV.L       @(R0,R6),R6
    00002CD2 2668                   TST         R6,R6
    00002CD4 8902                   BT          L1436
    00002CD6 6063                   MOV         R6,R0
    00002CD8 8802                   CMP/EQ      #2,R0
    00002CDA 8B07                   BF          L1435
    00002CDC              L1436:                            
      simplexC.c  1555                    {
      simplexC.c  1556                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    00002CDC 6353                   MOV         R5,R3
    00002CDE 4308                   SHLL2       R3
    00002CE0 E040                   MOV         #64,R0
      simplexC.c  1557                        nextConstraint2fasesSet=j+1;
    00002CE2 6C53                   MOV         R5,R12
    00002CE4 00EE                   MOV.L       @(R0,R14),R0
    00002CE6 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1558                        break;
    00002CE8 A004                   BRA         L1432
    00002CEA 7C01                   ADD         #1,R12
    00002CEC              L1435:                            
    00002CEC 7501                   ADD         #1,R5
    00002CEE              L1433:                            
    00002CEE 52EB                   MOV.L       @(44,R14),R2
    00002CF0 3523                   CMP/GE      R2,R5
    00002CF2 8BE9                   BF          L1434
    00002CF4              L1432:                            
    00002CF4 7401                   ADD         #1,R4
    00002CF6              L1424:                            
    00002CF6 52E7                   MOV.L       @(28,R14),R2
    00002CF8 3423                   CMP/GE      R2,R4
    00002CFA 8BBF                   BF          L1425
      simplexC.c  1559                    }
      simplexC.c  1560                }
      simplexC.c  1561            }
      simplexC.c  1562        }
      simplexC.c  1563        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c  1564        modelToSolve->constraints=(float **)malloc(sizeof(float) * modelToSolve->nConstraints);
    00002CFC 54EB                   MOV.L       @(44,R14),R4
    00002CFE D22A                   MOV.L       L1528,R2   ; _malloc
    00002D00 420B                   JSR         @R2
    00002D02 4408                   SHLL2       R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  131


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D04 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1565        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(float));
    00002D06 E504                   MOV         #4,R5
    00002D08 4A0B                   JSR         @R10
    00002D0A 54EB                   MOV.L       @(44,R14),R4
    00002D0C 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1566        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    00002D0E E504                   MOV         #4,R5
    00002D10 4A0B                   JSR         @R10
    00002D12 54EB                   MOV.L       @(44,R14),R4
    00002D14 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1567        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00002D16 E504                   MOV         #4,R5
    00002D18 4A0B                   JSR         @R10
    00002D1A 54E7                   MOV.L       @(28,R14),R4
    00002D1C 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1568    
      simplexC.c  1569        for(i=0;i<modelToSolve->nConstraints;i++)
    00002D1E A070                   BRA         L1438
    00002D20 69B3                   MOV         R11,R9
    00002D22              L1439:                            
      simplexC.c  1570        {
      simplexC.c  1571            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(float));
    00002D22 6293                   MOV         R9,R2
    00002D24 58E4                   MOV.L       @(16,R14),R8
    00002D26 E504                   MOV         #4,R5
    00002D28 4208                   SHLL2       R2
    00002D2A 382C                   ADD         R2,R8
    00002D2C 4A0B                   JSR         @R10
    00002D2E 54E7                   MOV.L       @(28,R14),R4
    00002D30 2802                   MOV.L       R0,@R8
      simplexC.c  1572            for(j=0;j<modelToSolve->nVariables;j++)
    00002D32 64B3                   MOV         R11,R4
    00002D34 6C93                   MOV         R9,R12
    00002D36 A058                   BRA         L1440
    00002D38 4C08                   SHLL2       R12
    00002D3A              L1441:                            
      simplexC.c  1573            {
      simplexC.c  1574                if(j<ex.initialProblemStatement->nVariables)//Copiar variables de entrada
    00002D3A 52D1                   MOV.L       @(4,R13),R2
    00002D3C 5327                   MOV.L       @(28,R2),R3
    00002D3E 3433                   CMP/GE      R3,R4
    00002D40 8910                   BT          L1442
      simplexC.c  1575                {
      simplexC.c  1576                    modelToSolve->constraints[i][j]=ex.initialProblemStatement->constraints[i][j];
    00002D42 6543                   MOV         R4,R5
    00002D44 50E4                   MOV.L       @(16,R14),R0
    00002D46 4508                   SHLL2       R5
    00002D48 03CE                   MOV.L       @(R0,R12),R3
    00002D4A 335C                   ADD         R5,R3
    00002D4C 50D1                   MOV.L       @(4,R13),R0
    00002D4E 5004                   MOV.L       @(16,R0),R0
    00002D50 00CE                   MOV.L       @(R0,R12),R0
    00002D52 025E                   MOV.L       @(R0,R5),R2
    00002D54 2322                   MOV.L       R2,@R3
      simplexC.c  1577                    modelToSolve->idIntegerVariables[i]=ex.initialProblemStatement->idIntegerVariables[i];
    00002D56 51EC                   MOV.L       @(48,R14),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  132


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002D58 53D1                   MOV.L       @(4,R13),R3
    00002D5A 31CC                   ADD         R12,R1
    00002D5C 503C                   MOV.L       @(48,R3),R0
    00002D5E 02CE                   MOV.L       @(R0,R12),R2
    00002D60 A042                   BRA         L1443
    00002D62 2122                   MOV.L       R2,@R1
    00002D64              L1442:                            
      simplexC.c  1578                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToS
                         +olve->idConstraintToSlopeVar[i])
    00002D64 50D1                   MOV.L       @(4,R13),R0
    00002D66 5006                   MOV.L       @(24,R0),R0
    00002D68 00CE                   MOV.L       @(R0,R12),R0
    00002D6A 8801                   CMP/EQ      #1,R0
    00002D6C 8B0B                   BF          L1444
    00002D6E 50EF                   MOV.L       @(60,R14),R0
    00002D70 02CE                   MOV.L       @(R0,R12),R2
    00002D72 3420                   CMP/EQ      R2,R4
    00002D74 8B07                   BF          L1444
      simplexC.c  1579                {
      simplexC.c  1580                    modelToSolve->constraints[i][j]=1;
    00002D76 6343                   MOV         R4,R3
    00002D78 D10F                   MOV.L       L1528+16,R1; H'3F800000
    00002D7A 4308                   SHLL2       R3
    00002D7C 50E4                   MOV.L       @(16,R14),R0
    00002D7E 02CE                   MOV.L       @(R0,R12),R2
    00002D80 323C                   ADD         R3,R2
    00002D82 A00F                   BRA         L1494
    00002D84 0009                   NOP
    00002D86              L1444:                            
      simplexC.c  1581                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==model
                         +ToSolve->idConstraintToSlopeVar[i])
    00002D86 50D1                   MOV.L       @(4,R13),R0
    00002D88 5006                   MOV.L       @(24,R0),R0
    00002D8A 00CE                   MOV.L       @(R0,R12),R0
    00002D8C 8802                   CMP/EQ      #2,R0
    00002D8E 8B17                   BF          L1446
    00002D90 50EF                   MOV.L       @(60,R14),R0
    00002D92 02CE                   MOV.L       @(R0,R12),R2
    00002D94 3420                   CMP/EQ      R2,R4
    00002D96 8B13                   BF          L1446
      simplexC.c  1582                {
      simplexC.c  1583                    modelToSolve->constraints[i][j]=-1;
    00002D98 50E4                   MOV.L       @(16,R14),R0
    00002D9A 6343                   MOV         R4,R3
    00002D9C D107                   MOV.L       L1528+20,R1; H'BF800000
    00002D9E 4308                   SHLL2       R3
    00002DA0 02CE                   MOV.L       @(R0,R12),R2
    00002DA2 323C                   ADD         R3,R2
    00002DA4              L1494:                            
    00002DA4 A020                   BRA         L1443
    00002DA6 2212                   MOV.L       R1,@R2
    00002DA8              L1528:                            
    00002DA8 <00000000>             .DATA.L     _malloc
    00002DAC <00000000>             .DATA.L     _ex
    00002DB0 <00000000>             .DATA.L     _calloc
    00002DB4 <00000000>             .DATA.L     _memset
    00002DB8 3F800000               .DATA.L     H'3F800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  133


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002DBC BF800000               .DATA.L     H'BF800000
    00002DC0              L1446:                            
      simplexC.c  1584                }else if((ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || ex.init
                         +ialProblemStatement->inequalitySigns[i]==INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    00002DC0 50D1                   MOV.L       @(4,R13),R0
    00002DC2 5006                   MOV.L       @(24,R0),R0
    00002DC4 00CE                   MOV.L       @(R0,R12),R0
    00002DC6 8802                   CMP/EQ      #2,R0
    00002DC8 8D02                   BT/S        L1449
    00002DCA 6503                   MOV         R0,R5
    00002DCC 2558                   TST         R5,R5
    00002DCE 8B0B                   BF          L1443
    00002DD0              L1449:                            
    00002DD0 E040                   MOV         #64,R0
    00002DD2 00EE                   MOV.L       @(R0,R14),R0
    00002DD4 03CE                   MOV.L       @(R0,R12),R3
    00002DD6 3430                   CMP/EQ      R3,R4
    00002DD8 8B06                   BF          L1443
      simplexC.c  1585                {
      simplexC.c  1586                    modelToSolve->constraints[i][j]=1;
    00002DDA 6243                   MOV         R4,R2
    00002DDC D17D                   MOV.L       L1529,R1   ; H'3F800000
    00002DDE 4208                   SHLL2       R2
    00002DE0 50E4                   MOV.L       @(16,R14),R0
    00002DE2 03CE                   MOV.L       @(R0,R12),R3
    00002DE4 332C                   ADD         R2,R3
    00002DE6 2312                   MOV.L       R1,@R3
    00002DE8              L1443:                            
    00002DE8 7401                   ADD         #1,R4
    00002DEA              L1440:                            
    00002DEA 53E7                   MOV.L       @(28,R14),R3
    00002DEC 3433                   CMP/GE      R3,R4
    00002DEE 8BA4                   BF          L1441
      simplexC.c  1587                }
      simplexC.c  1588                //Cualquier otro caso tiene un 0 por calloc
      simplexC.c  1589            }
      simplexC.c  1590            modelToSolve->rightValues[i]=ex.initialProblemStatement->rightValues[i];
    00002DF0 51E5                   MOV.L       @(20,R14),R1
    00002DF2 6493                   MOV         R9,R4
    00002DF4 53D1                   MOV.L       @(4,R13),R3
    00002DF6 4408                   SHLL2       R4
    00002DF8 5035                   MOV.L       @(20,R3),R0
    00002DFA 7901                   ADD         #1,R9
    00002DFC 024E                   MOV.L       @(R0,R4),R2
    00002DFE 314C                   ADD         R4,R1
    00002E00 2122                   MOV.L       R2,@R1
    00002E02              L1438:                            
    00002E02 53EB                   MOV.L       @(44,R14),R3
    00002E04 3933                   CMP/GE      R3,R9
    00002E06 8B8C                   BF          L1439
      simplexC.c  1591        }
      simplexC.c  1592    
      simplexC.c  1593        //Create new obj funct
      simplexC.c  1594        for(i=0;i<modelToSolve->nVariables;i++)
    00002E08 A01B                   BRA         L1450
    00002E0A 64B3                   MOV         R11,R4
    00002E0C              L1451:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  134


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002E0C 5CD1                   MOV.L       @(4,R13),R12
    00002E0E 52C7                   MOV.L       @(28,R12),R2
    00002E10 3423                   CMP/GE      R2,R4
    00002E12 890A                   BT          L1452
      simplexC.c  1595        {
      simplexC.c  1596            if(i<ex.initialProblemStatement->nVariables)
      simplexC.c  1597            {
      simplexC.c  1598                modelToSolve->funcObjtValues[i]=ex.initialProblemStatement->funcObjtValues[i];
    00002E14 6543                   MOV         R4,R5
    00002E16 4508                   SHLL2       R5
    00002E18 E048                   MOV         #72,R0
    00002E1A 00EE                   MOV.L       @(R0,R14),R0
    00002E1C 6203                   MOV         R0,R2
    00002E1E 325C                   ADD         R5,R2
    00002E20 E048                   MOV         #72,R0
    00002E22 00CE                   MOV.L       @(R0,R12),R0
    00002E24 035E                   MOV.L       @(R0,R5),R3
    00002E26 A00B                   BRA         L1453
    00002E28 2232                   MOV.L       R3,@R2
    00002E2A              L1452:                            
      simplexC.c  1599            }else if(i>=(ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope))
    00002E2A 53C8                   MOV.L       @(32,R12),R3
    00002E2C 52C7                   MOV.L       @(28,R12),R2
    00002E2E 323C                   ADD         R3,R2
    00002E30 3423                   CMP/GE      R2,R4
    00002E32 8B05                   BF          L1453
      simplexC.c  1600            {
      simplexC.c  1601                modelToSolve->funcObjtValues2Fases[i]=1;
    00002E34 D367                   MOV.L       L1529,R3   ; H'3F800000
    00002E36 6243                   MOV         R4,R2
    00002E38 4208                   SHLL2       R2
    00002E3A E04C                   MOV         #76,R0
    00002E3C 00EE                   MOV.L       @(R0,R14),R0
    00002E3E 0236                   MOV.L       R3,@(R0,R2)
    00002E40              L1453:                            
    00002E40 7401                   ADD         #1,R4
    00002E42              L1450:                            
    00002E42 52E7                   MOV.L       @(28,R14),R2
    00002E44 3423                   CMP/GE      R2,R4
    00002E46 8BE1                   BF          L1451
      simplexC.c  1602            }
      simplexC.c  1603        }
      simplexC.c  1604    
      simplexC.c  1605        //Create aj vectors
      simplexC.c  1606        ex.ajVector=calloc(modelToSolve->nVariables,sizeof(float*));
    00002E48 E504                   MOV         #4,R5
    00002E4A 4A0B                   JSR         @R10
    00002E4C 54E7                   MOV.L       @(28,R14),R4
    00002E4E 1D0E                   MOV.L       R0,@(56,R13)
      simplexC.c  1607        for(i=0;i<modelToSolve->nVariables;i++)
    00002E50 A018                   BRA         L1455
    00002E52 69B3                   MOV         R11,R9
    00002E54              L1456:                            
      simplexC.c  1608        {
      simplexC.c  1609            ex.ajVector[i]=calloc(modelToSolve->nConstraints,sizeof(float));
    00002E54 58DE                   MOV.L       @(56,R13),R8
    00002E56 E504                   MOV         #4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  135


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002E58 6C93                   MOV         R9,R12
    00002E5A 4C08                   SHLL2       R12
    00002E5C 38CC                   ADD         R12,R8
    00002E5E 4A0B                   JSR         @R10
    00002E60 54EB                   MOV.L       @(44,R14),R4
    00002E62 2802                   MOV.L       R0,@R8
      simplexC.c  1610            for(j=0;j<modelToSolve->nConstraints;j++)
    00002E64 A00A                   BRA         L1457
    00002E66 64B3                   MOV         R11,R4
    00002E68              L1458:                            
      simplexC.c  1611            {
      simplexC.c  1612                ex.ajVector[i][j]=modelToSolve->constraints[j][i];
    00002E68 50DE                   MOV.L       @(56,R13),R0
    00002E6A 6543                   MOV         R4,R5
    00002E6C 02CE                   MOV.L       @(R0,R12),R2
    00002E6E 4508                   SHLL2       R5
    00002E70 50E4                   MOV.L       @(16,R14),R0
    00002E72 7401                   ADD         #1,R4
    00002E74 005E                   MOV.L       @(R0,R5),R0
    00002E76 325C                   ADD         R5,R2
    00002E78 03CE                   MOV.L       @(R0,R12),R3
    00002E7A 2232                   MOV.L       R3,@R2
    00002E7C              L1457:                            
    00002E7C 52EB                   MOV.L       @(44,R14),R2
    00002E7E 3423                   CMP/GE      R2,R4
    00002E80 8BF2                   BF          L1458
    00002E82 7901                   ADD         #1,R9
    00002E84              L1455:                            
    00002E84 52E7                   MOV.L       @(28,R14),R2
    00002E86 3923                   CMP/GE      R2,R9
    00002E88 8BE4                   BF          L1456
      simplexC.c  1613            }
      simplexC.c  1614        }
      simplexC.c  1615        modelToSolve->ajVector=ex.ajVector;
    00002E8A E050                   MOV         #80,R0
    00002E8C 51DE                   MOV.L       @(56,R13),R1
    00002E8E 0E16                   MOV.L       R1,@(R0,R14)
      simplexC.c  1616        modelToSolve->funcObjtValues[modelToSolve->nVariables]=ex.initialProblemStatement->funcObjtValues[ex.i
                         +nitialProblemStatement->nVariables];
    00002E90 53E7                   MOV.L       @(28,R14),R3
    00002E92 E048                   MOV         #72,R0
    00002E94 54D1                   MOV.L       @(4,R13),R4
    00002E96 4308                   SHLL2       R3
    00002E98 00EE                   MOV.L       @(R0,R14),R0
    00002E9A 330C                   ADD         R0,R3
    00002E9C 5247                   MOV.L       @(28,R4),R2
    00002E9E E048                   MOV         #72,R0
    00002EA0 004E                   MOV.L       @(R0,R4),R0
    00002EA2 4208                   SHLL2       R2
    00002EA4 012E                   MOV.L       @(R0,R2),R1
      simplexC.c  1617        modelToSolve->modelType=TYPE_SOLVE;
    00002EA6 E202                   MOV         #2,R2
    00002EA8 2312                   MOV.L       R1,@R3
      simplexC.c  1618        ex.canonicalStatement=modelToSolve;
      simplexC.c  1619        ex.nVariables=modelToSolve->nVariables;
      simplexC.c  1620        ex.nConstraints=modelToSolve->nConstraints;
      simplexC.c  1621        return 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  136


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002EAA E000                   MOV         #0,R0
    00002EAC 1E21                   MOV.L       R2,@(4,R14)
    00002EAE 1DE2                   MOV.L       R14,@(8,R13)
    00002EB0 53E7                   MOV.L       @(28,R14),R3
    00002EB2 1D3B                   MOV.L       R3,@(44,R13)
    00002EB4 52EB                   MOV.L       @(44,R14),R2
    00002EB6 1D2C                   MOV.L       R2,@(48,R13)
      simplexC.c  1622    }
    00002EB8 4F26                   LDS.L       @R15+,PR
    00002EBA 68F6                   MOV.L       @R15+,R8
    00002EBC 69F6                   MOV.L       @R15+,R9
    00002EBE 6AF6                   MOV.L       @R15+,R10
    00002EC0 6BF6                   MOV.L       @R15+,R11
    00002EC2 6CF6                   MOV.L       @R15+,R12
    00002EC4 6DF6                   MOV.L       @R15+,R13
    00002EC6 000B                   RTS
    00002EC8 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1623    
      simplexC.c  1624    struct problemStatement* createProblemStatementToDebug2Fases()
    00002ECA              _createProblemStatementToDebug2Fases:
                                                           ; function: createProblemStatementToDebug2Fases
                                                           ; frame size=28
      simplexC.c  1625    {
      simplexC.c  1626        struct problemStatement *res;
      simplexC.c  1627        int nConstraints;
      simplexC.c  1628        int nVariables;
      simplexC.c  1629        nConstraints=3;
    00002ECA E303                   MOV         #3,R3
    00002ECC 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1630        nVariables=2;
    00002ECE E202                   MOV         #2,R2
    00002ED0 2FD6                   MOV.L       R13,@-R15
    00002ED2 2FC6                   MOV.L       R12,@-R15
    00002ED4 2F86                   MOV.L       R8,@-R15
    00002ED6 4F22                   STS.L       PR,@-R15
    00002ED8 7FF8                   ADD         #-8,R15
    00002EDA 1F31                   MOV.L       R3,@(4,R15)
    00002EDC 2F22                   MOV.L       R2,@R15
      simplexC.c  1631        res= malloc(sizeof(struct problemStatement));
    00002EDE D33E                   MOV.L       L1529+4,R3 ; _malloc
    00002EE0 430B                   JSR         @R3
    00002EE2 E454                   MOV         #84,R4
      simplexC.c  1632        res->modelType=TYPE_INPUT;
      simplexC.c  1633        res->nConstraints=nConstraints;
      simplexC.c  1634        res->nVariables=nVariables;
      simplexC.c  1635        res->nVariables2fases=1;
      simplexC.c  1636        res ->nVariablesSlope=2;
      simplexC.c  1637        res->problemType=TYPE_LP;
      simplexC.c  1638        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00002EE4 DC3D                   MOV.L       L1529+8,R12; _calloc
    00002EE6 E504                   MOV         #4,R5
    00002EE8 6E03                   MOV         R0,R14
    00002EEA ED01                   MOV         #1,R13
    00002EEC 1ED1                   MOV.L       R13,@(4,R14)
    00002EEE 52F1                   MOV.L       @(4,R15),R2
    00002EF0 1E2B                   MOV.L       R2,@(44,R14)
    00002EF2 63F2                   MOV.L       @R15,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  137


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002EF4 1E37                   MOV.L       R3,@(28,R14)
    00002EF6 E302                   MOV         #2,R3
    00002EF8 1ED9                   MOV.L       R13,@(36,R14)
    00002EFA 1E38                   MOV.L       R3,@(32,R14)
    00002EFC 2ED2                   MOV.L       R13,@R14
    00002EFE 4C0B                   JSR         @R12
    00002F00 E403                   MOV         #3,R4
    00002F02 E148                   MOV         #72,R1
    00002F04 31EC                   ADD         R14,R1
      simplexC.c  1639        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00002F06 E504                   MOV         #4,R5
    00002F08 2102                   MOV.L       R0,@R1
    00002F0A 4C0B                   JSR         @R12
    00002F0C E402                   MOV         #2,R4
      simplexC.c  1640        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    00002F0E E504                   MOV         #4,R5
    00002F10 1E0C                   MOV.L       R0,@(48,R14)
    00002F12 4C0B                   JSR         @R12
    00002F14 E402                   MOV         #2,R4
      simplexC.c  1641        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00002F16 E504                   MOV         #4,R5
    00002F18 1E0D                   MOV.L       R0,@(52,R14)
    00002F1A 4C0B                   JSR         @R12
    00002F1C E402                   MOV         #2,R4
      simplexC.c  1642        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    00002F1E E504                   MOV         #4,R5
    00002F20 1E0E                   MOV.L       R0,@(56,R14)
    00002F22 4C0B                   JSR         @R12
    00002F24 E403                   MOV         #3,R4
      simplexC.c  1643        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
    00002F26 6303                   MOV         R0,R3
    00002F28 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1644        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1645        res->inequalitySigns[2]=INE_EQUAL;
      simplexC.c  1646        res->funcObjectivePurpose=FUNC_MAXIMIZE;
      simplexC.c  1647        res->funcObjtValues[0]=3;
      simplexC.c  1648        res->funcObjtValues[1]=5;
      simplexC.c  1649        res->funcObjtValues[2]=0;
      simplexC.c  1650        res->constraints=calloc(nConstraints,sizeof(float));
    00002F2A E504                   MOV         #4,R5
    00002F2C 23D2                   MOV.L       R13,@R3
    00002F2E E044                   MOV         #68,R0
    00002F30 52E6                   MOV.L       @(24,R14),R2
    00002F32 12D1                   MOV.L       R13,@(4,R2)
    00002F34 53E6                   MOV.L       @(24,R14),R3
    00002F36 E200                   MOV         #0,R2
    00002F38 1322                   MOV.L       R2,@(8,R3)
    00002F3A 0ED6                   MOV.L       R13,@(R0,R14)
    00002F3C D228                   MOV.L       L1529+12,R2; H'40400000
    00002F3E E048                   MOV         #72,R0
    00002F40 03EE                   MOV.L       @(R0,R14),R3
    00002F42 2322                   MOV.L       R2,@R3
    00002F44 03EE                   MOV.L       @(R0,R14),R3
    00002F46 D227                   MOV.L       L1529+16,R2; H'40A00000
    00002F48 1321                   MOV.L       R2,@(4,R3)
    00002F4A E200                   MOV         #0,R2
    00002F4C 03EE                   MOV.L       @(R0,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  138


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002F4E 1322                   MOV.L       R2,@(8,R3)
    00002F50 4C0B                   JSR         @R12
    00002F52 E403                   MOV         #3,R4
    00002F54 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1651        res->constraints[0]=calloc(nVariables,sizeof(float));
    00002F56 6803                   MOV         R0,R8
    00002F58 E504                   MOV         #4,R5
    00002F5A 4C0B                   JSR         @R12
    00002F5C E402                   MOV         #2,R4
      simplexC.c  1652        res->constraints[1]=calloc(nVariables,sizeof(float));
    00002F5E E504                   MOV         #4,R5
    00002F60 2802                   MOV.L       R0,@R8
    00002F62 58E4                   MOV.L       @(16,R14),R8
    00002F64 7804                   ADD         #4,R8
    00002F66 4C0B                   JSR         @R12
    00002F68 E402                   MOV         #2,R4
      simplexC.c  1653        res->constraints[2]=calloc(nVariables,sizeof(float));
    00002F6A E504                   MOV         #4,R5
    00002F6C 2802                   MOV.L       R0,@R8
    00002F6E 58E4                   MOV.L       @(16,R14),R8
    00002F70 7808                   ADD         #8,R8
    00002F72 4C0B                   JSR         @R12
    00002F74 E402                   MOV         #2,R4
      simplexC.c  1654        res->constraints[0][0]=1;
      simplexC.c  1655        res->constraints[0][1]=0;
      simplexC.c  1656        res->constraints[1][0]=0;
      simplexC.c  1657        res->constraints[1][1]=2;
      simplexC.c  1658        res->constraints[2][0]=3;
      simplexC.c  1659        res->constraints[2][1]=2;
      simplexC.c  1660        res->rightValues=calloc(nConstraints,sizeof(float));
    00002F76 E504                   MOV         #4,R5
    00002F78 2802                   MOV.L       R0,@R8
    00002F7A 53E4                   MOV.L       @(16,R14),R3
    00002F7C D115                   MOV.L       L1529,R1   ; H'3F800000
    00002F7E 6232                   MOV.L       @R3,R2
    00002F80 2212                   MOV.L       R1,@R2
    00002F82 E100                   MOV         #0,R1
    00002F84 53E4                   MOV.L       @(16,R14),R3
    00002F86 6232                   MOV.L       @R3,R2
    00002F88 1211                   MOV.L       R1,@(4,R2)
    00002F8A 53E4                   MOV.L       @(16,R14),R3
    00002F8C 5231                   MOV.L       @(4,R3),R2
    00002F8E 2212                   MOV.L       R1,@R2
    00002F90 53E4                   MOV.L       @(16,R14),R3
    00002F92 5231                   MOV.L       @(4,R3),R2
    00002F94 D114                   MOV.L       L1529+20,R1; H'40000000
    00002F96 1211                   MOV.L       R1,@(4,R2)
    00002F98 53E4                   MOV.L       @(16,R14),R3
    00002F9A 5232                   MOV.L       @(8,R3),R2
    00002F9C D110                   MOV.L       L1529+12,R1; H'40400000
    00002F9E 2212                   MOV.L       R1,@R2
    00002FA0 53E4                   MOV.L       @(16,R14),R3
    00002FA2 4118                   SHLL8       R1
    00002FA4 5232                   MOV.L       @(8,R3),R2
    00002FA6 1211                   MOV.L       R1,@(4,R2)
    00002FA8 4C0B                   JSR         @R12
    00002FAA E403                   MOV         #3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  139


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002FAC 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1661        res->rightValues[0]=4;
    00002FAE 6303                   MOV         R0,R3
    00002FB0 D20E                   MOV.L       L1529+24,R2; H'40800000
      simplexC.c  1662        res->rightValues[1]=12;
      simplexC.c  1663        res->rightValues[2]=18;
      simplexC.c  1664        res->nVariables2fases=1;
      simplexC.c  1665        res->is2fasesNeeded=1;
      simplexC.c  1666    
      simplexC.c  1667        return res;
    00002FB2 60E3                   MOV         R14,R0
    00002FB4 2322                   MOV.L       R2,@R3
    00002FB6 53E5                   MOV.L       @(20,R14),R3
    00002FB8 D20D                   MOV.L       L1529+28,R2; H'41400000
    00002FBA 1321                   MOV.L       R2,@(4,R3)
    00002FBC 53E5                   MOV.L       @(20,R14),R3
    00002FBE D20D                   MOV.L       L1529+32,R2; H'41900000
    00002FC0 1322                   MOV.L       R2,@(8,R3)
    00002FC2 1ED9                   MOV.L       R13,@(36,R14)
    00002FC4 1ED2                   MOV.L       R13,@(8,R14)
      simplexC.c  1668    }
    00002FC6 7F08                   ADD         #8,R15
    00002FC8 4F26                   LDS.L       @R15+,PR
    00002FCA 68F6                   MOV.L       @R15+,R8
    00002FCC 6CF6                   MOV.L       @R15+,R12
    00002FCE 6DF6                   MOV.L       @R15+,R13
    00002FD0 000B                   RTS
    00002FD2 6EF6                   MOV.L       @R15+,R14
    00002FD4              L1529:                            
    00002FD4 3F800000               .DATA.L     H'3F800000
    00002FD8 <00000000>             .DATA.L     _malloc
    00002FDC <00000000>             .DATA.L     _calloc
    00002FE0 40400000               .DATA.L     H'40400000
    00002FE4 40A00000               .DATA.L     H'40A00000
    00002FE8 40000000               .DATA.L     H'40000000
    00002FEC 40800000               .DATA.L     H'40800000
    00002FF0 41400000               .DATA.L     H'41400000
    00002FF4 41900000               .DATA.L     H'41900000
      simplexC.c  1669    
      simplexC.c  1670    struct problemStatement* createProblemStatementToDebug()
    00002FF8              _createProblemStatementToDebug:  ; function: createProblemStatementToDebug
                                                           ; frame size=32
    00002FF8 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1671    {
      simplexC.c  1672        struct problemStatement *res;
      simplexC.c  1673        int nConstraints;
      simplexC.c  1674        int nVariables;
      simplexC.c  1675        nConstraints=3;
    00002FFA E303                   MOV         #3,R3
    00002FFC 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1676        nVariables=2;
    00002FFE E202                   MOV         #2,R2
    00003000 2FC6                   MOV.L       R12,@-R15
    00003002 2FB6                   MOV.L       R11,@-R15
    00003004 2F86                   MOV.L       R8,@-R15
    00003006 4F22                   STS.L       PR,@-R15
    00003008 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  140


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000300A 1F31                   MOV.L       R3,@(4,R15)
    0000300C 2F22                   MOV.L       R2,@R15
      simplexC.c  1677        res= malloc(sizeof(struct problemStatement));
    0000300E D3A7                   MOV.L       L1530,R3   ; _malloc
    00003010 430B                   JSR         @R3
    00003012 E454                   MOV         #84,R4
      simplexC.c  1678        res->modelType=TYPE_INPUT;
      simplexC.c  1679        res->nConstraints=nConstraints;
      simplexC.c  1680        res->nVariables=nVariables;
      simplexC.c  1681        res->nVariables2fases=0;
      simplexC.c  1682        res ->nVariablesSlope=3;
      simplexC.c  1683        res->problemType=TYPE_LP;
      simplexC.c  1684        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00003014 DCA6                   MOV.L       L1530+4,R12; _calloc
    00003016 E504                   MOV         #4,R5
    00003018 6E03                   MOV         R0,R14
    0000301A ED01                   MOV         #1,R13
    0000301C 1ED1                   MOV.L       R13,@(4,R14)
    0000301E EB00                   MOV         #0,R11
    00003020 52F1                   MOV.L       @(4,R15),R2
    00003022 1E2B                   MOV.L       R2,@(44,R14)
    00003024 63F2                   MOV.L       @R15,R3
    00003026 1E37                   MOV.L       R3,@(28,R14)
    00003028 1EB9                   MOV.L       R11,@(36,R14)
    0000302A E303                   MOV         #3,R3
    0000302C 1E38                   MOV.L       R3,@(32,R14)
    0000302E 2ED2                   MOV.L       R13,@R14
    00003030 4C0B                   JSR         @R12
    00003032 6433                   MOV         R3,R4
    00003034 E148                   MOV         #72,R1
    00003036 31EC                   ADD         R14,R1
    00003038 2102                   MOV.L       R0,@R1
      simplexC.c  1685        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    0000303A E504                   MOV         #4,R5
    0000303C 4C0B                   JSR         @R12
    0000303E E402                   MOV         #2,R4
    00003040 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1686        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    00003042 E504                   MOV         #4,R5
    00003044 4C0B                   JSR         @R12
    00003046 E402                   MOV         #2,R4
    00003048 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1687        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    0000304A E504                   MOV         #4,R5
    0000304C 4C0B                   JSR         @R12
    0000304E E402                   MOV         #2,R4
    00003050 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1688        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    00003052 E504                   MOV         #4,R5
    00003054 4C0B                   JSR         @R12
    00003056 E403                   MOV         #3,R4
    00003058 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1689        res->funcObjectivePurpose=FUNC_MINIMIZE;
      simplexC.c  1690        res->funcObjtValues[0]=-4;
      simplexC.c  1691        res->funcObjtValues[1]=-6;
      simplexC.c  1692        res->funcObjtValues[2]=0;
      simplexC.c  1693        res->constraints=calloc(nConstraints,sizeof(float));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  141


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000305A E504                   MOV         #4,R5
    0000305C D295                   MOV.L       L1530+8,R2 ; H'C0800000
    0000305E E044                   MOV         #68,R0
    00003060 0EB6                   MOV.L       R11,@(R0,R14)
    00003062 E048                   MOV         #72,R0
    00003064 03EE                   MOV.L       @(R0,R14),R3
    00003066 2322                   MOV.L       R2,@R3
    00003068 03EE                   MOV.L       @(R0,R14),R3
    0000306A D293                   MOV.L       L1530+12,R2; H'C0C00000
    0000306C 1321                   MOV.L       R2,@(4,R3)
    0000306E 62B3                   MOV         R11,R2
    00003070 03EE                   MOV.L       @(R0,R14),R3
    00003072 13B2                   MOV.L       R11,@(8,R3)
    00003074 4C0B                   JSR         @R12
    00003076 E403                   MOV         #3,R4
    00003078 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1694        res->constraints[0]=calloc(nVariables,sizeof(float));
    0000307A 6803                   MOV         R0,R8
    0000307C E504                   MOV         #4,R5
    0000307E 4C0B                   JSR         @R12
    00003080 E402                   MOV         #2,R4
      simplexC.c  1695        res->constraints[1]=calloc(nVariables,sizeof(float));
    00003082 E504                   MOV         #4,R5
    00003084 2802                   MOV.L       R0,@R8
    00003086 58E4                   MOV.L       @(16,R14),R8
    00003088 7804                   ADD         #4,R8
    0000308A 4C0B                   JSR         @R12
    0000308C E402                   MOV         #2,R4
      simplexC.c  1696        res->constraints[2]=calloc(nVariables,sizeof(float));
    0000308E E504                   MOV         #4,R5
    00003090 2802                   MOV.L       R0,@R8
    00003092 58E4                   MOV.L       @(16,R14),R8
    00003094 7808                   ADD         #8,R8
    00003096 4C0B                   JSR         @R12
    00003098 E402                   MOV         #2,R4
      simplexC.c  1697        res->constraints[0][0]=-1;
      simplexC.c  1698        res->constraints[0][1]=1;
      simplexC.c  1699        res->constraints[1][0]=1;
      simplexC.c  1700        res->constraints[1][1]=1;
      simplexC.c  1701        res->constraints[2][0]=2;
      simplexC.c  1702        res->constraints[2][1]=5;
      simplexC.c  1703        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1704        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1705        res->inequalitySigns[2]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1706        res->rightValues=calloc(nConstraints,sizeof(float));
    0000309A E504                   MOV         #4,R5
    0000309C 2802                   MOV.L       R0,@R8
    0000309E 53E4                   MOV.L       @(16,R14),R3
    000030A0 D186                   MOV.L       L1530+16,R1; H'BF800000
    000030A2 6232                   MOV.L       @R3,R2
    000030A4 2212                   MOV.L       R1,@R2
    000030A6 53E4                   MOV.L       @(16,R14),R3
    000030A8 D185                   MOV.L       L1530+20,R1; H'3F800000
    000030AA 6232                   MOV.L       @R3,R2
    000030AC 1211                   MOV.L       R1,@(4,R2)
    000030AE 53E4                   MOV.L       @(16,R14),R3
    000030B0 5231                   MOV.L       @(4,R3),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  142


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000030B2 2212                   MOV.L       R1,@R2
    000030B4 53E4                   MOV.L       @(16,R14),R3
    000030B6 5231                   MOV.L       @(4,R3),R2
    000030B8 1211                   MOV.L       R1,@(4,R2)
    000030BA 53E4                   MOV.L       @(16,R14),R3
    000030BC D181                   MOV.L       L1530+24,R1; H'40000000
    000030BE 5232                   MOV.L       @(8,R3),R2
    000030C0 2212                   MOV.L       R1,@R2
    000030C2 53E4                   MOV.L       @(16,R14),R3
    000030C4 D180                   MOV.L       L1530+28,R1; H'40A00000
    000030C6 5232                   MOV.L       @(8,R3),R2
    000030C8 1211                   MOV.L       R1,@(4,R2)
    000030CA 53E6                   MOV.L       @(24,R14),R3
    000030CC 23D2                   MOV.L       R13,@R3
    000030CE 52E6                   MOV.L       @(24,R14),R2
    000030D0 12D1                   MOV.L       R13,@(4,R2)
    000030D2 53E6                   MOV.L       @(24,R14),R3
    000030D4 13D2                   MOV.L       R13,@(8,R3)
    000030D6 4C0B                   JSR         @R12
    000030D8 E403                   MOV         #3,R4
      simplexC.c  1707        res->rightValues[0]=11;
    000030DA 6203                   MOV         R0,R2
    000030DC D37B                   MOV.L       L1530+32,R3; H'41300000
    000030DE 1E05                   MOV.L       R0,@(20,R14)
    000030E0 2232                   MOV.L       R3,@R2
      simplexC.c  1708        res->rightValues[1]=27;
      simplexC.c  1709        res->rightValues[2]=90;
      simplexC.c  1710        res->nVariables2fases=0;
      simplexC.c  1711        res->is2fasesNeeded=0;
      simplexC.c  1712    
      simplexC.c  1713        return res;
    000030E2 60E3                   MOV         R14,R0
    000030E4 52E5                   MOV.L       @(20,R14),R2
    000030E6 D37A                   MOV.L       L1530+36,R3; H'41D80000
    000030E8 1231                   MOV.L       R3,@(4,R2)
    000030EA 52E5                   MOV.L       @(20,R14),R2
    000030EC D379                   MOV.L       L1530+40,R3; H'42B40000
    000030EE 1232                   MOV.L       R3,@(8,R2)
    000030F0 1EB9                   MOV.L       R11,@(36,R14)
    000030F2 1EB2                   MOV.L       R11,@(8,R14)
      simplexC.c  1714    }
    000030F4 7F08                   ADD         #8,R15
    000030F6 4F26                   LDS.L       @R15+,PR
    000030F8 68F6                   MOV.L       @R15+,R8
    000030FA 6BF6                   MOV.L       @R15+,R11
    000030FC 6CF6                   MOV.L       @R15+,R12
    000030FE 6DF6                   MOV.L       @R15+,R13
    00003100 000B                   RTS
    00003102 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1715    
      simplexC.c  1716    struct iteration *convertToSecondPhase(int nodeId, int firsItId)
    00003104              _convertToSecondPhase:           ; function: convertToSecondPhase
                                                           ; frame size=32
    00003104 2FE6                   MOV.L       R14,@-R15
    00003106 2FD6                   MOV.L       R13,@-R15
    00003108 2FC6                   MOV.L       R12,@-R15
      simplexC.c  1717    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  143


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1718        int i,j;
      simplexC.c  1719        struct iteration *it,*originalIt;
      simplexC.c  1720        originalIt=ex.nodes.its[firsItId];
    0000310A 6D53                   MOV         R5,R13
      simplexC.c  1721        it = malloc(sizeof(struct iteration));
    0000310C D367                   MOV.L       L1530,R3   ; _malloc
    0000310E 4D08                   SHLL2       R13
    00003110 2FA6                   MOV.L       R10,@-R15
    00003112 2F96                   MOV.L       R9,@-R15
    00003114 2F86                   MOV.L       R8,@-R15
    00003116 4F22                   STS.L       PR,@-R15
    00003118 D96F                   MOV.L       L1530+44,R9; _ex
    0000311A 5095                   MOV.L       @(20,R9),R0
    0000311C 0DDE                   MOV.L       @(R0,R13),R13
    0000311E 430B                   JSR         @R3
    00003120 E448                   MOV         #72,R4
    00003122 6E03                   MOV         R0,R14
      simplexC.c  1722        it->BinvSize=originalIt->BinvSize;
    00003124 52D9                   MOV.L       @(36,R13),R2
      simplexC.c  1723        it->Binv=calloc(it->BinvSize,sizeof(float));
    00003126 E504                   MOV         #4,R5
    00003128 D861                   MOV.L       L1530+4,R8 ; _calloc
    0000312A 1E29                   MOV.L       R2,@(36,R14)
    0000312C 480B                   JSR         @R8
    0000312E 6423                   MOV         R2,R4
    00003130 1E08                   MOV.L       R0,@(32,R14)
      simplexC.c  1724        for(i=0;i<it->BinvSize;i++)
    00003132 EA00                   MOV         #0,R10
    00003134 A01C                   BRA         L1462
    00003136 6CA3                   MOV         R10,R12
    00003138              L1463:                            
      simplexC.c  1725        {
      simplexC.c  1726            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    00003138 50E8                   MOV.L       @(32,R14),R0
    0000313A E504                   MOV         #4,R5
    0000313C 62C3                   MOV         R12,R2
    0000313E 4208                   SHLL2       R2
    00003140 302C                   ADD         R2,R0
    00003142 2F06                   MOV.L       R0,@-R15
    00003144 480B                   JSR         @R8
    00003146 54E9                   MOV.L       @(36,R14),R4
    00003148 63F6                   MOV.L       @R15+,R3
      simplexC.c  1727            for(j=0;j<it->BinvSize;j++)
    0000314A 64A3                   MOV         R10,R4
    0000314C 2302                   MOV.L       R0,@R3
    0000314E 61C3                   MOV         R12,R1
    00003150 A00A                   BRA         L1464
    00003152 4108                   SHLL2       R1
    00003154              L1465:                            
      simplexC.c  1728            {
      simplexC.c  1729                it->Binv[i][j]=originalIt->Binv[i][j];
    00003154 50E8                   MOV.L       @(32,R14),R0
    00003156 6543                   MOV         R4,R5
    00003158 031E                   MOV.L       @(R0,R1),R3
    0000315A 4508                   SHLL2       R5
    0000315C 50D8                   MOV.L       @(32,R13),R0
    0000315E 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  144


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003160 001E                   MOV.L       @(R0,R1),R0
    00003162 335C                   ADD         R5,R3
    00003164 025E                   MOV.L       @(R0,R5),R2
    00003166 2322                   MOV.L       R2,@R3
    00003168              L1464:                            
    00003168 53E9                   MOV.L       @(36,R14),R3
    0000316A 3433                   CMP/GE      R3,R4
    0000316C 8BF2                   BF          L1465
    0000316E 7C01                   ADD         #1,R12
    00003170              L1462:                            
    00003170 53E9                   MOV.L       @(36,R14),R3
    00003172 3C33                   CMP/GE      R3,R12
    00003174 8BE0                   BF          L1463
      simplexC.c  1730            }
      simplexC.c  1731            
      simplexC.c  1732        }
      simplexC.c  1733        it->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    00003176 E504                   MOV         #4,R5
    00003178 480B                   JSR         @R8
    0000317A 549B                   MOV.L       @(44,R9),R4
    0000317C 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c  1734        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    0000317E E504                   MOV         #4,R5
    00003180 480B                   JSR         @R8
    00003182 54E9                   MOV.L       @(36,R14),R4
    00003184 1E03                   MOV.L       R0,@(12,R14)
      simplexC.c  1735        for(i=0;i<it->BinvSize;i++)
    00003186 A008                   BRA         L1466
    00003188 64A3                   MOV         R10,R4
    0000318A              L1467:                            
      simplexC.c  1736        {
      simplexC.c  1737            it->idByRowOfBasicVarsInBInv[i]=originalIt->idByRowOfBasicVarsInBInv[i];
    0000318A 6543                   MOV         R4,R5
    0000318C 53E3                   MOV.L       @(12,R14),R3
    0000318E 4508                   SHLL2       R5
    00003190 50D3                   MOV.L       @(12,R13),R0
    00003192 7401                   ADD         #1,R4
    00003194 025E                   MOV.L       @(R0,R5),R2
    00003196 335C                   ADD         R5,R3
    00003198 2322                   MOV.L       R2,@R3
    0000319A              L1466:                            
    0000319A 52E9                   MOV.L       @(36,R14),R2
    0000319C 3423                   CMP/GE      R2,R4
    0000319E 8BF4                   BF          L1467
      simplexC.c  1738        }
      simplexC.c  1739        for(i=0;i<ex.nVariables;i++)
    000031A0 A008                   BRA         L1468
    000031A2 64A3                   MOV         R10,R4
    000031A4              L1469:                            
      simplexC.c  1740        {
      simplexC.c  1741            it->idBasicVariables[i]=originalIt->idBasicVariables[i];
    000031A4 52E2                   MOV.L       @(8,R14),R2
    000031A6 6543                   MOV         R4,R5
    000031A8 50D2                   MOV.L       @(8,R13),R0
    000031AA 4508                   SHLL2       R5
    000031AC 035E                   MOV.L       @(R0,R5),R3
    000031AE 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  145


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000031B0 325C                   ADD         R5,R2
    000031B2 2232                   MOV.L       R3,@R2
    000031B4              L1468:                            
    000031B4 539B                   MOV.L       @(44,R9),R3
    000031B6 3433                   CMP/GE      R3,R4
    000031B8 8BF4                   BF          L1469
      simplexC.c  1742        }
      simplexC.c  1743        return it;
    000031BA 60E3                   MOV         R14,R0
      simplexC.c  1744    }
    000031BC 4F26                   LDS.L       @R15+,PR
    000031BE 68F6                   MOV.L       @R15+,R8
    000031C0 69F6                   MOV.L       @R15+,R9
    000031C2 6AF6                   MOV.L       @R15+,R10
    000031C4 6CF6                   MOV.L       @R15+,R12
    000031C6 6DF6                   MOV.L       @R15+,R13
    000031C8 000B                   RTS
    000031CA 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1745    
      simplexC.c  1746    int solveSimplexLPOneFase(int nodeId, int firsItId)
    000031CC              _solveSimplexLPOneFase:          ; function: solveSimplexLPOneFase
                                                           ; frame size=20
    000031CC 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1747    {
      simplexC.c  1748        int itId, nId;
      simplexC.c  1749        float zSol;
      simplexC.c  1750        itId=firsItId;
      simplexC.c  1751        ex.nodes.its[itId]->numIteration=itId;
    000031CE 6353                   MOV         R5,R3
    000031D0 2FD6                   MOV.L       R13,@-R15
    000031D2 4308                   SHLL2       R3
    000031D4 DE40                   MOV.L       L1530+44,R14; _ex
    000031D6 6D53                   MOV         R5,R13
    000031D8 2FC6                   MOV.L       R12,@-R15
    000031DA 2FB6                   MOV.L       R11,@-R15
    000031DC 4F22                   STS.L       PR,@-R15
    000031DE 50E5                   MOV.L       @(20,R14),R0
    000031E0 023E                   MOV.L       @(R0,R3),R2
      simplexC.c  1752        while(itId<ex.maxIterations &&ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1)
    000031E2 A015                   BRA         L1471
    000031E4 2252                   MOV.L       R5,@R2
    000031E6              L1472:                            
      simplexC.c  1753        {
      simplexC.c  1754            calculateIteration(ex.nodes.its[itId]);
    000031E6 6CD3                   MOV         R13,R12
    000031E8 50E5                   MOV.L       @(20,R14),R0
    000031EA 4C08                   SHLL2       R12
    000031EC D23B                   MOV.L       L1530+48,R2; _calculateIteration
    000031EE 420B                   JSR         @R2
    000031F0 04CE                   MOV.L       @(R0,R12),R4
      simplexC.c  1755            if(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1){
    000031F2 50E5                   MOV.L       @(20,R14),R0
    000031F4 04CE                   MOV.L       @(R0,R12),R4
    000031F6 5045                   MOV.L       @(20,R4),R0
    000031F8 88FF                   CMP/EQ      #-1,R0
    000031FA 8909                   BT          L1471
    000031FC 5046                   MOV.L       @(24,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  146


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000031FE 88FF                   CMP/EQ      #-1,R0
    00003200 8906                   BT          L1471
      simplexC.c  1756                ex.nodes.its[itId+1]=createNewIteration(ex.nodes.its[itId]);
    00003202 5BE5                   MOV.L       @(20,R14),R11
    00003204 D336                   MOV.L       L1530+52,R3; _createNewIteration
    00003206 3BCC                   ADD         R12,R11
    00003208 430B                   JSR         @R3
    0000320A 64B2                   MOV.L       @R11,R4
    0000320C 1B01                   MOV.L       R0,@(4,R11)
      simplexC.c  1757                zSol= ex.nodes.its[itId]->zSol;
      simplexC.c  1758                    itId++;
    0000320E 7D01                   ADD         #1,R13
    00003210              L1471:                            
    00003210 52ED                   MOV.L       @(52,R14),R2
    00003212 3D23                   CMP/GE      R2,R13
    00003214 890D                   BT          L1474
    00003216 60D3                   MOV         R13,R0
    00003218 53E5                   MOV.L       @(20,R14),R3
    0000321A 4008                   SHLL2       R0
    0000321C 003E                   MOV.L       @(R0,R3),R0
    0000321E 5005                   MOV.L       @(20,R0),R0
    00003220 88FF                   CMP/EQ      #-1,R0
    00003222 8906                   BT          L1474
    00003224 53E5                   MOV.L       @(20,R14),R3
    00003226 60D3                   MOV         R13,R0
    00003228 4008                   SHLL2       R0
    0000322A 003E                   MOV.L       @(R0,R3),R0
    0000322C 5006                   MOV.L       @(24,R0),R0
    0000322E 88FF                   CMP/EQ      #-1,R0
    00003230 8BD9                   BF          L1472
    00003232              L1474:                            
      simplexC.c  1759            }
      simplexC.c  1760                
      simplexC.c  1761        }
      simplexC.c  1762        return itId;
    00003232 60D3                   MOV         R13,R0
      simplexC.c  1763    }
    00003234 4F26                   LDS.L       @R15+,PR
    00003236 6BF6                   MOV.L       @R15+,R11
    00003238 6CF6                   MOV.L       @R15+,R12
    0000323A 6DF6                   MOV.L       @R15+,R13
    0000323C 000B                   RTS
    0000323E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1764    
      simplexC.c  1765    int solveSimplexLP(int nodeId)
    00003240              _solveSimplexLP:                 ; function: solveSimplexLP
                                                           ; frame size=148
    00003240 2FE6                   MOV.L       R14,@-R15
    00003242 2FD6                   MOV.L       R13,@-R15
    00003244 2FC6                   MOV.L       R12,@-R15
    00003246 2F86                   MOV.L       R8,@-R15
    00003248 4F22                   STS.L       PR,@-R15
    0000324A 7F80                   ADD         #-128,R15
      simplexC.c  1766    {
      simplexC.c  1767        int itId,lastItId;
      simplexC.c  1768        char strSol[128];
      simplexC.c  1769        ex.nodes.id=nodeId;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  147


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000324C DE22                   MOV.L       L1530+44,R14; _ex
    0000324E 1E43                   MOV.L       R4,@(12,R14)
      simplexC.c  1770        
      simplexC.c  1771        if(ex.mode==MODE_FULL_EXECUTION)
    00003250 63E2                   MOV.L       @R14,R3
    00003252 2338                   TST         R3,R3
    00003254 8F48                   BF/S        L1477
    00003256 6C43                   MOV         R4,R12
      simplexC.c  1772        {
      simplexC.c  1773            ex.nodes.its[0]=modelToIteration(ex.canonicalStatement);
    00003258 58E5                   MOV.L       @(20,R14),R8
    0000325A D222                   MOV.L       L1530+56,R2; _modelToIteration
    0000325C 420B                   JSR         @R2
    0000325E 54E2                   MOV.L       @(8,R14),R4
    00003260 2802                   MOV.L       R0,@R8
      simplexC.c  1774        }
      simplexC.c  1775        if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesActive)
    00003262 63E2                   MOV.L       @R14,R3
    00003264 2338                   TST         R3,R3
    00003266 8B3F                   BF          L1477
    00003268 53E2                   MOV.L       @(8,R14),R3
    0000326A 5233                   MOV.L       @(12,R3),R2
    0000326C 2228                   TST         R2,R2
    0000326E 893B                   BT          L1477
      simplexC.c  1776        {
      simplexC.c  1777            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00003270 E500                   MOV         #0,R5
    00003272 BFAB                   BSR         _solveSimplexLPOneFase
    00003274 64C3                   MOV         R12,R4
    00003276 6D03                   MOV         R0,R13
      simplexC.c  1778            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;//CAMBIAR
    00003278 52E2                   MOV.L       @(8,R14),R2
    0000327A E044                   MOV         #68,R0
    0000327C 032E                   MOV.L       @(R0,R2),R3
    0000327E 1E3A                   MOV.L       R3,@(40,R14)
      simplexC.c  1779            if(lastItId<ex.maxIterations)
    00003280 52ED                   MOV.L       @(52,R14),R2
    00003282 3D23                   CMP/GE      R2,R13
    00003284 8934                   BT          L1479
      simplexC.c  1780            {
      simplexC.c  1781                ex.canonicalStatement->is2fasesActive=0;
    00003286 E300                   MOV         #0,R3
    00003288 51E2                   MOV.L       @(8,R14),R1
      simplexC.c  1782                ex.nodes.its[lastItId+1]=convertToSecondPhase(nodeId, lastItId);
    0000328A 62D3                   MOV         R13,R2
    0000328C 1133                   MOV.L       R3,@(12,R1)
    0000328E 65D3                   MOV         R13,R5
    00003290 53E5                   MOV.L       @(20,R14),R3
    00003292 4208                   SHLL2       R2
    00003294 323C                   ADD         R3,R2
    00003296 6823                   MOV         R2,R8
    00003298 7804                   ADD         #4,R8
    0000329A BF33                   BSR         _convertToSecondPhase
    0000329C 64C3                   MOV         R12,R4
      simplexC.c  1783                lastItId=solveSimplexLPOneFase(nodeId, lastItId+1);
    0000329E 65D3                   MOV         R13,R5
    000032A0 2802                   MOV.L       R0,@R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  148


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000032A2 7501                   ADD         #1,R5
    000032A4 BF92                   BSR         _solveSimplexLPOneFase
    000032A6 64C3                   MOV         R12,R4
    000032A8 A022                   BRA         L1479
    000032AA 6D03                   MOV         R0,R13
    000032AC              L1530:                            
    000032AC <00000000>             .DATA.L     _malloc
    000032B0 <00000000>             .DATA.L     _calloc
    000032B4 C0800000               .DATA.L     H'C0800000
    000032B8 C0C00000               .DATA.L     H'C0C00000
    000032BC BF800000               .DATA.L     H'BF800000
    000032C0 3F800000               .DATA.L     H'3F800000
    000032C4 40000000               .DATA.L     H'40000000
    000032C8 40A00000               .DATA.L     H'40A00000
    000032CC 41300000               .DATA.L     H'41300000
    000032D0 41D80000               .DATA.L     H'41D80000
    000032D4 42B40000               .DATA.L     H'42B40000
    000032D8 <00000000>             .DATA.L     _ex
    000032DC <00000000>             .DATA.L     _calculateIteration
    000032E0 <00000000>             .DATA.L     _createNewIteration
    000032E4 <00000000>             .DATA.L     _modelToIteration
    000032E8              L1477:                            
      simplexC.c  1784            }
      simplexC.c  1785        }else
      simplexC.c  1786        {
      simplexC.c  1787            lastItId=solveSimplexLPOneFase(nodeId, 0);
    000032E8 E500                   MOV         #0,R5
    000032EA BF6F                   BSR         _solveSimplexLPOneFase
    000032EC 64C3                   MOV         R12,R4
    000032EE 6D03                   MOV         R0,R13
    000032F0              L1479:                            
      simplexC.c  1788        }
      simplexC.c  1789        ex.nodes.nIterations=lastItId;
    000032F0 1ED4                   MOV.L       R13,@(16,R14)
      simplexC.c  1790    
      simplexC.c  1791        return 0;
    000032F2 E000                   MOV         #0,R0
      simplexC.c  1792    }
    000032F4 9171                   MOV.W       L1531,R1   ; H'0080
    000032F6 3F1C                   ADD         R1,R15
    000032F8 4F26                   LDS.L       @R15+,PR
    000032FA 68F6                   MOV.L       @R15+,R8
    000032FC 6CF6                   MOV.L       @R15+,R12
    000032FE 6DF6                   MOV.L       @R15+,R13
    00003300 000B                   RTS
    00003302 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1793    
      simplexC.c  1794    
      simplexC.c  1795    int initializeExecution()
    00003304              _initializeExecution:            ; function: initializeExecution
                                                           ; frame size=0
      simplexC.c  1796    {
      simplexC.c  1797        ex.bVectorValues=ex.canonicalStatement->rightValues;
    00003304 D436                   MOV.L       L1531+6,R4 ; _ex
    00003306 5342                   MOV.L       @(8,R4),R3
    00003308 5235                   MOV.L       @(20,R3),R2
    0000330A 1426                   MOV.L       R2,@(24,R4)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  149


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000330C 5542                   MOV.L       @(8,R4),R5
    0000330E 6353                   MOV         R5,R3
    00003310 5232                   MOV.L       @(8,R3),R2
    00003312 2228                   TST         R2,R2
    00003314 8904                   BT          L1481
      simplexC.c  1798        if(ex.canonicalStatement->is2fasesNeeded)
      simplexC.c  1799        {
      simplexC.c  1800            ex.canonicalStatement->is2fasesActive=1;
    00003316 E201                   MOV         #1,R2
    00003318 1523                   MOV.L       R2,@(12,R5)
      simplexC.c  1801            ex.currentFuncObjectivePurpose=FUNC_MINIMIZE;
    0000331A E300                   MOV         #0,R3
    0000331C A003                   BRA         L1482
    0000331E 143A                   MOV.L       R3,@(40,R4)
    00003320              L1481:                            
      simplexC.c  1802        }else
      simplexC.c  1803        {
      simplexC.c  1804            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;
    00003320 E044                   MOV         #68,R0
    00003322 015E                   MOV.L       @(R0,R5),R1
    00003324 141A                   MOV.L       R1,@(40,R4)
    00003326              L1482:                            
      simplexC.c  1805        }
      simplexC.c  1806        ex.inputCvectorValues=ex.canonicalStatement->funcObjtValues;
    00003326 E048                   MOV         #72,R0
    00003328 5342                   MOV.L       @(8,R4),R3
    0000332A 023E                   MOV.L       @(R0,R3),R2
    0000332C 1427                   MOV.L       R2,@(28,R4)
      simplexC.c  1807        ex.fases2CvectorValues=ex.canonicalStatement->funcObjtValues2Fases;
    0000332E E04C                   MOV         #76,R0
    00003330 5342                   MOV.L       @(8,R4),R3
    00003332 023E                   MOV.L       @(R0,R3),R2
    00003334 1428                   MOV.L       R2,@(32,R4)
      simplexC.c  1808        return 0;
      simplexC.c  1809    }
    00003336 000B                   RTS
    00003338 E000                   MOV         #0,R0
      simplexC.c  1810    
      simplexC.c  1811    int AddIn_main(int isAppli, unsigned short OptionNum)
    0000333A              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=200
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    0000333A 2FE6                   MOV.L       R14,@-R15
    0000333C 2F86                   MOV.L       R8,@-R15
    0000333E 4F22                   STS.L       PR,@-R15
    00003340 DE27                   MOV.L       L1531+6,R14; _ex
    00003342 7F80                   ADD         #-128,R15
      simplexC.c  1812    {
      simplexC.c  1813        char str[128];
      simplexC.c  1814        selectExecutionMode();
    00003344 BBC7                   BSR         _selectExecutionMode
    00003346 0009                   NOP
    00003348 64E2                   MOV.L       @R14,R4
    0000334A 2448                   TST         R4,R4
    0000334C 8B19                   BF          L1484
      simplexC.c  1815        if(ex.mode==MODE_FULL_EXECUTION)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  150


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1816        {
      simplexC.c  1817            // sprintf(str,"nSlope %d, N2F %d",ex.initialProblemStatement->nVariablesSlope,ex.initialProblemSt
                         +atement->nVariables2fases);
      simplexC.c  1818            // PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
      simplexC.c  1819            // Bdisp_PutDisp_DD();
      simplexC.c  1820            // Sleep(3000);
      simplexC.c  1821            Bdisp_AllClr_DDVRAM();
    0000334E D325                   MOV.L       L1531+10,R3; _Bdisp_AllClr_DDVRAM
    00003350 430B                   JSR         @R3
    00003352 0009                   NOP
      simplexC.c  1822            // ex.initialProblemStatement=createProblemStatementToDebug2Fases();
      simplexC.c  1823            ex.initialProblemStatement=getProblemInputs();
    00003354 D224                   MOV.L       L1531+14,R2; _getProblemInputs
    00003356 420B                   JSR         @R2
    00003358 0009                   NOP
    0000335A 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c  1824            printStatementMenu(ex.initialProblemStatement);
    0000335C D323                   MOV.L       L1531+18,R3; _printStatementMenu
    0000335E 430B                   JSR         @R3
    00003360 6403                   MOV         R0,R4
      simplexC.c  1825            convertModel(ex);
    00003362 62E3                   MOV         R14,R2
    00003364 D322                   MOV.L       L1531+22,R3; __quick_odd_mvn
    00003366 E03C                   MOV         #60,R0
    00003368 3F08                   SUB         R0,R15
    0000336A 430B                   JSR         @R3
    0000336C 61F3                   MOV         R15,R1
    0000336E BC09                   BSR         _convertModel
    00003370 0009                   NOP
    00003372 7F3C                   ADD         #60,R15
      simplexC.c  1826            printStatementMenu(ex.canonicalStatement);
    00003374 D31D                   MOV.L       L1531+18,R3; _printStatementMenu
    00003376 430B                   JSR         @R3
    00003378 54E2                   MOV.L       @(8,R14),R4
      simplexC.c  1827            initializeExecution();
    0000337A BFC3                   BSR         _initializeExecution
    0000337C 0009                   NOP
    0000337E A006                   BRA         L1036
    00003380 0009                   NOP
    00003382              L1484:                            
      simplexC.c  1828            solveSimplexLP(0);
      simplexC.c  1829            printSolMenu();
      simplexC.c  1830    
      simplexC.c  1831        }else if(ex.mode==MODE_INPUT_TABLE)
    00003382 6043                   MOV         R4,R0
    00003384 8801                   CMP/EQ      #1,R0
    00003386 8B09                   BF          L1486
      simplexC.c  1832        {
      simplexC.c  1833            ex.nodes.its[0]=getProblemFromTableau();
    00003388 B882                   BSR         _getProblemFromTableau
    0000338A 58E5                   MOV.L       @(20,R14),R8
    0000338C 2802                   MOV.L       R0,@R8
    0000338E              L1036:
      simplexC.c  1834            solveSimplexLP(0);
    0000338E BF57                   BSR         _solveSimplexLP
    00003390 E400                   MOV         #0,R4
      simplexC.c  1835            printSolMenu();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  151


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00003392 D218                   MOV.L       L1531+26,R2; _printSolMenu
    00003394 420B                   JSR         @R2
    00003396 0009                   NOP
    00003398 A010                   BRA         L1485
    0000339A 0009                   NOP
    0000339C              L1486:                            
      simplexC.c  1836        }else
      simplexC.c  1837        {
      simplexC.c  1838            Bdisp_AllClr_DDVRAM();
    0000339C D211                   MOV.L       L1531+10,R2; _Bdisp_AllClr_DDVRAM
    0000339E 420B                   JSR         @R2
    000033A0 0009                   NOP
      simplexC.c  1839            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    000033A2 E710                   MOV         #16,R7
    000033A4 D614                   MOV.L       L1531+30,R6; L558
    000033A6 E500                   MOV         #0,R5
    000033A8 D314                   MOV.L       L1531+34,R3; _PrintMini
    000033AA 430B                   JSR         @R3
    000033AC 6453                   MOV         R5,R4
      simplexC.c  1840            Bdisp_PutDisp_DD();
    000033AE D214                   MOV.L       L1531+38,R2; _Bdisp_PutDisp_DD
    000033B0 420B                   JSR         @R2
    000033B2 0009                   NOP
      simplexC.c  1841            Sleep(3000);
    000033B4 9412                   MOV.W       L1531+2,R4 ; H'0BB8
    000033B6 D313                   MOV.L       L1531+42,R3; _Sleep
    000033B8 430B                   JSR         @R3
    000033BA 0009                   NOP
    000033BC              L1485:                            
      simplexC.c  1842        }
      simplexC.c  1843        freeMemoryExecution(ex);
    000033BC D30C                   MOV.L       L1531+22,R3; __quick_odd_mvn
    000033BE 62E3                   MOV         R14,R2
    000033C0 E03C                   MOV         #60,R0
    000033C2 3F08                   SUB         R0,R15
    000033C4 430B                   JSR         @R3
    000033C6 61F3                   MOV         R15,R1
    000033C8 D20F                   MOV.L       L1531+46,R2; _freeMemoryExecution
    000033CA 420B                   JSR         @R2
    000033CC 0009                   NOP
      simplexC.c  1844        
      simplexC.c  1845    }
    000033CE 9106                   MOV.W       L1531+4,R1 ; H'00BC
    000033D0 3F1C                   ADD         R1,R15
    000033D2 4F26                   LDS.L       @R15+,PR
    000033D4 68F6                   MOV.L       @R15+,R8
    000033D6 000B                   RTS
    000033D8 6EF6                   MOV.L       @R15+,R14
    000033DA              L1531:                            
    000033DA 0080                   .DATA.W     H'0080
    000033DC 0BB8                   .DATA.W     H'0BB8
    000033DE 00BC                   .DATA.W     H'00BC
    000033E0 <00000000>             .DATA.L     _ex
    000033E4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000033E8 <00000000>             .DATA.L     _getProblemInputs
    000033EC <00000000>             .DATA.L     _printStatementMenu
    000033F0 <00000000>             .DATA.L     __quick_odd_mvn




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  152


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000033F4 <00000000>             .DATA.L     _printSolMenu
    000033F8 <00000000>             .DATA.L     L558
    000033FC <00000000>             .DATA.L     _PrintMini
    00003400 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00003404 <00000000>             .DATA.L     _Sleep
    00003408 <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c  1846    
      simplexC.c  1847    #pragma section _BR_Size
      simplexC.c  1848    unsigned long BR_Size;
      simplexC.c  1849    #pragma section
      simplexC.c  1850    
      simplexC.c  1851    #pragma section _TOP
      simplexC.c  1852    
      simplexC.c  1853    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
      simplexC.c  1854    {
      simplexC.c  1855        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L1532+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1532:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c  1856    }
      simplexC.c  1857    
      simplexC.c  1858    #pragma section
C   00000000              L555:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              L556:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L557:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L558:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L564:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L565:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L577:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C204F424A   
             2E20457869   
             74202564     




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  153


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L578:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L579:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L580:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"
             747261696E   
             74733A2025   
             642C204E56   
             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L582:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L583:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   
             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L585:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L589:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L591:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L599:
    000000CC 417825642E             .SDATA      "Ax%d. nConstraints: %d, Exit %d"
             206E436F6E   
             7374726169   
             6E74733A20   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  154


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             25642C2045   
             7869742025   
             64           
    000000EB 00                     .DATA.B     H'00
    000000EC              L602:
    000000EC 417825642E             .SDATA      "Ax%d. %.2f Pos %d"
             20252E3266   
             20506F7320   
             2564         
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L609:
    00000100 41786A2070             .SDATA      "Axj pMenu Vars %d.  %d exit"
             4D656E7520   
             5661727320   
             25642E2020   
             2564206578   
             6974         
    0000011B 00                     .DATA.B     H'00
    0000011C              L621:
    0000011C 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   
             2564         
    0000013C 00                     .DATA.B     H'00
    0000013D 00000001               .RES.B      1
    0000013E 00000002               .RES.W      1
    00000140              L623:
    00000140 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    00000152 00                     .DATA.B     H'00
    00000153 00000001               .RES.B      1
    00000154              L625:
    00000154 20536C6F70             .SDATA      " Slope"
             65           
    0000015A 00                     .DATA.B     H'00
    0000015B 00000001               .RES.B      1
    0000015C              L627:
    0000015C 204475616C             .SDATA      " Dual"
    00000161 00                     .DATA.B     H'00
    00000162 00000002               .RES.W      1
    00000164              L629:
    00000164 20496E74               .SDATA      " Int"
    00000168 00                     .DATA.B     H'00
    00000169 00000001               .RES.B      1
    0000016A 00000002               .RES.W      1
    0000016C              L636:
    0000016C 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  155


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000182 00                     .DATA.B     H'00
    00000183 00000001               .RES.B      1
    00000184              L643:
    00000184 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    0000019D 00                     .DATA.B     H'00
    0000019E 00000002               .RES.W      1
    000001A0              L651:
    000001A0 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   
             656E752E20   
             2564206578   
             6974         
    000001C0 00                     .DATA.B     H'00
    000001C1 00000001               .RES.B      1
    000001C2 00000002               .RES.W      1
    000001C4              L652:
    000001C4 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    000001CF 00                     .DATA.B     H'00
    000001D0              L653:
    000001D0 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    000001DB 00                     .DATA.B     H'00
    000001DC              L654:
    000001DC 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    000001E8 00                     .DATA.B     H'00
    000001E9 00000001               .RES.B      1
    000001EA 00000002               .RES.W      1
    000001EC              L663:
    000001EC 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    00000205 00                     .DATA.B     H'00
    00000206 00000002               .RES.W      1
    00000208              L672:
    00000208 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    00000230 00                     .DATA.B     H'00
    00000231 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  156


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000232 00000002               .RES.W      1
    00000234              L674:
    00000234 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    00000254 00                     .DATA.B     H'00
    00000255 00000001               .RES.B      1
    00000256 00000002               .RES.W      1
    00000258              L676:
    00000258 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   
             6A2066756E   
             632E         
    00000269 00                     .DATA.B     H'00
    0000026A 00000002               .RES.W      1
    0000026C              L678:
    0000026C 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       
    0000027E 00                     .DATA.B     H'00
    0000027F 00000001               .RES.B      1
    00000280              L680:
    00000280 342050696E             .SDATA      "4 Pinfo aj vec"
             666F20616A   
             20766563     
    0000028E 00                     .DATA.B     H'00
    0000028F 00000001               .RES.B      1
    00000290              L692:
    00000290 4374206974             .SDATA      "Ct itId %d. S: %d.  %d exit"
             4964202564   
             2E20533A20   
             25642E2020   
             2564206578   
             6974         
    000002AB 00                     .DATA.B     H'00
    000002AC              L694:
    000002AC 506F732025             .SDATA      "Pos %d: %.2f"
             643A20252E   
             3266         
    000002B8 00                     .DATA.B     H'00
    000002B9 00000001               .RES.B      1
    000002BA 00000002               .RES.W      1
    000002BC              L703:
    000002BC 5862206974             .SDATA      "Xb itId %d. S: %d.  %d exit"
             4964202564   
             2E20533A20   
             25642E2020   
             2564206578   
             6974         
    000002D7 00                     .DATA.B     H'00
    000002D8              L714:
    000002D8 5920262078             .SDATA      "Y & xb/y itId %d. S: %d.  %d exit"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  157


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             622F792069   
             7449642025   
             642E20533A   
             2025642E20   
             2025642065   
             786974       
    000002F9 00                     .DATA.B     H'00
    000002FA 00000002               .RES.W      1
    000002FC              L716:
    000002FC 4E6F205661             .SDATA      "No VarIn and VarOut"
             72496E2061   
             6E64205661   
             724F7574     
    0000030F 00                     .DATA.B     H'00
    00000310              L718:
    00000310 4964566172             .SDATA      "IdVarIn: %d, IdVarOut %d"
             496E3A2025   
             642C204964   
             5661724F75   
             74202564     
    00000328 00                     .DATA.B     H'00
    00000329 00000001               .RES.B      1
    0000032A 00000002               .RES.W      1
    0000032C              L720:
    0000032C 5661723A               .SDATA      "Var:"
    00000330 00                     .DATA.B     H'00
    00000331 00000001               .RES.B      1
    00000332 00000002               .RES.W      1
    00000334              L721:
    00000334 506F733A               .SDATA      "Pos:"
    00000338 00                     .DATA.B     H'00
    00000339 00000001               .RES.B      1
    0000033A 00000002               .RES.W      1
    0000033C              L724:
    0000033C 5661723A25             .SDATA      "Var:%d.Pos:%d:Y:%.2f xb/y:%.2f"
             642E506F73   
             3A25643A59   
             3A252E3266   
             2078622F79   
             3A252E3266   
    0000035A 00                     .DATA.B     H'00
    0000035B 00000001               .RES.B      1
    0000035C              L726:
    0000035C 5661723A25             .SDATA      "Var:%d.Pos %d:Y:%.2f xb/y: NDisp"
             642E506F73   
             2025643A59   
             3A252E3266   
             2078622F79   
             3A204E4469   
             7370         
    0000037C 00                     .DATA.B     H'00
    0000037D 00000001               .RES.B      1
    0000037E 00000002               .RES.W      1
    00000380              L735:
    00000380 437442696E             .SDATA      "CtBinv itId %d. S: %d.  %d exit"
             7620697449   
             642025642E   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  158


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             20533A2025   
             642E202025   
             6420657869   
             74           
    0000039F 00                     .DATA.B     H'00
    000003A0              L745:
    000003A0 4256617273             .SDATA      "BVars itId %d. S: %d.  %d exit"
             2069744964   
             2025642E20   
             533A202564   
             2E20202564   
             2065786974   
    000003BE 00                     .DATA.B     H'00
    000003BF 00000001               .RES.B      1
    000003C0              L747:
    000003C0 506F732025             .SDATA      "Pos %d: %d"
             643A202564   
    000003CA 00                     .DATA.B     H'00
    000003CB 00000001               .RES.B      1
    000003CC              L758:
    000003CC 5661722072             .SDATA      "Var res, printMenu. Exit %d"
             65732C2070   
             72696E744D   
             656E752E20   
             4578697420   
             2564         
    000003E7 00                     .DATA.B     H'00
    000003E8              L759:
    000003E8 4E76617273             .SDATA      "Nvars: %d, NVB: %d"
             3A2025642C   
             204E56423A   
             202564       
    000003FA 00                     .DATA.B     H'00
    000003FB 00000001               .RES.B      1
    000003FC              L760:
    000003FC 53656C6563             .SDATA      "Select a var:"
             7420612076   
             61723A       
    00000409 00                     .DATA.B     H'00
    0000040A 00000002               .RES.W      1
    0000040C              L766:
    0000040C 7825643A20             .SDATA      "x%d: %.2f"
             252E3266     
    00000415 00                     .DATA.B     H'00
    00000416 00000002               .RES.W      1
    00000418              L769:
    00000418 4E6F207661             .SDATA      "No var found"
             7220666F75   
             6E64         
    00000424 00                     .DATA.B     H'00
    00000425 00000001               .RES.B      1
    00000426 00000002               .RES.W      1
    00000428              L778:
    00000428 4376616C73             .SDATA      "Cvals itId %d. Vars: %d.  %d exit"
             2069744964   
             2025642E20   
             566172733A   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  159


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2025642E20   
             2025642065   
             786974       
    00000449 00                     .DATA.B     H'00
    0000044A 00000002               .RES.W      1
    0000044C              L788:
    0000044C 42696E7620             .SDATA      "Binv itId %d. S: %d.  %d exit"
             6974496420   
             25642E2053   
             3A2025642E   
             2020256420   
             65786974     
    00000469 00                     .DATA.B     H'00
    0000046A 00000002               .RES.W      1
    0000046C              L790:
    0000046C 526F773A20             .SDATA      "Row: "
    00000471 00                     .DATA.B     H'00
    00000472 00000002               .RES.W      1
    00000474              L791:
    00000474 436F6C756D             .SDATA      "Column: "
             6E3A20       
    0000047C 00                     .DATA.B     H'00
    0000047D 00000001               .RES.B      1
    0000047E 00000002               .RES.W      1
    00000480              L793:
    00000480 425B25645D             .SDATA      "B[%d][%d]: %.2f"
             5B25645D3A   
             20252E3266   
    0000048F 00                     .DATA.B     H'00
    00000490              L805:
    00000490 5A6A202620             .SDATA      "Zj & cj-zj itId %d. S: %d.  %d exit"
             636A2D7A6A   
             2069744964   
             2025642E20   
             533A202564   
             2E20202564   
             2065786974   
    000004B3 00                     .DATA.B     H'00
    000004B4              L809:
    000004B4 5A6A25643A             .SDATA      "Zj%d: %.2f. Cj-Zj: %.2f"
             20252E3266   
             2E20436A2D   
             5A6A3A2025   
             2E3266       
    000004CB 00                     .DATA.B     H'00
    000004CC              L811:
    000004CC 7825643A20             .SDATA      "x%d: is a basic var. Val 0."
             6973206120   
             6261736963   
             207661722E   
             2056616C20   
             302E         
    000004E7 00                     .DATA.B     H'00
    000004E8              L818:
    000004E8 4974202564             .SDATA      "It %d.ZSol: %.2f Exit %d"
             2E5A536F6C   
             3A20252E32   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  160


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6620457869   
             74202564     
    00000500 00                     .DATA.B     H'00
    00000501 00000001               .RES.B      1
    00000502 00000002               .RES.W      1
    00000504              L821:
    00000504 4964566172             .SDATA      "IdVarIn: %d, IdVarOut %d  %s"
             496E3A2025   
             642C204964   
             5661724F75   
             7420256420   
             202573       
    00000520 00                     .DATA.B     H'00
    00000521 00000001               .RES.B      1
    00000522 00000002               .RES.W      1
    00000524              L822:
    00000524 3266617365             .SDATA      "2fases"
             73           
    0000052A 00                     .DATA.B     H'00
    0000052B 00000001               .RES.B      1
    0000052C              L823:
    0000052C 00                     .DATA.B     H'00
    0000052D 00000001               .RES.B      1
    0000052E 00000002               .RES.W      1
    00000530              L825:
    00000530 312042696E             .SDATA      "1 Binv. 2 xb. 3 ct"
             762E203220   
             78622E2033   
             206374       
    00000542 00                     .DATA.B     H'00
    00000543 00000001               .RES.B      1
    00000544              L826:
    00000544 3420437442             .SDATA      "4 CtBinv"
             696E76       
    0000054C 00                     .DATA.B     H'00
    0000054D 00000001               .RES.B      1
    0000054E 00000002               .RES.W      1
    00000550              L827:
    00000550 35207A6A20             .SDATA      "5 zj and cj-zj"
             616E642063   
             6A2D7A6A     
    0000055E 00                     .DATA.B     H'00
    0000055F 00000001               .RES.B      1
    00000560              L828:
    00000560 3620796A20             .SDATA      "6 yj & xb/yj"
             262078622F   
             796A         
    0000056C 00                     .DATA.B     H'00
    0000056D 00000001               .RES.B      1
    0000056E 00000002               .RES.W      1
    00000570              L829:
    00000570 3720616A2E             .SDATA      "7 aj. 8 Cv"
             2038204376   
    0000057A 00                     .DATA.B     H'00
    0000057B 00000001               .RES.B      1
    0000057C              L830:
    0000057C 3920626173             .SDATA      "9 basic vars B"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  161


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6963207661   
             72732042     
    0000058A 00                     .DATA.B     H'00
    0000058B 00000001               .RES.B      1
    0000058C              L838:
    0000058C 4974732073             .SDATA      "Its sel. Nits: %d. Exit %d"
             656C2E204E   
             6974733A20   
             25642E2045   
             7869742025   
             64           
    000005A6 00                     .DATA.B     H'00
    000005A7 00000001               .RES.B      1
    000005A8              L847:
    000005A8 50726F626C             .SDATA      "Problem solution, printMenu. Exit %d"
             656D20736F   
             6C7574696F   
             6E2C207072   
             696E744D65   
             6E752E2045   
             7869742025   
             64           
    000005CC 00                     .DATA.B     H'00
    000005CD 00000001               .RES.B      1
    000005CE 00000002               .RES.W      1
    000005D0              L848:
    000005D0 4E6974733A             .SDATA      "Nits: %d, ZSol: %.2f"
             2025642C20   
             5A536F6C3A   
             20252E3266   
    000005E4 00                     .DATA.B     H'00
    000005E5 00000001               .RES.B      1
    000005E6 00000002               .RES.W      1
    000005E8              L850:
    000005E8 312050696E             .SDATA      "1 Pinfo res vars"
             666F207265   
             7320766172   
             73           
    000005F8 00                     .DATA.B     H'00
    000005F9 00000001               .RES.B      1
    000005FA 00000002               .RES.W      1
    000005FC              L851:
    000005FC 322050696E             .SDATA      "2 Pinfo its"
             666F206974   
             73           
    00000607 00                     .DATA.B     H'00
    00000608              L860:
    00000608 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    00000629 00                     .DATA.B     H'00
    0000062A 00000002               .RES.W      1
    0000062C              L861:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  162


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000062C 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    00000648 00                     .DATA.B     H'00
    00000649 00000001               .RES.B      1
    0000064A 00000002               .RES.W      1
    0000064C              L868:
    0000064C 436F6E7374             .SDATA      "Constraint: %d, Right Value"
             7261696E74   
             3A2025642C   
             2052696768   
             742056616C   
             7565         
    00000667 00                     .DATA.B     H'00
    00000668              L881:
    00000668 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   
             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    00000684 00                     .DATA.B     H'00
    00000685 00000001               .RES.B      1
    00000686 00000002               .RES.W      1
    00000688              L898:
    00000688 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    00000695 00                     .DATA.B     H'00
    00000696 00000002               .RES.W      1
    00000698              L899:
    00000698 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    000006A3 00                     .DATA.B     H'00
    000006A4              L902:
    000006A4 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    000006B0 00                     .DATA.B     H'00
    000006B1 00000001               .RES.B      1
    000006B2 00000002               .RES.W      1
    000006B4              L903:
    000006B4 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   
             20496E7420   
             7661722C20   
             30206E6F     
    000006CC 00                     .DATA.B     H'00
    000006CD 00000001               .RES.B      1
    000006CE 00000002               .RES.W      1
    000006D0              L906:
    000006D0 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  163


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             25642C204D   
             6178202564   
    000006E4 00                     .DATA.B     H'00
    000006E5 00000001               .RES.B      1
    000006E6 00000002               .RES.W      1
    000006E8              L908:
    000006E8 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    000006F9 00                     .DATA.B     H'00
    000006FA 00000002               .RES.W      1
    000006FC              L909:
    000006FC 4F626A2076             .SDATA      "Obj value Independent"
             616C756520   
             496E646570   
             656E64656E   
             74           
    00000711 00                     .DATA.B     H'00
    00000712 00000002               .RES.W      1
    00000714              L920:
    00000714 4E526F7773             .SDATA      "NRows?"
             3F           
    0000071A 00                     .DATA.B     H'00
    0000071B 00000001               .RES.B      1
    0000071C              L922:
    0000071C 6964204261             .SDATA      "id Basic var Row %d"
             7369632076   
             617220526F   
             77202564     
    0000072F 00                     .DATA.B     H'00
    00000730              L925:
    00000730 56616C7565             .SDATA      "Value var Row %d Col %d"
             2076617220   
             526F772025   
             6420436F6C   
             202564       
    00000747 00                     .DATA.B     H'00
    00000748              L927:
    00000748 56616C7565             .SDATA      "Value xb Row %d"
             2078622052   
             6F77202564   
    00000757 00                     .DATA.B     H'00
    00000758              L929:
    00000758 56616C7565             .SDATA      "Value b Constraint %d"
             206220436F   
             6E73747261   
             696E742025   
             64           
    0000076D 00                     .DATA.B     H'00
    0000076E 00000002               .RES.W      1
    00000770              L931:
    00000770 56616C7565             .SDATA      "Value Cj-Zj x%d"
             20436A2D5A   
             6A20782564   
    0000077F 00                     .DATA.B     H'00
    00000780              L932:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE  164


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000780 5A2076616C             .SDATA      "Z val"
    00000785 00                     .DATA.B     H'00
    00000786 00000002               .RES.W      1
    00000788              L936:
    00000788 416A5B2564             .SDATA      "Aj[%d][%d] var: "
             5D5B25645D   
             207661723A   
             20           
    00000798 00                     .DATA.B     H'00
    00000799 00000001               .RES.B      1
    0000079A 00000002               .RES.W      1
    0000079C              L944:
    0000079C 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    000007B3 00                     .DATA.B     H'00
    000007B4              L945:
    000007B4 536574206D             .SDATA      "Set maxIterations"
             6178497465   
             726174696F   
             6E73         
    000007C5 00                     .DATA.B     H'00
B   00000000              _ex:                             ; static: ex
    00000000 0000003C               .RES.L      15
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1

































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 15-Jan-2021 21:11:50  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        67




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1858



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000340C Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000007C6 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               0000003C Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003C1E Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           24
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          56
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           478






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmk6E88.tmp 

