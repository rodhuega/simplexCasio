SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include <stdlib.h>
      simplexC.c     4    #include "stdio.h"
      simplexC.c     5    #include "SH4_compatibility.h"
      simplexC.c     6    
      simplexC.c     7    
      simplexC.c     8    #define TYPE_LP 1
      simplexC.c     9    #define TYPE_ILP 2
      simplexC.c    10    #define TYPE_CUT 3
      simplexC.c    11    
      simplexC.c    12    #define TYPE_INPUT 1
      simplexC.c    13    #define TYPE_SOLVE 2
      simplexC.c    14    
      simplexC.c    15    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    16    #define EXIT_OPT 0
      simplexC.c    17    
      simplexC.c    18    #define INE_EQUAL 0
      simplexC.c    19    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    20    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    21    
      simplexC.c    22    
      simplexC.c    23    #define FUNC_MINIMIZE 0
      simplexC.c    24    #define FUNC_MAXIMIZE 1
      simplexC.c    25    
      simplexC.c    26    
      simplexC.c    27    #define MODE_FULL_EXECUTION 0
      simplexC.c    28    #define MODE_INPUT_TABLE 1
      simplexC.c    29    
      simplexC.c    30    
      simplexC.c    31    struct iteration
      simplexC.c    32    {
      simplexC.c    33        int numIteration;
      simplexC.c    34        int* idBasicVariables;
      simplexC.c    35    };
      simplexC.c    36    
      simplexC.c    37    struct problemStatement
      simplexC.c    38    {
      simplexC.c    39        int problemType;
      simplexC.c    40        int modelType;
      simplexC.c    41        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    42        //1 array de variables por cada constraint
      simplexC.c    43        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    44        double **constraints;
      simplexC.c    45        double *rightValues;
      simplexC.c    46        int *inequalitySigns;
      simplexC.c    47        int nVariables;
      simplexC.c    48        int nVariablesSlope;
      simplexC.c    49        int nVariables2fases;
      simplexC.c    50        int nVariablesInteger;
      simplexC.c    51        int nConstraints;
      simplexC.c    52        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    53        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    54        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    55        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    56        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    57    
      simplexC.c    58        int funcObjectivePurpose;
      simplexC.c    59        double *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    60        double *funcObjtValues2Fases;
      simplexC.c    61    };
      simplexC.c    62    
      simplexC.c    63    struct node
      simplexC.c    64    {
      simplexC.c    65        int id;
      simplexC.c    66        int nIterations;
      simplexC.c    67        struct iteration **its;
      simplexC.c    68    };
      simplexC.c    69    
      simplexC.c    70    struct execution
      simplexC.c    71    {
      simplexC.c    72        int mode;
      simplexC.c    73        struct problemStatement *initialProblemStatement;
      simplexC.c    74        struct problemStatement *canonicalStatement;
      simplexC.c    75        struct node **nodes;
      simplexC.c    76        int nNodes;
      simplexC.c    77    };
      simplexC.c    78    
      simplexC.c    79    double InputD(int, int);
      simplexC.c    80    
      simplexC.c    81    int InputI(int, int);
      simplexC.c    82    
      simplexC.c    83    double InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=524
    00000000 4F22                   STS.L       PR,@-R15
    00000002 908D                   MOV.W       L859,R0    ; H'FDFC
      simplexC.c    84    {
      simplexC.c    85        char *string[128], *stopstring;
      simplexC.c    86        string_input(x, y, string);
    00000004 D348                   MOV.L       L859+8,R3  ; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c    87        return strtod(string, &stopstring);
    0000000E 65F3                   MOV         R15,R5
    00000010 9287                   MOV.W       L859+2,R2  ; H'0208
    00000012 64F3                   MOV         R15,R4
    00000014 D345                   MOV.L       L859+12,R3 ; _strtod
    00000016 32FC                   ADD         R15,R2
    00000018 6222                   MOV.L       @R2,R2
    0000001A 7404                   ADD         #4,R4
    0000001C 430B                   JSR         @R3
    0000001E 2F26                   MOV.L       R2,@-R15
      simplexC.c    88    }
    00000020 917F                   MOV.W       L859+2,R1  ; H'0208
    00000022 3F1C                   ADD         R1,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000024 4F26                   LDS.L       @R15+,PR
    00000026 000B                   RTS
    00000028 0009                   NOP
      simplexC.c    89    
      simplexC.c    90    int InputI(int x, int y)
    0000002A              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002A 4F22                   STS.L       PR,@-R15
    0000002C 907A                   MOV.W       L859+4,R0  ; H'FE00
    0000002E 3F0C                   ADD         R0,R15
      simplexC.c    91    {
      simplexC.c    92        char *string[128], *stopstring;
      simplexC.c    93        string_input(x, y, string);
    00000030 D33D                   MOV.L       L859+8,R3  ; _string_input
    00000032 430B                   JSR         @R3
    00000034 66F3                   MOV         R15,R6
      simplexC.c    94        return atoi(&string);
    00000036 D23E                   MOV.L       L859+16,R2 ; _atoi
    00000038 420B                   JSR         @R2
    0000003A 64F3                   MOV         R15,R4
      simplexC.c    95    }
    0000003C 9173                   MOV.W       L859+6,R1  ; H'0200
    0000003E 3F1C                   ADD         R1,R15
    00000040 4F26                   LDS.L       @R15+,PR
    00000042 000B                   RTS
    00000044 0009                   NOP
      simplexC.c    96    
      simplexC.c    97    int freeMemoryStatement(struct problemStatement *pS)
    00000046              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    00000046 2FE6                   MOV.L       R14,@-R15
    00000048 2FD6                   MOV.L       R13,@-R15
    0000004A 6E43                   MOV         R4,R14
    0000004C 2FC6                   MOV.L       R12,@-R15
    0000004E 4F22                   STS.L       PR,@-R15
      simplexC.c    98    {
      simplexC.c    99        int i;
      simplexC.c   100        for(i=0;i<pS->nConstraints;i++)
    00000050 DD38                   MOV.L       L859+20,R13; _free
    00000052 A006                   BRA         L738
    00000054 EC00                   MOV         #0,R12
    00000056              L739:                             
      simplexC.c   101        {
      simplexC.c   102            free(pS->constraints[i]);
    00000056 64C3                   MOV         R12,R4
    00000058 50E3                   MOV.L       @(12,R14),R0
    0000005A 4408                   SHLL2       R4
    0000005C 4D0B                   JSR         @R13
    0000005E 044E                   MOV.L       @(R0,R4),R4
    00000060 7C01                   ADD         #1,R12
    00000062              L738:                             
    00000062 53EA                   MOV.L       @(40,R14),R3
    00000064 3C33                   CMP/GE      R3,R12
    00000066 8BF6                   BF          L739
      simplexC.c   103        }
      simplexC.c   104        free(pS->constraints);
    00000068 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006A 54E3                   MOV.L       @(12,R14),R4
      simplexC.c   105        free(pS->rightValues);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   106        free(pS->inequalitySigns);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   107        free(pS->idIntegerVariables);
    00000074 4D0B                   JSR         @R13
    00000076 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   108        free(pS->idSlopeVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   109        free(pS->id2fasesVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   110        free(pS->funcObjtValues);
    00000080 E044                   MOV         #68,R0
    00000082 4D0B                   JSR         @R13
    00000084 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   111        if(pS->modelType==TYPE_SOLVE)
    00000086 50E1                   MOV.L       @(4,R14),R0
    00000088 8802                   CMP/EQ      #2,R0
    0000008A 8B03                   BF          L740
      simplexC.c   112        {
      simplexC.c   113            free(pS->idConstraintTo2fasesVar);
    0000008C 4D0B                   JSR         @R13
    0000008E 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   114            free(pS->idConstraintToSlopeVar);
    00000090 4D0B                   JSR         @R13
    00000092 54EE                   MOV.L       @(56,R14),R4
    00000094              L740:                             
      simplexC.c   115        }
      simplexC.c   116        return 0;
      simplexC.c   117    }
    00000094 4F26                   LDS.L       @R15+,PR
    00000096 E000                   MOV         #0,R0
    00000098 6CF6                   MOV.L       @R15+,R12
    0000009A 6DF6                   MOV.L       @R15+,R13
    0000009C 000B                   RTS
    0000009E 6EF6                   MOV.L       @R15+,R14
      simplexC.c   118    int freeMemoryIteration(struct iteration *it)
    000000A0              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=8
    000000A0 4F22                   STS.L       PR,@-R15
    000000A2 7FFC                   ADD         #-4,R15
      simplexC.c   119    {
      simplexC.c   120        //TODO
      simplexC.c   121        free(it->idBasicVariables);
    000000A4 D323                   MOV.L       L859+20,R3 ; _free
    000000A6 2F42                   MOV.L       R4,@R15
    000000A8 430B                   JSR         @R3
    000000AA 5441                   MOV.L       @(4,R4),R4
      simplexC.c   122        return 0;
      simplexC.c   123    }
    000000AC 7F04                   ADD         #4,R15
    000000AE 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000B0 000B                   RTS
    000000B2 E000                   MOV         #0,R0
      simplexC.c   124    int freeMemoryNode(struct node *n)
    000000B4              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000B4 2FE6                   MOV.L       R14,@-R15
    000000B6 2FD6                   MOV.L       R13,@-R15
    000000B8 4F22                   STS.L       PR,@-R15
    000000BA 6D43                   MOV         R4,R13
      simplexC.c   125    {
      simplexC.c   126        int i;
      simplexC.c   127        for(i=0; i<n->nIterations;i++)
    000000BC A006                   BRA         L743
    000000BE EE00                   MOV         #0,R14
    000000C0              L744:                             
      simplexC.c   128        {
      simplexC.c   129            freeMemoryIteration(n->its[i]);
    000000C0 50D2                   MOV.L       @(8,R13),R0
    000000C2 64E3                   MOV         R14,R4
    000000C4 4408                   SHLL2       R4
    000000C6 BFEB                   BSR         _freeMemoryIteration
    000000C8 044E                   MOV.L       @(R0,R4),R4
    000000CA 7E01                   ADD         #1,R14
    000000CC              L743:                             
    000000CC 52D1                   MOV.L       @(4,R13),R2
    000000CE 3E23                   CMP/GE      R2,R14
    000000D0 8BF6                   BF          L744
      simplexC.c   130        }
      simplexC.c   131        return 0;
    000000D2 E000                   MOV         #0,R0
      simplexC.c   132    }
    000000D4 4F26                   LDS.L       @R15+,PR
    000000D6 6DF6                   MOV.L       @R15+,R13
    000000D8 000B                   RTS
    000000DA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   133    
      simplexC.c   134    int freeMemoryExecution(struct execution *ex)
    000000DC              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    000000DC 2FE6                   MOV.L       R14,@-R15
    000000DE 6E43                   MOV         R4,R14
    000000E0 2FD6                   MOV.L       R13,@-R15
    000000E2 4F22                   STS.L       PR,@-R15
      simplexC.c   135    {
      simplexC.c   136        int i;
      simplexC.c   137        if(ex->mode == MODE_FULL_EXECUTION)
    000000E4 63E2                   MOV.L       @R14,R3
    000000E6 2338                   TST         R3,R3
    000000E8 8B03                   BF          L746
      simplexC.c   138        {
      simplexC.c   139            freeMemoryStatement(ex->initialProblemStatement);
    000000EA BFAC                   BSR         _freeMemoryStatement
    000000EC 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   140            freeMemoryStatement(ex->canonicalStatement);
    000000EE BFAA                   BSR         _freeMemoryStatement
    000000F0 54E2                   MOV.L       @(8,R14),R4
    000000F2              L746:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   141        }
      simplexC.c   142        for(i=0;i<ex->nNodes;i++)
    000000F2 A006                   BRA         L747
    000000F4 ED00                   MOV         #0,R13
    000000F6              L748:                             
      simplexC.c   143        {
      simplexC.c   144            freeMemoryNode(ex->nodes[i]);
    000000F6 64D3                   MOV         R13,R4
    000000F8 50E3                   MOV.L       @(12,R14),R0
    000000FA 4408                   SHLL2       R4
    000000FC BFDA                   BSR         _freeMemoryNode
    000000FE 044E                   MOV.L       @(R0,R4),R4
    00000100 7D01                   ADD         #1,R13
    00000102              L747:                             
    00000102 52E4                   MOV.L       @(16,R14),R2
    00000104 3D23                   CMP/GE      R2,R13
    00000106 8BF6                   BF          L748
      simplexC.c   145        }
      simplexC.c   146        return 0;
      simplexC.c   147    }
    00000108 4F26                   LDS.L       @R15+,PR
    0000010A E000                   MOV         #0,R0
    0000010C 6DF6                   MOV.L       @R15+,R13
    0000010E 000B                   RTS
    00000110 6EF6                   MOV.L       @R15+,R14
      simplexC.c   148    
      simplexC.c   149    int lengthConcatenate(int sprintLength)
    00000112              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   150    {
      simplexC.c   151        return (sprintLength > 0) ? sprintLength : 0;
    00000112 4415                   CMP/PL      R4
    00000114 8B01                   BF          L750
    00000116 000B                   RTS
    00000118 6043                   MOV         R4,R0
    0000011A              L750:                             
    0000011A E000                   MOV         #0,R0
      simplexC.c   152    }
    0000011C              L752:                             
    0000011C 000B                   RTS
    0000011E 0009                   NOP
    00000120              L859:                             
    00000120 FDFC                   .DATA.W     H'FDFC
    00000122 0208                   .DATA.W     H'0208
    00000124 FE00                   .DATA.W     H'FE00
    00000126 0200                   .DATA.W     H'0200
    00000128 <00000000>             .DATA.L     _string_input
    0000012C <00000000>             .DATA.L     _strtod
    00000130 <00000000>             .DATA.L     _atoi
    00000134 <00000000>             .DATA.L     _free
      simplexC.c   153    
      simplexC.c   154    char* getInequalityChar(int inequalitySign)
    00000138              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0
      simplexC.c   155    {
      simplexC.c   156        char * res;
      simplexC.c   157        switch (inequalitySign)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000138 6043                   MOV         R4,R0
    0000013A 8800                   CMP/EQ      #0,R0
    0000013C 8905                   BT          L673
    0000013E 8801                   CMP/EQ      #1,R0
    00000140 8906                   BT          L675
    00000142 8802                   CMP/EQ      #2,R0
    00000144 8907                   BT          L677
    00000146 A009                   BRA         L679
    00000148 0009                   NOP
    0000014A              L673:                            ; case label 
      simplexC.c   158        {
      simplexC.c   159            case INE_EQUAL: res="="; break;
    0000014A D437                   MOV.L       L860+12,R4 ; L459
    0000014C A007                   BRA         L753
    0000014E 0009                   NOP
    00000150              L675:                            ; case label 
      simplexC.c   160            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    00000150 D436                   MOV.L       L860+16,R4 ; L460
    00000152 A004                   BRA         L753
    00000154 0009                   NOP
    00000156              L677:                            ; case label 
      simplexC.c   161            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    00000156 D436                   MOV.L       L860+20,R4 ; L461
    00000158 A001                   BRA         L753
    0000015A 0009                   NOP
    0000015C              L679:                            ; default label 
      simplexC.c   162            default: res = "ERROR"; break;
    0000015C D435                   MOV.L       L860+24,R4 ; L462
    0000015E              L753:                             
      simplexC.c   163        }
      simplexC.c   164        return res;
      simplexC.c   165    }
    0000015E 000B                   RTS
    00000160 6043                   MOV         R4,R0
      simplexC.c   166    
      simplexC.c   167    char * getFuncObjPurposeChar(int purpose)
    00000162              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   168    {
      simplexC.c   169        char * res;
      simplexC.c   170        switch (purpose)
    00000162 6043                   MOV         R4,R0
    00000164 8800                   CMP/EQ      #0,R0
    00000166 8903                   BT          L681
    00000168 8801                   CMP/EQ      #1,R0
    0000016A 8904                   BT          L683
    0000016C A006                   BRA         L685
    0000016E 0009                   NOP
    00000170              L681:                            ; case label 
      simplexC.c   171        {
      simplexC.c   172            case FUNC_MINIMIZE: res="MIN"; break;
    00000170 D431                   MOV.L       L860+28,R4 ; L468
    00000172 A004                   BRA         L755
    00000174 0009                   NOP
    00000176              L683:                            ; case label 
      simplexC.c   173            case FUNC_MAXIMIZE: res="MAX"; break;
    00000176 D431                   MOV.L       L860+32,R4 ; L469




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000178 A001                   BRA         L755
    0000017A 0009                   NOP
    0000017C              L685:                            ; default label 
      simplexC.c   174            default: res = "ERROR";break;
    0000017C D42D                   MOV.L       L860+24,R4 ; L462
    0000017E              L755:                             
      simplexC.c   175        }
      simplexC.c   176        return res;
      simplexC.c   177    } 
    0000017E 000B                   RTS
    00000180 6043                   MOV         R4,R0
      simplexC.c   178    
      simplexC.c   179    int printObjFunc(struct problemStatement* pS,int modelType)
    00000182              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1216
    00000182 2FE6                   MOV.L       R14,@-R15
    00000184 2FD6                   MOV.L       R13,@-R15
    00000186 6D43                   MOV         R4,R13
    00000188 DE2E                   MOV.L       L860+40,R14; _sprintf
    0000018A 2FC6                   MOV.L       R12,@-R15
    0000018C 2FB6                   MOV.L       R11,@-R15
      simplexC.c   180    {
      simplexC.c   181        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   182        char *uselessSring[128];
      simplexC.c   183        int menuChoice;
      simplexC.c   184        menuChoice=INITIALIZE_VALUE_OPT;
    0000018E EBFF                   MOV         #-1,R11
    00000190 DC2B                   MOV.L       L860+36,R12; _PrintMini
    00000192 2FA6                   MOV.L       R10,@-R15
    00000194 2F96                   MOV.L       R9,@-R15
    00000196 2F86                   MOV.L       R8,@-R15
    00000198 4F22                   STS.L       PR,@-R15
    0000019A 903F                   MOV.W       L860,R0    ; H'FB78
    0000019C 983F                   MOV.W       L860+2,R8  ; H'0208
    0000019E 3F0C                   ADD         R0,R15
    000001A0 993E                   MOV.W       L860+4,R9  ; H'0308
    000001A2 38FC                   ADD         R15,R8
    000001A4 9A3D                   MOV.W       L860+6,R10 ; H'0288
    000001A6 39FC                   ADD         R15,R9
    000001A8 2F52                   MOV.L       R5,@R15
      simplexC.c   185        while(menuChoice!=EXIT_OPT)
    000001AA A0BE                   BRA         L757
    000001AC 3AFC                   ADD         R15,R10
    000001AE              L758:                             
      simplexC.c   186        {
      simplexC.c   187            Bdisp_AllClr_DDVRAM();
    000001AE D226                   MOV.L       L860+44,R2 ; _Bdisp_AllClr_DDVRAM
    000001B0 420B                   JSR         @R2
    000001B2 0009                   NOP
      simplexC.c   188            sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOL
                         +VE", EXIT_OPT);
    000001B4 E300                   MOV         #0,R3
    000001B6 2F36                   MOV.L       R3,@-R15
    000001B8 50D1                   MOV.L       @(4,R13),R0
    000001BA 8801                   CMP/EQ      #1,R0
    000001BC 8B02                   BF          L759




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001BE D123                   MOV.L       L860+48,R1 ; L483
    000001C0 A002                   BRA         L760
    000001C2 2F16                   MOV.L       R1,@-R15
    000001C4              L759:                             
    000001C4 D222                   MOV.L       L860+52,R2 ; L484
    000001C6 2F26                   MOV.L       R2,@-R15
    000001C8              L760:                             
    000001C8 D122                   MOV.L       L860+56,R1 ; L482
    000001CA 2F16                   MOV.L       R1,@-R15
    000001CC 942A                   MOV.W       L860+8,R4  ; H'0414
    000001CE 4E0B                   JSR         @R14
    000001D0 34FC                   ADD         R15,R4
      simplexC.c   189            sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    000001D2 53D6                   MOV.L       @(24,R13),R3
    000001D4 9427                   MOV.W       L860+10,R4 ; H'03A0
    000001D6 2F36                   MOV.L       R3,@-R15
    000001D8 52DA                   MOV.L       @(40,R13),R2
    000001DA 2F26                   MOV.L       R2,@-R15
    000001DC D31E                   MOV.L       L860+60,R3 ; L485
    000001DE 2F36                   MOV.L       R3,@-R15
    000001E0 4E0B                   JSR         @R14
    000001E2 34FC                   ADD         R15,R4
    000001E4 7F18                   ADD         #24,R15
      simplexC.c   190            if(modelType==TYPE_INPUT)
    000001E6 60F2                   MOV.L       @R15,R0
    000001E8 8801                   CMP/EQ      #1,R0
    000001EA 8B3B                   BF          L761
      simplexC.c   191            {
      simplexC.c   192                sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    000001EC E040                   MOV         #64,R0
    000001EE BFB8                   BSR         _getFuncObjPurposeChar
    000001F0 04DE                   MOV.L       @(R0,R13),R4
    000001F2 2F06                   MOV.L       R0,@-R15
    000001F4 D219                   MOV.L       L860+64,R2 ; L487
    000001F6 2F26                   MOV.L       R2,@-R15
    000001F8 4E0B                   JSR         @R14
    000001FA 6493                   MOV         R9,R4
      simplexC.c   193                 sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    000001FC 53D6                   MOV.L       @(24,R13),R3
    000001FE E044                   MOV         #68,R0
    00000200 02DE                   MOV.L       @(R0,R13),R2
    00000202 4308                   SHLL2       R3
    00000204 4300                   SHLL        R3
    00000206 332C                   ADD         R2,R3
    00000208 5131                   MOV.L       @(4,R3),R1
    0000020A 2F16                   MOV.L       R1,@-R15
    0000020C 6132                   MOV.L       @R3,R1
    0000020E 2F16                   MOV.L       R1,@-R15
    00000210 D213                   MOV.L       L860+68,R2 ; L488
    00000212 2F26                   MOV.L       R2,@-R15
    00000214 4E0B                   JSR         @R14
    00000216 64A3                   MOV         R10,R4
    00000218 A037                   BRA         L762
    0000021A 7F14                   ADD         #20,R15
    0000021C              L860:                             
    0000021C FB78                   .DATA.W     H'FB78
    0000021E 0208                   .DATA.W     H'0208




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000220 0308                   .DATA.W     H'0308
    00000222 0288                   .DATA.W     H'0288
    00000224 0414                   .DATA.W     H'0414
    00000226 03A0                   .DATA.W     H'03A0
    00000228 <00000000>             .DATA.L     L459
    0000022C <00000000>             .DATA.L     L460
    00000230 <00000000>             .DATA.L     L461
    00000234 <00000000>             .DATA.L     L462
    00000238 <00000000>             .DATA.L     L468
    0000023C <00000000>             .DATA.L     L469
    00000240 <00000000>             .DATA.L     _PrintMini
    00000244 <00000000>             .DATA.L     _sprintf
    00000248 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000024C <00000000>             .DATA.L     L483
    00000250 <00000000>             .DATA.L     L484
    00000254 <00000000>             .DATA.L     L482
    00000258 <00000000>             .DATA.L     L485
    0000025C <00000000>             .DATA.L     L487
    00000260 <00000000>             .DATA.L     L488
    00000264              L761:                             
      simplexC.c   194            }else
      simplexC.c   195            {
      simplexC.c   196                sprintf(stroutBasicInfo2, "OBJ MIN");
    00000264 D24D                   MOV.L       L861+14,R2 ; L490
    00000266 2F26                   MOV.L       R2,@-R15
    00000268 4E0B                   JSR         @R14
    0000026A 6493                   MOV         R9,R4
      simplexC.c   197                 sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]
                         +);
    0000026C 53D6                   MOV.L       @(24,R13),R3
    0000026E E048                   MOV         #72,R0
    00000270 02DE                   MOV.L       @(R0,R13),R2
    00000272 4308                   SHLL2       R3
    00000274 4300                   SHLL        R3
    00000276 332C                   ADD         R2,R3
    00000278 5131                   MOV.L       @(4,R3),R1
    0000027A 2F16                   MOV.L       R1,@-R15
    0000027C 6132                   MOV.L       @R3,R1
    0000027E 2F16                   MOV.L       R1,@-R15
    00000280 D247                   MOV.L       L861+18,R2 ; L488
    00000282 2F26                   MOV.L       R2,@-R15
    00000284 4E0B                   JSR         @R14
    00000286 64A3                   MOV         R10,R4
    00000288 7F10                   ADD         #16,R15
    0000028A              L762:                             
      simplexC.c   198            }
      simplexC.c   199            
      simplexC.c   200            
      simplexC.c   201           
      simplexC.c   202            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    0000028A E710                   MOV         #16,R7
    0000028C 967F                   MOV.W       L861,R6    ; H'0408
    0000028E E500                   MOV         #0,R5
    00000290 36FC                   ADD         R15,R6
    00000292 4C0B                   JSR         @R12
    00000294 6453                   MOV         R5,R4
      simplexC.c   203            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000296 E710                   MOV         #16,R7
    00000298 967A                   MOV.W       L861+2,R6  ; H'0388
    0000029A E507                   MOV         #7,R5
    0000029C 36FC                   ADD         R15,R6
    0000029E 4C0B                   JSR         @R12
    000002A0 E400                   MOV         #0,R4
      simplexC.c   204            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000002A2 E710                   MOV         #16,R7
    000002A4 6693                   MOV         R9,R6
    000002A6 E50E                   MOV         #14,R5
    000002A8 4C0B                   JSR         @R12
    000002AA E400                   MOV         #0,R4
      simplexC.c   205            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    000002AC E710                   MOV         #16,R7
    000002AE 66A3                   MOV         R10,R6
    000002B0 E515                   MOV         #21,R5
    000002B2 4C0B                   JSR         @R12
    000002B4 E400                   MOV         #0,R4
      simplexC.c   206            menuChoice = InputI(0, 35);
    000002B6 E523                   MOV         #35,R5
    000002B8 BEB7                   BSR         _InputI
    000002BA E400                   MOV         #0,R4
      simplexC.c   207            Bdisp_PutDisp_DD();
    000002BC D239                   MOV.L       L861+22,R2 ; _Bdisp_PutDisp_DD
    000002BE 420B                   JSR         @R2
    000002C0 6B03                   MOV         R0,R11
      simplexC.c   208            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000002C2 2BB8                   TST         R11,R11
    000002C4 8931                   BT          L757
    000002C6 52D6                   MOV.L       @(24,R13),R2
    000002C8 3B27                   CMP/GT      R2,R11
    000002CA 892E                   BT          L757
    000002CC 61B3                   MOV         R11,R1
    000002CE 71FF                   ADD         #-1,R1
    000002D0 4108                   SHLL2       R1
    000002D2 4100                   SHLL        R1
    000002D4 1F11                   MOV.L       R1,@(4,R15)
    000002D6 60F2                   MOV.L       @R15,R0
    000002D8 8801                   CMP/EQ      #1,R0
    000002DA 8B05                   BF          L764
      simplexC.c   209            {
      simplexC.c   210                if(modelType==TYPE_INPUT)
      simplexC.c   211                {
      simplexC.c   212                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    000002DC 53F1                   MOV.L       @(4,R15),R3
    000002DE E044                   MOV         #68,R0
    000002E0 02DE                   MOV.L       @(R0,R13),R2
    000002E2 323C                   ADD         R3,R2
    000002E4 A004                   BRA         L855
    000002E6 0009                   NOP
    000002E8              L764:                             
      simplexC.c   213                }else
      simplexC.c   214                {
      simplexC.c   215                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    000002E8 53F1                   MOV.L       @(4,R15),R3
    000002EA E048                   MOV         #72,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EC 02DE                   MOV.L       @(R0,R13),R2
    000002EE 323C                   ADD         R3,R2
    000002F0              L855:                             
    000002F0 5121                   MOV.L       @(4,R2),R1
    000002F2 2F16                   MOV.L       R1,@-R15
    000002F4 6122                   MOV.L       @R2,R1
    000002F6 2F16                   MOV.L       R1,@-R15
    000002F8 2FB6                   MOV.L       R11,@-R15
    000002FA D22B                   MOV.L       L861+26,R2 ; L493
    000002FC 2F26                   MOV.L       R2,@-R15
    000002FE 4E0B                   JSR         @R14
    00000300 6483                   MOV         R8,R4
    00000302 7F10                   ADD         #16,R15
      simplexC.c   216                }
      simplexC.c   217                
      simplexC.c   218                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    00000304 E710                   MOV         #16,R7
    00000306 6683                   MOV         R8,R6
    00000308 E52A                   MOV         #42,R5
    0000030A 4C0B                   JSR         @R12
    0000030C E400                   MOV         #0,R4
      simplexC.c   219                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    0000030E E710                   MOV         #16,R7
    00000310 D626                   MOV.L       L861+30,R6 ; L495
    00000312 E531                   MOV         #49,R5
    00000314 4C0B                   JSR         @R12
    00000316 E400                   MOV         #0,R4
      simplexC.c   220                string_input(0, 56, uselessSring);
    00000318 D325                   MOV.L       L861+34,R3 ; _string_input
    0000031A 66F3                   MOV         R15,R6
    0000031C 7608                   ADD         #8,R6
    0000031E E538                   MOV         #56,R5
    00000320 430B                   JSR         @R3
    00000322 E400                   MOV         #0,R4
      simplexC.c   221                Bdisp_PutDisp_DD();
    00000324 D21F                   MOV.L       L861+22,R2 ; _Bdisp_PutDisp_DD
    00000326 420B                   JSR         @R2
    00000328 0009                   NOP
    0000032A              L757:                             
    0000032A 2BB8                   TST         R11,R11
    0000032C 8901                   BT          L862
    0000032E AF3E                   BRA         L758
    00000330 0009                   NOP
    00000332              L862:                             
      simplexC.c   222            }
      simplexC.c   223        }
      simplexC.c   224        return 0;
    00000332 E000                   MOV         #0,R0
      simplexC.c   225    }
    00000334 912D                   MOV.W       L861+4,R1  ; H'0488
    00000336 3F1C                   ADD         R1,R15
    00000338 4F26                   LDS.L       @R15+,PR
    0000033A 68F6                   MOV.L       @R15+,R8
    0000033C 69F6                   MOV.L       @R15+,R9
    0000033E 6AF6                   MOV.L       @R15+,R10
    00000340 6BF6                   MOV.L       @R15+,R11
    00000342 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000344 6DF6                   MOV.L       @R15+,R13
    00000346 000B                   RTS
    00000348 6EF6                   MOV.L       @R15+,R14
      simplexC.c   226    
      simplexC.c   227    int printStatementMenu(struct problemStatement* pS)
    0000034A              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
    0000034A 2FE6                   MOV.L       R14,@-R15
    0000034C 2FD6                   MOV.L       R13,@-R15
    0000034E 6E43                   MOV         R4,R14
    00000350 9020                   MOV.W       L861+6,R0  ; H'FE80
    00000352 2FC6                   MOV.L       R12,@-R15
    00000354 2FB6                   MOV.L       R11,@-R15
      simplexC.c   228    {
      simplexC.c   229        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   230        int menuChoice;
      simplexC.c   231        menuChoice=INITIALIZE_VALUE_OPT;
    00000356 EBFF                   MOV         #-1,R11
      simplexC.c   232        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000358 DC16                   MOV.L       L861+38,R12; _sprintf
    0000035A 2FA6                   MOV.L       R10,@-R15
    0000035C 2F96                   MOV.L       R9,@-R15
    0000035E 2F86                   MOV.L       R8,@-R15
    00000360 4F22                   STS.L       PR,@-R15
    00000362 3F0C                   ADD         R0,R15
    00000364 50E1                   MOV.L       @(4,R14),R0
    00000366 8802                   CMP/EQ      #2,R0
    00000368 8F06                   BF/S        L767
    0000036A 68F3                   MOV         R15,R8
    0000036C 52E2                   MOV.L       @(8,R14),R2
    0000036E 2228                   TST         R2,R2
    00000370 8902                   BT          L767
      simplexC.c   233        {
      simplexC.c   234            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000372 D311                   MOV.L       L861+42,R3 ; L504
    00000374 A001                   BRA         L856
    00000376 0009                   NOP
    00000378              L767:                             
      simplexC.c   235        }else
      simplexC.c   236        {
      simplexC.c   237            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000378 D310                   MOV.L       L861+46,R3 ; L506
    0000037A              L856:                             
    0000037A 2F36                   MOV.L       R3,@-R15
    0000037C 4C0B                   JSR         @R12
    0000037E 6483                   MOV         R8,R4
    00000380 9909                   MOV.W       L861+8,R9  ; H'0100
    00000382 7F04                   ADD         #4,R15
    00000384 9A08                   MOV.W       L861+10,R10; H'0080
    00000386 39FC                   ADD         R15,R9
    00000388 DD0D                   MOV.L       L861+50,R13; _PrintMini
      simplexC.c   238        }
      simplexC.c   239        
      simplexC.c   240        while(menuChoice!=EXIT_OPT)
    0000038A A067                   BRA         L769
    0000038C 3AFC                   ADD         R15,R10
    0000038E              L861:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000038E 0408                   .DATA.W     H'0408
    00000390 0388                   .DATA.W     H'0388
    00000392 0488                   .DATA.W     H'0488
    00000394 FE80                   .DATA.W     H'FE80
    00000396 0100                   .DATA.W     H'0100
    00000398 0080                   .DATA.W     H'0080
    0000039A 0000                   .DATA.W     0
    0000039C <00000000>             .DATA.L     L490
    000003A0 <00000000>             .DATA.L     L488
    000003A4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000003A8 <00000000>             .DATA.L     L493
    000003AC <00000000>             .DATA.L     L495
    000003B0 <00000000>             .DATA.L     _string_input
    000003B4 <00000000>             .DATA.L     _sprintf
    000003B8 <00000000>             .DATA.L     L504
    000003BC <00000000>             .DATA.L     L506
    000003C0 <00000000>             .DATA.L     _PrintMini
    000003C4              L770:                             
      simplexC.c   241        {
      simplexC.c   242            Bdisp_AllClr_DDVRAM();
    000003C4 D339                   MOV.L       L863+6,R3  ; _Bdisp_AllClr_DDVRAM
    000003C6 430B                   JSR         @R3
    000003C8 0009                   NOP
      simplexC.c   243            sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT"
                         + :"SOLVE", EXIT_OPT);
    000003CA E200                   MOV         #0,R2
    000003CC 2F26                   MOV.L       R2,@-R15
    000003CE 50E1                   MOV.L       @(4,R14),R0
    000003D0 8801                   CMP/EQ      #1,R0
    000003D2 8B02                   BF          L771
    000003D4 D136                   MOV.L       L863+10,R1 ; L483
    000003D6 A002                   BRA         L772
    000003D8 2F16                   MOV.L       R1,@-R15
    000003DA              L771:                             
    000003DA D336                   MOV.L       L863+14,R3 ; L484
    000003DC 2F36                   MOV.L       R3,@-R15
    000003DE              L772:                             
    000003DE D136                   MOV.L       L863+18,R1 ; L508
    000003E0 2F16                   MOV.L       R1,@-R15
    000003E2 4C0B                   JSR         @R12
    000003E4 6493                   MOV         R9,R4
      simplexC.c   244            sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    000003E6 53E6                   MOV.L       @(24,R14),R3
    000003E8 2F36                   MOV.L       R3,@-R15
    000003EA 52EA                   MOV.L       @(40,R14),R2
    000003EC D333                   MOV.L       L863+22,R3 ; L485
    000003EE 2F26                   MOV.L       R2,@-R15
    000003F0 2F36                   MOV.L       R3,@-R15
    000003F2 4C0B                   JSR         @R12
    000003F4 64A3                   MOV         R10,R4
    000003F6 7F18                   ADD         #24,R15
      simplexC.c   245            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000003F8 E710                   MOV         #16,R7
    000003FA 6693                   MOV         R9,R6
    000003FC E500                   MOV         #0,R5
    000003FE 4D0B                   JSR         @R13
    00000400 6453                   MOV         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   246            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00000402 E710                   MOV         #16,R7
    00000404 66A3                   MOV         R10,R6
    00000406 E507                   MOV         #7,R5
    00000408 4D0B                   JSR         @R13
    0000040A E400                   MOV         #0,R4
      simplexC.c   247            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    0000040C D62C                   MOV.L       L863+26,R6 ; L509
    0000040E E50E                   MOV         #14,R5
    00000410 E710                   MOV         #16,R7
    00000412 4D0B                   JSR         @R13
    00000414 E400                   MOV         #0,R4
      simplexC.c   248            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    00000416 E710                   MOV         #16,R7
    00000418 6683                   MOV         R8,R6
    0000041A E515                   MOV         #21,R5
    0000041C 4D0B                   JSR         @R13
    0000041E E400                   MOV         #0,R4
      simplexC.c   249            menuChoice = InputI(0, 35);
    00000420 E523                   MOV         #35,R5
    00000422 BE02                   BSR         _InputI
    00000424 E400                   MOV         #0,R4
      simplexC.c   250            Bdisp_PutDisp_DD();
    00000426 D327                   MOV.L       L863+30,R3 ; _Bdisp_PutDisp_DD
    00000428 430B                   JSR         @R3
    0000042A 6B03                   MOV         R0,R11
      simplexC.c   251            switch (menuChoice)
    0000042C 60B3                   MOV         R11,R0
    0000042E 8801                   CMP/EQ      #1,R0
    00000430 8905                   BT          L699
    00000432 8802                   CMP/EQ      #2,R0
    00000434 8907                   BT          L700
    00000436 8803                   CMP/EQ      #3,R0
    00000438 890A                   BT          L701
    0000043A A00F                   BRA         L769
    0000043C 0009                   NOP
    0000043E              L699:                            ; case label 
      simplexC.c   252            {
      simplexC.c   253            case 1: printAllConstraintsMenu(pS);break;
    0000043E B1C8                   BSR         _printAllConstraintsMenu
    00000440 64E3                   MOV         R14,R4
    00000442 A00B                   BRA         L769
    00000444 0009                   NOP
    00000446              L700:                            ; case label 
      simplexC.c   254            case 2: printObjFunc(pS,TYPE_INPUT);break;
    00000446 E501                   MOV         #1,R5
    00000448 BE9B                   BSR         _printObjFunc
    0000044A 64E3                   MOV         R14,R4
    0000044C A006                   BRA         L769
    0000044E 0009                   NOP
    00000450              L701:                            ; case label 
      simplexC.c   255            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    00000450 50E1                   MOV.L       @(4,R14),R0
    00000452 8802                   CMP/EQ      #2,R0
    00000454 8B02                   BF          L769
    00000456 E502                   MOV         #2,R5
    00000458 BE93                   BSR         _printObjFunc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000045A 64E3                   MOV         R14,R4
      simplexC.c   256            default: break;
    0000045C              L769:                             
    0000045C 2BB8                   TST         R11,R11
    0000045E 8BB1                   BF          L770
      simplexC.c   257            }
      simplexC.c   258        }
      simplexC.c   259        return 0;
      simplexC.c   260    }
    00000460 9121                   MOV.W       L863,R1    ; H'0180
    00000462 E000                   MOV         #0,R0
    00000464 3F1C                   ADD         R1,R15
    00000466 4F26                   LDS.L       @R15+,PR
    00000468 68F6                   MOV.L       @R15+,R8
    0000046A 69F6                   MOV.L       @R15+,R9
    0000046C 6AF6                   MOV.L       @R15+,R10
    0000046E 6BF6                   MOV.L       @R15+,R11
    00000470 6CF6                   MOV.L       @R15+,R12
    00000472 6DF6                   MOV.L       @R15+,R13
    00000474 000B                   RTS
    00000476 6EF6                   MOV.L       @R15+,R14
      simplexC.c   261    
      simplexC.c   262    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    00000478              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
    00000478 2FE6                   MOV.L       R14,@-R15
    0000047A 6343                   MOV         R4,R3
    0000047C 9014                   MOV.W       L863+2,R0  ; H'FCF8
    0000047E 73FF                   ADD         #-1,R3
    00000480 2FD6                   MOV.L       R13,@-R15
    00000482 4308                   SHLL2       R3
    00000484 9E11                   MOV.W       L863+4,R14 ; H'0208
      simplexC.c   263    {
      simplexC.c   264        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   265        char *uselessSring[128];
      simplexC.c   266        int menuChoice;
      simplexC.c   267        int lengthString;
      simplexC.c   268        lengthString=0;
    00000486 ED00                   MOV         #0,R13
    00000488 2FC6                   MOV.L       R12,@-R15
    0000048A 2FB6                   MOV.L       R11,@-R15
    0000048C 2FA6                   MOV.L       R10,@-R15
      simplexC.c   269        menuChoice=INITIALIZE_VALUE_OPT;
    0000048E EBFF                   MOV         #-1,R11
    00000490 DC0E                   MOV.L       L863+38,R12; _sprintf
    00000492 6A53                   MOV         R5,R10
    00000494 2F96                   MOV.L       R9,@-R15
    00000496 2F86                   MOV.L       R8,@-R15
    00000498 4F22                   STS.L       PR,@-R15
    0000049A 3F0C                   ADD         R0,R15
    0000049C D90A                   MOV.L       L863+34,R9 ; _PrintMini
    0000049E 3EFC                   ADD         R15,R14
    000004A0 2F42                   MOV.L       R4,@R15
      simplexC.c   270        
      simplexC.c   271        while(menuChoice!=EXIT_OPT)
    000004A2 A092                   BRA         L776
    000004A4 1F31                   MOV.L       R3,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004A6              L863:                             
    000004A6 0180                   .DATA.W     H'0180
    000004A8 FCF8                   .DATA.W     H'FCF8
    000004AA 0208                   .DATA.W     H'0208
    000004AC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000004B0 <00000000>             .DATA.L     L483
    000004B4 <00000000>             .DATA.L     L484
    000004B8 <00000000>             .DATA.L     L508
    000004BC <00000000>             .DATA.L     L485
    000004C0 <00000000>             .DATA.L     L509
    000004C4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000004C8 <00000000>             .DATA.L     _PrintMini
    000004CC <00000000>             .DATA.L     _sprintf
    000004D0              L777:                             
      simplexC.c   272        {
      simplexC.c   273            Bdisp_AllClr_DDVRAM();
    000004D0 D147                   MOV.L       L864+10,R1 ; _Bdisp_AllClr_DDVRAM
    000004D2 410B                   JSR         @R1
    000004D4 0009                   NOP
      simplexC.c   274            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    000004D6 E200                   MOV         #0,R2
    000004D8 9485                   MOV.W       L864,R4    ; H'0298
    000004DA 2F26                   MOV.L       R2,@-R15
    000004DC 53A6                   MOV.L       @(24,R10),R3
    000004DE 2F36                   MOV.L       R3,@-R15
    000004E0 51F2                   MOV.L       @(8,R15),R1
    000004E2 2F16                   MOV.L       R1,@-R15
    000004E4 D343                   MOV.L       L864+14,R3 ; L523
    000004E6 2F36                   MOV.L       R3,@-R15
    000004E8 4C0B                   JSR         @R12
    000004EA 34FC                   ADD         R15,R4
      simplexC.c   275            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000004EC 967C                   MOV.W       L864+2,R6  ; H'0288
    000004EE E500                   MOV         #0,R5
    000004F0 7F10                   ADD         #16,R15
    000004F2 E710                   MOV         #16,R7
    000004F4 36FC                   ADD         R15,R6
    000004F6 490B                   JSR         @R9
    000004F8 6453                   MOV         R5,R4
      simplexC.c   276            menuChoice=InputI(0,7);
    000004FA E507                   MOV         #7,R5
    000004FC BD95                   BSR         _InputI
    000004FE E400                   MOV         #0,R4
      simplexC.c   277            Bdisp_PutDisp_DD();
    00000500 D33D                   MOV.L       L864+18,R3 ; _Bdisp_PutDisp_DD
    00000502 430B                   JSR         @R3
    00000504 6B03                   MOV         R0,R11
      simplexC.c   278            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000506 2BB8                   TST         R11,R11
    00000508 895F                   BT          L776
    0000050A 53A6                   MOV.L       @(24,R10),R3
    0000050C 3B37                   CMP/GT      R3,R11
    0000050E 895C                   BT          L776
      simplexC.c   279            {
      simplexC.c   280                Bdisp_AllClr_DDVRAM();
    00000510 D137                   MOV.L       L864+10,R1 ; _Bdisp_AllClr_DDVRAM
    00000512 410B                   JSR         @R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000514 0009                   NOP
      simplexC.c   281                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    00000516 61B3                   MOV         R11,R1
    00000518 2FB6                   MOV.L       R11,@-R15
    0000051A 64D3                   MOV         R13,R4
    0000051C 53F2                   MOV.L       @(8,R15),R3
    0000051E 71FF                   ADD         #-1,R1
    00000520 50A3                   MOV.L       @(12,R10),R0
    00000522 4108                   SHLL2       R1
    00000524 023E                   MOV.L       @(R0,R3),R2
    00000526 4100                   SHLL        R1
    00000528 321C                   ADD         R1,R2
    0000052A 5021                   MOV.L       @(4,R2),R0
    0000052C 2F06                   MOV.L       R0,@-R15
    0000052E 6022                   MOV.L       @R2,R0
    00000530 D232                   MOV.L       L864+22,R2 ; L525
    00000532 2F06                   MOV.L       R0,@-R15
    00000534 51F3                   MOV.L       @(12,R15),R1
    00000536 2F16                   MOV.L       R1,@-R15
    00000538 2F26                   MOV.L       R2,@-R15
    0000053A 4C0B                   JSR         @R12
    0000053C 34EC                   ADD         R14,R4
    0000053E 7F14                   ADD         #20,R15
    00000540 BDE7                   BSR         _lengthConcatenate
    00000542 6403                   MOV         R0,R4
    00000544 3D0C                   ADD         R0,R13
    00000546 68B3                   MOV         R11,R8
    00000548 50AC                   MOV.L       @(48,R10),R0
    0000054A 78FF                   ADD         #-1,R8
    0000054C 4808                   SHLL2       R8
    0000054E 038E                   MOV.L       @(R0,R8),R3
    00000550 2338                   TST         R3,R3
    00000552 8908                   BT          L779
      simplexC.c   282    
      simplexC.c   283                if(pS->idSlopeVariables[menuChoice-1])
      simplexC.c   284                {
      simplexC.c   285                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    00000554 D12A                   MOV.L       L864+26,R1 ; L527
    00000556 64D3                   MOV         R13,R4
    00000558 2F16                   MOV.L       R1,@-R15
    0000055A 4C0B                   JSR         @R12
    0000055C 34EC                   ADD         R14,R4
    0000055E 7F04                   ADD         #4,R15
    00000560 BDD7                   BSR         _lengthConcatenate
    00000562 6403                   MOV         R0,R4
    00000564 3D0C                   ADD         R0,R13
    00000566              L779:                             
      simplexC.c   286                }
      simplexC.c   287                if(pS->id2fasesVariables[menuChoice-1])
    00000566 50AD                   MOV.L       @(52,R10),R0
    00000568 028E                   MOV.L       @(R0,R8),R2
    0000056A 2228                   TST         R2,R2
    0000056C 8908                   BT          L780
      simplexC.c   288                {
      simplexC.c   289                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    0000056E 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000570 D124                   MOV.L       L864+30,R1 ; L529
    00000572 2F16                   MOV.L       R1,@-R15
    00000574 4C0B                   JSR         @R12
    00000576 34EC                   ADD         R14,R4
    00000578 7F04                   ADD         #4,R15
    0000057A BDCA                   BSR         _lengthConcatenate
    0000057C 6403                   MOV         R0,R4
    0000057E 3D0C                   ADD         R0,R13
    00000580              L780:                             
      simplexC.c   290                }
      simplexC.c   291                if(pS->idIntegerVariables[menuChoice-1])
    00000580 50AB                   MOV.L       @(44,R10),R0
    00000582 028E                   MOV.L       @(R0,R8),R2
    00000584 2228                   TST         R2,R2
    00000586 8907                   BT          L781
      simplexC.c   292                {
      simplexC.c   293                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000588 D11F                   MOV.L       L864+34,R1 ; L531
    0000058A 64D3                   MOV         R13,R4
    0000058C 2F16                   MOV.L       R1,@-R15
    0000058E 4C0B                   JSR         @R12
    00000590 34EC                   ADD         R14,R4
    00000592 7F04                   ADD         #4,R15
    00000594 BDBD                   BSR         _lengthConcatenate
    00000596 6403                   MOV         R0,R4
    00000598              L781:                             
      simplexC.c   294                }
      simplexC.c   295                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000598 E710                   MOV         #16,R7
    0000059A 66E3                   MOV         R14,R6
    0000059C E500                   MOV         #0,R5
    0000059E 490B                   JSR         @R9
    000005A0 6453                   MOV         R5,R4
      simplexC.c   296                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    000005A2 E710                   MOV         #16,R7
    000005A4 D619                   MOV.L       L864+38,R6 ; L495
    000005A6 E507                   MOV         #7,R5
    000005A8 490B                   JSR         @R9
    000005AA E400                   MOV         #0,R4
      simplexC.c   297                string_input(0, 14, uselessSring);
    000005AC D218                   MOV.L       L864+42,R2 ; _string_input
    000005AE 66F3                   MOV         R15,R6
    000005B0 7608                   ADD         #8,R6
    000005B2 E50E                   MOV         #14,R5
    000005B4 420B                   JSR         @R2
    000005B6 E400                   MOV         #0,R4
      simplexC.c   298                Bdisp_PutDisp_DD();
    000005B8 D30F                   MOV.L       L864+18,R3 ; _Bdisp_PutDisp_DD
    000005BA 430B                   JSR         @R3
    000005BC 0009                   NOP
      simplexC.c   299                memset(stroutVariable,0,128);
    000005BE E500                   MOV         #0,R5
    000005C0 D214                   MOV.L       L864+46,R2 ; _memset
    000005C2 9612                   MOV.W       L864+4,R6  ; H'0080
    000005C4 420B                   JSR         @R2
    000005C6 64E3                   MOV         R14,R4
      simplexC.c   300                lengthString=0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005C8 ED00                   MOV         #0,R13
    000005CA              L776:                             
    000005CA 2BB8                   TST         R11,R11
    000005CC 8B80                   BF          L777
      simplexC.c   301            }
      simplexC.c   302        }
      simplexC.c   303        return 0;
    000005CE E000                   MOV         #0,R0
      simplexC.c   304    }
    000005D0 910C                   MOV.W       L864+6,R1  ; H'0308
    000005D2 3F1C                   ADD         R1,R15
    000005D4 4F26                   LDS.L       @R15+,PR
    000005D6 68F6                   MOV.L       @R15+,R8
    000005D8 69F6                   MOV.L       @R15+,R9
    000005DA 6AF6                   MOV.L       @R15+,R10
    000005DC 6BF6                   MOV.L       @R15+,R11
    000005DE 6CF6                   MOV.L       @R15+,R12
    000005E0 6DF6                   MOV.L       @R15+,R13
    000005E2 000B                   RTS
    000005E4 6EF6                   MOV.L       @R15+,R14
    000005E6              L864:                             
    000005E6 0298                   .DATA.W     H'0298
    000005E8 0288                   .DATA.W     H'0288
    000005EA 0080                   .DATA.W     H'0080
    000005EC 0308                   .DATA.W     H'0308
    000005EE 0000                   .DATA.W     0
    000005F0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000005F4 <00000000>             .DATA.L     L523
    000005F8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000005FC <00000000>             .DATA.L     L525
    00000600 <00000000>             .DATA.L     L527
    00000604 <00000000>             .DATA.L     L529
    00000608 <00000000>             .DATA.L     L531
    0000060C <00000000>             .DATA.L     L495
    00000610 <00000000>             .DATA.L     _string_input
    00000614 <00000000>             .DATA.L     _memset
      simplexC.c   305    
      simplexC.c   306    int printIne(int contsId, struct problemStatement* pS)
    00000618              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000618 4F22                   STS.L       PR,@-R15
    0000061A 9075                   MOV.W       L865,R0    ; H'FD78
      simplexC.c   307    {
      simplexC.c   308        char stroutBasicInfo[128];
      simplexC.c   309        char *uselessSring[128];
      simplexC.c   310        Bdisp_AllClr_DDVRAM();
    0000061C D33D                   MOV.L       L865+12,R3 ; _Bdisp_AllClr_DDVRAM
    0000061E 3F0C                   ADD         R0,R15
    00000620 2F42                   MOV.L       R4,@R15
    00000622 430B                   JSR         @R3
    00000624 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   311        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    00000626 50F1                   MOV.L       @(4,R15),R0
    00000628 64F2                   MOV.L       @R15,R4
    0000062A 74FF                   ADD         #-1,R4
    0000062C 5005                   MOV.L       @(20,R0),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000062E 4408                   SHLL2       R4
    00000630 BD82                   BSR         _getInequalityChar
    00000632 044E                   MOV.L       @(R0,R4),R4
    00000634 2F06                   MOV.L       R0,@-R15
    00000636 52F1                   MOV.L       @(4,R15),R2
    00000638 D337                   MOV.L       L865+16,R3 ; L539
    0000063A 2F26                   MOV.L       R2,@-R15
    0000063C 2F36                   MOV.L       R3,@-R15
    0000063E 9464                   MOV.W       L865+2,R4  ; H'0214
    00000640 D236                   MOV.L       L865+20,R2 ; _sprintf
    00000642 420B                   JSR         @R2
    00000644 34FC                   ADD         R15,R4
      simplexC.c   312        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000646 E710                   MOV         #16,R7
    00000648 965F                   MOV.W       L865+2,R6  ; H'0214
    0000064A E500                   MOV         #0,R5
    0000064C D334                   MOV.L       L865+24,R3 ; _PrintMini
    0000064E 36FC                   ADD         R15,R6
    00000650 430B                   JSR         @R3
    00000652 6453                   MOV         R5,R4
      simplexC.c   313        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000654 D633                   MOV.L       L865+28,R6 ; L495
    00000656 E507                   MOV         #7,R5
    00000658 D231                   MOV.L       L865+24,R2 ; _PrintMini
    0000065A E710                   MOV         #16,R7
    0000065C 420B                   JSR         @R2
    0000065E E400                   MOV         #0,R4
      simplexC.c   314        string_input(0, 14, uselessSring);
    00000660 D331                   MOV.L       L865+32,R3 ; _string_input
    00000662 66F3                   MOV         R15,R6
    00000664 7614                   ADD         #20,R6
    00000666 E50E                   MOV         #14,R5
    00000668 430B                   JSR         @R3
    0000066A E400                   MOV         #0,R4
      simplexC.c   315        Bdisp_PutDisp_DD();
    0000066C D22F                   MOV.L       L865+36,R2 ; _Bdisp_PutDisp_DD
    0000066E 420B                   JSR         @R2
    00000670 0009                   NOP
      simplexC.c   316        return 0;
      simplexC.c   317    }
    00000672 914B                   MOV.W       L865+4,R1  ; H'0294
    00000674 3F1C                   ADD         R1,R15
    00000676 4F26                   LDS.L       @R15+,PR
    00000678 000B                   RTS
    0000067A E000                   MOV         #0,R0
      simplexC.c   318    
      simplexC.c   319    int printRVal(int contsId, struct problemStatement* pS)
    0000067C              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
    0000067C 4F22                   STS.L       PR,@-R15
    0000067E 9043                   MOV.W       L865,R0    ; H'FD78
      simplexC.c   320    {
      simplexC.c   321        char stroutBasicInfo[128];
      simplexC.c   322        char *uselessSring[128];
      simplexC.c   323        Bdisp_AllClr_DDVRAM();
    00000680 D324                   MOV.L       L865+12,R3 ; _Bdisp_AllClr_DDVRAM
    00000682 3F0C                   ADD         R0,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000684 2F42                   MOV.L       R4,@R15
    00000686 430B                   JSR         @R3
    00000688 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   324        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    0000068A 52F1                   MOV.L       @(4,R15),R2
    0000068C 63F2                   MOV.L       @R15,R3
    0000068E 73FF                   ADD         #-1,R3
    00000690 5224                   MOV.L       @(16,R2),R2
    00000692 4308                   SHLL2       R3
    00000694 943B                   MOV.W       L865+6,R4  ; H'0218
    00000696 4300                   SHLL        R3
    00000698 332C                   ADD         R2,R3
    0000069A 5131                   MOV.L       @(4,R3),R1
    0000069C 2F16                   MOV.L       R1,@-R15
    0000069E 6132                   MOV.L       @R3,R1
    000006A0 D323                   MOV.L       L865+40,R3 ; L546
    000006A2 2F16                   MOV.L       R1,@-R15
    000006A4 52F2                   MOV.L       @(8,R15),R2
    000006A6 2F26                   MOV.L       R2,@-R15
    000006A8 2F36                   MOV.L       R3,@-R15
    000006AA D21C                   MOV.L       L865+20,R2 ; _sprintf
    000006AC 420B                   JSR         @R2
    000006AE 34FC                   ADD         R15,R4
      simplexC.c   325        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000006B0 962D                   MOV.W       L865+6,R6  ; H'0218
    000006B2 E500                   MOV         #0,R5
    000006B4 D31A                   MOV.L       L865+24,R3 ; _PrintMini
    000006B6 E710                   MOV         #16,R7
    000006B8 36FC                   ADD         R15,R6
    000006BA 430B                   JSR         @R3
    000006BC 6453                   MOV         R5,R4
      simplexC.c   326        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    000006BE E710                   MOV         #16,R7
    000006C0 D618                   MOV.L       L865+28,R6 ; L495
    000006C2 E507                   MOV         #7,R5
    000006C4 D216                   MOV.L       L865+24,R2 ; _PrintMini
    000006C6 420B                   JSR         @R2
    000006C8 E400                   MOV         #0,R4
      simplexC.c   327        string_input(0, 14, uselessSring);
    000006CA 66F3                   MOV         R15,R6
    000006CC D316                   MOV.L       L865+32,R3 ; _string_input
    000006CE E50E                   MOV         #14,R5
    000006D0 7618                   ADD         #24,R6
    000006D2 430B                   JSR         @R3
    000006D4 E400                   MOV         #0,R4
      simplexC.c   328        Bdisp_PutDisp_DD();
    000006D6 D215                   MOV.L       L865+36,R2 ; _Bdisp_PutDisp_DD
    000006D8 420B                   JSR         @R2
    000006DA 0009                   NOP
      simplexC.c   329        return 0;
      simplexC.c   330    }
    000006DC 9118                   MOV.W       L865+8,R1  ; H'0298
    000006DE 3F1C                   ADD         R1,R15
    000006E0 4F26                   LDS.L       @R15+,PR
    000006E2 000B                   RTS
    000006E4 E000                   MOV         #0,R0
      simplexC.c   331    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   332    
      simplexC.c   333    int printInfoConstraint(int contsId, struct problemStatement* pS)
    000006E6              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    000006E6 2FE6                   MOV.L       R14,@-R15
    000006E8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   334    {
      simplexC.c   335        char stroutBasicInfo[128];
      simplexC.c   336        int menuChoice;
      simplexC.c   337        menuChoice=INITIALIZE_VALUE_OPT;
    000006EA EDFF                   MOV         #-1,R13
    000006EC DE0C                   MOV.L       L865+24,R14; _PrintMini
    000006EE 2FC6                   MOV.L       R12,@-R15
    000006F0 2FB6                   MOV.L       R11,@-R15
    000006F2 6C43                   MOV         R4,R12
    000006F4 2FA6                   MOV.L       R10,@-R15
    000006F6 6B53                   MOV         R5,R11
    000006F8 2F96                   MOV.L       R9,@-R15
    000006FA 2F86                   MOV.L       R8,@-R15
    000006FC 4F22                   STS.L       PR,@-R15
    000006FE 7F80                   ADD         #-128,R15
    00000700 D80C                   MOV.L       L865+44,R8 ; L554
    00000702 D906                   MOV.L       L865+20,R9 ; _sprintf
      simplexC.c   338        while(menuChoice!=EXIT_OPT)
    00000704 A057                   BRA         L785
    00000706 6AF3                   MOV         R15,R10
    00000708              L865:                             
    00000708 FD78                   .DATA.W     H'FD78
    0000070A 0214                   .DATA.W     H'0214
    0000070C 0294                   .DATA.W     H'0294
    0000070E 0218                   .DATA.W     H'0218
    00000710 0298                   .DATA.W     H'0298
    00000712 0000                   .DATA.W     0
    00000714 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000718 <00000000>             .DATA.L     L539
    0000071C <00000000>             .DATA.L     _sprintf
    00000720 <00000000>             .DATA.L     _PrintMini
    00000724 <00000000>             .DATA.L     L495
    00000728 <00000000>             .DATA.L     _string_input
    0000072C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000730 <00000000>             .DATA.L     L546
    00000734 <00000000>             .DATA.L     L554
    00000738              L786:                             
      simplexC.c   339        {
      simplexC.c   340            Bdisp_AllClr_DDVRAM();
    00000738 D22F                   MOV.L       L866+4,R2  ; _Bdisp_AllClr_DDVRAM
    0000073A 420B                   JSR         @R2
    0000073C 0009                   NOP
      simplexC.c   341            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    0000073E E300                   MOV         #0,R3
    00000740 2F36                   MOV.L       R3,@-R15
    00000742 2FC6                   MOV.L       R12,@-R15
    00000744 2F86                   MOV.L       R8,@-R15
    00000746 490B                   JSR         @R9
    00000748 64A3                   MOV         R10,R4
    0000074A 7F0C                   ADD         #12,R15
      simplexC.c   342            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000074C E710                   MOV         #16,R7
    0000074E 66A3                   MOV         R10,R6
    00000750 E500                   MOV         #0,R5
    00000752 4E0B                   JSR         @R14
    00000754 6453                   MOV         R5,R4
      simplexC.c   343            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    00000756 E710                   MOV         #16,R7
    00000758 D628                   MOV.L       L866+8,R6  ; L555
    0000075A E507                   MOV         #7,R5
    0000075C 4E0B                   JSR         @R14
    0000075E E400                   MOV         #0,R4
      simplexC.c   344            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000760 D627                   MOV.L       L866+12,R6 ; L556
    00000762 E50E                   MOV         #14,R5
    00000764 E710                   MOV         #16,R7
    00000766 4E0B                   JSR         @R14
    00000768 E400                   MOV         #0,R4
      simplexC.c   345            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);
    0000076A E710                   MOV         #16,R7
    0000076C D625                   MOV.L       L866+16,R6 ; L557
    0000076E E515                   MOV         #21,R5
    00000770 4E0B                   JSR         @R14
    00000772 E400                   MOV         #0,R4
      simplexC.c   346            menuChoice = InputI(0, 28);
    00000774 E51C                   MOV         #28,R5
    00000776 BC58                   BSR         _InputI
    00000778 E400                   MOV         #0,R4
      simplexC.c   347            Bdisp_PutDisp_DD();
    0000077A D323                   MOV.L       L866+20,R3 ; _Bdisp_PutDisp_DD
    0000077C 430B                   JSR         @R3
    0000077E 6D03                   MOV         R0,R13
      simplexC.c   348            if(menuChoice!=EXIT_OPT && menuChoice<=3)
    00000780 2DD8                   TST         R13,R13
    00000782 8918                   BT          L785
    00000784 E303                   MOV         #3,R3
    00000786 3D37                   CMP/GT      R3,R13
    00000788 8915                   BT          L785
      simplexC.c   349            {
      simplexC.c   350                switch (menuChoice)
    0000078A 60D3                   MOV         R13,R0
    0000078C 8801                   CMP/EQ      #1,R0
    0000078E 8905                   BT          L714
    00000790 8802                   CMP/EQ      #2,R0
    00000792 8908                   BT          L715
    00000794 8803                   CMP/EQ      #3,R0
    00000796 890B                   BT          L716
    00000798 A00D                   BRA         L785
    0000079A 0009                   NOP
    0000079C              L714:                            ; case label 
      simplexC.c   351                {
      simplexC.c   352                case 1: printVariablesProblemStatement(contsId,pS);break;
    0000079C 65B3                   MOV         R11,R5
    0000079E BE6B                   BSR         _printVariablesProblemStatement
    000007A0 64C3                   MOV         R12,R4
    000007A2 A008                   BRA         L785
    000007A4 0009                   NOP
    000007A6              L715:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   353                case 2: printIne(contsId,pS);break;
    000007A6 65B3                   MOV         R11,R5
    000007A8 BF36                   BSR         _printIne
    000007AA 64C3                   MOV         R12,R4
    000007AC A003                   BRA         L785
    000007AE 0009                   NOP
    000007B0              L716:                            ; case label 
      simplexC.c   354                case 3: printRVal(contsId,pS);break;
    000007B0 65B3                   MOV         R11,R5
    000007B2 BF63                   BSR         _printRVal
    000007B4 64C3                   MOV         R12,R4
      simplexC.c   355                default: break;
    000007B6              L785:                             
    000007B6 2DD8                   TST         R13,R13
    000007B8 8BBE                   BF          L786
      simplexC.c   356                }
      simplexC.c   357            }
      simplexC.c   358        }
      simplexC.c   359        return 0;
    000007BA E000                   MOV         #0,R0
      simplexC.c   360    }
    000007BC 911A                   MOV.W       L866,R1    ; H'0080
    000007BE 3F1C                   ADD         R1,R15
    000007C0 4F26                   LDS.L       @R15+,PR
    000007C2 68F6                   MOV.L       @R15+,R8
    000007C4 69F6                   MOV.L       @R15+,R9
    000007C6 6AF6                   MOV.L       @R15+,R10
    000007C8 6BF6                   MOV.L       @R15+,R11
    000007CA 6CF6                   MOV.L       @R15+,R12
    000007CC 6DF6                   MOV.L       @R15+,R13
    000007CE 000B                   RTS
    000007D0 6EF6                   MOV.L       @R15+,R14
      simplexC.c   361    
      simplexC.c   362    int printAllConstraintsMenu(struct problemStatement* pS)
    000007D2              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    000007D2 2FE6                   MOV.L       R14,@-R15
    000007D4 2FD6                   MOV.L       R13,@-R15
      simplexC.c   363    {
      simplexC.c   364        char stroutBasicInfo[128];
      simplexC.c   365        int menuChoice;
      simplexC.c   366        menuChoice=INITIALIZE_VALUE_OPT;
    000007D6 EEFF                   MOV         #-1,R14
    000007D8 2FC6                   MOV.L       R12,@-R15
    000007DA 6D43                   MOV         R4,R13
    000007DC 2FB6                   MOV.L       R11,@-R15
    000007DE 2FA6                   MOV.L       R10,@-R15
    000007E0 2F96                   MOV.L       R9,@-R15
    000007E2 2F86                   MOV.L       R8,@-R15
    000007E4 4F22                   STS.L       PR,@-R15
    000007E6 7F80                   ADD         #-128,R15
    000007E8 D808                   MOV.L       L866+24,R8 ; _PrintMini
    000007EA D909                   MOV.L       L866+28,R9 ; _sprintf
    000007EC DA09                   MOV.L       L866+32,R10; L565
    000007EE DB02                   MOV.L       L866+4,R11 ; _Bdisp_AllClr_DDVRAM
      simplexC.c   367        while(menuChoice!=EXIT_OPT)
    000007F0 A02F                   BRA         L790




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007F2 6CF3                   MOV         R15,R12
    000007F4              L866:                             
    000007F4 0080                   .DATA.W     H'0080
    000007F6 0000                   .DATA.W     0
    000007F8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000007FC <00000000>             .DATA.L     L555
    00000800 <00000000>             .DATA.L     L556
    00000804 <00000000>             .DATA.L     L557
    00000808 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000080C <00000000>             .DATA.L     _PrintMini
    00000810 <00000000>             .DATA.L     _sprintf
    00000814 <00000000>             .DATA.L     L565
    00000818              L791:                             
      simplexC.c   368        {
      simplexC.c   369            Bdisp_AllClr_DDVRAM();
    00000818 4B0B                   JSR         @R11
    0000081A 0009                   NOP
      simplexC.c   370            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);
    0000081C E200                   MOV         #0,R2
    0000081E 2F26                   MOV.L       R2,@-R15
    00000820 53DA                   MOV.L       @(40,R13),R3
    00000822 2F36                   MOV.L       R3,@-R15
    00000824 2FA6                   MOV.L       R10,@-R15
    00000826 490B                   JSR         @R9
    00000828 64C3                   MOV         R12,R4
    0000082A 7F0C                   ADD         #12,R15
      simplexC.c   371            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000082C E710                   MOV         #16,R7
    0000082E 66C3                   MOV         R12,R6
    00000830 E500                   MOV         #0,R5
    00000832 480B                   JSR         @R8
    00000834 6453                   MOV         R5,R4
      simplexC.c   372            menuChoice = InputI(0, 7);
    00000836 E507                   MOV         #7,R5
    00000838 BBF7                   BSR         _InputI
    0000083A E400                   MOV         #0,R4
      simplexC.c   373            Bdisp_PutDisp_DD();
    0000083C D337                   MOV.L       L867+8,R3  ; _Bdisp_PutDisp_DD
    0000083E 430B                   JSR         @R3
    00000840 6E03                   MOV         R0,R14
      simplexC.c   374            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000842 2EE8                   TST         R14,R14
    00000844 8905                   BT          L790
    00000846 53DA                   MOV.L       @(40,R13),R3
    00000848 3E37                   CMP/GT      R3,R14
    0000084A 8902                   BT          L790
      simplexC.c   375            {
      simplexC.c   376                printInfoConstraint(menuChoice,pS);
    0000084C 65D3                   MOV         R13,R5
    0000084E BF4A                   BSR         _printInfoConstraint
    00000850 64E3                   MOV         R14,R4
    00000852              L790:                             
    00000852 2EE8                   TST         R14,R14
    00000854 8BE0                   BF          L791
      simplexC.c   377            }
      simplexC.c   378        }
      simplexC.c   379        return 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000856 E000                   MOV         #0,R0
      simplexC.c   380    }
    00000858 915C                   MOV.W       L867,R1    ; H'0080
    0000085A 3F1C                   ADD         R1,R15
    0000085C 4F26                   LDS.L       @R15+,PR
    0000085E 68F6                   MOV.L       @R15+,R8
    00000860 69F6                   MOV.L       @R15+,R9
    00000862 6AF6                   MOV.L       @R15+,R10
    00000864 6BF6                   MOV.L       @R15+,R11
    00000866 6CF6                   MOV.L       @R15+,R12
    00000868 6DF6                   MOV.L       @R15+,R13
    0000086A 000B                   RTS
    0000086C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   381    
      simplexC.c   382    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    0000086E              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    0000086E 2FE6                   MOV.L       R14,@-R15
    00000870 4F22                   STS.L       PR,@-R15
    00000872 9050                   MOV.W       L867+2,R0  ; H'FF74
      simplexC.c   383    {   
      simplexC.c   384        char strout[128];
      simplexC.c   385        int res;
      simplexC.c   386        Bdisp_AllClr_DDVRAM();
    00000874 D32A                   MOV.L       L867+12,R3 ; _Bdisp_AllClr_DDVRAM
    00000876 3F0C                   ADD         R0,R15
    00000878 2F42                   MOV.L       R4,@R15
    0000087A 1F51                   MOV.L       R5,@(4,R15)
    0000087C 430B                   JSR         @R3
    0000087E 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c   387        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);
    00000880 62F2                   MOV.L       @R15,R2
    00000882 6EF3                   MOV         R15,R14
    00000884 D327                   MOV.L       L867+16,R3 ; L574
    00000886 7E0C                   ADD         #12,R14
    00000888 2F26                   MOV.L       R2,@-R15
    0000088A 2F36                   MOV.L       R3,@-R15
    0000088C D226                   MOV.L       L867+20,R2 ; _sprintf
    0000088E 420B                   JSR         @R2
    00000890 64E3                   MOV         R14,R4
      simplexC.c   388        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000892 E710                   MOV         #16,R7
    00000894 1FE2                   MOV.L       R14,@(8,R15)
    00000896 66E3                   MOV         R14,R6
    00000898 D324                   MOV.L       L867+24,R3 ; _PrintMini
    0000089A E500                   MOV         #0,R5
    0000089C 430B                   JSR         @R3
    0000089E 6453                   MOV         R5,R4
      simplexC.c   389        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c   390            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    000008A0 E202                   MOV         #2,R2
    000008A2 E301                   MOV         #1,R3
    000008A4 2F26                   MOV.L       R2,@-R15
    000008A6 E100                   MOV         #0,R1
    000008A8 2F36                   MOV.L       R3,@-R15
    000008AA 2F16                   MOV.L       R1,@-R15
    000008AC D320                   MOV.L       L867+28,R3 ; L575




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008AE 2F36                   MOV.L       R3,@-R15
    000008B0 D21D                   MOV.L       L867+20,R2 ; _sprintf
    000008B2 420B                   JSR         @R2
    000008B4 64E3                   MOV         R14,R4
    000008B6 7F18                   ADD         #24,R15
      simplexC.c   391        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    000008B8 D31C                   MOV.L       L867+24,R3 ; _PrintMini
    000008BA E710                   MOV         #16,R7
    000008BC 66F2                   MOV.L       @R15,R6
    000008BE E507                   MOV         #7,R5
    000008C0 430B                   JSR         @R3
    000008C2 E400                   MOV         #0,R4
      simplexC.c   392        res = InputI(0,14);
    000008C4 E50E                   MOV         #14,R5
    000008C6 BBB0                   BSR         _InputI
    000008C8 E400                   MOV         #0,R4
      simplexC.c   393        Bdisp_PutDisp_DD();
    000008CA D314                   MOV.L       L867+8,R3  ; _Bdisp_PutDisp_DD
    000008CC 430B                   JSR         @R3
    000008CE 6E03                   MOV         R0,R14
      simplexC.c   394        switch (res)
    000008D0 60E3                   MOV         R14,R0
    000008D2 8800                   CMP/EQ      #0,R0
    000008D4 8905                   BT          L721
    000008D6 8801                   CMP/EQ      #1,R0
    000008D8 8909                   BT          L722
    000008DA 8802                   CMP/EQ      #2,R0
    000008DC 890C                   BT          L723
    000008DE A013                   BRA         L794
    000008E0 0009                   NOP
    000008E2              L721:                            ; case label 
      simplexC.c   395        {
      simplexC.c   396            case INE_EQUAL: *nVariables2fases+=1; break;
    000008E2 52F2                   MOV.L       @(8,R15),R2
    000008E4 6322                   MOV.L       @R2,R3
    000008E6 7301                   ADD         #1,R3
    000008E8 2232                   MOV.L       R3,@R2
    000008EA A00D                   BRA         L794
    000008EC 0009                   NOP
    000008EE              L722:                            ; case label 
      simplexC.c   397            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    000008EE 51F1                   MOV.L       @(4,R15),R1
    000008F0 6312                   MOV.L       @R1,R3
    000008F2 7301                   ADD         #1,R3
    000008F4 A008                   BRA         L794
    000008F6 2132                   MOV.L       R3,@R1
    000008F8              L723:                            ; case label 
      simplexC.c   398            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    000008F8 51F1                   MOV.L       @(4,R15),R1
    000008FA 6312                   MOV.L       @R1,R3
    000008FC 7301                   ADD         #1,R3
    000008FE 2132                   MOV.L       R3,@R1
    00000900 52F2                   MOV.L       @(8,R15),R2
    00000902 6322                   MOV.L       @R2,R3
    00000904 7301                   ADD         #1,R3
    00000906 2232                   MOV.L       R3,@R2
    00000908              L794:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   399        }
      simplexC.c   400    
      simplexC.c   401        return res;
      simplexC.c   402    }
    00000908 9106                   MOV.W       L867+4,R1  ; H'008C
    0000090A 60E3                   MOV         R14,R0
    0000090C 3F1C                   ADD         R1,R15
    0000090E 4F26                   LDS.L       @R15+,PR
    00000910 000B                   RTS
    00000912 6EF6                   MOV.L       @R15+,R14
    00000914              L867:                             
    00000914 0080                   .DATA.W     H'0080
    00000916 FF74                   .DATA.W     H'FF74
    00000918 008C                   .DATA.W     H'008C
    0000091A 0000                   .DATA.W     0
    0000091C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000920 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000924 <00000000>             .DATA.L     L574
    00000928 <00000000>             .DATA.L     _sprintf
    0000092C <00000000>             .DATA.L     _PrintMini
    00000930 <00000000>             .DATA.L     L575
      simplexC.c   403    
      simplexC.c   404    double getRightValue(int nConstraint)
    00000934              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=156
    00000934 4F22                   STS.L       PR,@-R15
    00000936 907D                   MOV.W       L868,R0    ; H'FF74
      simplexC.c   405    {   
      simplexC.c   406        char strout[128];
      simplexC.c   407        double res;
      simplexC.c   408        Bdisp_AllClr_DDVRAM();
    00000938 D341                   MOV.L       L868+12,R3 ; _Bdisp_AllClr_DDVRAM
    0000093A 3F0C                   ADD         R0,R15
    0000093C 430B                   JSR         @R3
    0000093E 2F42                   MOV.L       R4,@R15
      simplexC.c   409        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    00000940 62F2                   MOV.L       @R15,R2
    00000942 2F26                   MOV.L       R2,@-R15
    00000944 D33F                   MOV.L       L868+16,R3 ; L582
    00000946 2F36                   MOV.L       R3,@-R15
    00000948 D23F                   MOV.L       L868+20,R2 ; _sprintf
    0000094A 64F3                   MOV         R15,R4
    0000094C 420B                   JSR         @R2
    0000094E 7414                   ADD         #20,R4
      simplexC.c   410        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000950 D33E                   MOV.L       L868+24,R3 ; _PrintMini
    00000952 E710                   MOV         #16,R7
    00000954 66F3                   MOV         R15,R6
    00000956 7614                   ADD         #20,R6
    00000958 E500                   MOV         #0,R5
    0000095A 430B                   JSR         @R3
    0000095C 6453                   MOV         R5,R4
      simplexC.c   411        Bdisp_PutDisp_DD();
    0000095E D23C                   MOV.L       L868+28,R2 ; _Bdisp_PutDisp_DD
    00000960 420B                   JSR         @R2
    00000962 0009                   NOP
      simplexC.c   412        res = InputD(0,7);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000964 E507                   MOV         #7,R5
    00000966 E400                   MOV         #0,R4
    00000968 63F3                   MOV         R15,R3
    0000096A 730C                   ADD         #12,R3
    0000096C BB48                   BSR         _InputD
    0000096E 2F36                   MOV.L       R3,@-R15
      simplexC.c   413        return res;
    00000970 9361                   MOV.W       L868+2,R3  ; H'009C
    00000972 62F3                   MOV         R15,R2
    00000974 33FC                   ADD         R15,R3
    00000976 7210                   ADD         #16,R2
    00000978 6132                   MOV.L       @R3,R1
    0000097A 6022                   MOV.L       @R2,R0
    0000097C 2102                   MOV.L       R0,@R1
    0000097E 5021                   MOV.L       @(4,R2),R0
    00000980 1101                   MOV.L       R0,@(4,R1)
      simplexC.c   414    }
    00000982 9159                   MOV.W       L868+4,R1  ; H'0098
    00000984 3F1C                   ADD         R1,R15
    00000986 4F26                   LDS.L       @R15+,PR
    00000988 000B                   RTS
    0000098A 0009                   NOP
      simplexC.c   415    
      simplexC.c   416    double *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, double *rightValue, i
                         +nt *nVariablesSlope, int * nVariables2fases)
    0000098C              _getInequation:                  ; function: getInequation
                                                           ; frame size=188
    0000098C 2FE6                   MOV.L       R14,@-R15
    0000098E 2FD6                   MOV.L       R13,@-R15
    00000990 2FC6                   MOV.L       R12,@-R15
    00000992 2FB6                   MOV.L       R11,@-R15
    00000994 2FA6                   MOV.L       R10,@-R15
    00000996 6A43                   MOV         R4,R10
      simplexC.c   417    {
      simplexC.c   418        char strout[128];
      simplexC.c   419        unsigned int i;
      simplexC.c   420        double *constraintValues;
      simplexC.c   421        constraintValues = (double *)malloc(sizeof(double) * nVariables);
    00000998 D32E                   MOV.L       L868+32,R3 ; _malloc
    0000099A 64A3                   MOV         R10,R4
    0000099C 2F96                   MOV.L       R9,@-R15
    0000099E 4408                   SHLL2       R4
    000009A0 9048                   MOV.W       L868,R0    ; H'FF74
    000009A2 6953                   MOV         R5,R9
    000009A4 2F86                   MOV.L       R8,@-R15
    000009A6 4F22                   STS.L       PR,@-R15
    000009A8 3F0C                   ADD         R0,R15
    000009AA 1F62                   MOV.L       R6,@(8,R15)
    000009AC 1F71                   MOV.L       R7,@(4,R15)
    000009AE 430B                   JSR         @R3
    000009B0 4400                   SHLL        R4
      simplexC.c   422        for (i = 0; i < nVariables; i++)
    000009B2 EB00                   MOV         #0,R11
    000009B4 D825                   MOV.L       L868+24,R8 ; _PrintMini
    000009B6 6CF3                   MOV         R15,R12
    000009B8 2F02                   MOV.L       R0,@R15
    000009BA EE00                   MOV         #0,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009BC 3E0C                   ADD         R0,R14
    000009BE ED01                   MOV         #1,R13
    000009C0 63B3                   MOV         R11,R3
    000009C2 33A2                   CMP/HS      R10,R3
    000009C4 8D1C                   BT/S        L797
    000009C6 7C0C                   ADD         #12,R12
    000009C8              L798:                             
      simplexC.c   423        {
      simplexC.c   424            Bdisp_AllClr_DDVRAM();
    000009C8 D11D                   MOV.L       L868+12,R1 ; _Bdisp_AllClr_DDVRAM
    000009CA 410B                   JSR         @R1
    000009CC 0009                   NOP
      simplexC.c   425            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    000009CE 2FD6                   MOV.L       R13,@-R15
    000009D0 2F96                   MOV.L       R9,@-R15
    000009D2 D321                   MOV.L       L868+36,R3 ; L595
    000009D4 D21C                   MOV.L       L868+20,R2 ; _sprintf
    000009D6 2F36                   MOV.L       R3,@-R15
    000009D8 420B                   JSR         @R2
    000009DA 64C3                   MOV         R12,R4
      simplexC.c   426            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000009DC E710                   MOV         #16,R7
    000009DE 66C3                   MOV         R12,R6
    000009E0 E500                   MOV         #0,R5
    000009E2 480B                   JSR         @R8
    000009E4 6453                   MOV         R5,R4
      simplexC.c   427            Bdisp_PutDisp_DD();
    000009E6 D31A                   MOV.L       L868+28,R3 ; _Bdisp_PutDisp_DD
    000009E8 430B                   JSR         @R3
    000009EA 0009                   NOP
      simplexC.c   428            constraintValues[i] = InputD(0, 7);
    000009EC E507                   MOV         #7,R5
    000009EE E400                   MOV         #0,R4
    000009F0 BB06                   BSR         _InputD
    000009F2 2FE6                   MOV.L       R14,@-R15
    000009F4 7F10                   ADD         #16,R15
    000009F6 7B01                   ADD         #1,R11
    000009F8 7E08                   ADD         #8,R14
    000009FA 3BA2                   CMP/HS      R10,R11
    000009FC 8FE4                   BF/S        L798
    000009FE 7D01                   ADD         #1,R13
    00000A00              L797:                             
      simplexC.c   429        }
      simplexC.c   430        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    00000A00 53F2                   MOV.L       @(8,R15),R3
    00000A02 2F36                   MOV.L       R3,@-R15
    00000A04 9019                   MOV.W       L868+6,R0  ; H'00B4
    00000A06 06FE                   MOV.L       @(R0,R15),R6
    00000A08 9018                   MOV.W       L868+8,R0  ; H'00B0
    00000A0A 05FE                   MOV.L       @(R0,R15),R5
    00000A0C BF2F                   BSR         _getInequalitySign
    00000A0E 6493                   MOV         R9,R4
    00000A10 62F6                   MOV.L       @R15+,R2
    00000A12 2202                   MOV.L       R0,@R2
      simplexC.c   431        *rightValue = getRightValue(nConstraint);
    00000A14 53F1                   MOV.L       @(4,R15),R3
    00000A16 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A18 BF8C                   BSR         _getRightValue
    00000A1A 6493                   MOV         R9,R4
      simplexC.c   432        return constraintValues;
    00000A1C 50F1                   MOV.L       @(4,R15),R0
      simplexC.c   433    }
    00000A1E 910E                   MOV.W       L868+10,R1 ; H'0090
    00000A20 3F1C                   ADD         R1,R15
    00000A22 4F26                   LDS.L       @R15+,PR
    00000A24 68F6                   MOV.L       @R15+,R8
    00000A26 69F6                   MOV.L       @R15+,R9
    00000A28 6AF6                   MOV.L       @R15+,R10
    00000A2A 6BF6                   MOV.L       @R15+,R11
    00000A2C 6CF6                   MOV.L       @R15+,R12
    00000A2E 6DF6                   MOV.L       @R15+,R13
    00000A30 000B                   RTS
    00000A32 6EF6                   MOV.L       @R15+,R14
    00000A34              L868:                             
    00000A34 FF74                   .DATA.W     H'FF74
    00000A36 009C                   .DATA.W     H'009C
    00000A38 0098                   .DATA.W     H'0098
    00000A3A 00B4                   .DATA.W     H'00B4
    00000A3C 00B0                   .DATA.W     H'00B0
    00000A3E 0090                   .DATA.W     H'0090
    00000A40 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000A44 <00000000>             .DATA.L     L582
    00000A48 <00000000>             .DATA.L     _sprintf
    00000A4C <00000000>             .DATA.L     _PrintMini
    00000A50 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000A54 <00000000>             .DATA.L     _malloc
    00000A58 <00000000>             .DATA.L     L595
      simplexC.c   434    
      simplexC.c   435    struct problemStatement* getProblemInputs()
    00000A5C              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224
    00000A5C 2FE6                   MOV.L       R14,@-R15
      simplexC.c   436    {
      simplexC.c   437        char strout[128];
      simplexC.c   438        unsigned int nConstraints;
      simplexC.c   439        unsigned int nVariables;
      simplexC.c   440        unsigned int i;
      simplexC.c   441        int nVariablesInteger;
      simplexC.c   442        int problemType;
      simplexC.c   443        double **constraints;
      simplexC.c   444        double *rightValues;
      simplexC.c   445        double *funcObjtValues;
      simplexC.c   446        int *inequalitiesSigns;
      simplexC.c   447        int *idIntegerVariables;
      simplexC.c   448        int *idSlopeVariables;
      simplexC.c   449        int *id2fasesVariables;
      simplexC.c   450        struct problemStatement *pInput;
      simplexC.c   451        nVariablesInteger=0;
    00000A5E E300                   MOV         #0,R3
    00000A60 90A7                   MOV.W       L869,R0    ; H'FF4C
    00000A62 2FD6                   MOV.L       R13,@-R15
    00000A64 2FC6                   MOV.L       R12,@-R15
    00000A66 2FB6                   MOV.L       R11,@-R15
    00000A68 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A6A 2F96                   MOV.L       R9,@-R15
    00000A6C 2F86                   MOV.L       R8,@-R15
    00000A6E 4F22                   STS.L       PR,@-R15
      simplexC.c   452        pInput = malloc(sizeof(struct problemStatement));
    00000A70 DD51                   MOV.L       L869+6,R13 ; _malloc
    00000A72 3F0C                   ADD         R0,R15
    00000A74 1F38                   MOV.L       R3,@(32,R15)
    00000A76 4D0B                   JSR         @R13
    00000A78 E44C                   MOV         #76,R4
      simplexC.c   453        Bdisp_AllClr_DDVRAM();
    00000A7A D850                   MOV.L       L869+10,R8 ; _Bdisp_AllClr_DDVRAM
    00000A7C 480B                   JSR         @R8
    00000A7E 6E03                   MOV         R0,R14
      simplexC.c   454        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    00000A80 DB4F                   MOV.L       L869+14,R11; _PrintMini
    00000A82 E710                   MOV         #16,R7
    00000A84 D64F                   MOV.L       L869+18,R6 ; L612
    00000A86 E500                   MOV         #0,R5
    00000A88 4B0B                   JSR         @R11
    00000A8A 6453                   MOV         R5,R4
      simplexC.c   455        Bdisp_PutDisp_DD();
    00000A8C DA4E                   MOV.L       L869+22,R10; _Bdisp_PutDisp_DD
    00000A8E 4A0B                   JSR         @R10
    00000A90 0009                   NOP
      simplexC.c   456        nConstraints = InputI(0, 7);
    00000A92 E507                   MOV         #7,R5
    00000A94 BAC9                   BSR         _InputI
    00000A96 E400                   MOV         #0,R4
    00000A98 1F02                   MOV.L       R0,@(8,R15)
      simplexC.c   457        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    00000A9A E710                   MOV         #16,R7
    00000A9C D64B                   MOV.L       L869+26,R6 ; L613
    00000A9E E50E                   MOV         #14,R5
    00000AA0 4B0B                   JSR         @R11
    00000AA2 E400                   MOV         #0,R4
      simplexC.c   458        Bdisp_PutDisp_DD();
    00000AA4 4A0B                   JSR         @R10
    00000AA6 0009                   NOP
      simplexC.c   459        nVariables = InputI(0, 21);
    00000AA8 E515                   MOV         #21,R5
    00000AAA BABE                   BSR         _InputI
    00000AAC E400                   MOV         #0,R4
    00000AAE 6C03                   MOV         R0,R12
      simplexC.c   460        PrintMini(0, 28, (unsigned char *)"Press. 1-LP, 2-ILP, 3-Cuts", MINI_OVER);
    00000AB0 D647                   MOV.L       L869+30,R6 ; L614
    00000AB2 E51C                   MOV         #28,R5
    00000AB4 E710                   MOV         #16,R7
    00000AB6 4B0B                   JSR         @R11
    00000AB8 E400                   MOV         #0,R4
      simplexC.c   461        Bdisp_PutDisp_DD();
    00000ABA 4A0B                   JSR         @R10
    00000ABC 0009                   NOP
      simplexC.c   462        problemType = InputI(0, 35);
    00000ABE E523                   MOV         #35,R5
    00000AC0 BAB3                   BSR         _InputI
    00000AC2 E400                   MOV         #0,R4
    00000AC4 1F07                   MOV.L       R0,@(28,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   463        constraints = (double **)malloc(sizeof(double) * nConstraints);
    00000AC6 54F2                   MOV.L       @(8,R15),R4
    00000AC8 4408                   SHLL2       R4
    00000ACA 4400                   SHLL        R4
    00000ACC 4D0B                   JSR         @R13
    00000ACE 2F42                   MOV.L       R4,@R15
    00000AD0 1F06                   MOV.L       R0,@(24,R15)
      simplexC.c   464        rightValues = (double *) malloc(sizeof(double)*nConstraints);
    00000AD2 4D0B                   JSR         @R13
    00000AD4 64F2                   MOV.L       @R15,R4
    00000AD6 1F0A                   MOV.L       R0,@(40,R15)
      simplexC.c   465        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    00000AD8 54F2                   MOV.L       @(8,R15),R4
    00000ADA 4D0B                   JSR         @R13
    00000ADC 4408                   SHLL2       R4
      simplexC.c   466        funcObjtValues = calloc(nVariables+1,sizeof(double));
    00000ADE E508                   MOV         #8,R5
    00000AE0 1F05                   MOV.L       R0,@(20,R15)
    00000AE2 64C3                   MOV         R12,R4
    00000AE4 DD3B                   MOV.L       L869+34,R13; _calloc
    00000AE6 4D0B                   JSR         @R13
    00000AE8 7401                   ADD         #1,R4
      simplexC.c   467        idIntegerVariables = calloc(nVariables,sizeof(int));
    00000AEA E504                   MOV         #4,R5
    00000AEC 1F04                   MOV.L       R0,@(16,R15)
    00000AEE 4D0B                   JSR         @R13
    00000AF0 64C3                   MOV         R12,R4
      simplexC.c   468        idSlopeVariables = calloc(nVariables,sizeof(int));
    00000AF2 E504                   MOV         #4,R5
    00000AF4 1F09                   MOV.L       R0,@(36,R15)
    00000AF6 4D0B                   JSR         @R13
    00000AF8 64C3                   MOV         R12,R4
      simplexC.c   469        id2fasesVariables = calloc(nVariables,sizeof(int));
    00000AFA E504                   MOV         #4,R5
    00000AFC 1F0B                   MOV.L       R0,@(44,R15)
    00000AFE 4D0B                   JSR         @R13
    00000B00 64C3                   MOV         R12,R4
      simplexC.c   470        pInput->nVariablesSlope=0;
    00000B02 E300                   MOV         #0,R3
    00000B04 1F0C                   MOV.L       R0,@(48,R15)
      simplexC.c   471        pInput->nVariables2fases=0;
      simplexC.c   472        for(i=0;i<nVariables;i++)
    00000B06 6DF3                   MOV         R15,R13
    00000B08 1E37                   MOV.L       R3,@(28,R14)
    00000B0A 6233                   MOV         R3,R2
    00000B0C 1E38                   MOV.L       R3,@(32,R14)
    00000B0E 1F31                   MOV.L       R3,@(4,R15)
    00000B10 59F9                   MOV.L       @(36,R15),R9
    00000B12 E301                   MOV         #1,R3
    00000B14 2F32                   MOV.L       R3,@R15
    00000B16 E300                   MOV         #0,R3
    00000B18 3C36                   CMP/HI      R3,R12
    00000B1A 8F30                   BF/S        L800
    00000B1C 7D34                   ADD         #52,R13
    00000B1E              L801:                             
      simplexC.c   473        {
      simplexC.c   474            if(problemType!=TYPE_LP)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B1E 50F7                   MOV.L       @(28,R15),R0
    00000B20 8801                   CMP/EQ      #1,R0
    00000B22 8923                   BT          L802
      simplexC.c   475            {
      simplexC.c   476                Bdisp_AllClr_DDVRAM();
    00000B24 480B                   JSR         @R8
    00000B26 0009                   NOP
      simplexC.c   477                sprintf(strout,"Variable x%d",i+1);
    00000B28 62F2                   MOV.L       @R15,R2
    00000B2A 2F26                   MOV.L       R2,@-R15
    00000B2C D32A                   MOV.L       L869+38,R3 ; L617
    00000B2E 2F36                   MOV.L       R3,@-R15
    00000B30 D22A                   MOV.L       L869+42,R2 ; _sprintf
    00000B32 420B                   JSR         @R2
    00000B34 64D3                   MOV         R13,R4
    00000B36 7F08                   ADD         #8,R15
      simplexC.c   478                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000B38 E710                   MOV         #16,R7
    00000B3A 66D3                   MOV         R13,R6
    00000B3C E500                   MOV         #0,R5
    00000B3E 4B0B                   JSR         @R11
    00000B40 6453                   MOV         R5,R4
      simplexC.c   479                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
    00000B42 E710                   MOV         #16,R7
    00000B44 D626                   MOV.L       L869+46,R6 ; L618
    00000B46 E507                   MOV         #7,R5
    00000B48 4B0B                   JSR         @R11
    00000B4A E400                   MOV         #0,R4
      simplexC.c   480                idIntegerVariables[i] = InputI(0, 14);
    00000B4C E50E                   MOV         #14,R5
    00000B4E BA6C                   BSR         _InputI
    00000B50 E400                   MOV         #0,R4
      simplexC.c   481                Bdisp_PutDisp_DD();
    00000B52 4A0B                   JSR         @R10
    00000B54 2902                   MOV.L       R0,@R9
      simplexC.c   482                memset(strout,0,128);
    00000B56 E500                   MOV         #0,R5
    00000B58 D222                   MOV.L       L869+50,R2 ; _memset
    00000B5A 962B                   MOV.W       L869+2,R6  ; H'0080
    00000B5C 420B                   JSR         @R2
    00000B5E 64D3                   MOV         R13,R4
      simplexC.c   483                if(idIntegerVariables[i]==1)
    00000B60 6092                   MOV.L       @R9,R0
    00000B62 8801                   CMP/EQ      #1,R0
    00000B64 8B02                   BF          L802
      simplexC.c   484                {
      simplexC.c   485                    nVariablesInteger+=1;
    00000B66 52F8                   MOV.L       @(32,R15),R2
    00000B68 7201                   ADD         #1,R2
    00000B6A 1F28                   MOV.L       R2,@(32,R15)
    00000B6C              L802:                             
    00000B6C 53F1                   MOV.L       @(4,R15),R3
    00000B6E 7904                   ADD         #4,R9
    00000B70 7301                   ADD         #1,R3
    00000B72 33C2                   CMP/HS      R12,R3
    00000B74 1F31                   MOV.L       R3,@(4,R15)
    00000B76 62F2                   MOV.L       @R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B78 7201                   ADD         #1,R2
    00000B7A 8FD0                   BF/S        L801
    00000B7C 2F22                   MOV.L       R2,@R15
    00000B7E              L800:                             
      simplexC.c   486                }
      simplexC.c   487            }
      simplexC.c   488        }
      simplexC.c   489        for (i = 0; i < nConstraints; i++)
    00000B7E E300                   MOV         #0,R3
    00000B80 1F33                   MOV.L       R3,@(12,R15)
    00000B82 E201                   MOV         #1,R2
    00000B84 2F22                   MOV.L       R2,@R15
    00000B86 E900                   MOV         #0,R9
    00000B88 53FA                   MOV.L       @(40,R15),R3
    00000B8A 1F31                   MOV.L       R3,@(4,R15)
    00000B8C 52F2                   MOV.L       @(8,R15),R2
    00000B8E 6393                   MOV         R9,R3
    00000B90 3236                   CMP/HI      R3,R2
    00000B92 8B3B                   BF          L804
    00000B94              L805:                             
      simplexC.c   490        {
      simplexC.c   491            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV
                         +ariablesSlope,&pInput->nVariables2fases);
    00000B94 50F6                   MOV.L       @(24,R15),R0
    00000B96 63E3                   MOV         R14,R3
    00000B98 309C                   ADD         R9,R0
    00000B9A 7320                   ADD         #32,R3
    00000B9C 2F06                   MOV.L       R0,@-R15
    00000B9E 2F36                   MOV.L       R3,@-R15
    00000BA0 63E3                   MOV         R14,R3
    00000BA2 731C                   ADD         #28,R3
    00000BA4 2F36                   MOV.L       R3,@-R15
    00000BA6 57F4                   MOV.L       @(16,R15),R7
    00000BA8 56F8                   MOV.L       @(32,R15),R6
    00000BAA 369C                   ADD         R9,R6
    00000BAC 55F3                   MOV.L       @(12,R15),R5
    00000BAE A01B                   BRA         L857
    00000BB0 64C3                   MOV         R12,R4
    00000BB2              L869:                             
    00000BB2 FF4C                   .DATA.W     H'FF4C
    00000BB4 0080                   .DATA.W     H'0080
    00000BB6 0000                   .DATA.W     0
    00000BB8 <00000000>             .DATA.L     _malloc
    00000BBC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000BC0 <00000000>             .DATA.L     _PrintMini
    00000BC4 <00000000>             .DATA.L     L612
    00000BC8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000BCC <00000000>             .DATA.L     L613
    00000BD0 <00000000>             .DATA.L     L614
    00000BD4 <00000000>             .DATA.L     _calloc
    00000BD8 <00000000>             .DATA.L     L617
    00000BDC <00000000>             .DATA.L     _sprintf
    00000BE0 <00000000>             .DATA.L     L618
    00000BE4 <00000000>             .DATA.L     _memset
    00000BE8              L857:                             
    00000BE8 BED0                   BSR         _getInequation
    00000BEA 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BEC 7F08                   ADD         #8,R15
    00000BEE 63F6                   MOV.L       @R15+,R3
    00000BF0 2302                   MOV.L       R0,@R3
    00000BF2 52F3                   MOV.L       @(12,R15),R2
    00000BF4 7201                   ADD         #1,R2
    00000BF6 1F23                   MOV.L       R2,@(12,R15)
    00000BF8 63F2                   MOV.L       @R15,R3
    00000BFA 7301                   ADD         #1,R3
    00000BFC 2F32                   MOV.L       R3,@R15
    00000BFE 51F1                   MOV.L       @(4,R15),R1
    00000C00 7108                   ADD         #8,R1
    00000C02 1F11                   MOV.L       R1,@(4,R15)
    00000C04 53F2                   MOV.L       @(8,R15),R3
    00000C06 3232                   CMP/HS      R3,R2
    00000C08 8FC4                   BF/S        L805
    00000C0A 7904                   ADD         #4,R9
    00000C0C              L804:                             
      simplexC.c   492        }
      simplexC.c   493        
      simplexC.c   494        Bdisp_AllClr_DDVRAM();
    00000C0C 480B                   JSR         @R8
    00000C0E 0009                   NOP
      simplexC.c   495        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    00000C10 D142                   MOV.L       L870+6,R1  ; L621
    00000C12 E201                   MOV         #1,R2
    00000C14 2F26                   MOV.L       R2,@-R15
    00000C16 E300                   MOV         #0,R3
    00000C18 2F36                   MOV.L       R3,@-R15
    00000C1A 2F16                   MOV.L       R1,@-R15
    00000C1C D340                   MOV.L       L870+10,R3 ; _sprintf
    00000C1E 430B                   JSR         @R3
    00000C20 64D3                   MOV         R13,R4
    00000C22 7F0C                   ADD         #12,R15
      simplexC.c   496        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000C24 2FD2                   MOV.L       R13,@R15
    00000C26 66D3                   MOV         R13,R6
    00000C28 E710                   MOV         #16,R7
    00000C2A E500                   MOV         #0,R5
    00000C2C 4B0B                   JSR         @R11
    00000C2E 6453                   MOV         R5,R4
      simplexC.c   497        pInput->funcObjectivePurpose = InputI(0, 7);
    00000C30 E507                   MOV         #7,R5
    00000C32 B9FA                   BSR         _InputI
    00000C34 E400                   MOV         #0,R4
    00000C36 E140                   MOV         #64,R1
    00000C38 31EC                   ADD         R14,R1
      simplexC.c   498        Bdisp_PutDisp_DD();
    00000C3A 4A0B                   JSR         @R10
    00000C3C 2102                   MOV.L       R0,@R1
      simplexC.c   499        memset(strout,0,128);
    00000C3E E500                   MOV         #0,R5
    00000C40 D338                   MOV.L       L870+14,R3 ; _memset
    00000C42 9668                   MOV.W       L870,R6    ; H'0080
    00000C44 430B                   JSR         @R3
    00000C46 64D3                   MOV         R13,R4
      simplexC.c   500        for(i=0;i<nVariables;i++)
    00000C48 E900                   MOV         #0,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C4A 6293                   MOV         R9,R2
    00000C4C 3C26                   CMP/HI      R2,R12
    00000C4E 8B21                   BF          L806
    00000C50              L807:                             
      simplexC.c   501        {
      simplexC.c   502            Bdisp_AllClr_DDVRAM();
    00000C50 480B                   JSR         @R8
    00000C52 0009                   NOP
      simplexC.c   503            sprintf(strout,"Obj value var x%d",i+1);
    00000C54 D334                   MOV.L       L870+18,R3 ; L623
    00000C56 6193                   MOV         R9,R1
    00000C58 D231                   MOV.L       L870+10,R2 ; _sprintf
    00000C5A 7101                   ADD         #1,R1
    00000C5C 2F16                   MOV.L       R1,@-R15
    00000C5E 2F36                   MOV.L       R3,@-R15
    00000C60 420B                   JSR         @R2
    00000C62 64D3                   MOV         R13,R4
      simplexC.c   504            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000C64 56F2                   MOV.L       @(8,R15),R6
    00000C66 E500                   MOV         #0,R5
    00000C68 E710                   MOV         #16,R7
    00000C6A 4B0B                   JSR         @R11
    00000C6C 6453                   MOV         R5,R4
      simplexC.c   505            funcObjtValues[i] = InputD(0, 7);
    00000C6E 6393                   MOV         R9,R3
    00000C70 52F6                   MOV.L       @(24,R15),R2
    00000C72 E507                   MOV         #7,R5
    00000C74 4308                   SHLL2       R3
    00000C76 4300                   SHLL        R3
    00000C78 332C                   ADD         R2,R3
    00000C7A 2F36                   MOV.L       R3,@-R15
    00000C7C B9C0                   BSR         _InputD
    00000C7E E400                   MOV         #0,R4
      simplexC.c   506            Bdisp_PutDisp_DD();
    00000C80 4A0B                   JSR         @R10
    00000C82 7F0C                   ADD         #12,R15
      simplexC.c   507            memset(strout,0,128);
    00000C84 9647                   MOV.W       L870,R6    ; H'0080
    00000C86 E500                   MOV         #0,R5
    00000C88 D226                   MOV.L       L870+14,R2 ; _memset
    00000C8A 420B                   JSR         @R2
    00000C8C 64D3                   MOV         R13,R4
    00000C8E 7901                   ADD         #1,R9
    00000C90 39C2                   CMP/HS      R12,R9
    00000C92 8BDD                   BF          L807
    00000C94              L806:                             
      simplexC.c   508        }
      simplexC.c   509        Bdisp_AllClr_DDVRAM();
    00000C94 480B                   JSR         @R8
    00000C96 0009                   NOP
      simplexC.c   510        sprintf(strout,"Obj value Independent",i+1);
    00000C98 D224                   MOV.L       L870+22,R2 ; L624
    00000C9A 7901                   ADD         #1,R9
    00000C9C D320                   MOV.L       L870+10,R3 ; _sprintf
    00000C9E 2F96                   MOV.L       R9,@-R15
    00000CA0 2F26                   MOV.L       R2,@-R15
    00000CA2 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CA4 64D3                   MOV         R13,R4
      simplexC.c   511        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000CA6 E710                   MOV         #16,R7
    00000CA8 56F2                   MOV.L       @(8,R15),R6
    00000CAA E500                   MOV         #0,R5
    00000CAC 4B0B                   JSR         @R11
    00000CAE 6453                   MOV         R5,R4
      simplexC.c   512        funcObjtValues[nVariables] = InputD(0, 7);
    00000CB0 52F6                   MOV.L       @(24,R15),R2
    00000CB2 E507                   MOV         #7,R5
    00000CB4 63C3                   MOV         R12,R3
    00000CB6 4308                   SHLL2       R3
    00000CB8 4300                   SHLL        R3
    00000CBA 332C                   ADD         R2,R3
    00000CBC 2F36                   MOV.L       R3,@-R15
    00000CBE B99F                   BSR         _InputD
    00000CC0 E400                   MOV         #0,R4
      simplexC.c   513        Bdisp_PutDisp_DD();
    00000CC2 4A0B                   JSR         @R10
    00000CC4 7F0C                   ADD         #12,R15
      simplexC.c   514        pInput->constraints=constraints;
      simplexC.c   515        pInput->rightValues=rightValues;
      simplexC.c   516        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c   517        pInput->nVariables=nVariables;
      simplexC.c   518        pInput->nConstraints=nConstraints;
      simplexC.c   519        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c   520        pInput->idSlopeVariables=idSlopeVariables;
      simplexC.c   521        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c   522        pInput->funcObjtValues=funcObjtValues;
    00000CC6 E044                   MOV         #68,R0
    00000CC8 52F6                   MOV.L       @(24,R15),R2
    00000CCA 1E23                   MOV.L       R2,@(12,R14)
    00000CCC 53FA                   MOV.L       @(40,R15),R3
    00000CCE 1E34                   MOV.L       R3,@(16,R14)
    00000CD0 52F5                   MOV.L       @(20,R15),R2
    00000CD2 1E25                   MOV.L       R2,@(20,R14)
    00000CD4 1EC6                   MOV.L       R12,@(24,R14)
    00000CD6 53F2                   MOV.L       @(8,R15),R3
    00000CD8 1E3A                   MOV.L       R3,@(40,R14)
    00000CDA 52F9                   MOV.L       @(36,R15),R2
    00000CDC 1E2B                   MOV.L       R2,@(44,R14)
    00000CDE 53FB                   MOV.L       @(44,R15),R3
    00000CE0 1E3C                   MOV.L       R3,@(48,R14)
    00000CE2 52FC                   MOV.L       @(48,R15),R2
    00000CE4 1E2D                   MOV.L       R2,@(52,R14)
    00000CE6 53F4                   MOV.L       @(16,R15),R3
    00000CE8 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c   523        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c   524        pInput->modelType=TYPE_INPUT;
    00000CEA E301                   MOV         #1,R3
    00000CEC 52F8                   MOV.L       @(32,R15),R2
      simplexC.c   525        pInput->problemType=problemType;
      simplexC.c   526        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c   527        return pInput;
    00000CEE 60E3                   MOV         R14,R0
    00000CF0 1E29                   MOV.L       R2,@(36,R14)
    00000CF2 1E31                   MOV.L       R3,@(4,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CF4 52F7                   MOV.L       @(28,R15),R2
    00000CF6 2E22                   MOV.L       R2,@R14
    00000CF8 51E8                   MOV.L       @(32,R14),R1
    00000CFA 4115                   CMP/PL      R1
      simplexC.c   528    }
    00000CFC 910C                   MOV.W       L870+2,R1  ; H'00B4
    00000CFE 0329                   MOVT        R3
    00000D00 1E32                   MOV.L       R3,@(8,R14)
    00000D02 3F1C                   ADD         R1,R15
    00000D04 4F26                   LDS.L       @R15+,PR
    00000D06 68F6                   MOV.L       @R15+,R8
    00000D08 69F6                   MOV.L       @R15+,R9
    00000D0A 6AF6                   MOV.L       @R15+,R10
    00000D0C 6BF6                   MOV.L       @R15+,R11
    00000D0E 6CF6                   MOV.L       @R15+,R12
    00000D10 6DF6                   MOV.L       @R15+,R13
    00000D12 000B                   RTS
    00000D14 6EF6                   MOV.L       @R15+,R14
    00000D16              L870:                             
    00000D16 0080                   .DATA.W     H'0080
    00000D18 00B4                   .DATA.W     H'00B4
    00000D1A 0000                   .DATA.W     0
    00000D1C <00000000>             .DATA.L     L621
    00000D20 <00000000>             .DATA.L     _sprintf
    00000D24 <00000000>             .DATA.L     _memset
    00000D28 <00000000>             .DATA.L     L623
    00000D2C <00000000>             .DATA.L     L624
      simplexC.c   529    
      simplexC.c   530    struct execution* selectExecutionMode()
    00000D30              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=148
    00000D30 2FE6                   MOV.L       R14,@-R15
    00000D32 4F22                   STS.L       PR,@-R15
      simplexC.c   531    {
      simplexC.c   532        char strout[128];
      simplexC.c   533        struct execution *ex;
      simplexC.c   534        ex = malloc(sizeof(struct execution));
    00000D34 D34E                   MOV.L       L871+2,R3  ; _malloc
    00000D36 7F80                   ADD         #-128,R15
    00000D38 430B                   JSR         @R3
    00000D3A E414                   MOV         #20,R4
      simplexC.c   535        Bdisp_AllClr_DDVRAM();
    00000D3C D24D                   MOV.L       L871+6,R2  ; _Bdisp_AllClr_DDVRAM
    00000D3E 420B                   JSR         @R2
    00000D40 6E03                   MOV         R0,R14
      simplexC.c   536        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    00000D42 E301                   MOV         #1,R3
    00000D44 D14C                   MOV.L       L871+10,R1 ; L629
    00000D46 E200                   MOV         #0,R2
    00000D48 2F36                   MOV.L       R3,@-R15
    00000D4A 2F26                   MOV.L       R2,@-R15
    00000D4C 2F16                   MOV.L       R1,@-R15
    00000D4E 64F3                   MOV         R15,R4
    00000D50 D34A                   MOV.L       L871+14,R3 ; _sprintf
    00000D52 430B                   JSR         @R3
    00000D54 740C                   ADD         #12,R4
      simplexC.c   537        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D56 E710                   MOV         #16,R7
    00000D58 D249                   MOV.L       L871+18,R2 ; _PrintMini
    00000D5A 66F3                   MOV         R15,R6
    00000D5C 760C                   ADD         #12,R6
    00000D5E E500                   MOV         #0,R5
    00000D60 420B                   JSR         @R2
    00000D62 6453                   MOV         R5,R4
      simplexC.c   538        ex->mode = InputI(0, 7);
    00000D64 E507                   MOV         #7,R5
    00000D66 B960                   BSR         _InputI
    00000D68 E400                   MOV         #0,R4
      simplexC.c   539        Bdisp_PutDisp_DD();
    00000D6A D246                   MOV.L       L871+22,R2 ; _Bdisp_PutDisp_DD
    00000D6C 420B                   JSR         @R2
    00000D6E 2E02                   MOV.L       R0,@R14
      simplexC.c   540        ex->nNodes=0;
      simplexC.c   541        return ex;
      simplexC.c   542    }
    00000D70 917D                   MOV.W       L871,R1    ; H'008C
    00000D72 E300                   MOV         #0,R3
    00000D74 1E34                   MOV.L       R3,@(16,R14)
    00000D76 60E3                   MOV         R14,R0
    00000D78 3F1C                   ADD         R1,R15
    00000D7A 4F26                   LDS.L       @R15+,PR
    00000D7C 000B                   RTS
    00000D7E 6EF6                   MOV.L       @R15+,R14
      simplexC.c   543    
      simplexC.c   544    struct problemStatement* convertModel(struct problemStatement* pInput)
    00000D80              _convertModel:                   ; function: convertModel
                                                           ; frame size=36
    00000D80 2FE6                   MOV.L       R14,@-R15
    00000D82 2FD6                   MOV.L       R13,@-R15
    00000D84 2FC6                   MOV.L       R12,@-R15
    00000D86 6D43                   MOV         R4,R13
      simplexC.c   545    {
      simplexC.c   546        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c   547        struct problemStatement *modelToSolve;
      simplexC.c   548        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
      simplexC.c   549        modelToSolve = malloc(sizeof(struct problemStatement));
    00000D88 D339                   MOV.L       L871+2,R3  ; _malloc
    00000D8A 2FB6                   MOV.L       R11,@-R15
    00000D8C 2FA6                   MOV.L       R10,@-R15
    00000D8E EA00                   MOV         #0,R10
    00000D90 2F96                   MOV.L       R9,@-R15
    00000D92 6CA3                   MOV         R10,R12
    00000D94 2F86                   MOV.L       R8,@-R15
    00000D96 69A3                   MOV         R10,R9
    00000D98 4F22                   STS.L       PR,@-R15
    00000D9A 430B                   JSR         @R3
    00000D9C E44C                   MOV         #76,R4
    00000D9E 6E03                   MOV         R0,R14
      simplexC.c   550        modelToSolve->problemType=pInput->problemType;
    00000DA0 62D2                   MOV.L       @R13,R2
      simplexC.c   551        modelToSolve->nVariablesSlope=pInput->nVariablesSlope;
      simplexC.c   552        modelToSolve->nVariables2fases=pInput->nVariables2fases;
      simplexC.c   553        modelToSolve->nVariablesInteger=pInput->nVariablesInteger;
      simplexC.c   554        modelToSolve->nConstraints=pInput->nConstraints;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   555        modelToSolve->funcObjectivePurpose=pInput->funcObjectivePurpose;
      simplexC.c   556        modelToSolve->is2fasesNeeded=pInput->is2fasesNeeded;
      simplexC.c   557        modelToSolve->nVariables=pInput->nVariables+pInput->nVariablesSlope+pInput->nVariables2fases;
      simplexC.c   558        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(double));
    00000DA2 E508                   MOV         #8,R5
    00000DA4 DB38                   MOV.L       L871+26,R11; _calloc
    00000DA6 E040                   MOV         #64,R0
    00000DA8 2E22                   MOV.L       R2,@R14
    00000DAA 53D7                   MOV.L       @(28,R13),R3
    00000DAC 1E37                   MOV.L       R3,@(28,R14)
    00000DAE 52D8                   MOV.L       @(32,R13),R2
    00000DB0 1E28                   MOV.L       R2,@(32,R14)
    00000DB2 53D9                   MOV.L       @(36,R13),R3
    00000DB4 1E39                   MOV.L       R3,@(36,R14)
    00000DB6 52DA                   MOV.L       @(40,R13),R2
    00000DB8 1E2A                   MOV.L       R2,@(40,R14)
    00000DBA 03DE                   MOV.L       @(R0,R13),R3
    00000DBC 0E36                   MOV.L       R3,@(R0,R14)
    00000DBE 52D2                   MOV.L       @(8,R13),R2
    00000DC0 1E22                   MOV.L       R2,@(8,R14)
    00000DC2 53D7                   MOV.L       @(28,R13),R3
    00000DC4 51D6                   MOV.L       @(24,R13),R1
    00000DC6 313C                   ADD         R3,R1
    00000DC8 52D8                   MOV.L       @(32,R13),R2
    00000DCA 312C                   ADD         R2,R1
    00000DCC 1E16                   MOV.L       R1,@(24,R14)
    00000DCE 6413                   MOV         R1,R4
    00000DD0 4B0B                   JSR         @R11
    00000DD2 7401                   ADD         #1,R4
    00000DD4 E144                   MOV         #68,R1
    00000DD6 31EC                   ADD         R14,R1
    00000DD8 2102                   MOV.L       R0,@R1
      simplexC.c   559        if(modelToSolve->is2fasesNeeded)
    00000DDA 53E2                   MOV.L       @(8,R14),R3
    00000DDC 2338                   TST         R3,R3
    00000DDE 8906                   BT          L812
      simplexC.c   560        {
      simplexC.c   561            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(double));
    00000DE0 54E6                   MOV.L       @(24,R14),R4
    00000DE2 E508                   MOV         #8,R5
    00000DE4 4B0B                   JSR         @R11
    00000DE6 7401                   ADD         #1,R4
    00000DE8 E148                   MOV         #72,R1
    00000DEA 31EC                   ADD         R14,R1
    00000DEC 2102                   MOV.L       R0,@R1
    00000DEE              L812:                             
      simplexC.c   562        }
      simplexC.c   563        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00000DEE E504                   MOV         #4,R5
    00000DF0 4B0B                   JSR         @R11
    00000DF2 54E6                   MOV.L       @(24,R14),R4
    00000DF4 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c   564        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00000DF6 E504                   MOV         #4,R5
    00000DF8 4B0B                   JSR         @R11
    00000DFA 54E6                   MOV.L       @(24,R14),R4
    00000DFC 1E0D                   MOV.L       R0,@(52,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   565        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00000DFE E504                   MOV         #4,R5
    00000E00 4B0B                   JSR         @R11
    00000E02 54EA                   MOV.L       @(40,R14),R4
    00000E04 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   566        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00000E06 E504                   MOV         #4,R5
    00000E08 4B0B                   JSR         @R11
    00000E0A 54EA                   MOV.L       @(40,R14),R4
    00000E0C 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c   567        memset(modelToSolve->idConstraintTo2fasesVar,-1,modelToSolve->nConstraints);
    00000E0E E5FF                   MOV         #-1,R5
    00000E10 D31E                   MOV.L       L871+30,R3 ; _memset
    00000E12 56EA                   MOV.L       @(40,R14),R6
    00000E14 430B                   JSR         @R3
    00000E16 6403                   MOV         R0,R4
      simplexC.c   568        memset(modelToSolve->idConstraintToSlopeVar,-1,modelToSolve->nConstraints);
    00000E18 56EA                   MOV.L       @(40,R14),R6
    00000E1A E5FF                   MOV         #-1,R5
    00000E1C D21B                   MOV.L       L871+30,R2 ; _memset
    00000E1E 420B                   JSR         @R2
    00000E20 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   569        //SET ID TYPES OF VARIABLES
      simplexC.c   570        for(i=0;i<modelToSolve->nVariables;i++)
    00000E22 E501                   MOV         #1,R5
    00000E24 A016                   BRA         L813
    00000E26 64A3                   MOV         R10,R4
    00000E28              L814:                             
      simplexC.c   571        {
      simplexC.c   572            if(i>=pInput->nVariables && i<pInput->nVariables+pInput->nVariablesSlope)
    00000E28 56D6                   MOV.L       @(24,R13),R6
    00000E2A 3463                   CMP/GE      R6,R4
    00000E2C 8B08                   BF          L815
    00000E2E 53D7                   MOV.L       @(28,R13),R3
    00000E30 336C                   ADD         R6,R3
    00000E32 3433                   CMP/GE      R3,R4
    00000E34 8904                   BT          L815
      simplexC.c   573            {
      simplexC.c   574                modelToSolve->idSlopeVariables[i]=1;
    00000E36 6343                   MOV         R4,R3
    00000E38 50EC                   MOV.L       @(48,R14),R0
    00000E3A 4308                   SHLL2       R3
    00000E3C A009                   BRA         L816
    00000E3E 0356                   MOV.L       R5,@(R0,R3)
    00000E40              L815:                             
      simplexC.c   575            }else if(i>=pInput->nVariables+pInput->nVariablesSlope)
    00000E40 53D7                   MOV.L       @(28,R13),R3
    00000E42 52D6                   MOV.L       @(24,R13),R2
    00000E44 323C                   ADD         R3,R2
    00000E46 3423                   CMP/GE      R2,R4
    00000E48 8B03                   BF          L816
      simplexC.c   576            {
      simplexC.c   577                modelToSolve->id2fasesVariables[i]=1;
    00000E4A 6243                   MOV         R4,R2
    00000E4C 50ED                   MOV.L       @(52,R14),R0
    00000E4E 4208                   SHLL2       R2
    00000E50 0256                   MOV.L       R5,@(R0,R2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E52              L816:                             
    00000E52 7401                   ADD         #1,R4
    00000E54              L813:                             
    00000E54 53E6                   MOV.L       @(24,R14),R3
    00000E56 3433                   CMP/GE      R3,R4
    00000E58 8BE6                   BF          L814
      simplexC.c   578            }
      simplexC.c   579            
      simplexC.c   580        }
      simplexC.c   581        for(i=0;i<modelToSolve->nVariables;i++)
    00000E5A A049                   BRA         L818
    00000E5C 64A3                   MOV         R10,R4
    00000E5E              L819:                             
      simplexC.c   582        {
      simplexC.c   583            if(modelToSolve->idSlopeVariables[i])
    00000E5E 6243                   MOV         R4,R2
    00000E60 50EC                   MOV.L       @(48,R14),R0
    00000E62 4208                   SHLL2       R2
    00000E64 032E                   MOV.L       @(R0,R2),R3
    00000E66 2338                   TST         R3,R3
    00000E68 8927                   BT          L820
      simplexC.c   584            {
      simplexC.c   585                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    00000E6A A023                   BRA         L821
    00000E6C 6593                   MOV         R9,R5
    00000E6E              L871:                             
    00000E6E 008C                   .DATA.W     H'008C
    00000E70 <00000000>             .DATA.L     _malloc
    00000E74 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000E78 <00000000>             .DATA.L     L629
    00000E7C <00000000>             .DATA.L     _sprintf
    00000E80 <00000000>             .DATA.L     _PrintMini
    00000E84 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000E88 <00000000>             .DATA.L     _calloc
    00000E8C <00000000>             .DATA.L     _memset
    00000E90              L822:                             
      simplexC.c   586                {
      simplexC.c   587                    if(pInput->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||pInput->inequalitySigns[j]==INE_GR
                         +EATER_OR_EQUAL_THAN)
    00000E90 50D5                   MOV.L       @(20,R13),R0
    00000E92 6653                   MOV         R5,R6
    00000E94 4608                   SHLL2       R6
    00000E96 066E                   MOV.L       @(R0,R6),R6
    00000E98 6063                   MOV         R6,R0
    00000E9A 8801                   CMP/EQ      #1,R0
    00000E9C 8902                   BT          L824
    00000E9E 6063                   MOV         R6,R0
    00000EA0 8802                   CMP/EQ      #2,R0
    00000EA2 8B06                   BF          L823
    00000EA4              L824:                             
      simplexC.c   588                    {
      simplexC.c   589                        modelToSolve->idConstraintToSlopeVar[j]=i;
    00000EA4 50EE                   MOV.L       @(56,R14),R0
      simplexC.c   590                        nextConstraintSlopeSet=j+1;
    00000EA6 6953                   MOV         R5,R9
    00000EA8 6353                   MOV         R5,R3
    00000EAA 4308                   SHLL2       R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EAC 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c   591                        break;
    00000EAE A004                   BRA         L820
    00000EB0 7901                   ADD         #1,R9
    00000EB2              L823:                             
    00000EB2 7501                   ADD         #1,R5
    00000EB4              L821:                             
    00000EB4 53EA                   MOV.L       @(40,R14),R3
    00000EB6 3533                   CMP/GE      R3,R5
    00000EB8 8BEA                   BF          L822
    00000EBA              L820:                             
      simplexC.c   592                    }
      simplexC.c   593                }
      simplexC.c   594            }
      simplexC.c   595            if(modelToSolve->id2fasesVariables[i])
    00000EBA 6143                   MOV         R4,R1
    00000EBC 50ED                   MOV.L       @(52,R14),R0
    00000EBE 4108                   SHLL2       R1
    00000EC0 031E                   MOV.L       @(R0,R1),R3
    00000EC2 2338                   TST         R3,R3
    00000EC4 8913                   BT          L826
      simplexC.c   596            {
      simplexC.c   597                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    00000EC6 A00F                   BRA         L827
    00000EC8 65C3                   MOV         R12,R5
    00000ECA              L828:                             
    00000ECA 6653                   MOV         R5,R6
    00000ECC 50D5                   MOV.L       @(20,R13),R0
    00000ECE 4608                   SHLL2       R6
    00000ED0 076E                   MOV.L       @(R0,R6),R7
    00000ED2 2778                   TST         R7,R7
    00000ED4 8902                   BT          L830
    00000ED6 6073                   MOV         R7,R0
    00000ED8 8802                   CMP/EQ      #2,R0
    00000EDA 8B04                   BF          L829
    00000EDC              L830:                             
      simplexC.c   598                {
      simplexC.c   599                    if(pInput->inequalitySigns[j]==INE_EQUAL ||pInput->inequalitySigns[j]==INE_GREATER_OR_EQUA
                         +L_THAN)
      simplexC.c   600                    {
      simplexC.c   601                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    00000EDC 50EF                   MOV.L       @(60,R14),R0
      simplexC.c   602                        nextConstraint2fasesSet=j+1;
    00000EDE 6C53                   MOV         R5,R12
    00000EE0 0646                   MOV.L       R4,@(R0,R6)
      simplexC.c   603                        break;
    00000EE2 A004                   BRA         L826
    00000EE4 7C01                   ADD         #1,R12
    00000EE6              L829:                             
    00000EE6 7501                   ADD         #1,R5
    00000EE8              L827:                             
    00000EE8 53EA                   MOV.L       @(40,R14),R3
    00000EEA 3533                   CMP/GE      R3,R5
    00000EEC 8BED                   BF          L828
    00000EEE              L826:                             
    00000EEE 7401                   ADD         #1,R4
    00000EF0              L818:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EF0 53E6                   MOV.L       @(24,R14),R3
    00000EF2 3433                   CMP/GE      R3,R4
    00000EF4 8BB3                   BF          L819
      simplexC.c   604                    }
      simplexC.c   605                }
      simplexC.c   606            }
      simplexC.c   607        }
      simplexC.c   608        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c   609        modelToSolve->constraints=(double **)malloc(sizeof(double) * modelToSolve->nConstraints);
    00000EF6 54EA                   MOV.L       @(40,R14),R4
    00000EF8 D35F                   MOV.L       L872,R3    ; _malloc
    00000EFA 4408                   SHLL2       R4
    00000EFC 430B                   JSR         @R3
    00000EFE 4400                   SHLL        R4
    00000F00 1E03                   MOV.L       R0,@(12,R14)
      simplexC.c   610        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(double));
    00000F02 E508                   MOV         #8,R5
    00000F04 4B0B                   JSR         @R11
    00000F06 54EA                   MOV.L       @(40,R14),R4
    00000F08 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c   611        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    00000F0A E504                   MOV         #4,R5
    00000F0C 4B0B                   JSR         @R11
    00000F0E 54EA                   MOV.L       @(40,R14),R4
    00000F10 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c   612        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00000F12 E504                   MOV         #4,R5
    00000F14 4B0B                   JSR         @R11
    00000F16 54E6                   MOV.L       @(24,R14),R4
    00000F18 1E0B                   MOV.L       R0,@(44,R14)
      simplexC.c   613        
      simplexC.c   614    
      simplexC.c   615        for(i=0;i<modelToSolve->nConstraints;i++)
    00000F1A A068                   BRA         L832
    00000F1C 68A3                   MOV         R10,R8
    00000F1E              L833:                             
      simplexC.c   616        {
      simplexC.c   617            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(double));
    00000F1E 6C83                   MOV         R8,R12
    00000F20 50E3                   MOV.L       @(12,R14),R0
    00000F22 E508                   MOV         #8,R5
    00000F24 4C08                   SHLL2       R12
    00000F26 30CC                   ADD         R12,R0
    00000F28 2F06                   MOV.L       R0,@-R15
    00000F2A 4B0B                   JSR         @R11
    00000F2C 54E6                   MOV.L       @(24,R14),R4
    00000F2E 63F6                   MOV.L       @R15+,R3
    00000F30 2302                   MOV.L       R0,@R3
      simplexC.c   618            for(j=0;j<modelToSolve->nVariables;j++)//Copiar variables de entrada
    00000F32 A04B                   BRA         L834
    00000F34 64A3                   MOV         R10,R4
    00000F36              L835:                             
    00000F36 6943                   MOV         R4,R9
    00000F38 53D6                   MOV.L       @(24,R13),R3
    00000F3A 4908                   SHLL2       R9
    00000F3C 4900                   SHLL        R9
    00000F3E 3433                   CMP/GE      R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F40 8911                   BT          L836
      simplexC.c   619            {
      simplexC.c   620                if(j<pInput->nVariables)
      simplexC.c   621                {
      simplexC.c   622                    modelToSolve->constraints[i][j]=pInput->constraints[i][j];
    00000F42 50E3                   MOV.L       @(12,R14),R0
    00000F44 03CE                   MOV.L       @(R0,R12),R3
    00000F46 339C                   ADD         R9,R3
    00000F48 50D3                   MOV.L       @(12,R13),R0
    00000F4A 02CE                   MOV.L       @(R0,R12),R2
    00000F4C 329C                   ADD         R9,R2
    00000F4E 6123                   MOV         R2,R1
    00000F50 6212                   MOV.L       @R1,R2
    00000F52 6033                   MOV         R3,R0
    00000F54 2022                   MOV.L       R2,@R0
    00000F56 5211                   MOV.L       @(4,R1),R2
    00000F58 1021                   MOV.L       R2,@(4,R0)
      simplexC.c   623                    modelToSolve->idIntegerVariables[i]=pInput->idIntegerVariables[i];
    00000F5A 52EB                   MOV.L       @(44,R14),R2
    00000F5C 50DB                   MOV.L       @(44,R13),R0
    00000F5E 32CC                   ADD         R12,R2
    00000F60 03CE                   MOV.L       @(R0,R12),R3
    00000F62 A032                   BRA         L837
    00000F64 2232                   MOV.L       R3,@R2
    00000F66              L836:                             
      simplexC.c   624                }else if(pInput->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToSolve->idConstraintTo
                         +SlopeVar[i])
    00000F66 50D5                   MOV.L       @(20,R13),R0
    00000F68 00CE                   MOV.L       @(R0,R12),R0
    00000F6A 8801                   CMP/EQ      #1,R0
    00000F6C 8B09                   BF          L838
    00000F6E 50EE                   MOV.L       @(56,R14),R0
    00000F70 02CE                   MOV.L       @(R0,R12),R2
    00000F72 3420                   CMP/EQ      R2,R4
    00000F74 8B05                   BF          L838
      simplexC.c   625                {
      simplexC.c   626                    modelToSolve->constraints[i][j]=1;
    00000F76 50E3                   MOV.L       @(12,R14),R0
    00000F78 D140                   MOV.L       L872+4,R1  ; H'3FF00000
    00000F7A 02CE                   MOV.L       @(R0,R12),R2
    00000F7C 329C                   ADD         R9,R2
    00000F7E A00D                   BRA         L858
    00000F80 6323                   MOV         R2,R3
    00000F82              L838:                             
      simplexC.c   627                }else if(pInput->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==modelToSolve->idConstrain
                         +tToSlopeVar[i])
    00000F82 50D5                   MOV.L       @(20,R13),R0
    00000F84 00CE                   MOV.L       @(R0,R12),R0
    00000F86 8802                   CMP/EQ      #2,R0
    00000F88 8B0C                   BF          L840
    00000F8A 50EE                   MOV.L       @(56,R14),R0
    00000F8C 02CE                   MOV.L       @(R0,R12),R2
    00000F8E 3420                   CMP/EQ      R2,R4
    00000F90 8B08                   BF          L840
      simplexC.c   628                {
      simplexC.c   629                    modelToSolve->constraints[i][j]=-1;
    00000F92 50E3                   MOV.L       @(12,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F94 D13A                   MOV.L       L872+8,R1  ; H'BFF00000
    00000F96 02CE                   MOV.L       @(R0,R12),R2
    00000F98 329C                   ADD         R9,R2
    00000F9A 6323                   MOV         R2,R3
    00000F9C              L858:                             
    00000F9C 2312                   MOV.L       R1,@R3
    00000F9E E100                   MOV         #0,R1
    00000FA0 A013                   BRA         L837
    00000FA2 1311                   MOV.L       R1,@(4,R3)
    00000FA4              L840:                             
      simplexC.c   630                }else if((pInput->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || pInput->inequalitySigns[i]=
                         +=INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    00000FA4 50D5                   MOV.L       @(20,R13),R0
    00000FA6 00CE                   MOV.L       @(R0,R12),R0
    00000FA8 8802                   CMP/EQ      #2,R0
    00000FAA 8D02                   BT/S        L843
    00000FAC 6503                   MOV         R0,R5
    00000FAE 2558                   TST         R5,R5
    00000FB0 8B0B                   BF          L837
    00000FB2              L843:                             
    00000FB2 50EF                   MOV.L       @(60,R14),R0
    00000FB4 03CE                   MOV.L       @(R0,R12),R3
    00000FB6 3430                   CMP/EQ      R3,R4
    00000FB8 8B07                   BF          L837
      simplexC.c   631                {
      simplexC.c   632                    modelToSolve->constraints[i][j]=1;
    00000FBA 50E3                   MOV.L       @(12,R14),R0
    00000FBC D12F                   MOV.L       L872+4,R1  ; H'3FF00000
    00000FBE 03CE                   MOV.L       @(R0,R12),R3
    00000FC0 339C                   ADD         R9,R3
    00000FC2 6233                   MOV         R3,R2
    00000FC4 2212                   MOV.L       R1,@R2
    00000FC6 E100                   MOV         #0,R1
    00000FC8 1211                   MOV.L       R1,@(4,R2)
    00000FCA              L837:                             
    00000FCA 7401                   ADD         #1,R4
    00000FCC              L834:                             
    00000FCC 53E6                   MOV.L       @(24,R14),R3
    00000FCE 3433                   CMP/GE      R3,R4
    00000FD0 8BB1                   BF          L835
      simplexC.c   633                }
      simplexC.c   634            }
      simplexC.c   635            modelToSolve->rightValues[i]=pInput->rightValues[i];
    00000FD2 6483                   MOV         R8,R4
    00000FD4 53E4                   MOV.L       @(16,R14),R3
    00000FD6 4408                   SHLL2       R4
    00000FD8 52D4                   MOV.L       @(16,R13),R2
    00000FDA 7801                   ADD         #1,R8
    00000FDC 4400                   SHLL        R4
    00000FDE 334C                   ADD         R4,R3
    00000FE0 324C                   ADD         R4,R2
    00000FE2 6123                   MOV         R2,R1
    00000FE4 6212                   MOV.L       @R1,R2
    00000FE6 6033                   MOV         R3,R0
    00000FE8 2022                   MOV.L       R2,@R0
    00000FEA 5211                   MOV.L       @(4,R1),R2
    00000FEC 1021                   MOV.L       R2,@(4,R0)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FEE              L832:                             
    00000FEE 53EA                   MOV.L       @(40,R14),R3
    00000FF0 3833                   CMP/GE      R3,R8
    00000FF2 8B94                   BF          L833
      simplexC.c   636        }
      simplexC.c   637    
      simplexC.c   638        //Create new obj funct
      simplexC.c   639        for(i=0;i<modelToSolve->nVariables;i++)
    00000FF4 A020                   BRA         L844
    00000FF6 64A3                   MOV         R10,R4
    00000FF8              L845:                             
    00000FF8 52D6                   MOV.L       @(24,R13),R2
    00000FFA 6C43                   MOV         R4,R12
    00000FFC 4C08                   SHLL2       R12
    00000FFE 4C00                   SHLL        R12
    00001000 3423                   CMP/GE      R2,R4
    00001002 890B                   BT          L846
      simplexC.c   640        {
      simplexC.c   641            if(i<pInput->nVariables)
      simplexC.c   642            {
      simplexC.c   643                modelToSolve->funcObjtValues[i]=pInput->funcObjtValues[i];
    00001004 E044                   MOV         #68,R0
    00001006 01EE                   MOV.L       @(R0,R14),R1
    00001008 03DE                   MOV.L       @(R0,R13),R3
    0000100A 31CC                   ADD         R12,R1
    0000100C 33CC                   ADD         R12,R3
    0000100E 6233                   MOV         R3,R2
    00001010 6322                   MOV.L       @R2,R3
    00001012 6013                   MOV         R1,R0
    00001014 2032                   MOV.L       R3,@R0
    00001016 5321                   MOV.L       @(4,R2),R3
    00001018 A00D                   BRA         L847
    0000101A 1031                   MOV.L       R3,@(4,R0)
    0000101C              L846:                             
      simplexC.c   644            }else if(i>=(pInput->nVariables+pInput->nVariablesSlope))
    0000101C 53D7                   MOV.L       @(28,R13),R3
    0000101E 52D6                   MOV.L       @(24,R13),R2
    00001020 323C                   ADD         R3,R2
    00001022 3423                   CMP/GE      R2,R4
    00001024 8B07                   BF          L847
      simplexC.c   645            {
      simplexC.c   646                modelToSolve->funcObjtValues2Fases[i]=1;
    00001026 E048                   MOV         #72,R0
    00001028 D114                   MOV.L       L872+4,R1  ; H'3FF00000
    0000102A 02EE                   MOV.L       @(R0,R14),R2
    0000102C 32CC                   ADD         R12,R2
    0000102E 6323                   MOV         R2,R3
    00001030 2312                   MOV.L       R1,@R3
    00001032 E100                   MOV         #0,R1
    00001034 1311                   MOV.L       R1,@(4,R3)
    00001036              L847:                             
    00001036 7401                   ADD         #1,R4
    00001038              L844:                             
    00001038 53E6                   MOV.L       @(24,R14),R3
    0000103A 3433                   CMP/GE      R3,R4
    0000103C 8BDC                   BF          L845
      simplexC.c   647            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   648        }
      simplexC.c   649        modelToSolve->funcObjtValues[modelToSolve->nVariables]=pInput->funcObjtValues[pInput->nVariables];
    0000103E E044                   MOV         #68,R0
    00001040 52D6                   MOV.L       @(24,R13),R2
    00001042 51E6                   MOV.L       @(24,R14),R1
    00001044 03EE                   MOV.L       @(R0,R14),R3
    00001046 4208                   SHLL2       R2
    00001048 4108                   SHLL2       R1
    0000104A 4100                   SHLL        R1
    0000104C 313C                   ADD         R3,R1
    0000104E 4200                   SHLL        R2
    00001050 03DE                   MOV.L       @(R0,R13),R3
    00001052 6013                   MOV         R1,R0
    00001054 323C                   ADD         R3,R2
    00001056 6323                   MOV         R2,R3
    00001058 6232                   MOV.L       @R3,R2
    0000105A 2022                   MOV.L       R2,@R0
    0000105C 5231                   MOV.L       @(4,R3),R2
      simplexC.c   650        modelToSolve->modelType=TYPE_SOLVE;
    0000105E E302                   MOV         #2,R3
    00001060 1021                   MOV.L       R2,@(4,R0)
      simplexC.c   651        return modelToSolve;
    00001062 60E3                   MOV         R14,R0
    00001064 1E31                   MOV.L       R3,@(4,R14)
      simplexC.c   652    }
    00001066 4F26                   LDS.L       @R15+,PR
    00001068 68F6                   MOV.L       @R15+,R8
    0000106A 69F6                   MOV.L       @R15+,R9
    0000106C 6AF6                   MOV.L       @R15+,R10
    0000106E 6BF6                   MOV.L       @R15+,R11
    00001070 6CF6                   MOV.L       @R15+,R12
    00001072 6DF6                   MOV.L       @R15+,R13
    00001074 000B                   RTS
    00001076 6EF6                   MOV.L       @R15+,R14
    00001078              L872:                             
    00001078 <00000000>             .DATA.L     _malloc
    0000107C 3FF00000               .DATA.L     H'3FF00000
    00001080 BFF00000               .DATA.L     H'BFF00000
      simplexC.c   653    
      simplexC.c   654    int AddIn_main(int isAppli, unsigned short OptionNum)
    00001084              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=152
    00001084 2FE6                   MOV.L       R14,@-R15
    00001086 4F22                   STS.L       PR,@-R15
    00001088 904B                   MOV.W       L873,R0    ; H'FF7C
    0000108A 3F0C                   ADD         R0,R15
      simplexC.c   655    {
      simplexC.c   656        char str[128];
      simplexC.c   657        struct execution *ex;
      simplexC.c   658        ex = selectExecutionMode();
    0000108C BE50                   BSR         _selectExecutionMode
    0000108E 0009                   NOP
    00001090 6E03                   MOV         R0,R14
      simplexC.c   659        if(ex->mode==MODE_FULL_EXECUTION)
    00001092 62E2                   MOV.L       @R14,R2
    00001094 2228                   TST         R2,R2
    00001096 8B29                   BF          L850




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   660        {
      simplexC.c   661            ex->initialProblemStatement=getProblemInputs();
    00001098 BCE0                   BSR         _getProblemInputs
    0000109A 0009                   NOP
      simplexC.c   662            Bdisp_AllClr_DDVRAM();
    0000109C D222                   MOV.L       L873+6,R2  ; _Bdisp_AllClr_DDVRAM
    0000109E 420B                   JSR         @R2
    000010A0 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c   663            sprintf(str,"nSlope %d, N2F %d",ex->initialProblemStatement->nVariablesSlope,ex->initialProblemSta
                         +tement->nVariables2fases);
    000010A2 53E1                   MOV.L       @(4,R14),R3
    000010A4 2F32                   MOV.L       R3,@R15
    000010A6 5238                   MOV.L       @(32,R3),R2
    000010A8 2F26                   MOV.L       R2,@-R15
    000010AA 51F1                   MOV.L       @(4,R15),R1
    000010AC D21F                   MOV.L       L873+10,R2 ; L665
    000010AE 5317                   MOV.L       @(28,R1),R3
    000010B0 2F36                   MOV.L       R3,@-R15
    000010B2 2F26                   MOV.L       R2,@-R15
    000010B4 D31E                   MOV.L       L873+14,R3 ; _sprintf
    000010B6 64F3                   MOV         R15,R4
    000010B8 430B                   JSR         @R3
    000010BA 7410                   ADD         #16,R4
      simplexC.c   664            PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
    000010BC D21D                   MOV.L       L873+18,R2 ; _PrintMini
    000010BE 7F0C                   ADD         #12,R15
    000010C0 E710                   MOV         #16,R7
    000010C2 66F3                   MOV         R15,R6
    000010C4 7604                   ADD         #4,R6
    000010C6 E500                   MOV         #0,R5
    000010C8 420B                   JSR         @R2
    000010CA 6453                   MOV         R5,R4
      simplexC.c   665            Bdisp_PutDisp_DD();
    000010CC D31A                   MOV.L       L873+22,R3 ; _Bdisp_PutDisp_DD
    000010CE 430B                   JSR         @R3
    000010D0 0009                   NOP
      simplexC.c   666            Sleep(3000);
    000010D2 9427                   MOV.W       L873+2,R4  ; H'0BB8
    000010D4 D219                   MOV.L       L873+26,R2 ; _Sleep
    000010D6 420B                   JSR         @R2
    000010D8 0009                   NOP
      simplexC.c   667            printStatementMenu(ex->initialProblemStatement);
    000010DA B936                   BSR         _printStatementMenu
    000010DC 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   668            ex->canonicalStatement=convertModel(ex->initialProblemStatement);
    000010DE BE4F                   BSR         _convertModel
    000010E0 54E1                   MOV.L       @(4,R14),R4
    000010E2 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c   669            printStatementMenu(ex->canonicalStatement);
    000010E4 B931                   BSR         _printStatementMenu
    000010E6 6403                   MOV         R0,R4
    000010E8 A013                   BRA         L851
    000010EA 0009                   NOP
    000010EC              L850:                             
      simplexC.c   670        }else if(ex->mode==MODE_INPUT_TABLE)
    000010EC 60E2                   MOV.L       @R14,R0
    000010EE 8801                   CMP/EQ      #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010F0 890F                   BT          L851
      simplexC.c   671        {
      simplexC.c   672            //TODO
      simplexC.c   673        }else
      simplexC.c   674        {
      simplexC.c   675            Bdisp_AllClr_DDVRAM();
    000010F2 D30D                   MOV.L       L873+6,R3  ; _Bdisp_AllClr_DDVRAM
    000010F4 430B                   JSR         @R3
    000010F6 0009                   NOP
      simplexC.c   676            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    000010F8 D611                   MOV.L       L873+30,R6 ; L462
    000010FA E500                   MOV         #0,R5
    000010FC D20D                   MOV.L       L873+18,R2 ; _PrintMini
    000010FE E710                   MOV         #16,R7
    00001100 420B                   JSR         @R2
    00001102 6453                   MOV         R5,R4
      simplexC.c   677            Bdisp_PutDisp_DD();
    00001104 D30C                   MOV.L       L873+22,R3 ; _Bdisp_PutDisp_DD
    00001106 430B                   JSR         @R3
    00001108 0009                   NOP
      simplexC.c   678            Sleep(3000);
    0000110A 940B                   MOV.W       L873+2,R4  ; H'0BB8
    0000110C D20B                   MOV.L       L873+26,R2 ; _Sleep
    0000110E 420B                   JSR         @R2
    00001110 0009                   NOP
    00001112              L851:                             
      simplexC.c   679        }
      simplexC.c   680        freeMemoryExecution(ex);
    00001112 D30C                   MOV.L       L873+34,R3 ; _freeMemoryExecution
    00001114 430B                   JSR         @R3
    00001116 64E3                   MOV         R14,R4
      simplexC.c   681        
      simplexC.c   682    }
    00001118 9105                   MOV.W       L873+4,R1  ; H'0084
    0000111A 3F1C                   ADD         R1,R15
    0000111C 4F26                   LDS.L       @R15+,PR
    0000111E 000B                   RTS
    00001120 6EF6                   MOV.L       @R15+,R14
    00001122              L873:                             
    00001122 FF7C                   .DATA.W     H'FF7C
    00001124 0BB8                   .DATA.W     H'0BB8
    00001126 0084                   .DATA.W     H'0084
    00001128 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000112C <00000000>             .DATA.L     L665
    00001130 <00000000>             .DATA.L     _sprintf
    00001134 <00000000>             .DATA.L     _PrintMini
    00001138 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000113C <00000000>             .DATA.L     _Sleep
    00001140 <00000000>             .DATA.L     L462
    00001144 <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c   683    
      simplexC.c   684    #pragma section _BR_Size
      simplexC.c   685    unsigned long BR_Size;
      simplexC.c   686    #pragma section
      simplexC.c   687    
      simplexC.c   688    #pragma section _TOP
      simplexC.c   689    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   690    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
      simplexC.c   691    {
      simplexC.c   692        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L874+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L874:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c   693    }
      simplexC.c   694    
      simplexC.c   695    #pragma section
C   00000000              L459:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              L460:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L461:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L462:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L468:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L469:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L482:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C204F424A   
             2E20457869   
             74202564     
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L483:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L484:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L485:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"
             747261696E   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             74733A2025   
             642C204E56   
             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L487:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L488:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   
             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L490:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L493:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L495:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L504:
    000000CC 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    000000EC 00                     .DATA.B     H'00
    000000ED 00000001               .RES.B      1
    000000EE 00000002               .RES.W      1
    000000F0              L506:
    000000F0 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   
             6A2066756E   
             632E         
    00000101 00                     .DATA.B     H'00
    00000102 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000104              L508:
    00000104 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    0000012C 00                     .DATA.B     H'00
    0000012D 00000001               .RES.B      1
    0000012E 00000002               .RES.W      1
    00000130              L509:
    00000130 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       
    00000142 00                     .DATA.B     H'00
    00000143 00000001               .RES.B      1
    00000144              L523:
    00000144 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   
             2564         
    00000164 00                     .DATA.B     H'00
    00000165 00000001               .RES.B      1
    00000166 00000002               .RES.W      1
    00000168              L525:
    00000168 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    0000017A 00                     .DATA.B     H'00
    0000017B 00000001               .RES.B      1
    0000017C              L527:
    0000017C 20536C6F70             .SDATA      " Slope"
             65           
    00000182 00                     .DATA.B     H'00
    00000183 00000001               .RES.B      1
    00000184              L529:
    00000184 204475616C             .SDATA      " Dual"
    00000189 00                     .DATA.B     H'00
    0000018A 00000002               .RES.W      1
    0000018C              L531:
    0000018C 20496E74               .SDATA      " Int"
    00000190 00                     .DATA.B     H'00
    00000191 00000001               .RES.B      1
    00000192 00000002               .RES.W      1
    00000194              L539:
    00000194 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001AA 00                     .DATA.B     H'00
    000001AB 00000001               .RES.B      1
    000001AC              L546:
    000001AC 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    000001C5 00                     .DATA.B     H'00
    000001C6 00000002               .RES.W      1
    000001C8              L554:
    000001C8 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   
             656E752E20   
             2564206578   
             6974         
    000001E8 00                     .DATA.B     H'00
    000001E9 00000001               .RES.B      1
    000001EA 00000002               .RES.W      1
    000001EC              L555:
    000001EC 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    000001F7 00                     .DATA.B     H'00
    000001F8              L556:
    000001F8 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    00000203 00                     .DATA.B     H'00
    00000204              L557:
    00000204 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    00000210 00                     .DATA.B     H'00
    00000211 00000001               .RES.B      1
    00000212 00000002               .RES.W      1
    00000214              L565:
    00000214 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    0000022D 00                     .DATA.B     H'00
    0000022E 00000002               .RES.W      1
    00000230              L574:
    00000230 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    00000251 00                     .DATA.B     H'00
    00000252 00000002               .RES.W      1
    00000254              L575:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000254 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    00000270 00                     .DATA.B     H'00
    00000271 00000001               .RES.B      1
    00000272 00000002               .RES.W      1
    00000274              L582:
    00000274 436F6E7374             .SDATA      "Constraint: %d, Right Value"
             7261696E74   
             3A2025642C   
             2052696768   
             742056616C   
             7565         
    0000028F 00                     .DATA.B     H'00
    00000290              L595:
    00000290 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   
             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    000002AC 00                     .DATA.B     H'00
    000002AD 00000001               .RES.B      1
    000002AE 00000002               .RES.W      1
    000002B0              L612:
    000002B0 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    000002BD 00                     .DATA.B     H'00
    000002BE 00000002               .RES.W      1
    000002C0              L613:
    000002C0 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    000002CB 00                     .DATA.B     H'00
    000002CC              L614:
    000002CC 5072657373             .SDATA      "Press. 1-LP, 2-ILP, 3-Cuts"
             2E20312D4C   
             502C20322D   
             494C502C20   
             332D437574   
             73           
    000002E6 00                     .DATA.B     H'00
    000002E7 00000001               .RES.B      1
    000002E8              L617:
    000002E8 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    000002F4 00                     .DATA.B     H'00
    000002F5 00000001               .RES.B      1
    000002F6 00000002               .RES.W      1
    000002F8              L618:
    000002F8 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             20496E7420   
             7661722C20   
             30206E6F     
    00000310 00                     .DATA.B     H'00
    00000311 00000001               .RES.B      1
    00000312 00000002               .RES.W      1
    00000314              L621:
    00000314 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   
             25642C204D   
             6178202564   
    00000328 00                     .DATA.B     H'00
    00000329 00000001               .RES.B      1
    0000032A 00000002               .RES.W      1
    0000032C              L623:
    0000032C 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    0000033D 00                     .DATA.B     H'00
    0000033E 00000002               .RES.W      1
    00000340              L624:
    00000340 4F626A2076             .SDATA      "Obj value Independent"
             616C756520   
             496E646570   
             656E64656E   
             74           
    00000355 00                     .DATA.B     H'00
    00000356 00000002               .RES.W      1
    00000358              L629:
    00000358 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    0000036F 00                     .DATA.B     H'00
    00000370              L665:
    00000370 6E536C6F70             .SDATA      "nSlope %d, N2F %d"
             652025642C   
             204E324620   
             2564         
    00000381 00                     .DATA.B     H'00
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1

















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 08:15:15  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        57




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      695



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001148 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               00000382 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000014DA Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           13
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          25
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           194






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmk4BF6.tmp 

