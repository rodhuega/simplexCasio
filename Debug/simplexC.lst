SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include "limits.h"
      simplexC.c     4    #include <stdlib.h>
      simplexC.c     5    #include "stdio.h"
      simplexC.c     6    #include "SH4_compatibility.h"
      simplexC.c     7    
      simplexC.c     8    #define NO_EVAL_VALUE INT_MAX
      simplexC.c     9    
      simplexC.c    10    #define TYPE_LP 1
      simplexC.c    11    #define TYPE_ILP 2
      simplexC.c    12    #define TYPE_CUT 3
      simplexC.c    13    
      simplexC.c    14    #define TYPE_INPUT 1
      simplexC.c    15    #define TYPE_SOLVE 2
      simplexC.c    16    
      simplexC.c    17    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    18    #define EXIT_OPT 0
      simplexC.c    19    
      simplexC.c    20    #define INE_EQUAL 0
      simplexC.c    21    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    22    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    23    
      simplexC.c    24    
      simplexC.c    25    #define FUNC_MINIMIZE 0
      simplexC.c    26    #define FUNC_MAXIMIZE 1
      simplexC.c    27    
      simplexC.c    28    
      simplexC.c    29    #define MODE_FULL_EXECUTION 0
      simplexC.c    30    #define MODE_INPUT_TABLE 1
      simplexC.c    31    
      simplexC.c    32    
      simplexC.c    33    struct iteration
      simplexC.c    34    {
      simplexC.c    35        int numIteration;
      simplexC.c    36        int* idBasicVariables;//1 si esa variable es Basica. 0 sera NoBasica
      simplexC.c    37        int *idByRowOfBasicVarsInBInv;//ejemplo [0]->2. la row 0 tiene asociala la variable 3
      simplexC.c    38        int isUnbounded;//1 en caso de si, 0 en caso de no
      simplexC.c    39    
      simplexC.c    40        int idVarIn;
      simplexC.c    41        int idVarOut;
      simplexC.c    42        int indexVarOutInBInvMatrix;
      simplexC.c    43    
      simplexC.c    44        float **Binv;
      simplexC.c    45        int BinvSize;
      simplexC.c    46    
      simplexC.c    47        float *ct;
      simplexC.c    48        float *xb;
      simplexC.c    49        float *ctBinv;
      simplexC.c    50        float *zj;
      simplexC.c    51        float *cjMinusZj;
      simplexC.c    52        float *yj;
      simplexC.c    53        float *xbDivYj;
      simplexC.c    54    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    55        float zSol ;
      simplexC.c    56    };
      simplexC.c    57    
      simplexC.c    58    struct problemStatement
      simplexC.c    59    {
      simplexC.c    60        int problemType;
      simplexC.c    61        int modelType;
      simplexC.c    62        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    63        int is2fasesActive;//1 en caso de si. 0 en caso que no
      simplexC.c    64        
      simplexC.c    65        //1 array de variables por cada constraint
      simplexC.c    66        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    67        float **constraints;
      simplexC.c    68        float *rightValues;
      simplexC.c    69        int *inequalitySigns;
      simplexC.c    70        int nVariables;
      simplexC.c    71        int nVariablesSlope;
      simplexC.c    72        int nVariables2fases;
      simplexC.c    73        int nVariablesInteger;
      simplexC.c    74        int nConstraints;
      simplexC.c    75        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    76        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    77        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    78        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    79        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    80    
      simplexC.c    81        int funcObjectivePurpose;
      simplexC.c    82        float *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    83        float *funcObjtValues2Fases;
      simplexC.c    84    
      simplexC.c    85        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c    86        
      simplexC.c    87    };
      simplexC.c    88    
      simplexC.c    89    struct node
      simplexC.c    90    {
      simplexC.c    91        int id;
      simplexC.c    92        int nIterations;
      simplexC.c    93        struct iteration **its;
      simplexC.c    94    };
      simplexC.c    95    
      simplexC.c    96    struct execution
      simplexC.c    97    {
      simplexC.c    98        int mode;
      simplexC.c    99        struct problemStatement *initialProblemStatement;
      simplexC.c   100        struct problemStatement *canonicalStatement;
      simplexC.c   101        struct node nodes;
      simplexC.c   102        float *bVectorValues;//Right values;
      simplexC.c   103        float *inputCvectorValues;//Values of cost variable
      simplexC.c   104        float *fases2CvectorValues;
      simplexC.c   105        int nNodes;
      simplexC.c   106        int currentFuncObjectivePurpose;
      simplexC.c   107        int nVariables;
      simplexC.c   108    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   109        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c   110    };
      simplexC.c   111    
      simplexC.c   112    struct execution ex;
      simplexC.c   113    
      simplexC.c   114    float InputD(int, int);
      simplexC.c   115    
      simplexC.c   116    int InputI(int, int);
      simplexC.c   117    
      simplexC.c   118    float InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=532
                                                           ; used runtime library name:
                                                           ; __dtos
    00000000 4F22                   STS.L       PR,@-R15
    00000002 909E                   MOV.W       L1192,R0   ; H'FDFC
      simplexC.c   119    {
      simplexC.c   120        char *string[128], *stopstring;
      simplexC.c   121        string_input(x, y, string);
    00000004 D351                   MOV.L       L1192+10,R3; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c   122        return strtod(string, &stopstring);
    0000000E 7FF8                   ADD         #-8,R15
    00000010 D24F                   MOV.L       L1192+14,R2; _strtod
    00000012 65F3                   MOV         R15,R5
    00000014 7508                   ADD         #8,R5
    00000016 64F3                   MOV         R15,R4
    00000018 740C                   ADD         #12,R4
    0000001A 420B                   JSR         @R2
    0000001C 2FF6                   MOV.L       R15,@-R15
    0000001E D34D                   MOV.L       L1192+18,R3; __dtos
    00000020 430B                   JSR         @R3
    00000022 7F04                   ADD         #4,R15
      simplexC.c   123    }
    00000024 918E                   MOV.W       L1192+2,R1 ; H'0204
    00000026 3F1C                   ADD         R1,R15
    00000028 4F26                   LDS.L       @R15+,PR
    0000002A 000B                   RTS
    0000002C 0009                   NOP
      simplexC.c   124    
      simplexC.c   125    int InputI(int x, int y)
    0000002E              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 9089                   MOV.W       L1192+4,R0 ; H'FE00
    00000032 3F0C                   ADD         R0,R15
      simplexC.c   126    {
      simplexC.c   127        char *string[128], *stopstring;
      simplexC.c   128        string_input(x, y, string);
    00000034 D345                   MOV.L       L1192+10,R3; _string_input
    00000036 430B                   JSR         @R3
    00000038 66F3                   MOV         R15,R6
      simplexC.c   129        return atoi(&string);
    0000003A D247                   MOV.L       L1192+22,R2; _atoi




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 420B                   JSR         @R2
    0000003E 64F3                   MOV         R15,R4
      simplexC.c   130    }
    00000040 9182                   MOV.W       L1192+6,R1 ; H'0200
    00000042 3F1C                   ADD         R1,R15
    00000044 4F26                   LDS.L       @R15+,PR
    00000046 000B                   RTS
    00000048 0009                   NOP
      simplexC.c   131    
      simplexC.c   132    int freeMemoryStatement(struct problemStatement *pS)
    0000004A              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    0000004A 2FE6                   MOV.L       R14,@-R15
    0000004C 2FD6                   MOV.L       R13,@-R15
    0000004E 6E43                   MOV         R4,R14
    00000050 2FC6                   MOV.L       R12,@-R15
    00000052 4F22                   STS.L       PR,@-R15
      simplexC.c   133    {
      simplexC.c   134        int i;
      simplexC.c   135        for(i=0;i<pS->nConstraints;i++)
    00000054 DD41                   MOV.L       L1192+26,R13; _free
    00000056 A006                   BRA         L951
    00000058 EC00                   MOV         #0,R12
    0000005A              L952:                             
      simplexC.c   136        {
      simplexC.c   137            free(pS->constraints[i]);
    0000005A 64C3                   MOV         R12,R4
    0000005C 50E4                   MOV.L       @(16,R14),R0
    0000005E 4408                   SHLL2       R4
    00000060 4D0B                   JSR         @R13
    00000062 044E                   MOV.L       @(R0,R4),R4
    00000064 7C01                   ADD         #1,R12
    00000066              L951:                             
    00000066 53EB                   MOV.L       @(44,R14),R3
    00000068 3C33                   CMP/GE      R3,R12
    0000006A 8BF6                   BF          L952
      simplexC.c   138        }
      simplexC.c   139        free(pS->constraints);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   140        free(pS->rightValues);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   141        free(pS->inequalitySigns);
    00000074 4D0B                   JSR         @R13
    00000076 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   142        free(pS->idIntegerVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   143        free(pS->idSlopeVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   144        free(pS->id2fasesVariables);
    00000080 4D0B                   JSR         @R13
    00000082 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   145        free(pS->funcObjtValues);
    00000084 E048                   MOV         #72,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000086 4D0B                   JSR         @R13
    00000088 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   146        if(pS->modelType==TYPE_SOLVE)
    0000008A 50E1                   MOV.L       @(4,R14),R0
    0000008C 8802                   CMP/EQ      #2,R0
    0000008E 8B04                   BF          L953
      simplexC.c   147        {
      simplexC.c   148            free(pS->idConstraintTo2fasesVar);
    00000090 E040                   MOV         #64,R0
    00000092 4D0B                   JSR         @R13
    00000094 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   149            free(pS->idConstraintToSlopeVar);
    00000096 4D0B                   JSR         @R13
    00000098 54EF                   MOV.L       @(60,R14),R4
    0000009A              L953:                             
      simplexC.c   150        }
      simplexC.c   151        return 0;
    0000009A E000                   MOV         #0,R0
      simplexC.c   152    }
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6CF6                   MOV.L       @R15+,R12
    000000A0 6DF6                   MOV.L       @R15+,R13
    000000A2 000B                   RTS
    000000A4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   153    
      simplexC.c   154    int freeMemoryIteration(struct iteration *it)
    000000A6              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=12
    000000A6 2FE6                   MOV.L       R14,@-R15
    000000A8 2FD6                   MOV.L       R13,@-R15
    000000AA 6E43                   MOV         R4,R14
    000000AC 4F22                   STS.L       PR,@-R15
      simplexC.c   155    {
      simplexC.c   156        //TODO
      simplexC.c   157        free(it->idBasicVariables);
    000000AE DD2B                   MOV.L       L1192+26,R13; _free
    000000B0 4D0B                   JSR         @R13
    000000B2 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   158        free(it->idByRowOfBasicVarsInBInv);
    000000B4 4D0B                   JSR         @R13
    000000B6 54E2                   MOV.L       @(8,R14),R4
      simplexC.c   159        free(it->xb);
    000000B8 4D0B                   JSR         @R13
    000000BA 54EA                   MOV.L       @(40,R14),R4
      simplexC.c   160        free(it->ctBinv);
    000000BC 4D0B                   JSR         @R13
    000000BE 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   161        free(it->zj);
    000000C0 4D0B                   JSR         @R13
    000000C2 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   162        free(it->cjMinusZj);
    000000C4 4D0B                   JSR         @R13
    000000C6 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   163        free(it->yj);
    000000C8 4D0B                   JSR         @R13
    000000CA 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   164        free(it->xbDivYj);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000CC 4D0B                   JSR         @R13
    000000CE 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   165        return 0;
      simplexC.c   166    }
    000000D0 4F26                   LDS.L       @R15+,PR
    000000D2 E000                   MOV         #0,R0
    000000D4 6DF6                   MOV.L       @R15+,R13
    000000D6 000B                   RTS
    000000D8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   167    int freeMemoryNode(struct node *n)
    000000DA              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000DA 2FE6                   MOV.L       R14,@-R15
    000000DC 2FD6                   MOV.L       R13,@-R15
    000000DE 6D43                   MOV         R4,R13
    000000E0 4F22                   STS.L       PR,@-R15
      simplexC.c   168    {
      simplexC.c   169        int i;
      simplexC.c   170        for(i=0; i<n->nIterations;i++)
    000000E2 A006                   BRA         L956
    000000E4 EE00                   MOV         #0,R14
    000000E6              L957:                             
      simplexC.c   171        {
      simplexC.c   172            freeMemoryIteration(n->its[i]);
    000000E6 64E3                   MOV         R14,R4
    000000E8 50D2                   MOV.L       @(8,R13),R0
    000000EA 4408                   SHLL2       R4
    000000EC BFDB                   BSR         _freeMemoryIteration
    000000EE 044E                   MOV.L       @(R0,R4),R4
    000000F0 7E01                   ADD         #1,R14
    000000F2              L956:                             
    000000F2 52D1                   MOV.L       @(4,R13),R2
    000000F4 3E23                   CMP/GE      R2,R14
    000000F6 8BF6                   BF          L957
      simplexC.c   173        }
      simplexC.c   174        free(n->its);
    000000F8 D218                   MOV.L       L1192+26,R2; _free
    000000FA 420B                   JSR         @R2
    000000FC 54D2                   MOV.L       @(8,R13),R4
      simplexC.c   175        return 0;
    000000FE E000                   MOV         #0,R0
      simplexC.c   176    }
    00000100 4F26                   LDS.L       @R15+,PR
    00000102 6DF6                   MOV.L       @R15+,R13
    00000104 000B                   RTS
    00000106 6EF6                   MOV.L       @R15+,R14
      simplexC.c   177    
      simplexC.c   178    int freeMemoryExecution()
    00000108              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    00000108 2FE6                   MOV.L       R14,@-R15
    0000010A 2FD6                   MOV.L       R13,@-R15
    0000010C 4F22                   STS.L       PR,@-R15
      simplexC.c   179    {
      simplexC.c   180        int i;
      simplexC.c   181        if(ex.mode == MODE_FULL_EXECUTION)
    0000010E DE14                   MOV.L       L1192+30,R14; _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110 63E2                   MOV.L       @R14,R3
    00000112 2338                   TST         R3,R3
    00000114 8B03                   BF          L959
      simplexC.c   182        {
      simplexC.c   183            freeMemoryStatement(ex.initialProblemStatement);
    00000116 BF98                   BSR         _freeMemoryStatement
    00000118 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   184            freeMemoryStatement(ex.canonicalStatement);
    0000011A BF96                   BSR         _freeMemoryStatement
    0000011C 54E2                   MOV.L       @(8,R14),R4
    0000011E              L959:                             
      simplexC.c   185        }
      simplexC.c   186        for(i=0;i<ex.nVariables;i++)
    0000011E A001                   BRA         L960
    00000120 E400                   MOV         #0,R4
    00000122              L961:                             
    00000122 7401                   ADD         #1,R4
    00000124              L960:                             
    00000124 52EB                   MOV.L       @(44,R14),R2
    00000126 3423                   CMP/GE      R2,R4
    00000128 8BFB                   BF          L961
      simplexC.c   187        {
      simplexC.c   188            // free(ex.ajVector[i]);
      simplexC.c   189        }
      simplexC.c   190        // free(ex.ajVector);
      simplexC.c   191        free(ex.bVectorValues);
    0000012A DD0C                   MOV.L       L1192+26,R13; _free
    0000012C 4D0B                   JSR         @R13
    0000012E 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   192        free(ex.inputCvectorValues);
    00000130 4D0B                   JSR         @R13
    00000132 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   193        free(ex.fases2CvectorValues);
    00000134 4D0B                   JSR         @R13
    00000136 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   194        return 0;
      simplexC.c   195    }
    00000138 4F26                   LDS.L       @R15+,PR
    0000013A E000                   MOV         #0,R0
    0000013C 6DF6                   MOV.L       @R15+,R13
    0000013E 000B                   RTS
    00000140 6EF6                   MOV.L       @R15+,R14
    00000142              L1192:                            
    00000142 FDFC                   .DATA.W     H'FDFC
    00000144 0204                   .DATA.W     H'0204
    00000146 FE00                   .DATA.W     H'FE00
    00000148 0200                   .DATA.W     H'0200
    0000014A 0000                   .DATA.W     0
    0000014C <00000000>             .DATA.L     _string_input
    00000150 <00000000>             .DATA.L     _strtod
    00000154 <00000000>             .DATA.L     __dtos
    00000158 <00000000>             .DATA.L     _atoi
    0000015C <00000000>             .DATA.L     _free
    00000160 <00000000>             .DATA.L     _ex
      simplexC.c   196    
      simplexC.c   197    float* calculateVectorMatrixrMul(int size, float **M, float *V)
    00000164              _calculateVectorMatrixrMul:      ; function: calculateVectorMatrixrMul




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    00000164 2FE6                   MOV.L       R14,@-R15
    00000166 2FD6                   MOV.L       R13,@-R15
    00000168 2FC6                   MOV.L       R12,@-R15
    0000016A 6D43                   MOV         R4,R13
      simplexC.c   198    {
      simplexC.c   199        float *res;
      simplexC.c   200        int i,j;
      simplexC.c   201        res = calloc(size,sizeof(float));
    0000016C D399                   MOV.L       L1193,R3   ; _calloc
    0000016E 2FB6                   MOV.L       R11,@-R15
    00000170 2FA6                   MOV.L       R10,@-R15
    00000172 6B53                   MOV         R5,R11
    00000174 4F22                   STS.L       PR,@-R15
    00000176 6A63                   MOV         R6,R10
    00000178 430B                   JSR         @R3
    0000017A E504                   MOV         #4,R5
    0000017C 6C03                   MOV         R0,R12
      simplexC.c   202        for(i=0;i<size;i++)
    0000017E E500                   MOV         #0,R5
    00000180 A018                   BRA         L963
    00000182 6753                   MOV         R5,R7
    00000184              L964:                             
      simplexC.c   203        {
      simplexC.c   204            for(j=0;j<size;j++)
    00000184 6653                   MOV         R5,R6
    00000186 6453                   MOV         R5,R4
    00000188 6E73                   MOV         R7,R14
    0000018A 4D15                   CMP/PL      R13
    0000018C 8F11                   BF/S        L965
    0000018E 4E08                   SHLL2       R14
    00000190              L966:                             
      simplexC.c   205            {
      simplexC.c   206                res[i]+=V[j]*M[j][i];
    00000190 D291                   MOV.L       L1193+4,R2 ; __muls
    00000192 63E3                   MOV         R14,R3
    00000194 33CC                   ADD         R12,R3
    00000196 6043                   MOV         R4,R0
    00000198 01BE                   MOV.L       @(R0,R11),R1
    0000019A 31EC                   ADD         R14,R1
    0000019C 00AE                   MOV.L       @(R0,R10),R0
    0000019E 420B                   JSR         @R2
    000001A0 6112                   MOV.L       @R1,R1
    000001A2 D28E                   MOV.L       L1193+8,R2 ; __adds
    000001A4 420B                   JSR         @R2
    000001A6 6132                   MOV.L       @R3,R1
    000001A8 2302                   MOV.L       R0,@R3
    000001AA 7601                   ADD         #1,R6
    000001AC 36D3                   CMP/GE      R13,R6
    000001AE 8FEF                   BF/S        L966
    000001B0 7404                   ADD         #4,R4
    000001B2              L965:                             
    000001B2 7701                   ADD         #1,R7
    000001B4              L963:                             
    000001B4 37D3                   CMP/GE      R13,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B6 8BE5                   BF          L964
      simplexC.c   207            }
      simplexC.c   208        }
      simplexC.c   209        return res;
      simplexC.c   210    }
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 60C3                   MOV         R12,R0
    000001BC 6AF6                   MOV.L       @R15+,R10
    000001BE 6BF6                   MOV.L       @R15+,R11
    000001C0 6CF6                   MOV.L       @R15+,R12
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   211    
      simplexC.c   212    float* calculateMatrixVectorMul(int size, float **M, float *V)
    000001C8              _calculateMatrixVectorMul:       ; function: calculateMatrixVectorMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 6D43                   MOV         R4,R13
      simplexC.c   213    {
      simplexC.c   214        float *res;
      simplexC.c   215        int i,j;
      simplexC.c   216        res = calloc(size,sizeof(float*));
    000001D0 D380                   MOV.L       L1193,R3   ; _calloc
    000001D2 2FB6                   MOV.L       R11,@-R15
    000001D4 2FA6                   MOV.L       R10,@-R15
    000001D6 6B53                   MOV         R5,R11
    000001D8 4F22                   STS.L       PR,@-R15
    000001DA 6A63                   MOV         R6,R10
    000001DC 430B                   JSR         @R3
    000001DE E504                   MOV         #4,R5
    000001E0 6C03                   MOV         R0,R12
      simplexC.c   217        for(i=0;i<size;i++)
    000001E2 E500                   MOV         #0,R5
    000001E4 A019                   BRA         L968
    000001E6 6753                   MOV         R5,R7
    000001E8              L969:                             
      simplexC.c   218        {
      simplexC.c   219            for(j=0;j<size;j++)
    000001E8 6653                   MOV         R5,R6
    000001EA 6453                   MOV         R5,R4
    000001EC 6E73                   MOV         R7,R14
    000001EE 4D15                   CMP/PL      R13
    000001F0 8F12                   BF/S        L970
    000001F2 4E08                   SHLL2       R14
    000001F4              L971:                             
      simplexC.c   220            {
      simplexC.c   221                res[i]+=M[i][j]*V[j];
    000001F4 D278                   MOV.L       L1193+4,R2 ; __muls
    000001F6 63E3                   MOV         R14,R3
    000001F8 33CC                   ADD         R12,R3
    000001FA 60E3                   MOV         R14,R0
    000001FC 01BE                   MOV.L       @(R0,R11),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FE 60A3                   MOV         R10,R0
    00000200 004E                   MOV.L       @(R0,R4),R0
    00000202 314C                   ADD         R4,R1
    00000204 420B                   JSR         @R2
    00000206 6112                   MOV.L       @R1,R1
    00000208 D274                   MOV.L       L1193+8,R2 ; __adds
    0000020A 420B                   JSR         @R2
    0000020C 6132                   MOV.L       @R3,R1
    0000020E 7601                   ADD         #1,R6
    00000210 2302                   MOV.L       R0,@R3
    00000212 36D3                   CMP/GE      R13,R6
    00000214 8FEE                   BF/S        L971
    00000216 7404                   ADD         #4,R4
    00000218              L970:                             
    00000218 7701                   ADD         #1,R7
    0000021A              L968:                             
    0000021A 37D3                   CMP/GE      R13,R7
    0000021C 8BE4                   BF          L969
      simplexC.c   222            }
      simplexC.c   223        }
      simplexC.c   224        return res;
    0000021E 60C3                   MOV         R12,R0
      simplexC.c   225    }
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 6AF6                   MOV.L       @R15+,R10
    00000224 6BF6                   MOV.L       @R15+,R11
    00000226 6CF6                   MOV.L       @R15+,R12
    00000228 6DF6                   MOV.L       @R15+,R13
    0000022A 000B                   RTS
    0000022C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   226    
      simplexC.c   227    float calculateVectorDotProduct(int size, float* A, float *B)
    0000022E              _calculateVectorDotProduct:      ; function: calculateVectorDotProduct
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __adds, __muls
      simplexC.c   228    {
      simplexC.c   229        float res;
      simplexC.c   230        int i;
      simplexC.c   231        res=0;
      simplexC.c   232        for(i=0;i<size;i++)
    0000022E 4415                   CMP/PL      R4
    00000230 2FE6                   MOV.L       R14,@-R15
    00000232 2FD6                   MOV.L       R13,@-R15
    00000234 4F22                   STS.L       PR,@-R15
    00000236 ED00                   MOV         #0,R13
    00000238 6ED3                   MOV         R13,R14
    0000023A 8F0D                   BF/S        L973
    0000023C 67D3                   MOV         R13,R7
    0000023E              L974:                             
      simplexC.c   233        {
      simplexC.c   234            res+=A[i]*B[i];
    0000023E 6073                   MOV         R7,R0
    00000240 D365                   MOV.L       L1193+4,R3 ; __muls
    00000242 015E                   MOV.L       @(R0,R5),R1
    00000244 430B                   JSR         @R3
    00000246 006E                   MOV.L       @(R0,R6),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000248 D364                   MOV.L       L1193+8,R3 ; __adds
    0000024A 430B                   JSR         @R3
    0000024C 61D3                   MOV         R13,R1
    0000024E 6D03                   MOV         R0,R13
    00000250 7E01                   ADD         #1,R14
    00000252 3E43                   CMP/GE      R4,R14
    00000254 8FF3                   BF/S        L974
    00000256 7704                   ADD         #4,R7
    00000258              L973:                             
      simplexC.c   235        }
      simplexC.c   236        return res;
      simplexC.c   237    }
    00000258 4F26                   LDS.L       @R15+,PR
    0000025A 60D3                   MOV         R13,R0
    0000025C 6DF6                   MOV.L       @R15+,R13
    0000025E 000B                   RTS
    00000260 6EF6                   MOV.L       @R15+,R14
      simplexC.c   238    
      simplexC.c   239    float* getCurrentCvectorValues(struct iteration *it)
    00000262              _getCurrentCvectorValues:        ; function: getCurrentCvectorValues
                                                           ; frame size=8
      simplexC.c   240    {
      simplexC.c   241        float* res;
      simplexC.c   242        res = calloc(ex.nVariables,sizeof(float));
    00000262 E504                   MOV         #4,R5
    00000264 D35B                   MOV.L       L1193,R3   ; _calloc
    00000266 2FE6                   MOV.L       R14,@-R15
    00000268 4F22                   STS.L       PR,@-R15
    0000026A DE5D                   MOV.L       L1193+12,R14; _ex
    0000026C 430B                   JSR         @R3
    0000026E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   243        if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement->is2
                         +fasesActive)
    00000270 62E2                   MOV.L       @R14,R2
    00000272 2228                   TST         R2,R2
    00000274 8B09                   BF          L976
    00000276 53E2                   MOV.L       @(8,R14),R3
    00000278 5232                   MOV.L       @(8,R3),R2
    0000027A 2228                   TST         R2,R2
    0000027C 8905                   BT          L976
    0000027E 52E2                   MOV.L       @(8,R14),R2
    00000280 5323                   MOV.L       @(12,R2),R3
    00000282 2338                   TST         R3,R3
    00000284 8901                   BT          L976
      simplexC.c   244        {
      simplexC.c   245            res= ex.fases2CvectorValues;
    00000286 A001                   BRA         L977
    00000288 54E8                   MOV.L       @(32,R14),R4
    0000028A              L976:                             
      simplexC.c   246        }else
      simplexC.c   247        {
      simplexC.c   248            res=ex.inputCvectorValues;
    0000028A 54E7                   MOV.L       @(28,R14),R4
    0000028C              L977:                             
      simplexC.c   249        }
      simplexC.c   250        return res;
      simplexC.c   251    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028C 4F26                   LDS.L       @R15+,PR
    0000028E 6043                   MOV         R4,R0
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
      simplexC.c   252    
      simplexC.c   253    float* getCurrentCt(struct iteration *it)
    00000294              _getCurrentCt:                   ; function: getCurrentCt
                                                           ; frame size=8
    00000294 2FD6                   MOV.L       R13,@-R15
      simplexC.c   254    {
      simplexC.c   255        float* res;
      simplexC.c   256        int i;
      simplexC.c   257        res = calloc(it->BinvSize,sizeof(float));
    00000296 E504                   MOV         #4,R5
    00000298 D34E                   MOV.L       L1193,R3   ; _calloc
    0000029A 6D43                   MOV         R4,R13
    0000029C 4F22                   STS.L       PR,@-R15
    0000029E 430B                   JSR         @R3
    000002A0 54D8                   MOV.L       @(32,R13),R4
    000002A2 6603                   MOV         R0,R6
      simplexC.c   258        
      simplexC.c   259        for(i=0;i<it->BinvSize;i++)
    000002A4 D44E                   MOV.L       L1193+12,R4; _ex
    000002A6 A020                   BRA         L979
    000002A8 E500                   MOV         #0,R5
    000002AA              L980:                             
    000002AA 6153                   MOV         R5,R1
    000002AC 6342                   MOV.L       @R4,R3
    000002AE 2338                   TST         R3,R3
    000002B0 8F12                   BF/S        L981
    000002B2 4108                   SHLL2       R1
    000002B4 5342                   MOV.L       @(8,R4),R3
    000002B6 5232                   MOV.L       @(8,R3),R2
    000002B8 2228                   TST         R2,R2
    000002BA 890D                   BT          L981
    000002BC 5242                   MOV.L       @(8,R4),R2
    000002BE 5323                   MOV.L       @(12,R2),R3
    000002C0 2338                   TST         R3,R3
    000002C2 8909                   BT          L981
      simplexC.c   260        {
      simplexC.c   261            if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement-
                         +>is2fasesActive)
      simplexC.c   262            {
      simplexC.c   263                res[i]= ex.fases2CvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002C4 50D2                   MOV.L       @(8,R13),R0
    000002C6 6313                   MOV         R1,R3
    000002C8 021E                   MOV.L       @(R0,R1),R2
    000002CA 336C                   ADD         R6,R3
    000002CC 5048                   MOV.L       @(32,R4),R0
    000002CE 4208                   SHLL2       R2
    000002D0 022E                   MOV.L       @(R0,R2),R2
    000002D2 2322                   MOV.L       R2,@R3
    000002D4 A008                   BRA         L982
    000002D6 0009                   NOP
    000002D8              L981:                             
      simplexC.c   264            }else
      simplexC.c   265            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   266                res[i]=ex.inputCvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002D8 50D2                   MOV.L       @(8,R13),R0
    000002DA 6313                   MOV         R1,R3
    000002DC 021E                   MOV.L       @(R0,R1),R2
    000002DE 336C                   ADD         R6,R3
    000002E0 5047                   MOV.L       @(28,R4),R0
    000002E2 4208                   SHLL2       R2
    000002E4 022E                   MOV.L       @(R0,R2),R2
    000002E6 2322                   MOV.L       R2,@R3
    000002E8              L982:                             
    000002E8 7501                   ADD         #1,R5
    000002EA              L979:                             
    000002EA 53D8                   MOV.L       @(32,R13),R3
    000002EC 3533                   CMP/GE      R3,R5
    000002EE 8BDC                   BF          L980
      simplexC.c   267            }
      simplexC.c   268        }
      simplexC.c   269        
      simplexC.c   270        return res;
      simplexC.c   271    }
    000002F0 4F26                   LDS.L       @R15+,PR
    000002F2 6063                   MOV         R6,R0
    000002F4 000B                   RTS
    000002F6 6DF6                   MOV.L       @R15+,R13
      simplexC.c   272    
      simplexC.c   273    float** calculateNewBinv(struct iteration *oldIt)
    000002F8              _calculateNewBinv:               ; function: calculateNewBinv
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __subs, __muls, __divs
    000002F8 2FE6                   MOV.L       R14,@-R15
      simplexC.c   274    {
      simplexC.c   275        float **res;
      simplexC.c   276        int i,j,indexPivot;
      simplexC.c   277        indexPivot=-1;
      simplexC.c   278        res=calloc(oldIt->BinvSize,sizeof(float*));
    000002FA E504                   MOV         #4,R5
    000002FC 2FD6                   MOV.L       R13,@-R15
    000002FE 6E43                   MOV         R4,R14
    00000300 2FC6                   MOV.L       R12,@-R15
    00000302 2FB6                   MOV.L       R11,@-R15
    00000304 2FA6                   MOV.L       R10,@-R15
    00000306 EBFF                   MOV         #-1,R11
    00000308 2F96                   MOV.L       R9,@-R15
    0000030A 2F86                   MOV.L       R8,@-R15
    0000030C 4F22                   STS.L       PR,@-R15
    0000030E D931                   MOV.L       L1193,R9   ; _calloc
    00000310 490B                   JSR         @R9
    00000312 54E8                   MOV.L       @(32,R14),R4
    00000314 6D03                   MOV         R0,R13
      simplexC.c   279        for(i=0;i<oldIt->BinvSize;i++)
    00000316 EA00                   MOV         #0,R10
    00000318 A011                   BRA         L984
    0000031A 6CA3                   MOV         R10,R12
    0000031C              L985:                             
      simplexC.c   280        {
      simplexC.c   281            res[i]=calloc(oldIt->BinvSize,sizeof(float));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000031C 68C3                   MOV         R12,R8
    0000031E 4808                   SHLL2       R8
    00000320 6383                   MOV         R8,R3
    00000322 33DC                   ADD         R13,R3
    00000324 2F36                   MOV.L       R3,@-R15
    00000326 E504                   MOV         #4,R5
    00000328 490B                   JSR         @R9
    0000032A 54E8                   MOV.L       @(32,R14),R4
    0000032C 63F6                   MOV.L       @R15+,R3
    0000032E 2302                   MOV.L       R0,@R3
      simplexC.c   282            if(oldIt->idVarOut==oldIt->idByRowOfBasicVarsInBInv[i])
    00000330 50E2                   MOV.L       @(8,R14),R0
    00000332 028E                   MOV.L       @(R0,R8),R2
    00000334 53E5                   MOV.L       @(20,R14),R3
    00000336 3320                   CMP/EQ      R2,R3
    00000338 8B00                   BF          L986
      simplexC.c   283            {
      simplexC.c   284                indexPivot=i;
    0000033A 6BC3                   MOV         R12,R11
    0000033C              L986:                             
    0000033C 7C01                   ADD         #1,R12
    0000033E              L984:                             
    0000033E 53E8                   MOV.L       @(32,R14),R3
    00000340 3C33                   CMP/GE      R3,R12
    00000342 8BEB                   BF          L985
      simplexC.c   285            }
      simplexC.c   286        }
      simplexC.c   287        //Calculo de la fila pivote
      simplexC.c   288        for(i=0;i<oldIt->BinvSize;i++)
    00000344 64A3                   MOV         R10,R4
    00000346 6CB3                   MOV         R11,R12
    00000348 A00F                   BRA         L987
    0000034A 4C08                   SHLL2       R12
    0000034C              L988:                             
      simplexC.c   289        {
      simplexC.c   290            res[indexPivot][i]=oldIt->Binv[indexPivot][i]/oldIt->yj[indexPivot];
    0000034C D225                   MOV.L       L1193+16,R2; __divs
    0000034E 60C3                   MOV         R12,R0
    00000350 03DE                   MOV.L       @(R0,R13),R3
    00000352 6543                   MOV         R4,R5
    00000354 50E7                   MOV.L       @(28,R14),R0
    00000356 4508                   SHLL2       R5
    00000358 01CE                   MOV.L       @(R0,R12),R1
    0000035A 335C                   ADD         R5,R3
    0000035C 50EE                   MOV.L       @(56,R14),R0
    0000035E 315C                   ADD         R5,R1
    00000360 00CE                   MOV.L       @(R0,R12),R0
    00000362 420B                   JSR         @R2
    00000364 6112                   MOV.L       @R1,R1
    00000366 7401                   ADD         #1,R4
    00000368 2302                   MOV.L       R0,@R3
    0000036A              L987:                             
    0000036A 53E8                   MOV.L       @(32,R14),R3
    0000036C 3433                   CMP/GE      R3,R4
    0000036E 8BED                   BF          L988
      simplexC.c   291        }
      simplexC.c   292    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   293        //Calculo del resto de filas
      simplexC.c   294        for(i=0;i<oldIt->BinvSize;i++)
    00000370 65A3                   MOV         R10,R5
    00000372 67C3                   MOV         R12,R7
    00000374 A021                   BRA         L989
    00000376 37DC                   ADD         R13,R7
    00000378              L990:                             
      simplexC.c   295        {
      simplexC.c   296            for(j=0;j<oldIt->BinvSize && i!=indexPivot;j++)
    00000378 64A3                   MOV         R10,R4
    0000037A 6C53                   MOV         R5,R12
    0000037C A017                   BRA         L991
    0000037E 4C08                   SHLL2       R12
    00000380              L992:                             
      simplexC.c   297            {
      simplexC.c   298                res[i][j]=oldIt->Binv[i][j]-(oldIt->yj[i]*res[indexPivot][j]);
    00000380 D215                   MOV.L       L1193+4,R2 ; __muls
    00000382 60C3                   MOV         R12,R0
    00000384 03DE                   MOV.L       @(R0,R13),R3
    00000386 6643                   MOV         R4,R6
    00000388 4608                   SHLL2       R6
    0000038A 336C                   ADD         R6,R3
    0000038C 2F36                   MOV.L       R3,@-R15
    0000038E 50E7                   MOV.L       @(28,R14),R0
    00000390 01CE                   MOV.L       @(R0,R12),R1
    00000392 316C                   ADD         R6,R1
    00000394 6312                   MOV.L       @R1,R3
    00000396 50EE                   MOV.L       @(56,R14),R0
    00000398 01CE                   MOV.L       @(R0,R12),R1
    0000039A 6072                   MOV.L       @R7,R0
    0000039C 420B                   JSR         @R2
    0000039E 006E                   MOV.L       @(R0,R6),R0
    000003A0 6133                   MOV         R3,R1
    000003A2 D311                   MOV.L       L1193+20,R3; __subs
    000003A4 430B                   JSR         @R3
    000003A6 0009                   NOP
    000003A8 63F6                   MOV.L       @R15+,R3
    000003AA 7401                   ADD         #1,R4
    000003AC 2302                   MOV.L       R0,@R3
    000003AE              L991:                             
    000003AE 52E8                   MOV.L       @(32,R14),R2
    000003B0 3423                   CMP/GE      R2,R4
    000003B2 8901                   BT          L993
    000003B4 35B0                   CMP/EQ      R11,R5
    000003B6 8BE3                   BF          L992
    000003B8              L993:                             
    000003B8 7501                   ADD         #1,R5
    000003BA              L989:                             
    000003BA 53E8                   MOV.L       @(32,R14),R3
    000003BC 3533                   CMP/GE      R3,R5
    000003BE 8BDB                   BF          L990
      simplexC.c   299            }
      simplexC.c   300        }
      simplexC.c   301        return res;
      simplexC.c   302    }
    000003C0 4F26                   LDS.L       @R15+,PR
    000003C2 60D3                   MOV         R13,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C4 68F6                   MOV.L       @R15+,R8
    000003C6 69F6                   MOV.L       @R15+,R9
    000003C8 6AF6                   MOV.L       @R15+,R10
    000003CA 6BF6                   MOV.L       @R15+,R11
    000003CC 6CF6                   MOV.L       @R15+,R12
    000003CE 6DF6                   MOV.L       @R15+,R13
    000003D0 000B                   RTS
    000003D2 6EF6                   MOV.L       @R15+,R14
    000003D4              L1193:                            
    000003D4 <00000000>             .DATA.L     _calloc
    000003D8 <00000000>             .DATA.L     __muls
    000003DC <00000000>             .DATA.L     __adds
    000003E0 <00000000>             .DATA.L     _ex
    000003E4 <00000000>             .DATA.L     __divs
    000003E8 <00000000>             .DATA.L     __subs
      simplexC.c   303    
      simplexC.c   304    struct iteration* createNewIteration(struct iteration *oldIt)
    000003EC              _createNewIteration:             ; function: createNewIteration
                                                           ; frame size=16
    000003EC 2FE6                   MOV.L       R14,@-R15
    000003EE 6E43                   MOV         R4,R14
      simplexC.c   305    {
      simplexC.c   306        struct iteration *newIt;
      simplexC.c   307        int i;
      simplexC.c   308        newIt = malloc(sizeof(struct iteration));
    000003F0 D392                   MOV.L       L1194+2,R3 ; _malloc
    000003F2 2FD6                   MOV.L       R13,@-R15
    000003F4 2FC6                   MOV.L       R12,@-R15
    000003F6 4F22                   STS.L       PR,@-R15
    000003F8 430B                   JSR         @R3
    000003FA E444                   MOV         #68,R4
      simplexC.c   309        newIt->numIteration=oldIt->numIteration+1;
    000003FC 62E2                   MOV.L       @R14,R2
    000003FE 6D03                   MOV         R0,R13
    00000400 7201                   ADD         #1,R2
    00000402 2D22                   MOV.L       R2,@R13
      simplexC.c   310        newIt->BinvSize=oldIt->BinvSize;
    00000404 53E8                   MOV.L       @(32,R14),R3
    00000406 1D38                   MOV.L       R3,@(32,R13)
      simplexC.c   311        newIt->Binv=calculateNewBinv(oldIt);
    00000408 BF76                   BSR         _calculateNewBinv
    0000040A 64E3                   MOV         R14,R4
    0000040C 1D07                   MOV.L       R0,@(28,R13)
      simplexC.c   312        newIt->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    0000040E E504                   MOV         #4,R5
    00000410 D38C                   MOV.L       L1194+10,R3; _calloc
    00000412 DC8B                   MOV.L       L1194+6,R12; _ex
    00000414 430B                   JSR         @R3
    00000416 54CB                   MOV.L       @(44,R12),R4
    00000418 1D01                   MOV.L       R0,@(4,R13)
      simplexC.c   313        newIt->idByRowOfBasicVarsInBInv=calloc(newIt->BinvSize,sizeof(int));
    0000041A E504                   MOV         #4,R5
    0000041C D289                   MOV.L       L1194+10,R2; _calloc
    0000041E 420B                   JSR         @R2
    00000420 54D8                   MOV.L       @(32,R13),R4
      simplexC.c   314        for(i=0;i<ex.nVariables;i++)
    00000422 E600                   MOV         #0,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000424 1D02                   MOV.L       R0,@(8,R13)
    00000426 A008                   BRA         L995
    00000428 6463                   MOV         R6,R4
    0000042A              L996:                             
      simplexC.c   315        {
      simplexC.c   316            newIt->idBasicVariables[i]=oldIt->idBasicVariables[i];
    0000042A 6543                   MOV         R4,R5
    0000042C 53D1                   MOV.L       @(4,R13),R3
    0000042E 4508                   SHLL2       R5
    00000430 50E1                   MOV.L       @(4,R14),R0
    00000432 7401                   ADD         #1,R4
    00000434 025E                   MOV.L       @(R0,R5),R2
    00000436 335C                   ADD         R5,R3
    00000438 2322                   MOV.L       R2,@R3
    0000043A              L995:                             
    0000043A 52CB                   MOV.L       @(44,R12),R2
    0000043C 3423                   CMP/GE      R2,R4
    0000043E 8BF4                   BF          L996
      simplexC.c   317        }
      simplexC.c   318        for(i=0;i<oldIt->BinvSize;i++)
    00000440 A011                   BRA         L997
    00000442 6463                   MOV         R6,R4
    00000444              L998:                             
    00000444 50E2                   MOV.L       @(8,R14),R0
    00000446 6C43                   MOV         R4,R12
    00000448 52E5                   MOV.L       @(20,R14),R2
    0000044A 4C08                   SHLL2       R12
    0000044C 03CE                   MOV.L       @(R0,R12),R3
    0000044E 3320                   CMP/EQ      R2,R3
    00000450 8D06                   BT/S        L999
    00000452 7401                   ADD         #1,R4
      simplexC.c   319        {
      simplexC.c   320            if(oldIt->idByRowOfBasicVarsInBInv[i]!=oldIt->idVarOut)
      simplexC.c   321            {
      simplexC.c   322                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idByRowOfBasicVarsInBInv[i];
    00000454 53D2                   MOV.L       @(8,R13),R3
    00000456 33CC                   ADD         R12,R3
    00000458 50E2                   MOV.L       @(8,R14),R0
    0000045A 02CE                   MOV.L       @(R0,R12),R2
    0000045C A003                   BRA         L1000
    0000045E 2322                   MOV.L       R2,@R3
    00000460              L999:                             
      simplexC.c   323            }else
      simplexC.c   324            {
      simplexC.c   325                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idVarIn;
    00000460 50D2                   MOV.L       @(8,R13),R0
    00000462 53E4                   MOV.L       @(16,R14),R3
    00000464 0C36                   MOV.L       R3,@(R0,R12)
    00000466              L1000:                            
    00000466              L997:                             
    00000466 52E8                   MOV.L       @(32,R14),R2
    00000468 3423                   CMP/GE      R2,R4
    0000046A 8BEB                   BF          L998
      simplexC.c   326            }
      simplexC.c   327        }
      simplexC.c   328        newIt->idBasicVariables[oldIt->idVarOut]=0;
    0000046C 51E5                   MOV.L       @(20,R14),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   329        newIt->idBasicVariables[oldIt->idVarIn]=1;
    0000046E E201                   MOV         #1,R2
    00000470 50D1                   MOV.L       @(4,R13),R0
    00000472 4108                   SHLL2       R1
    00000474 0166                   MOV.L       R6,@(R0,R1)
    00000476 53E4                   MOV.L       @(16,R14),R3
    00000478 50D1                   MOV.L       @(4,R13),R0
    0000047A 4308                   SHLL2       R3
    0000047C 0326                   MOV.L       R2,@(R0,R3)
      simplexC.c   330        return newIt;
    0000047E 60D3                   MOV         R13,R0
      simplexC.c   331    }
    00000480 4F26                   LDS.L       @R15+,PR
    00000482 6CF6                   MOV.L       @R15+,R12
    00000484 6DF6                   MOV.L       @R15+,R13
    00000486 000B                   RTS
    00000488 6EF6                   MOV.L       @R15+,R14
      simplexC.c   332    
      simplexC.c   333    int calculateIteration(struct iteration *it)
    0000048A              _calculateIteration:             ; function: calculateIteration
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __subs, __divs, __eqs, __gts, __lts
    0000048A 2FE6                   MOV.L       R14,@-R15
    0000048C 2FD6                   MOV.L       R13,@-R15
    0000048E 2FC6                   MOV.L       R12,@-R15
    00000490 2FB6                   MOV.L       R11,@-R15
    00000492 2FA6                   MOV.L       R10,@-R15
    00000494 2F96                   MOV.L       R9,@-R15
    00000496 EA00                   MOV         #0,R10
    00000498 DD69                   MOV.L       L1194+6,R13; _ex
    0000049A 2F86                   MOV.L       R8,@-R15
    0000049C 4F22                   STS.L       PR,@-R15
    0000049E 7FF8                   ADD         #-8,R15
    000004A0 D868                   MOV.L       L1194+10,R8; _calloc
      simplexC.c   334    {
      simplexC.c   335        int i;
      simplexC.c   336        float * cVectorValues,*ct;
      simplexC.c   337        float bestEntryVarValue,bestExitVarValue;
      simplexC.c   338        cVectorValues=getCurrentCvectorValues(it);
    000004A2 BEDE                   BSR         _getCurrentCvectorValues
    000004A4 6E43                   MOV         R4,R14
    000004A6 1F01                   MOV.L       R0,@(4,R15)
      simplexC.c   339        ct=getCurrentCt(it);
    000004A8 BEF4                   BSR         _getCurrentCt
    000004AA 64E3                   MOV         R14,R4
      simplexC.c   340        it->ct=ct;
    000004AC 1E09                   MOV.L       R0,@(36,R14)
    000004AE 6C03                   MOV         R0,R12
      simplexC.c   341        it->xb=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.bVectorValues);
    000004B0 56D6                   MOV.L       @(24,R13),R6
    000004B2 55E7                   MOV.L       @(28,R14),R5
    000004B4 BE88                   BSR         _calculateMatrixVectorMul
    000004B6 54E8                   MOV.L       @(32,R14),R4
    000004B8 1E0A                   MOV.L       R0,@(40,R14)
      simplexC.c   342        it->ctBinv=calculateVectorMatrixrMul(it->BinvSize,it->Binv,ct);
    000004BA 66C3                   MOV         R12,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004BC 55E7                   MOV.L       @(28,R14),R5
    000004BE BE51                   BSR         _calculateVectorMatrixrMul
    000004C0 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   343        it->zSol=calculateVectorDotProduct(it->BinvSize,ct,it->xb);
    000004C2 65C3                   MOV         R12,R5
    000004C4 1E0B                   MOV.L       R0,@(44,R14)
    000004C6 56EA                   MOV.L       @(40,R14),R6
    000004C8 BEB1                   BSR         _calculateVectorDotProduct
    000004CA 54E8                   MOV.L       @(32,R14),R4
    000004CC E140                   MOV         #64,R1
    000004CE 31EC                   ADD         R14,R1
    000004D0 2102                   MOV.L       R0,@R1
      simplexC.c   344        //Calculate values for zj and cj-zj and idVarIn
      simplexC.c   345        it->zj=calloc(ex.nVariables,sizeof(float));
    000004D2 E504                   MOV         #4,R5
    000004D4 480B                   JSR         @R8
    000004D6 54DB                   MOV.L       @(44,R13),R4
    000004D8 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c   346        it->cjMinusZj=calloc(ex.nVariables,sizeof(float));
    000004DA E504                   MOV         #4,R5
    000004DC 480B                   JSR         @R8
    000004DE 54DB                   MOV.L       @(44,R13),R4
    000004E0 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c   347        it->idVarIn=-1;
    000004E2 E3FF                   MOV         #-1,R3
    000004E4 1E34                   MOV.L       R3,@(16,R14)
      simplexC.c   348        if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE)
    000004E6 50DA                   MOV.L       @(40,R13),R0
    000004E8 8801                   CMP/EQ      #1,R0
    000004EA 8F03                   BF/S        L1002
      simplexC.c   349        {
      simplexC.c   350            bestEntryVarValue=INT_MIN;
      simplexC.c   351        }else
      simplexC.c   352        {
      simplexC.c   353            bestEntryVarValue=INT_MAX;
      simplexC.c   354        }
      simplexC.c   355        
      simplexC.c   356        
      simplexC.c   357        for(i=0;i<ex.nVariables;i++)
    000004EC 6CA3                   MOV         R10,R12
    000004EE D956                   MOV.L       L1194+14,R9; H'CF000000
    000004F0 A001                   BRA         L1003
    000004F2 0009                   NOP
    000004F4              L1002:                            
    000004F4 D955                   MOV.L       L1194+18,R9; H'4F000000
    000004F6              L1003:                            
    000004F6 A05C                   BRA         L1004
    000004F8 0009                   NOP
    000004FA              L1005:                            
      simplexC.c   358        {
      simplexC.c   359            if((!it->idBasicVariables[i] && ex.canonicalStatement->is2fasesActive) ||
      simplexC.c   360                (!it->idBasicVariables[i] && !ex.canonicalStatement->is2fasesActive && !ex.canonicalStatement-
                         +>id2fasesVariables[i]) )
    000004FA 64C3                   MOV         R12,R4
    000004FC 50E1                   MOV.L       @(4,R14),R0
    000004FE 4408                   SHLL2       R4
    00000500 034E                   MOV.L       @(R0,R4),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000502 2338                   TST         R3,R3
    00000504 8B54                   BF          L1006
    00000506 D252                   MOV.L       L1194+22,R2; H'00000008+_ex
    00000508 6122                   MOV.L       @R2,R1
    0000050A 5313                   MOV.L       @(12,R1),R3
    0000050C 2338                   TST         R3,R3
    0000050E 8B0E                   BF          L1007
    00000510 50E1                   MOV.L       @(4,R14),R0
    00000512 034E                   MOV.L       @(R0,R4),R3
    00000514 2338                   TST         R3,R3
    00000516 8B4B                   BF          L1006
    00000518 D24D                   MOV.L       L1194+22,R2; H'00000008+_ex
    0000051A 6122                   MOV.L       @R2,R1
    0000051C 5313                   MOV.L       @(12,R1),R3
    0000051E 2338                   TST         R3,R3
    00000520 8B46                   BF          L1006
    00000522 D34B                   MOV.L       L1194+22,R3; H'00000008+_ex
    00000524 6032                   MOV.L       @R3,R0
    00000526 500E                   MOV.L       @(56,R0),R0
    00000528 014E                   MOV.L       @(R0,R4),R1
    0000052A 2118                   TST         R1,R1
    0000052C 8B40                   BF          L1006
    0000052E              L1007:                            
      simplexC.c   361            {
      simplexC.c   362                it->zj[i]=calculateVectorDotProduct(it->BinvSize,it->ctBinv,ex.ajVector[i]);
    0000052E 6BC3                   MOV         R12,R11
    00000530 50EC                   MOV.L       @(48,R14),R0
    00000532 4B08                   SHLL2       R11
    00000534 30BC                   ADD         R11,R0
    00000536 2F06                   MOV.L       R0,@-R15
    00000538 50F1                   MOV.L       @(4,R15),R0
    0000053A 06BE                   MOV.L       @(R0,R11),R6
    0000053C 55EB                   MOV.L       @(44,R14),R5
    0000053E BE76                   BSR         _calculateVectorDotProduct
    00000540 54E8                   MOV.L       @(32,R14),R4
    00000542 62F6                   MOV.L       @R15+,R2
      simplexC.c   363                it->cjMinusZj[i]=cVectorValues[i]-it->zj[i];
    00000544 D343                   MOV.L       L1194+26,R3; __subs
    00000546 2202                   MOV.L       R0,@R2
    00000548 50ED                   MOV.L       @(52,R14),R0
    0000054A 6203                   MOV         R0,R2
    0000054C 50F1                   MOV.L       @(4,R15),R0
    0000054E 32BC                   ADD         R11,R2
    00000550 01BE                   MOV.L       @(R0,R11),R1
    00000552 50EC                   MOV.L       @(48,R14),R0
    00000554 430B                   JSR         @R3
    00000556 00BE                   MOV.L       @(R0,R11),R0
    00000558 2202                   MOV.L       R0,@R2
      simplexC.c   364    
      simplexC.c   365                if(ex.currentFuncObjectivePurpose==FUNC_MINIMIZE && it->cjMinusZj[i]<0 && it->cjMinusZj[i]<bes
                         +tEntryVarValue )
    0000055A 53DA                   MOV.L       @(40,R13),R3
    0000055C 2338                   TST         R3,R3
    0000055E 8B0D                   BF          L1009
    00000560 50ED                   MOV.L       @(52,R14),R0
    00000562 01BE                   MOV.L       @(R0,R11),R1
    00000564 D33C                   MOV.L       L1194+30,R3; __lts




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000566 430B                   JSR         @R3
    00000568 E000                   MOV         #0,R0
    0000056A 8800                   CMP/EQ      #0,R0
    0000056C 8906                   BT          L1009
    0000056E 50ED                   MOV.L       @(52,R14),R0
    00000570 D339                   MOV.L       L1194+30,R3; __lts
    00000572 01BE                   MOV.L       @(R0,R11),R1
    00000574 430B                   JSR         @R3
    00000576 6093                   MOV         R9,R0
    00000578 8800                   CMP/EQ      #0,R0
    0000057A 8B14                   BF          L867
    0000057C              L1009:                            
      simplexC.c   366                {
      simplexC.c   367                    bestEntryVarValue=it->cjMinusZj[i];
      simplexC.c   368                    it->idVarIn=i;
      simplexC.c   369                }else if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE && it->cjMinusZj[i]>0 && it->cjMinusZj[
                         +i]>bestEntryVarValue )
    0000057C 50DA                   MOV.L       @(40,R13),R0
    0000057E 8801                   CMP/EQ      #1,R0
    00000580 8B16                   BF          L1006
    00000582 61C3                   MOV         R12,R1
    00000584 50ED                   MOV.L       @(52,R14),R0
    00000586 4108                   SHLL2       R1
    00000588 D334                   MOV.L       L1194+34,R3; __gts
    0000058A 011E                   MOV.L       @(R0,R1),R1
    0000058C 430B                   JSR         @R3
    0000058E E000                   MOV         #0,R0
    00000590 8800                   CMP/EQ      #0,R0
    00000592 890D                   BT          L1006
    00000594 50ED                   MOV.L       @(52,R14),R0
    00000596 61C3                   MOV         R12,R1
    00000598 D330                   MOV.L       L1194+34,R3; __gts
    0000059A 4108                   SHLL2       R1
    0000059C 011E                   MOV.L       @(R0,R1),R1
    0000059E 430B                   JSR         @R3
    000005A0 6093                   MOV         R9,R0
    000005A2 8800                   CMP/EQ      #0,R0
    000005A4 8904                   BT          L1006
    000005A6              L867:
      simplexC.c   370                {
      simplexC.c   371                    bestEntryVarValue=it->cjMinusZj[i];
    000005A6 69C3                   MOV         R12,R9
    000005A8 50ED                   MOV.L       @(52,R14),R0
    000005AA 4908                   SHLL2       R9
    000005AC 099E                   MOV.L       @(R0,R9),R9
      simplexC.c   372                    it->idVarIn=i;
    000005AE 1EC4                   MOV.L       R12,@(16,R14)
    000005B0              L1006:                            
    000005B0 7C01                   ADD         #1,R12
    000005B2              L1004:                            
    000005B2 53DC                   MOV.L       @(48,R13),R3
    000005B4 2F32                   MOV.L       R3,@R15
    000005B6 52DB                   MOV.L       @(44,R13),R2
    000005B8 3C23                   CMP/GE      R2,R12
    000005BA 8B9E                   BF          L1005
      simplexC.c   373                }
      simplexC.c   374            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   375        }
      simplexC.c   376        if(it->idVarIn!=-1)//Check optimum criteria
    000005BC 50E4                   MOV.L       @(16,R14),R0
    000005BE 88FF                   CMP/EQ      #-1,R0
    000005C0 896C                   BT          L1012
      simplexC.c   377        {
      simplexC.c   378            //Calculate yj
      simplexC.c   379            it->yj=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.ajVector[it->idVarIn]);
    000005C2 56E4                   MOV.L       @(16,R14),R6
    000005C4 60F2                   MOV.L       @R15,R0
    000005C6 4608                   SHLL2       R6
    000005C8 55E7                   MOV.L       @(28,R14),R5
    000005CA 066E                   MOV.L       @(R0,R6),R6
    000005CC BDFC                   BSR         _calculateMatrixVectorMul
    000005CE 54E8                   MOV.L       @(32,R14),R4
    000005D0 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   380            it->xbDivYj= calloc(it->BinvSize,sizeof(float));
    000005D2 E504                   MOV         #4,R5
    000005D4 480B                   JSR         @R8
    000005D6 54E8                   MOV.L       @(32,R14),R4
    000005D8 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c   381            bestExitVarValue=INT_MAX;
      simplexC.c   382            it->indexVarOutInBInvMatrix=-1;
    000005DA E2FF                   MOV         #-1,R2
    000005DC D61B                   MOV.L       L1194+18,R6; H'4F000000
      simplexC.c   383            it->isUnbounded=1;
    000005DE E301                   MOV         #1,R3
    000005E0 1E26                   MOV.L       R2,@(24,R14)
    000005E2 1E33                   MOV.L       R3,@(12,R14)
      simplexC.c   384            for(i=0;i<it->BinvSize;i++)
    000005E4 A04F                   BRA         L1013
    000005E6 64A3                   MOV         R10,R4
    000005E8              L1014:                            
      simplexC.c   385            {
      simplexC.c   386                if(it->yj[i]!=0)
    000005E8 50EE                   MOV.L       @(56,R14),R0
    000005EA 6143                   MOV         R4,R1
    000005EC D31C                   MOV.L       L1194+38,R3; __eqs
    000005EE 4108                   SHLL2       R1
    000005F0 011E                   MOV.L       @(R0,R1),R1
    000005F2 430B                   JSR         @R3
    000005F4 E000                   MOV         #0,R0
    000005F6 8800                   CMP/EQ      #0,R0
    000005F8 8B3F                   BF          L866
      simplexC.c   387                {
      simplexC.c   388                    it->xbDivYj[i]=it->xb[i]/it->yj[i];
    000005FA 6543                   MOV         R4,R5
    000005FC 52EF                   MOV.L       @(60,R14),R2
    000005FE 4508                   SHLL2       R5
    00000600 50EA                   MOV.L       @(40,R14),R0
    00000602 325C                   ADD         R5,R2
    00000604 D317                   MOV.L       L1194+42,R3; __divs
    00000606 015E                   MOV.L       @(R0,R5),R1
    00000608 50EE                   MOV.L       @(56,R14),R0
    0000060A 430B                   JSR         @R3
    0000060C 005E                   MOV.L       @(R0,R5),R0
    0000060E 2202                   MOV.L       R0,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   389                    if(it->xbDivYj[i]>0 && it->xbDivYj[i]<bestExitVarValue)
    00000610 50EF                   MOV.L       @(60,R14),R0
    00000612 075E                   MOV.L       @(R0,R5),R7
    00000614 D311                   MOV.L       L1194+34,R3; __gts
    00000616 6173                   MOV         R7,R1
    00000618 430B                   JSR         @R3
    0000061A E000                   MOV         #0,R0
    0000061C 8800                   CMP/EQ      #0,R0
    0000061E 8923                   BT          L1016
    00000620 D20D                   MOV.L       L1194+30,R2; __lts
    00000622 6173                   MOV         R7,R1
    00000624 420B                   JSR         @R2
    00000626 6063                   MOV         R6,R0
    00000628 8800                   CMP/EQ      #0,R0
    0000062A 891D                   BT          L1016
      simplexC.c   390                    {
      simplexC.c   391                        it->indexVarOutInBInvMatrix=i;
    0000062C 1E46                   MOV.L       R4,@(24,R14)
      simplexC.c   392                        bestExitVarValue=it->xbDivYj[i];
    0000062E 6643                   MOV         R4,R6
    00000630 50EF                   MOV.L       @(60,R14),R0
    00000632 4608                   SHLL2       R6
    00000634 066E                   MOV.L       @(R0,R6),R6
      simplexC.c   393                        it->isUnbounded=0;
    00000636 A025                   BRA         L1019
    00000638 1EA3                   MOV.L       R10,@(12,R14)
    0000063A              L1194:                            
    0000063A 0000                   .DATA.W     0
    0000063C <00000000>             .DATA.L     _malloc
    00000640 <00000000>             .DATA.L     _ex
    00000644 <00000000>             .DATA.L     _calloc
    00000648 CF000000               .DATA.L     H'CF000000
    0000064C 4F000000               .DATA.L     H'4F000000
    00000650 <00000008>             .DATA.L     H'00000008+_ex
    00000654 <00000000>             .DATA.L     __subs
    00000658 <00000000>             .DATA.L     __lts
    0000065C <00000000>             .DATA.L     __gts
    00000660 <00000000>             .DATA.L     __eqs
    00000664 <00000000>             .DATA.L     __divs
    00000668              L1016:                            
      simplexC.c   394                    }else if(it->xbDivYj[i]<0)
    00000668 50EF                   MOV.L       @(60,R14),R0
    0000066A 6143                   MOV         R4,R1
    0000066C D358                   MOV.L       L1195,R3   ; __lts
    0000066E 4108                   SHLL2       R1
    00000670 011E                   MOV.L       @(R0,R1),R1
    00000672 430B                   JSR         @R3
    00000674 E000                   MOV         #0,R0
    00000676 8800                   CMP/EQ      #0,R0
    00000678 8904                   BT          L1019
    0000067A              L866:
      simplexC.c   395                    {
      simplexC.c   396                        it->xbDivYj[i]=NO_EVAL_VALUE;
      simplexC.c   397                    }
      simplexC.c   398                    
      simplexC.c   399                }else
      simplexC.c   400                {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   401                    it->xbDivYj[i]=NO_EVAL_VALUE;
    0000067A 6243                   MOV         R4,R2
    0000067C 50EF                   MOV.L       @(60,R14),R0
    0000067E 4208                   SHLL2       R2
    00000680 D354                   MOV.L       L1195+4,R3 ; H'4F000000
    00000682 0236                   MOV.L       R3,@(R0,R2)
    00000684              L1019:                            
    00000684 7401                   ADD         #1,R4
    00000686              L1013:                            
    00000686 52E8                   MOV.L       @(32,R14),R2
    00000688 3423                   CMP/GE      R2,R4
    0000068A 8BAD                   BF          L1014
      simplexC.c   402                }
      simplexC.c   403                
      simplexC.c   404            }
      simplexC.c   405            if(!it->isUnbounded)
    0000068C 51E3                   MOV.L       @(12,R14),R1
    0000068E 2118                   TST         R1,R1
    00000690 8B04                   BF          L1012
      simplexC.c   406            {
      simplexC.c   407                it->idVarOut=it->idByRowOfBasicVarsInBInv[it->indexVarOutInBInvMatrix];
    00000692 53E6                   MOV.L       @(24,R14),R3
    00000694 50E2                   MOV.L       @(8,R14),R0
    00000696 4308                   SHLL2       R3
    00000698 023E                   MOV.L       @(R0,R3),R2
    0000069A 1E25                   MOV.L       R2,@(20,R14)
    0000069C              L1012:                            
      simplexC.c   408            }
      simplexC.c   409            
      simplexC.c   410        }
      simplexC.c   411        
      simplexC.c   412    }
    0000069C 7F08                   ADD         #8,R15
    0000069E 4F26                   LDS.L       @R15+,PR
    000006A0 68F6                   MOV.L       @R15+,R8
    000006A2 69F6                   MOV.L       @R15+,R9
    000006A4 6AF6                   MOV.L       @R15+,R10
    000006A6 6BF6                   MOV.L       @R15+,R11
    000006A8 6CF6                   MOV.L       @R15+,R12
    000006AA 6DF6                   MOV.L       @R15+,R13
    000006AC 000B                   RTS
    000006AE 6EF6                   MOV.L       @R15+,R14
      simplexC.c   413    
      simplexC.c   414    struct iteration* modelToIteration(struct problemStatement *pS)
    000006B0              _modelToIteration:               ; function: modelToIteration
                                                           ; frame size=32
    000006B0 2FE6                   MOV.L       R14,@-R15
    000006B2 2FD6                   MOV.L       R13,@-R15
    000006B4 2FC6                   MOV.L       R12,@-R15
    000006B6 6D43                   MOV         R4,R13
      simplexC.c   415    {
      simplexC.c   416        struct iteration *it;
      simplexC.c   417        int i;
      simplexC.c   418        it = malloc(sizeof(struct iteration));
    000006B8 D347                   MOV.L       L1195+8,R3 ; _malloc
    000006BA 2FB6                   MOV.L       R11,@-R15
    000006BC 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006BE 2F96                   MOV.L       R9,@-R15
    000006C0 2F86                   MOV.L       R8,@-R15
    000006C2 4F22                   STS.L       PR,@-R15
    000006C4 430B                   JSR         @R3
    000006C6 E444                   MOV         #68,R4
      simplexC.c   419        it->numIteration=0;
      simplexC.c   420        //Matriz B-1
      simplexC.c   421        it->BinvSize=pS->nConstraints;
      simplexC.c   422        it->Binv=calloc(it->BinvSize,sizeof(float));
    000006C8 DA44                   MOV.L       L1195+12,R10; _calloc
    000006CA E504                   MOV         #4,R5
    000006CC 6E03                   MOV         R0,R14
    000006CE E900                   MOV         #0,R9
    000006D0 2E92                   MOV.L       R9,@R14
    000006D2 52DB                   MOV.L       @(44,R13),R2
    000006D4 1E28                   MOV.L       R2,@(32,R14)
    000006D6 4A0B                   JSR         @R10
    000006D8 6423                   MOV         R2,R4
    000006DA 1E07                   MOV.L       R0,@(28,R14)
      simplexC.c   423        for(i=0;i<it->BinvSize;i++)
    000006DC A00E                   BRA         L1021
    000006DE 6C93                   MOV         R9,R12
    000006E0              L1022:                            
      simplexC.c   424        {
      simplexC.c   425            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    000006E0 58E7                   MOV.L       @(28,R14),R8
    000006E2 E504                   MOV         #4,R5
    000006E4 6BC3                   MOV         R12,R11
    000006E6 4B08                   SHLL2       R11
    000006E8 38BC                   ADD         R11,R8
    000006EA 4A0B                   JSR         @R10
    000006EC 54E8                   MOV.L       @(32,R14),R4
    000006EE 7C01                   ADD         #1,R12
    000006F0 2802                   MOV.L       R0,@R8
      simplexC.c   426            it->Binv[i][i]=1;
    000006F2 50E7                   MOV.L       @(28,R14),R0
    000006F4 D23A                   MOV.L       L1195+16,R2; H'3F800000
    000006F6 03BE                   MOV.L       @(R0,R11),R3
    000006F8 33BC                   ADD         R11,R3
    000006FA 2322                   MOV.L       R2,@R3
    000006FC              L1021:                            
    000006FC 53E8                   MOV.L       @(32,R14),R3
    000006FE 3C33                   CMP/GE      R3,R12
    00000700 8BEE                   BF          L1022
      simplexC.c   427        }
      simplexC.c   428        it->idBasicVariables=calloc(pS->nVariables,sizeof(int));
    00000702 E504                   MOV         #4,R5
    00000704 4A0B                   JSR         @R10
    00000706 54D7                   MOV.L       @(28,R13),R4
    00000708 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c   429        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    0000070A E504                   MOV         #4,R5
    0000070C 4A0B                   JSR         @R10
    0000070E 54E8                   MOV.L       @(32,R14),R4
    00000710 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c   430        for(i=0;i<it->BinvSize;i++)
    00000712 E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000714 A023                   BRA         L1023
    00000716 6593                   MOV         R9,R5
    00000718              L1024:                            
    00000718 6C53                   MOV         R5,R12
    0000071A 4C08                   SHLL2       R12
    0000071C E040                   MOV         #64,R0
    0000071E 00DE                   MOV.L       @(R0,R13),R0
    00000720 03CE                   MOV.L       @(R0,R12),R3
    00000722 4315                   CMP/PL      R3
    00000724 8B0C                   BF          L1025
      simplexC.c   431        {
      simplexC.c   432            if(pS->idConstraintTo2fasesVar[i]>0)
      simplexC.c   433            {
      simplexC.c   434                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintTo2fasesVar[i];
    00000726 E040                   MOV         #64,R0
    00000728 52E2                   MOV.L       @(8,R14),R2
    0000072A 32CC                   ADD         R12,R2
    0000072C 00DE                   MOV.L       @(R0,R13),R0
    0000072E 03CE                   MOV.L       @(R0,R12),R3
    00000730 2232                   MOV.L       R3,@R2
      simplexC.c   435                it->idBasicVariables[pS->idConstraintTo2fasesVar[i]]=1;
    00000732 E040                   MOV         #64,R0
    00000734 00DE                   MOV.L       @(R0,R13),R0
    00000736 03CE                   MOV.L       @(R0,R12),R3
    00000738 50E1                   MOV.L       @(4,R14),R0
    0000073A 4308                   SHLL2       R3
    0000073C A00E                   BRA         L1026
    0000073E 0346                   MOV.L       R4,@(R0,R3)
    00000740              L1025:                            
      simplexC.c   436            }else if(pS->idConstraintToSlopeVar[i]>0)
    00000740 50DF                   MOV.L       @(60,R13),R0
    00000742 03CE                   MOV.L       @(R0,R12),R3
    00000744 4315                   CMP/PL      R3
    00000746 8B09                   BF          L1026
      simplexC.c   437            {
      simplexC.c   438                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintToSlopeVar[i];
    00000748 52E2                   MOV.L       @(8,R14),R2
    0000074A 32CC                   ADD         R12,R2
    0000074C 50DF                   MOV.L       @(60,R13),R0
    0000074E 03CE                   MOV.L       @(R0,R12),R3
    00000750 2232                   MOV.L       R3,@R2
      simplexC.c   439                it->idBasicVariables[pS->idConstraintToSlopeVar[i]]=1;
    00000752 50DF                   MOV.L       @(60,R13),R0
    00000754 03CE                   MOV.L       @(R0,R12),R3
    00000756 4308                   SHLL2       R3
    00000758 50E1                   MOV.L       @(4,R14),R0
    0000075A 0346                   MOV.L       R4,@(R0,R3)
    0000075C              L1026:                            
    0000075C 7501                   ADD         #1,R5
    0000075E              L1023:                            
    0000075E 52E8                   MOV.L       @(32,R14),R2
    00000760 3523                   CMP/GE      R2,R5
    00000762 8BD9                   BF          L1024
      simplexC.c   440            }
      simplexC.c   441        }
      simplexC.c   442        return it;
      simplexC.c   443    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000764 4F26                   LDS.L       @R15+,PR
    00000766 60E3                   MOV         R14,R0
    00000768 68F6                   MOV.L       @R15+,R8
    0000076A 69F6                   MOV.L       @R15+,R9
    0000076C 6AF6                   MOV.L       @R15+,R10
    0000076E 6BF6                   MOV.L       @R15+,R11
    00000770 6CF6                   MOV.L       @R15+,R12
    00000772 6DF6                   MOV.L       @R15+,R13
    00000774 000B                   RTS
    00000776 6EF6                   MOV.L       @R15+,R14
      simplexC.c   444    
      simplexC.c   445    int lengthConcatenate(int sprintLength)
    00000778              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   446    {
      simplexC.c   447        return (sprintLength > 0) ? sprintLength : 0;
    00000778 4415                   CMP/PL      R4
    0000077A 8B01                   BF          L1029
    0000077C 000B                   RTS
    0000077E 6043                   MOV         R4,R0
    00000780              L1029:                            
    00000780 E000                   MOV         #0,R0
      simplexC.c   448    }
    00000782              L1031:                            
    00000782 000B                   RTS
    00000784 0009                   NOP
      simplexC.c   449    
      simplexC.c   450    char* getInequalityChar(int inequalitySign)
    00000786              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0
      simplexC.c   451    {
      simplexC.c   452        char * res;
      simplexC.c   453        switch (inequalitySign)
    00000786 6043                   MOV         R4,R0
    00000788 8800                   CMP/EQ      #0,R0
    0000078A 8905                   BT          L868
    0000078C 8801                   CMP/EQ      #1,R0
    0000078E 8906                   BT          L870
    00000790 8802                   CMP/EQ      #2,R0
    00000792 8907                   BT          L872
    00000794 A009                   BRA         L874
    00000796 0009                   NOP
    00000798              L868:                            ; case label 
      simplexC.c   454        {
      simplexC.c   455            case INE_EQUAL: res="="; break;
    00000798 D412                   MOV.L       L1195+20,R4; L552
    0000079A A007                   BRA         L1032
    0000079C 0009                   NOP
    0000079E              L870:                            ; case label 
      simplexC.c   456            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    0000079E D412                   MOV.L       L1195+24,R4; L553
    000007A0 A004                   BRA         L1032
    000007A2 0009                   NOP
    000007A4              L872:                            ; case label 
      simplexC.c   457            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    000007A4 D411                   MOV.L       L1195+28,R4; L554
    000007A6 A001                   BRA         L1032




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007A8 0009                   NOP
    000007AA              L874:                            ; default label 
      simplexC.c   458            default: res = "ERROR"; break;
    000007AA D411                   MOV.L       L1195+32,R4; L555
    000007AC              L1032:                            
      simplexC.c   459        }
      simplexC.c   460        return res;
      simplexC.c   461    }
    000007AC 000B                   RTS
    000007AE 6043                   MOV         R4,R0
      simplexC.c   462    
      simplexC.c   463    char * getFuncObjPurposeChar(int purpose)
    000007B0              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   464    {
      simplexC.c   465        char * res;
      simplexC.c   466        switch (purpose)
    000007B0 6043                   MOV         R4,R0
    000007B2 8800                   CMP/EQ      #0,R0
    000007B4 8903                   BT          L876
    000007B6 8801                   CMP/EQ      #1,R0
    000007B8 8904                   BT          L878
    000007BA A006                   BRA         L880
    000007BC 0009                   NOP
    000007BE              L876:                            ; case label 
      simplexC.c   467        {
      simplexC.c   468            case FUNC_MINIMIZE: res="MIN"; break;
    000007BE D40D                   MOV.L       L1195+36,R4; L561
    000007C0 A004                   BRA         L1034
    000007C2 0009                   NOP
    000007C4              L878:                            ; case label 
      simplexC.c   469            case FUNC_MAXIMIZE: res="MAX"; break;
    000007C4 D40C                   MOV.L       L1195+40,R4; L562
    000007C6 A001                   BRA         L1034
    000007C8 0009                   NOP
    000007CA              L880:                            ; default label 
      simplexC.c   470            default: res = "ERROR";break;
    000007CA D409                   MOV.L       L1195+32,R4; L555
    000007CC              L1034:                            
      simplexC.c   471        }
      simplexC.c   472        return res;
      simplexC.c   473    } 
    000007CC 000B                   RTS
    000007CE 6043                   MOV         R4,R0
    000007D0              L1195:                            
    000007D0 <00000000>             .DATA.L     __lts
    000007D4 4F000000               .DATA.L     H'4F000000
    000007D8 <00000000>             .DATA.L     _malloc
    000007DC <00000000>             .DATA.L     _calloc
    000007E0 3F800000               .DATA.L     H'3F800000
    000007E4 <00000000>             .DATA.L     L552
    000007E8 <00000000>             .DATA.L     L553
    000007EC <00000000>             .DATA.L     L554
    000007F0 <00000000>             .DATA.L     L555
    000007F4 <00000000>             .DATA.L     L561
    000007F8 <00000000>             .DATA.L     L562
      simplexC.c   474    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   475    int printObjFunc(struct problemStatement* pS,int modelType)
    000007FC              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1212
                                                           ; used runtime library name:
                                                           ; __stod
    000007FC 2FE6                   MOV.L       R14,@-R15
      simplexC.c   476    {
      simplexC.c   477        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   478        char *uselessSring[128];
      simplexC.c   479        int menuChoice;
      simplexC.c   480        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   481        sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOLVE",
                         + EXIT_OPT);
    000007FE E300                   MOV         #0,R3
    00000800 9088                   MOV.W       L1196,R0   ; H'FB7C
    00000802 2FD6                   MOV.L       R13,@-R15
    00000804 2FC6                   MOV.L       R12,@-R15
    00000806 6C43                   MOV         R4,R12
    00000808 2FB6                   MOV.L       R11,@-R15
    0000080A 2FA6                   MOV.L       R10,@-R15
    0000080C 2F96                   MOV.L       R9,@-R15
    0000080E 2F86                   MOV.L       R8,@-R15
    00000810 4F22                   STS.L       PR,@-R15
    00000812 3F0C                   ADD         R0,R15
    00000814 DB45                   MOV.L       L1196+24,R11; _sprintf
    00000816 2F52                   MOV.L       R5,@R15
    00000818 2F36                   MOV.L       R3,@-R15
    0000081A 50C1                   MOV.L       @(4,R12),R0
    0000081C 8801                   CMP/EQ      #1,R0
    0000081E 8F03                   BF/S        L1036
    00000820 EDFF                   MOV         #-1,R13
    00000822 D143                   MOV.L       L1196+28,R1; L575
    00000824 A002                   BRA         L1037
    00000826 2F16                   MOV.L       R1,@-R15
    00000828              L1036:                            
    00000828 D242                   MOV.L       L1196+32,R2; L576
    0000082A 2F26                   MOV.L       R2,@-R15
    0000082C              L1037:                            
    0000082C D142                   MOV.L       L1196+36,R1; L574
    0000082E 2F16                   MOV.L       R1,@-R15
    00000830 9471                   MOV.W       L1196+2,R4 ; H'0410
    00000832 4B0B                   JSR         @R11
    00000834 34FC                   ADD         R15,R4
      simplexC.c   482        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000836 53C7                   MOV.L       @(28,R12),R3
    00000838 946E                   MOV.W       L1196+4,R4 ; H'039C
    0000083A 2F36                   MOV.L       R3,@-R15
    0000083C 52CB                   MOV.L       @(44,R12),R2
    0000083E 2F26                   MOV.L       R2,@-R15
    00000840 D33E                   MOV.L       L1196+40,R3; L577
    00000842 2F36                   MOV.L       R3,@-R15
    00000844 4B0B                   JSR         @R11
    00000846 34FC                   ADD         R15,R4
    00000848 7F18                   ADD         #24,R15
      simplexC.c   483        if(modelType==TYPE_INPUT)
    0000084A 60F2                   MOV.L       @R15,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084C 8801                   CMP/EQ      #1,R0
    0000084E 8B13                   BF          L1038
      simplexC.c   484        {
      simplexC.c   485            sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    00000850 E044                   MOV         #68,R0
    00000852 BFAD                   BSR         _getFuncObjPurposeChar
    00000854 04CE                   MOV.L       @(R0,R12),R4
    00000856 2F06                   MOV.L       R0,@-R15
    00000858 D239                   MOV.L       L1196+44,R2; L579
    0000085A 2F26                   MOV.L       R2,@-R15
    0000085C 945D                   MOV.W       L1196+6,R4 ; H'030C
    0000085E 4B0B                   JSR         @R11
    00000860 34FC                   ADD         R15,R4
      simplexC.c   486            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    00000862 E348                   MOV         #72,R3
    00000864 D237                   MOV.L       L1196+48,R2; __stod
    00000866 33CC                   ADD         R12,R3
    00000868 50C7                   MOV.L       @(28,R12),R0
    0000086A 4008                   SHLL2       R0
    0000086C 6332                   MOV.L       @R3,R3
    0000086E 003E                   MOV.L       @(R0,R3),R0
    00000870 420B                   JSR         @R2
    00000872 2FF6                   MOV.L       R15,@-R15
    00000874 A00F                   BRA         L1185
    00000876 0009                   NOP
    00000878              L1038:                            
      simplexC.c   487        }else
      simplexC.c   488        {
      simplexC.c   489            sprintf(stroutBasicInfo2, "OBJ MIN");
    00000878 D333                   MOV.L       L1196+52,R3; L582
    0000087A 2F36                   MOV.L       R3,@-R15
    0000087C 944E                   MOV.W       L1196+8,R4 ; H'0308
    0000087E 4B0B                   JSR         @R11
    00000880 34FC                   ADD         R15,R4
      simplexC.c   490            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]);
    00000882 E34C                   MOV         #76,R3
    00000884 D22F                   MOV.L       L1196+48,R2; __stod
    00000886 33CC                   ADD         R12,R3
    00000888 50C7                   MOV.L       @(28,R12),R0
    0000088A 4008                   SHLL2       R0
    0000088C 6332                   MOV.L       @R3,R3
    0000088E 003E                   MOV.L       @(R0,R3),R0
    00000890 7FFC                   ADD         #-4,R15
    00000892 420B                   JSR         @R2
    00000894 2FF6                   MOV.L       R15,@-R15
    00000896              L1185:                            
    00000896 D32D                   MOV.L       L1196+56,R3; L580
    00000898 9441                   MOV.W       L1196+10,R4; H'0290
    0000089A 2F36                   MOV.L       R3,@-R15
    0000089C 4B0B                   JSR         @R11
    0000089E 34FC                   ADD         R15,R4
    000008A0 D82B                   MOV.L       L1196+60,R8; _Bdisp_PutDisp_DD
    000008A2 7F0C                   ADD         #12,R15
    000008A4 9A3C                   MOV.W       L1196+12,R10; H'0204
    000008A6 DE2B                   MOV.L       L1196+64,R14; _PrintMini
      simplexC.c   491        }
      simplexC.c   492        while(menuChoice!=EXIT_OPT)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A8 A077                   BRA         L1040
    000008AA 3AFC                   ADD         R15,R10
    000008AC              L1041:                            
      simplexC.c   493        {
      simplexC.c   494            Bdisp_AllClr_DDVRAM();
    000008AC D32A                   MOV.L       L1196+68,R3; _Bdisp_AllClr_DDVRAM
    000008AE 430B                   JSR         @R3
    000008B0 0009                   NOP
      simplexC.c   495            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000008B2 E710                   MOV         #16,R7
    000008B4 9635                   MOV.W       L1196+14,R6; H'0404
    000008B6 E500                   MOV         #0,R5
    000008B8 36FC                   ADD         R15,R6
    000008BA 4E0B                   JSR         @R14
    000008BC 6453                   MOV         R5,R4
      simplexC.c   496            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000008BE E710                   MOV         #16,R7
    000008C0 9630                   MOV.W       L1196+16,R6; H'0384
    000008C2 E507                   MOV         #7,R5
    000008C4 36FC                   ADD         R15,R6
    000008C6 4E0B                   JSR         @R14
    000008C8 E400                   MOV         #0,R4
      simplexC.c   497            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000008CA E710                   MOV         #16,R7
    000008CC 962B                   MOV.W       L1196+18,R6; H'0304
    000008CE E50E                   MOV         #14,R5
    000008D0 36FC                   ADD         R15,R6
    000008D2 4E0B                   JSR         @R14
    000008D4 E400                   MOV         #0,R4
      simplexC.c   498            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    000008D6 E710                   MOV         #16,R7
    000008D8 9626                   MOV.W       L1196+20,R6; H'0284
    000008DA E515                   MOV         #21,R5
    000008DC 36FC                   ADD         R15,R6
    000008DE 4E0B                   JSR         @R14
    000008E0 E400                   MOV         #0,R4
      simplexC.c   499            menuChoice = InputI(0, 35);
    000008E2 E523                   MOV         #35,R5
    000008E4 BBA3                   BSR         _InputI
    000008E6 E400                   MOV         #0,R4
      simplexC.c   500            Bdisp_PutDisp_DD();
    000008E8 480B                   JSR         @R8
    000008EA 6D03                   MOV         R0,R13
      simplexC.c   501            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000008EC 2DD8                   TST         R13,R13
    000008EE 8954                   BT          L1040
    000008F0 52C7                   MOV.L       @(28,R12),R2
    000008F2 3D27                   CMP/GT      R2,R13
    000008F4 8951                   BT          L1040
    000008F6 69D3                   MOV         R13,R9
    000008F8 60F2                   MOV.L       @R15,R0
    000008FA 79FF                   ADD         #-1,R9
    000008FC 8801                   CMP/EQ      #1,R0
    000008FE 8F2D                   BF/S        L1043
    00000900 4908                   SHLL2       R9
      simplexC.c   502            {
      simplexC.c   503                if(modelType==TYPE_INPUT)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   504                {
      simplexC.c   505                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    00000902 E048                   MOV         #72,R0
    00000904 D30F                   MOV.L       L1196+48,R3; __stod
    00000906 00CE                   MOV.L       @(R0,R12),R0
    00000908 009E                   MOV.L       @(R0,R9),R0
    0000090A 7FF8                   ADD         #-8,R15
    0000090C 430B                   JSR         @R3
    0000090E 2FF6                   MOV.L       R15,@-R15
    00000910 A02B                   BRA         L1186
    00000912 0009                   NOP
    00000914              L1196:                            
    00000914 FB7C                   .DATA.W     H'FB7C
    00000916 0410                   .DATA.W     H'0410
    00000918 039C                   .DATA.W     H'039C
    0000091A 030C                   .DATA.W     H'030C
    0000091C 0308                   .DATA.W     H'0308
    0000091E 0290                   .DATA.W     H'0290
    00000920 0204                   .DATA.W     H'0204
    00000922 0404                   .DATA.W     H'0404
    00000924 0384                   .DATA.W     H'0384
    00000926 0304                   .DATA.W     H'0304
    00000928 0284                   .DATA.W     H'0284
    0000092A 0000                   .DATA.W     0
    0000092C <00000000>             .DATA.L     _sprintf
    00000930 <00000000>             .DATA.L     L575
    00000934 <00000000>             .DATA.L     L576
    00000938 <00000000>             .DATA.L     L574
    0000093C <00000000>             .DATA.L     L577
    00000940 <00000000>             .DATA.L     L579
    00000944 <00000000>             .DATA.L     __stod
    00000948 <00000000>             .DATA.L     L582
    0000094C <00000000>             .DATA.L     L580
    00000950 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000954 <00000000>             .DATA.L     _PrintMini
    00000958 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000095C              L1043:                            
      simplexC.c   506                }else
      simplexC.c   507                {
      simplexC.c   508                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    0000095C D352                   MOV.L       L1197+14,R3; __stod
    0000095E E04C                   MOV         #76,R0
    00000960 00CE                   MOV.L       @(R0,R12),R0
    00000962 009E                   MOV.L       @(R0,R9),R0
    00000964 7FF8                   ADD         #-8,R15
    00000966 430B                   JSR         @R3
    00000968 2FF6                   MOV.L       R15,@-R15
    0000096A              L1186:                            
    0000096A 2FD6                   MOV.L       R13,@-R15
    0000096C D24F                   MOV.L       L1197+18,R2; L586
    0000096E 2F26                   MOV.L       R2,@-R15
    00000970 4B0B                   JSR         @R11
    00000972 64A3                   MOV         R10,R4
    00000974 7F10                   ADD         #16,R15
      simplexC.c   509                }
      simplexC.c   510                




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   511                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    00000976 E710                   MOV         #16,R7
    00000978 66A3                   MOV         R10,R6
    0000097A E52A                   MOV         #42,R5
    0000097C 4E0B                   JSR         @R14
    0000097E E400                   MOV         #0,R4
      simplexC.c   512                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000980 D64B                   MOV.L       L1197+22,R6; L588
    00000982 E531                   MOV         #49,R5
    00000984 E710                   MOV         #16,R7
    00000986 4E0B                   JSR         @R14
    00000988 E400                   MOV         #0,R4
      simplexC.c   513                string_input(0, 56, uselessSring);
    0000098A 66F3                   MOV         R15,R6
    0000098C D349                   MOV.L       L1197+26,R3; _string_input
    0000098E E538                   MOV         #56,R5
    00000990 7604                   ADD         #4,R6
    00000992 430B                   JSR         @R3
    00000994 E400                   MOV         #0,R4
      simplexC.c   514                Bdisp_PutDisp_DD();
    00000996 480B                   JSR         @R8
    00000998 0009                   NOP
    0000099A              L1040:                            
    0000099A 2DD8                   TST         R13,R13
    0000099C 8B86                   BF          L1041
      simplexC.c   515            }
      simplexC.c   516        }
      simplexC.c   517        return 0;
    0000099E E000                   MOV         #0,R0
      simplexC.c   518    }
    000009A0 917B                   MOV.W       L1197,R1   ; H'0484
    000009A2 3F1C                   ADD         R1,R15
    000009A4 4F26                   LDS.L       @R15+,PR
    000009A6 68F6                   MOV.L       @R15+,R8
    000009A8 69F6                   MOV.L       @R15+,R9
    000009AA 6AF6                   MOV.L       @R15+,R10
    000009AC 6BF6                   MOV.L       @R15+,R11
    000009AE 6CF6                   MOV.L       @R15+,R12
    000009B0 6DF6                   MOV.L       @R15+,R13
    000009B2 000B                   RTS
    000009B4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   519    
      simplexC.c   520    int printAjVal(struct problemStatement* pS, int varId)
    000009B6              _printAjVal:                     ; function: printAjVal
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   521    {
      simplexC.c   522        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   523        char *uselessSring[128];
      simplexC.c   524        int menuChoice;
      simplexC.c   525        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   526        sprintf(stroutBasicInfo, "Ax%d. nConstraints: %d, Exit %d",varId,pS->nConstraints,EXIT_OPT);
    000009B6 E300                   MOV         #0,R3
    000009B8 2FE6                   MOV.L       R14,@-R15
    000009BA EEFF                   MOV         #-1,R14
    000009BC 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009BE 2FC6                   MOV.L       R12,@-R15
    000009C0 2FB6                   MOV.L       R11,@-R15
    000009C2 2FA6                   MOV.L       R10,@-R15
    000009C4 2F96                   MOV.L       R9,@-R15
    000009C6 6943                   MOV         R4,R9
    000009C8 2F86                   MOV.L       R8,@-R15
    000009CA 4F22                   STS.L       PR,@-R15
    000009CC 9066                   MOV.W       L1197+2,R0 ; H'FCF8
    000009CE 3F0C                   ADD         R0,R15
    000009D0 2F52                   MOV.L       R5,@R15
    000009D2 9864                   MOV.W       L1197+4,R8 ; H'0288
    000009D4 38FC                   ADD         R15,R8
    000009D6 2F36                   MOV.L       R3,@-R15
    000009D8 529B                   MOV.L       @(44,R9),R2
    000009DA 2F26                   MOV.L       R2,@-R15
    000009DC 51F2                   MOV.L       @(8,R15),R1
    000009DE 2F16                   MOV.L       R1,@-R15
    000009E0 D235                   MOV.L       L1197+30,R2; L597
    000009E2 2F26                   MOV.L       R2,@-R15
    000009E4 D135                   MOV.L       L1197+34,R1; _sprintf
    000009E6 410B                   JSR         @R1
    000009E8 6483                   MOV         R8,R4
    000009EA 7F10                   ADD         #16,R15
    000009EC DA34                   MOV.L       L1197+38,R10; _Bdisp_PutDisp_DD
    000009EE DB35                   MOV.L       L1197+42,R11; _Bdisp_AllClr_DDVRAM
    000009F0 9C56                   MOV.W       L1197+6,R12; H'0208
    000009F2 3CFC                   ADD         R15,R12
    000009F4 DD34                   MOV.L       L1197+46,R13; _PrintMini
    000009F6 63F2                   MOV.L       @R15,R3
    000009F8 73FF                   ADD         #-1,R3
    000009FA 4308                   SHLL2       R3
      simplexC.c   527        while(menuChoice!=EXIT_OPT)
    000009FC A03F                   BRA         L1046
    000009FE 1F31                   MOV.L       R3,@(4,R15)
    00000A00              L1047:                            
      simplexC.c   528        {
      simplexC.c   529            Bdisp_AllClr_DDVRAM();
    00000A00 4B0B                   JSR         @R11
    00000A02 0009                   NOP
      simplexC.c   530            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000A04 E710                   MOV         #16,R7
    00000A06 6683                   MOV         R8,R6
    00000A08 E500                   MOV         #0,R5
    00000A0A 4D0B                   JSR         @R13
    00000A0C 6453                   MOV         R5,R4
      simplexC.c   531            menuChoice=InputI(0,7);
    00000A0E E507                   MOV         #7,R5
    00000A10 BB0D                   BSR         _InputI
    00000A12 E400                   MOV         #0,R4
      simplexC.c   532            Bdisp_PutDisp_DD();
    00000A14 4A0B                   JSR         @R10
    00000A16 6E03                   MOV         R0,R14
      simplexC.c   533            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000A18 2EE8                   TST         R14,R14
    00000A1A 8930                   BT          L1046
    00000A1C 539B                   MOV.L       @(44,R9),R3
    00000A1E 3E37                   CMP/GT      R3,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A20 892D                   BT          L1046
      simplexC.c   534            {
      simplexC.c   535                Bdisp_AllClr_DDVRAM();
    00000A22 4B0B                   JSR         @R11
    00000A24 0009                   NOP
      simplexC.c   536                sprintf(stroutVariable, "Ax%d. %.2f Pos %d",varId,pS->ajVector[varId-1][menuChoice-1],menuChoi
                         +ce);
    00000A26 E050                   MOV         #80,R0
    00000A28 D11F                   MOV.L       L1197+14,R1; __stod
    00000A2A 62E3                   MOV         R14,R2
    00000A2C 2FE6                   MOV.L       R14,@-R15
    00000A2E 72FF                   ADD         #-1,R2
    00000A30 53F2                   MOV.L       @(8,R15),R3
    00000A32 4208                   SHLL2       R2
    00000A34 009E                   MOV.L       @(R0,R9),R0
    00000A36 003E                   MOV.L       @(R0,R3),R0
    00000A38 002E                   MOV.L       @(R0,R2),R0
    00000A3A 7FF8                   ADD         #-8,R15
    00000A3C 410B                   JSR         @R1
    00000A3E 2FF6                   MOV.L       R15,@-R15
    00000A40 52F3                   MOV.L       @(12,R15),R2
    00000A42 2F26                   MOV.L       R2,@-R15
    00000A44 D121                   MOV.L       L1197+50,R1; L600
    00000A46 2F16                   MOV.L       R1,@-R15
    00000A48 D21C                   MOV.L       L1197+34,R2; _sprintf
    00000A4A 420B                   JSR         @R2
    00000A4C 64C3                   MOV         R12,R4
    00000A4E 7F14                   ADD         #20,R15
      simplexC.c   537                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000A50 E710                   MOV         #16,R7
    00000A52 66C3                   MOV         R12,R6
    00000A54 E500                   MOV         #0,R5
    00000A56 4D0B                   JSR         @R13
    00000A58 6453                   MOV         R5,R4
      simplexC.c   538                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000A5A E710                   MOV         #16,R7
    00000A5C D614                   MOV.L       L1197+22,R6; L588
    00000A5E E507                   MOV         #7,R5
    00000A60 4D0B                   JSR         @R13
    00000A62 E400                   MOV         #0,R4
      simplexC.c   539                string_input(0, 14, uselessSring);
    00000A64 D313                   MOV.L       L1197+26,R3; _string_input
    00000A66 66F3                   MOV         R15,R6
    00000A68 7608                   ADD         #8,R6
    00000A6A E50E                   MOV         #14,R5
    00000A6C 430B                   JSR         @R3
    00000A6E E400                   MOV         #0,R4
      simplexC.c   540                Bdisp_PutDisp_DD();
    00000A70 4A0B                   JSR         @R10
    00000A72 0009                   NOP
      simplexC.c   541                memset(stroutVariable,0,128);
    00000A74 9615                   MOV.W       L1197+8,R6 ; H'0080
    00000A76 E500                   MOV         #0,R5
    00000A78 D215                   MOV.L       L1197+54,R2; _memset
    00000A7A 420B                   JSR         @R2
    00000A7C 64C3                   MOV         R12,R4
    00000A7E              L1046:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A7E 2EE8                   TST         R14,R14
    00000A80 8BBE                   BF          L1047
      simplexC.c   542            }
      simplexC.c   543        }
      simplexC.c   544        return 0;
    00000A82 E000                   MOV         #0,R0
      simplexC.c   545    }
    00000A84 910E                   MOV.W       L1197+10,R1; H'0308
    00000A86 3F1C                   ADD         R1,R15
    00000A88 4F26                   LDS.L       @R15+,PR
    00000A8A 68F6                   MOV.L       @R15+,R8
    00000A8C 69F6                   MOV.L       @R15+,R9
    00000A8E 6AF6                   MOV.L       @R15+,R10
    00000A90 6BF6                   MOV.L       @R15+,R11
    00000A92 6CF6                   MOV.L       @R15+,R12
    00000A94 6DF6                   MOV.L       @R15+,R13
    00000A96 000B                   RTS
    00000A98 6EF6                   MOV.L       @R15+,R14
    00000A9A              L1197:                            
    00000A9A 0484                   .DATA.W     H'0484
    00000A9C FCF8                   .DATA.W     H'FCF8
    00000A9E 0288                   .DATA.W     H'0288
    00000AA0 0208                   .DATA.W     H'0208
    00000AA2 0080                   .DATA.W     H'0080
    00000AA4 0308                   .DATA.W     H'0308
    00000AA6 0000                   .DATA.W     0
    00000AA8 <00000000>             .DATA.L     __stod
    00000AAC <00000000>             .DATA.L     L586
    00000AB0 <00000000>             .DATA.L     L588
    00000AB4 <00000000>             .DATA.L     _string_input
    00000AB8 <00000000>             .DATA.L     L597
    00000ABC <00000000>             .DATA.L     _sprintf
    00000AC0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000AC4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000AC8 <00000000>             .DATA.L     _PrintMini
    00000ACC <00000000>             .DATA.L     L600
    00000AD0 <00000000>             .DATA.L     _memset
      simplexC.c   546    
      simplexC.c   547    int printAjVec(struct problemStatement* pS)
    00000AD4              _printAjVec:                     ; function: printAjVec
                                                           ; frame size=172
    00000AD4 2FE6                   MOV.L       R14,@-R15
      simplexC.c   548    {
      simplexC.c   549        char stroutBasicInfo[128];
      simplexC.c   550        int menuChoice;
      simplexC.c   551        menuChoice=INITIALIZE_VALUE_OPT;
    00000AD6 EEFF                   MOV         #-1,R14
    00000AD8 2FD6                   MOV.L       R13,@-R15
    00000ADA 6D43                   MOV         R4,R13
    00000ADC 2FC6                   MOV.L       R12,@-R15
    00000ADE 2FB6                   MOV.L       R11,@-R15
    00000AE0 2FA6                   MOV.L       R10,@-R15
    00000AE2 2F96                   MOV.L       R9,@-R15
    00000AE4 2F86                   MOV.L       R8,@-R15
    00000AE6 4F22                   STS.L       PR,@-R15
    00000AE8 D825                   MOV.L       L1198+6,R8 ; _PrintMini
    00000AEA 7F80                   ADD         #-128,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AEC D925                   MOV.L       L1198+10,R9; _sprintf
    00000AEE DA26                   MOV.L       L1198+14,R10; L608
    00000AF0 DB26                   MOV.L       L1198+18,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   552        while(menuChoice!=EXIT_OPT)
    00000AF2 A01D                   BRA         L1050
    00000AF4 6CF3                   MOV         R15,R12
    00000AF6              L1051:                            
      simplexC.c   553        {
      simplexC.c   554            Bdisp_AllClr_DDVRAM();
    00000AF6 4B0B                   JSR         @R11
    00000AF8 0009                   NOP
      simplexC.c   555            sprintf(stroutBasicInfo, "Axj pMenu Vars %d.  %d exit",pS->nVariables,EXIT_OPT);
    00000AFA E200                   MOV         #0,R2
    00000AFC 2F26                   MOV.L       R2,@-R15
    00000AFE 53D7                   MOV.L       @(28,R13),R3
    00000B00 2F36                   MOV.L       R3,@-R15
    00000B02 2FA6                   MOV.L       R10,@-R15
    00000B04 490B                   JSR         @R9
    00000B06 64C3                   MOV         R12,R4
    00000B08 7F0C                   ADD         #12,R15
      simplexC.c   556            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000B0A E710                   MOV         #16,R7
    00000B0C 66C3                   MOV         R12,R6
    00000B0E E500                   MOV         #0,R5
    00000B10 480B                   JSR         @R8
    00000B12 6453                   MOV         R5,R4
      simplexC.c   557            menuChoice = InputI(0, 7);
    00000B14 E507                   MOV         #7,R5
    00000B16 BA8A                   BSR         _InputI
    00000B18 E400                   MOV         #0,R4
      simplexC.c   558            Bdisp_PutDisp_DD();
    00000B1A D31D                   MOV.L       L1198+22,R3; _Bdisp_PutDisp_DD
    00000B1C 430B                   JSR         @R3
    00000B1E 6E03                   MOV         R0,R14
      simplexC.c   559            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000B20 2EE8                   TST         R14,R14
    00000B22 8905                   BT          L1050
    00000B24 53D7                   MOV.L       @(28,R13),R3
    00000B26 3E37                   CMP/GT      R3,R14
    00000B28 8902                   BT          L1050
      simplexC.c   560            {
      simplexC.c   561                printAjVal(pS,menuChoice);
    00000B2A 65E3                   MOV         R14,R5
    00000B2C BF43                   BSR         _printAjVal
    00000B2E 64D3                   MOV         R13,R4
    00000B30              L1050:                            
    00000B30 2EE8                   TST         R14,R14
    00000B32 8BE0                   BF          L1051
      simplexC.c   562            }
      simplexC.c   563        }
      simplexC.c   564        return 0;
      simplexC.c   565    }
    00000B34 9121                   MOV.W       L1198,R1   ; H'0080
    00000B36 E000                   MOV         #0,R0
    00000B38 3F1C                   ADD         R1,R15
    00000B3A 4F26                   LDS.L       @R15+,PR
    00000B3C 68F6                   MOV.L       @R15+,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B3E 69F6                   MOV.L       @R15+,R9
    00000B40 6AF6                   MOV.L       @R15+,R10
    00000B42 6BF6                   MOV.L       @R15+,R11
    00000B44 6CF6                   MOV.L       @R15+,R12
    00000B46 6DF6                   MOV.L       @R15+,R13
    00000B48 000B                   RTS
    00000B4A 6EF6                   MOV.L       @R15+,R14
      simplexC.c   566    
      simplexC.c   567    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    00000B4C              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
    00000B4C 2FE6                   MOV.L       R14,@-R15
    00000B4E 6343                   MOV         R4,R3
    00000B50 9014                   MOV.W       L1198+2,R0 ; H'FCF8
    00000B52 73FF                   ADD         #-1,R3
    00000B54 2FD6                   MOV.L       R13,@-R15
    00000B56 4308                   SHLL2       R3
    00000B58 9E11                   MOV.W       L1198+4,R14; H'0208
      simplexC.c   568    {
      simplexC.c   569        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   570        char *uselessSring[128];
      simplexC.c   571        int menuChoice;
      simplexC.c   572        int lengthString;
      simplexC.c   573        lengthString=0;
    00000B5A ED00                   MOV         #0,R13
    00000B5C 2FC6                   MOV.L       R12,@-R15
    00000B5E 2FB6                   MOV.L       R11,@-R15
    00000B60 2FA6                   MOV.L       R10,@-R15
      simplexC.c   574        menuChoice=INITIALIZE_VALUE_OPT;
    00000B62 EBFF                   MOV         #-1,R11
    00000B64 DC07                   MOV.L       L1198+10,R12; _sprintf
    00000B66 6A53                   MOV         R5,R10
    00000B68 2F96                   MOV.L       R9,@-R15
    00000B6A 2F86                   MOV.L       R8,@-R15
    00000B6C 4F22                   STS.L       PR,@-R15
    00000B6E 3F0C                   ADD         R0,R15
    00000B70 D903                   MOV.L       L1198+6,R9 ; _PrintMini
    00000B72 3EFC                   ADD         R15,R14
    00000B74 2F42                   MOV.L       R4,@R15
      simplexC.c   575        
      simplexC.c   576        while(menuChoice!=EXIT_OPT)
    00000B76 A086                   BRA         L1054
    00000B78 1F31                   MOV.L       R3,@(4,R15)
    00000B7A              L1198:                            
    00000B7A 0080                   .DATA.W     H'0080
    00000B7C FCF8                   .DATA.W     H'FCF8
    00000B7E 0208                   .DATA.W     H'0208
    00000B80 <00000000>             .DATA.L     _PrintMini
    00000B84 <00000000>             .DATA.L     _sprintf
    00000B88 <00000000>             .DATA.L     L608
    00000B8C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000B90 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000B94              L1055:                            
      simplexC.c   577        {
      simplexC.c   578            Bdisp_AllClr_DDVRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B94 D145                   MOV.L       L1199+10,R1; _Bdisp_AllClr_DDVRAM
    00000B96 410B                   JSR         @R1
    00000B98 0009                   NOP
      simplexC.c   579            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    00000B9A E200                   MOV         #0,R2
    00000B9C 9481                   MOV.W       L1199,R4   ; H'0298
    00000B9E 2F26                   MOV.L       R2,@-R15
    00000BA0 53A7                   MOV.L       @(28,R10),R3
    00000BA2 2F36                   MOV.L       R3,@-R15
    00000BA4 51F2                   MOV.L       @(8,R15),R1
    00000BA6 2F16                   MOV.L       R1,@-R15
    00000BA8 D341                   MOV.L       L1199+14,R3; L620
    00000BAA 2F36                   MOV.L       R3,@-R15
    00000BAC 4C0B                   JSR         @R12
    00000BAE 34FC                   ADD         R15,R4
      simplexC.c   580            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000BB0 9678                   MOV.W       L1199+2,R6 ; H'0288
    00000BB2 E500                   MOV         #0,R5
    00000BB4 7F10                   ADD         #16,R15
    00000BB6 E710                   MOV         #16,R7
    00000BB8 36FC                   ADD         R15,R6
    00000BBA 490B                   JSR         @R9
    00000BBC 6453                   MOV         R5,R4
      simplexC.c   581            menuChoice=InputI(0,7);
    00000BBE E507                   MOV         #7,R5
    00000BC0 BA35                   BSR         _InputI
    00000BC2 E400                   MOV         #0,R4
      simplexC.c   582            Bdisp_PutDisp_DD();
    00000BC4 D33B                   MOV.L       L1199+18,R3; _Bdisp_PutDisp_DD
    00000BC6 430B                   JSR         @R3
    00000BC8 6B03                   MOV         R0,R11
      simplexC.c   583            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000BCA 2BB8                   TST         R11,R11
    00000BCC 895B                   BT          L1054
    00000BCE 53A7                   MOV.L       @(28,R10),R3
    00000BD0 3B37                   CMP/GT      R3,R11
    00000BD2 8958                   BT          L1054
      simplexC.c   584            {
      simplexC.c   585                Bdisp_AllClr_DDVRAM();
    00000BD4 D135                   MOV.L       L1199+10,R1; _Bdisp_AllClr_DDVRAM
    00000BD6 410B                   JSR         @R1
    00000BD8 0009                   NOP
      simplexC.c   586                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    00000BDA 68B3                   MOV         R11,R8
    00000BDC D236                   MOV.L       L1199+22,R2; __stod
    00000BDE 78FF                   ADD         #-1,R8
    00000BE0 2FB6                   MOV.L       R11,@-R15
    00000BE2 4808                   SHLL2       R8
    00000BE4 53F2                   MOV.L       @(8,R15),R3
    00000BE6 50A4                   MOV.L       @(16,R10),R0
    00000BE8 003E                   MOV.L       @(R0,R3),R0
    00000BEA 008E                   MOV.L       @(R0,R8),R0
    00000BEC 7FF8                   ADD         #-8,R15
    00000BEE 420B                   JSR         @R2
    00000BF0 2FF6                   MOV.L       R15,@-R15
    00000BF2 64D3                   MOV         R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BF4 51F3                   MOV.L       @(12,R15),R1
    00000BF6 2F16                   MOV.L       R1,@-R15
    00000BF8 D230                   MOV.L       L1199+26,R2; L622
    00000BFA 2F26                   MOV.L       R2,@-R15
    00000BFC 4C0B                   JSR         @R12
    00000BFE 34EC                   ADD         R14,R4
    00000C00 7F14                   ADD         #20,R15
    00000C02 BDB9                   BSR         _lengthConcatenate
    00000C04 6403                   MOV         R0,R4
    00000C06 3D0C                   ADD         R0,R13
      simplexC.c   587    
      simplexC.c   588                if(pS->idSlopeVariables[menuChoice-1])
    00000C08 50AD                   MOV.L       @(52,R10),R0
    00000C0A 028E                   MOV.L       @(R0,R8),R2
    00000C0C 2228                   TST         R2,R2
    00000C0E 8908                   BT          L1057
      simplexC.c   589                {
      simplexC.c   590                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    00000C10 D12B                   MOV.L       L1199+30,R1; L624
    00000C12 64D3                   MOV         R13,R4
    00000C14 2F16                   MOV.L       R1,@-R15
    00000C16 4C0B                   JSR         @R12
    00000C18 34EC                   ADD         R14,R4
    00000C1A 7F04                   ADD         #4,R15
    00000C1C BDAC                   BSR         _lengthConcatenate
    00000C1E 6403                   MOV         R0,R4
    00000C20 3D0C                   ADD         R0,R13
    00000C22              L1057:                            
      simplexC.c   591                }
      simplexC.c   592                if(pS->id2fasesVariables[menuChoice-1])
    00000C22 50AE                   MOV.L       @(56,R10),R0
    00000C24 028E                   MOV.L       @(R0,R8),R2
    00000C26 2228                   TST         R2,R2
    00000C28 8908                   BT          L1058
      simplexC.c   593                {
      simplexC.c   594                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    00000C2A 64D3                   MOV         R13,R4
    00000C2C D125                   MOV.L       L1199+34,R1; L626
    00000C2E 2F16                   MOV.L       R1,@-R15
    00000C30 4C0B                   JSR         @R12
    00000C32 34EC                   ADD         R14,R4
    00000C34 7F04                   ADD         #4,R15
    00000C36 BD9F                   BSR         _lengthConcatenate
    00000C38 6403                   MOV         R0,R4
    00000C3A 3D0C                   ADD         R0,R13
    00000C3C              L1058:                            
      simplexC.c   595                }
      simplexC.c   596                if(pS->idIntegerVariables[menuChoice-1])
    00000C3C 50AC                   MOV.L       @(48,R10),R0
    00000C3E 028E                   MOV.L       @(R0,R8),R2
    00000C40 2228                   TST         R2,R2
    00000C42 8907                   BT          L1059
      simplexC.c   597                {
      simplexC.c   598                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000C44 D120                   MOV.L       L1199+38,R1; L628
    00000C46 64D3                   MOV         R13,R4
    00000C48 2F16                   MOV.L       R1,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C4A 4C0B                   JSR         @R12
    00000C4C 34EC                   ADD         R14,R4
    00000C4E 7F04                   ADD         #4,R15
    00000C50 BD92                   BSR         _lengthConcatenate
    00000C52 6403                   MOV         R0,R4
    00000C54              L1059:                            
      simplexC.c   599                }
      simplexC.c   600                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000C54 E710                   MOV         #16,R7
    00000C56 66E3                   MOV         R14,R6
    00000C58 E500                   MOV         #0,R5
    00000C5A 490B                   JSR         @R9
    00000C5C 6453                   MOV         R5,R4
      simplexC.c   601                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000C5E E710                   MOV         #16,R7
    00000C60 D61A                   MOV.L       L1199+42,R6; L588
    00000C62 E507                   MOV         #7,R5
    00000C64 490B                   JSR         @R9
    00000C66 E400                   MOV         #0,R4
      simplexC.c   602                string_input(0, 14, uselessSring);
    00000C68 D219                   MOV.L       L1199+46,R2; _string_input
    00000C6A 66F3                   MOV         R15,R6
    00000C6C 7608                   ADD         #8,R6
    00000C6E E50E                   MOV         #14,R5
    00000C70 420B                   JSR         @R2
    00000C72 E400                   MOV         #0,R4
      simplexC.c   603                Bdisp_PutDisp_DD();
    00000C74 D30F                   MOV.L       L1199+18,R3; _Bdisp_PutDisp_DD
    00000C76 430B                   JSR         @R3
    00000C78 0009                   NOP
      simplexC.c   604                memset(stroutVariable,0,128);
    00000C7A E500                   MOV         #0,R5
    00000C7C D215                   MOV.L       L1199+50,R2; _memset
    00000C7E 9612                   MOV.W       L1199+4,R6 ; H'0080
    00000C80 420B                   JSR         @R2
    00000C82 64E3                   MOV         R14,R4
      simplexC.c   605                lengthString=0;
    00000C84 ED00                   MOV         #0,R13
    00000C86              L1054:                            
    00000C86 2BB8                   TST         R11,R11
    00000C88 8B84                   BF          L1055
      simplexC.c   606            }
      simplexC.c   607        }
      simplexC.c   608        return 0;
    00000C8A E000                   MOV         #0,R0
      simplexC.c   609    }
    00000C8C 910C                   MOV.W       L1199+6,R1 ; H'0308
    00000C8E 3F1C                   ADD         R1,R15
    00000C90 4F26                   LDS.L       @R15+,PR
    00000C92 68F6                   MOV.L       @R15+,R8
    00000C94 69F6                   MOV.L       @R15+,R9
    00000C96 6AF6                   MOV.L       @R15+,R10
    00000C98 6BF6                   MOV.L       @R15+,R11
    00000C9A 6CF6                   MOV.L       @R15+,R12
    00000C9C 6DF6                   MOV.L       @R15+,R13
    00000C9E 000B                   RTS
    00000CA0 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CA2              L1199:                            
    00000CA2 0298                   .DATA.W     H'0298
    00000CA4 0288                   .DATA.W     H'0288
    00000CA6 0080                   .DATA.W     H'0080
    00000CA8 0308                   .DATA.W     H'0308
    00000CAA 0000                   .DATA.W     0
    00000CAC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000CB0 <00000000>             .DATA.L     L620
    00000CB4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000CB8 <00000000>             .DATA.L     __stod
    00000CBC <00000000>             .DATA.L     L622
    00000CC0 <00000000>             .DATA.L     L624
    00000CC4 <00000000>             .DATA.L     L626
    00000CC8 <00000000>             .DATA.L     L628
    00000CCC <00000000>             .DATA.L     L588
    00000CD0 <00000000>             .DATA.L     _string_input
    00000CD4 <00000000>             .DATA.L     _memset
      simplexC.c   610    
      simplexC.c   611    int printIne(int contsId, struct problemStatement* pS)
    00000CD8              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000CD8 4F22                   STS.L       PR,@-R15
    00000CDA 9074                   MOV.W       L1200,R0   ; H'FD78
      simplexC.c   612    {
      simplexC.c   613        char stroutBasicInfo[128];
      simplexC.c   614        char *uselessSring[128];
      simplexC.c   615        Bdisp_AllClr_DDVRAM();
    00000CDC D33C                   MOV.L       L1200+10,R3; _Bdisp_AllClr_DDVRAM
    00000CDE 3F0C                   ADD         R0,R15
    00000CE0 2F42                   MOV.L       R4,@R15
    00000CE2 430B                   JSR         @R3
    00000CE4 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   616        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    00000CE6 50F1                   MOV.L       @(4,R15),R0
    00000CE8 64F2                   MOV.L       @R15,R4
    00000CEA 74FF                   ADD         #-1,R4
    00000CEC 5006                   MOV.L       @(24,R0),R0
    00000CEE 4408                   SHLL2       R4
    00000CF0 BD49                   BSR         _getInequalityChar
    00000CF2 044E                   MOV.L       @(R0,R4),R4
    00000CF4 2F06                   MOV.L       R0,@-R15
    00000CF6 52F1                   MOV.L       @(4,R15),R2
    00000CF8 D336                   MOV.L       L1200+14,R3; L635
    00000CFA 2F26                   MOV.L       R2,@-R15
    00000CFC 2F36                   MOV.L       R3,@-R15
    00000CFE 9463                   MOV.W       L1200+2,R4 ; H'0214
    00000D00 D235                   MOV.L       L1200+18,R2; _sprintf
    00000D02 420B                   JSR         @R2
    00000D04 34FC                   ADD         R15,R4
      simplexC.c   617        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000D06 E710                   MOV         #16,R7
    00000D08 965E                   MOV.W       L1200+2,R6 ; H'0214
    00000D0A E500                   MOV         #0,R5
    00000D0C D333                   MOV.L       L1200+22,R3; _PrintMini
    00000D0E 36FC                   ADD         R15,R6
    00000D10 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D12 6453                   MOV         R5,R4
      simplexC.c   618        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000D14 D632                   MOV.L       L1200+26,R6; L588
    00000D16 E507                   MOV         #7,R5
    00000D18 D230                   MOV.L       L1200+22,R2; _PrintMini
    00000D1A E710                   MOV         #16,R7
    00000D1C 420B                   JSR         @R2
    00000D1E E400                   MOV         #0,R4
      simplexC.c   619        string_input(0, 14, uselessSring);
    00000D20 D330                   MOV.L       L1200+30,R3; _string_input
    00000D22 66F3                   MOV         R15,R6
    00000D24 7614                   ADD         #20,R6
    00000D26 E50E                   MOV         #14,R5
    00000D28 430B                   JSR         @R3
    00000D2A E400                   MOV         #0,R4
      simplexC.c   620        Bdisp_PutDisp_DD();
    00000D2C D22E                   MOV.L       L1200+34,R2; _Bdisp_PutDisp_DD
    00000D2E 420B                   JSR         @R2
    00000D30 0009                   NOP
      simplexC.c   621        return 0;
      simplexC.c   622    }
    00000D32 914A                   MOV.W       L1200+4,R1 ; H'0294
    00000D34 3F1C                   ADD         R1,R15
    00000D36 4F26                   LDS.L       @R15+,PR
    00000D38 000B                   RTS
    00000D3A E000                   MOV         #0,R0
      simplexC.c   623    
      simplexC.c   624    int printRVal(int contsId, struct problemStatement* pS)
    00000D3C              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
                                                           ; used runtime library name:
                                                           ; __stod
    00000D3C 4F22                   STS.L       PR,@-R15
    00000D3E 9042                   MOV.W       L1200,R0   ; H'FD78
      simplexC.c   625    {
      simplexC.c   626        char stroutBasicInfo[128];
      simplexC.c   627        char *uselessSring[128];
      simplexC.c   628        Bdisp_AllClr_DDVRAM();
    00000D40 D323                   MOV.L       L1200+10,R3; _Bdisp_AllClr_DDVRAM
    00000D42 3F0C                   ADD         R0,R15
    00000D44 2F42                   MOV.L       R4,@R15
    00000D46 430B                   JSR         @R3
    00000D48 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   629        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    00000D4A 50F1                   MOV.L       @(4,R15),R0
    00000D4C 63F2                   MOV.L       @R15,R3
    00000D4E 73FF                   ADD         #-1,R3
    00000D50 5005                   MOV.L       @(20,R0),R0
    00000D52 4308                   SHLL2       R3
    00000D54 D225                   MOV.L       L1200+38,R2; __stod
    00000D56 003E                   MOV.L       @(R0,R3),R0
    00000D58 7FF8                   ADD         #-8,R15
    00000D5A 420B                   JSR         @R2
    00000D5C 2FF6                   MOV.L       R15,@-R15
    00000D5E 53F2                   MOV.L       @(8,R15),R3
    00000D60 D223                   MOV.L       L1200+42,R2; L642
    00000D62 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D64 2F26                   MOV.L       R2,@-R15
    00000D66 9431                   MOV.W       L1200+6,R4 ; H'0218
    00000D68 D31B                   MOV.L       L1200+18,R3; _sprintf
    00000D6A 430B                   JSR         @R3
    00000D6C 34FC                   ADD         R15,R4
      simplexC.c   630        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000D6E E710                   MOV         #16,R7
    00000D70 962C                   MOV.W       L1200+6,R6 ; H'0218
    00000D72 E500                   MOV         #0,R5
    00000D74 D219                   MOV.L       L1200+22,R2; _PrintMini
    00000D76 36FC                   ADD         R15,R6
    00000D78 420B                   JSR         @R2
    00000D7A 6453                   MOV         R5,R4
      simplexC.c   631        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000D7C D618                   MOV.L       L1200+26,R6; L588
    00000D7E E507                   MOV         #7,R5
    00000D80 D316                   MOV.L       L1200+22,R3; _PrintMini
    00000D82 E710                   MOV         #16,R7
    00000D84 430B                   JSR         @R3
    00000D86 E400                   MOV         #0,R4
      simplexC.c   632        string_input(0, 14, uselessSring);
    00000D88 D216                   MOV.L       L1200+30,R2; _string_input
    00000D8A 66F3                   MOV         R15,R6
    00000D8C 7618                   ADD         #24,R6
    00000D8E E50E                   MOV         #14,R5
    00000D90 420B                   JSR         @R2
    00000D92 E400                   MOV         #0,R4
      simplexC.c   633        Bdisp_PutDisp_DD();
    00000D94 D314                   MOV.L       L1200+34,R3; _Bdisp_PutDisp_DD
    00000D96 430B                   JSR         @R3
    00000D98 0009                   NOP
      simplexC.c   634        return 0;
      simplexC.c   635    }
    00000D9A 9118                   MOV.W       L1200+8,R1 ; H'0298
    00000D9C 3F1C                   ADD         R1,R15
    00000D9E 4F26                   LDS.L       @R15+,PR
    00000DA0 000B                   RTS
    00000DA2 E000                   MOV         #0,R0
      simplexC.c   636    
      simplexC.c   637    
      simplexC.c   638    int printInfoConstraint(int contsId, struct problemStatement* pS)
    00000DA4              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    00000DA4 2FE6                   MOV.L       R14,@-R15
    00000DA6 2FD6                   MOV.L       R13,@-R15
    00000DA8 2FC6                   MOV.L       R12,@-R15
      simplexC.c   639    {
      simplexC.c   640        char stroutBasicInfo[128];
      simplexC.c   641        int menuChoice;
      simplexC.c   642        menuChoice=INITIALIZE_VALUE_OPT;
    00000DAA EDFF                   MOV         #-1,R13
    00000DAC DE0B                   MOV.L       L1200+22,R14; _PrintMini
    00000DAE 6C43                   MOV         R4,R12
    00000DB0 2FB6                   MOV.L       R11,@-R15
    00000DB2 6B53                   MOV         R5,R11
    00000DB4 2FA6                   MOV.L       R10,@-R15
    00000DB6 2F96                   MOV.L       R9,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DB8 2F86                   MOV.L       R8,@-R15
    00000DBA 4F22                   STS.L       PR,@-R15
    00000DBC D80D                   MOV.L       L1200+46,R8; L650
    00000DBE 7F80                   ADD         #-128,R15
    00000DC0 D905                   MOV.L       L1200+18,R9; _sprintf
      simplexC.c   643        while(menuChoice!=EXIT_OPT)
    00000DC2 A058                   BRA         L1063
    00000DC4 6AF3                   MOV         R15,R10
    00000DC6              L1200:                            
    00000DC6 FD78                   .DATA.W     H'FD78
    00000DC8 0214                   .DATA.W     H'0214
    00000DCA 0294                   .DATA.W     H'0294
    00000DCC 0218                   .DATA.W     H'0218
    00000DCE 0298                   .DATA.W     H'0298
    00000DD0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000DD4 <00000000>             .DATA.L     L635
    00000DD8 <00000000>             .DATA.L     _sprintf
    00000DDC <00000000>             .DATA.L     _PrintMini
    00000DE0 <00000000>             .DATA.L     L588
    00000DE4 <00000000>             .DATA.L     _string_input
    00000DE8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000DEC <00000000>             .DATA.L     __stod
    00000DF0 <00000000>             .DATA.L     L642
    00000DF4 <00000000>             .DATA.L     L650
    00000DF8              L1064:                            
      simplexC.c   644        {
      simplexC.c   645            Bdisp_AllClr_DDVRAM();
    00000DF8 D22F                   MOV.L       L1201+4,R2 ; _Bdisp_AllClr_DDVRAM
    00000DFA 420B                   JSR         @R2
    00000DFC 0009                   NOP
      simplexC.c   646            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    00000DFE E300                   MOV         #0,R3
    00000E00 2F36                   MOV.L       R3,@-R15
    00000E02 2FC6                   MOV.L       R12,@-R15
    00000E04 2F86                   MOV.L       R8,@-R15
    00000E06 490B                   JSR         @R9
    00000E08 64A3                   MOV         R10,R4
    00000E0A 7F0C                   ADD         #12,R15
      simplexC.c   647            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000E0C E710                   MOV         #16,R7
    00000E0E 66A3                   MOV         R10,R6
    00000E10 E500                   MOV         #0,R5
    00000E12 4E0B                   JSR         @R14
    00000E14 6453                   MOV         R5,R4
      simplexC.c   648            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    00000E16 E710                   MOV         #16,R7
    00000E18 D628                   MOV.L       L1201+8,R6 ; L651
    00000E1A E507                   MOV         #7,R5
    00000E1C 4E0B                   JSR         @R14
    00000E1E E400                   MOV         #0,R4
      simplexC.c   649            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000E20 D627                   MOV.L       L1201+12,R6; L652
    00000E22 E50E                   MOV         #14,R5
    00000E24 E710                   MOV         #16,R7
    00000E26 4E0B                   JSR         @R14
    00000E28 E400                   MOV         #0,R4
      simplexC.c   650            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E2A E710                   MOV         #16,R7
    00000E2C D625                   MOV.L       L1201+16,R6; L653
    00000E2E E515                   MOV         #21,R5
    00000E30 4E0B                   JSR         @R14
    00000E32 E400                   MOV         #0,R4
      simplexC.c   651            menuChoice = InputI(0, 28);
    00000E34 E51C                   MOV         #28,R5
    00000E36 B8FA                   BSR         _InputI
    00000E38 E400                   MOV         #0,R4
      simplexC.c   652            Bdisp_PutDisp_DD();
    00000E3A D323                   MOV.L       L1201+20,R3; _Bdisp_PutDisp_DD
    00000E3C 430B                   JSR         @R3
    00000E3E 6D03                   MOV         R0,R13
      simplexC.c   653            if(menuChoice!=EXIT_OPT && menuChoice<=3)
    00000E40 2DD8                   TST         R13,R13
    00000E42 8918                   BT          L1063
    00000E44 E303                   MOV         #3,R3
    00000E46 3D37                   CMP/GT      R3,R13
    00000E48 8915                   BT          L1063
      simplexC.c   654            {
      simplexC.c   655                switch (menuChoice)
    00000E4A 60D3                   MOV         R13,R0
    00000E4C 8801                   CMP/EQ      #1,R0
    00000E4E 8905                   BT          L904
    00000E50 8802                   CMP/EQ      #2,R0
    00000E52 8908                   BT          L905
    00000E54 8803                   CMP/EQ      #3,R0
    00000E56 890B                   BT          L906
    00000E58 A00D                   BRA         L1063
    00000E5A 0009                   NOP
    00000E5C              L904:                            ; case label 
      simplexC.c   656                {
      simplexC.c   657                case 1: printVariablesProblemStatement(contsId,pS);break;
    00000E5C 65B3                   MOV         R11,R5
    00000E5E BE75                   BSR         _printVariablesProblemStatement
    00000E60 64C3                   MOV         R12,R4
    00000E62 A008                   BRA         L1063
    00000E64 0009                   NOP
    00000E66              L905:                            ; case label 
      simplexC.c   658                case 2: printIne(contsId,pS);break;
    00000E66 65B3                   MOV         R11,R5
    00000E68 BF36                   BSR         _printIne
    00000E6A 64C3                   MOV         R12,R4
    00000E6C A003                   BRA         L1063
    00000E6E 0009                   NOP
    00000E70              L906:                            ; case label 
      simplexC.c   659                case 3: printRVal(contsId,pS);break;
    00000E70 65B3                   MOV         R11,R5
    00000E72 BF63                   BSR         _printRVal
    00000E74 64C3                   MOV         R12,R4
      simplexC.c   660                default: break;
    00000E76              L1063:                            
    00000E76 2DD8                   TST         R13,R13
    00000E78 8BBE                   BF          L1064
      simplexC.c   661                }
      simplexC.c   662            }
      simplexC.c   663        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   664        return 0;
    00000E7A E000                   MOV         #0,R0
      simplexC.c   665    }
    00000E7C 911A                   MOV.W       L1201,R1   ; H'0080
    00000E7E 3F1C                   ADD         R1,R15
    00000E80 4F26                   LDS.L       @R15+,PR
    00000E82 68F6                   MOV.L       @R15+,R8
    00000E84 69F6                   MOV.L       @R15+,R9
    00000E86 6AF6                   MOV.L       @R15+,R10
    00000E88 6BF6                   MOV.L       @R15+,R11
    00000E8A 6CF6                   MOV.L       @R15+,R12
    00000E8C 6DF6                   MOV.L       @R15+,R13
    00000E8E 000B                   RTS
    00000E90 6EF6                   MOV.L       @R15+,R14
      simplexC.c   666    
      simplexC.c   667    int printAllConstraintsMenu(struct problemStatement* pS)
    00000E92              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    00000E92 2FE6                   MOV.L       R14,@-R15
    00000E94 2FD6                   MOV.L       R13,@-R15
      simplexC.c   668    {
      simplexC.c   669        char stroutBasicInfo[128];
      simplexC.c   670        int menuChoice;
      simplexC.c   671        menuChoice=INITIALIZE_VALUE_OPT;
    00000E96 EEFF                   MOV         #-1,R14
    00000E98 2FC6                   MOV.L       R12,@-R15
    00000E9A 6D43                   MOV         R4,R13
    00000E9C 2FB6                   MOV.L       R11,@-R15
    00000E9E 2FA6                   MOV.L       R10,@-R15
    00000EA0 2F96                   MOV.L       R9,@-R15
    00000EA2 2F86                   MOV.L       R8,@-R15
    00000EA4 4F22                   STS.L       PR,@-R15
    00000EA6 7F80                   ADD         #-128,R15
    00000EA8 D808                   MOV.L       L1201+24,R8; _PrintMini
    00000EAA D909                   MOV.L       L1201+28,R9; _sprintf
    00000EAC DA09                   MOV.L       L1201+32,R10; L662
    00000EAE DB02                   MOV.L       L1201+4,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   672        while(menuChoice!=EXIT_OPT)
    00000EB0 A02F                   BRA         L1068
    00000EB2 6CF3                   MOV         R15,R12
    00000EB4              L1201:                            
    00000EB4 0080                   .DATA.W     H'0080
    00000EB6 0000                   .DATA.W     0
    00000EB8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000EBC <00000000>             .DATA.L     L651
    00000EC0 <00000000>             .DATA.L     L652
    00000EC4 <00000000>             .DATA.L     L653
    00000EC8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000ECC <00000000>             .DATA.L     _PrintMini
    00000ED0 <00000000>             .DATA.L     _sprintf
    00000ED4 <00000000>             .DATA.L     L662
    00000ED8              L1069:                            
      simplexC.c   673        {
      simplexC.c   674            Bdisp_AllClr_DDVRAM();
    00000ED8 4B0B                   JSR         @R11
    00000EDA 0009                   NOP
      simplexC.c   675            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EDC E200                   MOV         #0,R2
    00000EDE 2F26                   MOV.L       R2,@-R15
    00000EE0 53DB                   MOV.L       @(44,R13),R3
    00000EE2 2F36                   MOV.L       R3,@-R15
    00000EE4 2FA6                   MOV.L       R10,@-R15
    00000EE6 490B                   JSR         @R9
    00000EE8 64C3                   MOV         R12,R4
    00000EEA 7F0C                   ADD         #12,R15
      simplexC.c   676            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000EEC E710                   MOV         #16,R7
    00000EEE 66C3                   MOV         R12,R6
    00000EF0 E500                   MOV         #0,R5
    00000EF2 480B                   JSR         @R8
    00000EF4 6453                   MOV         R5,R4
      simplexC.c   677            menuChoice = InputI(0, 7);
    00000EF6 E507                   MOV         #7,R5
    00000EF8 B899                   BSR         _InputI
    00000EFA E400                   MOV         #0,R4
      simplexC.c   678            Bdisp_PutDisp_DD();
    00000EFC D32B                   MOV.L       L1202+10,R3; _Bdisp_PutDisp_DD
    00000EFE 430B                   JSR         @R3
    00000F00 6E03                   MOV         R0,R14
      simplexC.c   679            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000F02 2EE8                   TST         R14,R14
    00000F04 8905                   BT          L1068
    00000F06 53DB                   MOV.L       @(44,R13),R3
    00000F08 3E37                   CMP/GT      R3,R14
    00000F0A 8902                   BT          L1068
      simplexC.c   680            {
      simplexC.c   681                printInfoConstraint(menuChoice,pS);
    00000F0C 65D3                   MOV         R13,R5
    00000F0E BF49                   BSR         _printInfoConstraint
    00000F10 64E3                   MOV         R14,R4
    00000F12              L1068:                            
    00000F12 2EE8                   TST         R14,R14
    00000F14 8BE0                   BF          L1069
      simplexC.c   682            }
      simplexC.c   683        }
      simplexC.c   684        return 0;
    00000F16 E000                   MOV         #0,R0
      simplexC.c   685    }
    00000F18 9143                   MOV.W       L1202,R1   ; H'0080
    00000F1A 3F1C                   ADD         R1,R15
    00000F1C 4F26                   LDS.L       @R15+,PR
    00000F1E 68F6                   MOV.L       @R15+,R8
    00000F20 69F6                   MOV.L       @R15+,R9
    00000F22 6AF6                   MOV.L       @R15+,R10
    00000F24 6BF6                   MOV.L       @R15+,R11
    00000F26 6CF6                   MOV.L       @R15+,R12
    00000F28 6DF6                   MOV.L       @R15+,R13
    00000F2A 000B                   RTS
    00000F2C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   686    
      simplexC.c   687    int printStatementMenu(struct problemStatement* pS)
    00000F2E              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
      simplexC.c   688    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   689        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   690        int menuChoice;
      simplexC.c   691        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   692        sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"S
                         +OLVE", EXIT_OPT);
    00000F2E E300                   MOV         #0,R3
    00000F30 2FE6                   MOV.L       R14,@-R15
    00000F32 6E43                   MOV         R4,R14
    00000F34 2FD6                   MOV.L       R13,@-R15
    00000F36 2FC6                   MOV.L       R12,@-R15
    00000F38 2FB6                   MOV.L       R11,@-R15
    00000F3A 2FA6                   MOV.L       R10,@-R15
    00000F3C 2F96                   MOV.L       R9,@-R15
    00000F3E 2F86                   MOV.L       R8,@-R15
    00000F40 4F22                   STS.L       PR,@-R15
    00000F42 902F                   MOV.W       L1202+2,R0 ; H'FE80
    00000F44 DD1A                   MOV.L       L1202+14,R13; _sprintf
    00000F46 3F0C                   ADD         R0,R15
    00000F48 9A2D                   MOV.W       L1202+4,R10; H'0100
    00000F4A 3AFC                   ADD         R15,R10
    00000F4C 2F36                   MOV.L       R3,@-R15
    00000F4E 50E1                   MOV.L       @(4,R14),R0
    00000F50 8801                   CMP/EQ      #1,R0
    00000F52 8F03                   BF/S        L1072
    00000F54 ECFF                   MOV         #-1,R12
    00000F56 D117                   MOV.L       L1202+18,R1; L575
    00000F58 A002                   BRA         L1073
    00000F5A 2F16                   MOV.L       R1,@-R15
    00000F5C              L1072:                            
    00000F5C D216                   MOV.L       L1202+22,R2; L576
    00000F5E 2F26                   MOV.L       R2,@-R15
    00000F60              L1073:                            
    00000F60 D116                   MOV.L       L1202+26,R1; L671
    00000F62 2F16                   MOV.L       R1,@-R15
    00000F64 4D0B                   JSR         @R13
    00000F66 64A3                   MOV         R10,R4
      simplexC.c   693        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000F68 991E                   MOV.W       L1202+6,R9 ; H'008C
    00000F6A 39FC                   ADD         R15,R9
    00000F6C 53E7                   MOV.L       @(28,R14),R3
    00000F6E 2F36                   MOV.L       R3,@-R15
    00000F70 52EB                   MOV.L       @(44,R14),R2
    00000F72 2F26                   MOV.L       R2,@-R15
    00000F74 D312                   MOV.L       L1202+30,R3; L577
    00000F76 2F36                   MOV.L       R3,@-R15
    00000F78 4D0B                   JSR         @R13
    00000F7A 6493                   MOV         R9,R4
    00000F7C 7F18                   ADD         #24,R15
      simplexC.c   694    
      simplexC.c   695        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000F7E 50E1                   MOV.L       @(4,R14),R0
    00000F80 8802                   CMP/EQ      #2,R0
    00000F82 8F06                   BF/S        L1074
    00000F84 6BF3                   MOV         R15,R11
    00000F86 53E2                   MOV.L       @(8,R14),R3
    00000F88 2338                   TST         R3,R3
    00000F8A 8902                   BT          L1074




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   696        {
      simplexC.c   697            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000F8C D30D                   MOV.L       L1202+34,R3; L673
    00000F8E A001                   BRA         L1187
    00000F90 0009                   NOP
    00000F92              L1074:                            
      simplexC.c   698        }else
      simplexC.c   699        {
      simplexC.c   700            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000F92 D30D                   MOV.L       L1202+38,R3; L675
    00000F94              L1187:                            
    00000F94 2F36                   MOV.L       R3,@-R15
    00000F96 4D0B                   JSR         @R13
    00000F98 64B3                   MOV         R11,R4
    00000F9A D80C                   MOV.L       L1202+42,R8; _Bdisp_AllClr_DDVRAM
    00000F9C DD0C                   MOV.L       L1202+46,R13; _PrintMini
      simplexC.c   701        }
      simplexC.c   702        
      simplexC.c   703        while(menuChoice!=EXIT_OPT)
    00000F9E A05E                   BRA         L1076
    00000FA0 7F04                   ADD         #4,R15
    00000FA2              L1202:                            
    00000FA2 0080                   .DATA.W     H'0080
    00000FA4 FE80                   .DATA.W     H'FE80
    00000FA6 0100                   .DATA.W     H'0100
    00000FA8 008C                   .DATA.W     H'008C
    00000FAA 0000                   .DATA.W     0
    00000FAC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000FB0 <00000000>             .DATA.L     _sprintf
    00000FB4 <00000000>             .DATA.L     L575
    00000FB8 <00000000>             .DATA.L     L576
    00000FBC <00000000>             .DATA.L     L671
    00000FC0 <00000000>             .DATA.L     L577
    00000FC4 <00000000>             .DATA.L     L673
    00000FC8 <00000000>             .DATA.L     L675
    00000FCC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000FD0 <00000000>             .DATA.L     _PrintMini
    00000FD4              L1077:                            
      simplexC.c   704        {
      simplexC.c   705            Bdisp_AllClr_DDVRAM();
    00000FD4 480B                   JSR         @R8
    00000FD6 0009                   NOP
      simplexC.c   706            
      simplexC.c   707            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00000FD8 E710                   MOV         #16,R7
    00000FDA 66A3                   MOV         R10,R6
    00000FDC E500                   MOV         #0,R5
    00000FDE 4D0B                   JSR         @R13
    00000FE0 6453                   MOV         R5,R4
      simplexC.c   708            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00000FE2 E710                   MOV         #16,R7
    00000FE4 6693                   MOV         R9,R6
    00000FE6 E507                   MOV         #7,R5
    00000FE8 4D0B                   JSR         @R13
    00000FEA E400                   MOV         #0,R4
      simplexC.c   709            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    00000FEC D63B                   MOV.L       L1203+12,R6; L677




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FEE E50E                   MOV         #14,R5
    00000FF0 E710                   MOV         #16,R7
    00000FF2 4D0B                   JSR         @R13
    00000FF4 E400                   MOV         #0,R4
      simplexC.c   710            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    00000FF6 E710                   MOV         #16,R7
    00000FF8 66B3                   MOV         R11,R6
    00000FFA E515                   MOV         #21,R5
    00000FFC 4D0B                   JSR         @R13
    00000FFE E400                   MOV         #0,R4
      simplexC.c   711            if(pS->modelType==TYPE_SOLVE)
    00001000 50E1                   MOV.L       @(4,R14),R0
    00001002 8802                   CMP/EQ      #2,R0
    00001004 8B04                   BF          L1078
      simplexC.c   712            {
      simplexC.c   713                PrintMini(0, 28, (unsigned char*)"4 Pinfo aj vec", MINI_OVER);
    00001006 E710                   MOV         #16,R7
    00001008 D635                   MOV.L       L1203+16,R6; L679
    0000100A E51C                   MOV         #28,R5
    0000100C 4D0B                   JSR         @R13
    0000100E E400                   MOV         #0,R4
    00001010              L1078:                            
      simplexC.c   714            }
      simplexC.c   715            menuChoice = InputI(0, 35);
    00001010 E523                   MOV         #35,R5
    00001012 B80C                   BSR         _InputI
    00001014 E400                   MOV         #0,R4
      simplexC.c   716            Bdisp_PutDisp_DD();
    00001016 D333                   MOV.L       L1203+20,R3; _Bdisp_PutDisp_DD
    00001018 430B                   JSR         @R3
    0000101A 6C03                   MOV         R0,R12
      simplexC.c   717            switch (menuChoice)
    0000101C 60C3                   MOV         R12,R0
    0000101E 8801                   CMP/EQ      #1,R0
    00001020 8907                   BT          L914
    00001022 8802                   CMP/EQ      #2,R0
    00001024 8909                   BT          L915
    00001026 8803                   CMP/EQ      #3,R0
    00001028 890C                   BT          L916
    0000102A 8804                   CMP/EQ      #4,R0
    0000102C 8912                   BT          L917
    0000102E A016                   BRA         L1076
    00001030 0009                   NOP
    00001032              L914:                            ; case label 
      simplexC.c   718            {
      simplexC.c   719            case 1: printAllConstraintsMenu(pS);break;
    00001032 BF2E                   BSR         _printAllConstraintsMenu
    00001034 64E3                   MOV         R14,R4
    00001036 A012                   BRA         L1076
    00001038 0009                   NOP
    0000103A              L915:                            ; case label 
      simplexC.c   720            case 2: printObjFunc(pS,TYPE_INPUT);break;
    0000103A E501                   MOV         #1,R5
    0000103C BBDE                   BSR         _printObjFunc
    0000103E 64E3                   MOV         R14,R4
    00001040 A00D                   BRA         L1076
    00001042 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001044              L916:                            ; case label 
      simplexC.c   721            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    00001044 50E1                   MOV.L       @(4,R14),R0
    00001046 8802                   CMP/EQ      #2,R0
    00001048 8B09                   BF          L1076
    0000104A E502                   MOV         #2,R5
    0000104C BBD6                   BSR         _printObjFunc
    0000104E 64E3                   MOV         R14,R4
    00001050 A005                   BRA         L1076
    00001052 0009                   NOP
    00001054              L917:                            ; case label 
      simplexC.c   722            case 4: if(pS->modelType==TYPE_SOLVE){printAjVec(pS);};break;
    00001054 50E1                   MOV.L       @(4,R14),R0
    00001056 8802                   CMP/EQ      #2,R0
    00001058 8B01                   BF          L1076
    0000105A BD3B                   BSR         _printAjVec
    0000105C 64E3                   MOV         R14,R4
      simplexC.c   723            default: break;
    0000105E              L1076:                            
    0000105E 2CC8                   TST         R12,R12
    00001060 8BB8                   BF          L1077
      simplexC.c   724            }
      simplexC.c   725        }
      simplexC.c   726        return 0;
    00001062 E000                   MOV         #0,R0
      simplexC.c   727    }
    00001064 9134                   MOV.W       L1203,R1   ; H'0180
    00001066 3F1C                   ADD         R1,R15
    00001068 4F26                   LDS.L       @R15+,PR
    0000106A 68F6                   MOV.L       @R15+,R8
    0000106C 69F6                   MOV.L       @R15+,R9
    0000106E 6AF6                   MOV.L       @R15+,R10
    00001070 6BF6                   MOV.L       @R15+,R11
    00001072 6CF6                   MOV.L       @R15+,R12
    00001074 6DF6                   MOV.L       @R15+,R13
    00001076 000B                   RTS
    00001078 6EF6                   MOV.L       @R15+,R14
      simplexC.c   728    
      simplexC.c   729    int printResVariables()
    0000107A              _printResVariables:              ; function: printResVariables
                                                           ; frame size=1084
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   730    {
      simplexC.c   731        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutVariable[128];
      simplexC.c   732        char *uselessSring[128];
      simplexC.c   733        int menuChoice,i,idBasicVar;
      simplexC.c   734        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   735        sprintf(stroutTop,"Var res, printMenu. Exit %d", EXIT_OPT);
    0000107A E300                   MOV         #0,R3
    0000107C D21B                   MOV.L       L1203+28,R2; L693
    0000107E 2FE6                   MOV.L       R14,@-R15
    00001080 2FD6                   MOV.L       R13,@-R15
    00001082 EDFF                   MOV         #-1,R13
    00001084 9426                   MOV.W       L1203+4,R4 ; H'038C
    00001086 2FC6                   MOV.L       R12,@-R15
    00001088 2FB6                   MOV.L       R11,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000108A 2FA6                   MOV.L       R10,@-R15
    0000108C 2F96                   MOV.L       R9,@-R15
    0000108E 2F86                   MOV.L       R8,@-R15
    00001090 4F22                   STS.L       PR,@-R15
    00001092 901E                   MOV.W       L1203+2,R0 ; H'FBFC
    00001094 D814                   MOV.L       L1203+24,R8; _sprintf
    00001096 3F0C                   ADD         R0,R15
    00001098 2F36                   MOV.L       R3,@-R15
    0000109A 2F26                   MOV.L       R2,@-R15
    0000109C 480B                   JSR         @R8
    0000109E 34FC                   ADD         R15,R4
      simplexC.c   736        sprintf(stroutBasicInfo, "Nvars: %d, NVB: %d",ex.nVariables,ex.nodes.its[ex.nodes.nIterations]->BinvSi
                         +ze);
    000010A0 DC13                   MOV.L       L1203+32,R12; _ex
    000010A2 53C4                   MOV.L       @(16,R12),R3
    000010A4 50C5                   MOV.L       @(20,R12),R0
    000010A6 4308                   SHLL2       R3
    000010A8 9415                   MOV.W       L1203+6,R4 ; H'0318
    000010AA 023E                   MOV.L       @(R0,R3),R2
    000010AC 5128                   MOV.L       @(32,R2),R1
    000010AE 2F16                   MOV.L       R1,@-R15
    000010B0 53CB                   MOV.L       @(44,R12),R3
    000010B2 2F36                   MOV.L       R3,@-R15
    000010B4 D20F                   MOV.L       L1203+36,R2; L694
    000010B6 2F26                   MOV.L       R2,@-R15
    000010B8 480B                   JSR         @R8
    000010BA 34FC                   ADD         R15,R4
      simplexC.c   737        sprintf(stroutBasicInfo2, "Select a var:");
    000010BC D30E                   MOV.L       L1203+40,R3; L695
    000010BE 2F36                   MOV.L       R3,@-R15
    000010C0 940A                   MOV.W       L1203+8,R4 ; H'029C
    000010C2 480B                   JSR         @R8
    000010C4 34FC                   ADD         R15,R4
    000010C6 7F18                   ADD         #24,R15
    000010C8 9A07                   MOV.W       L1203+10,R10; H'0204
    000010CA DE0C                   MOV.L       L1203+44,R14; _PrintMini
      simplexC.c   738    
      simplexC.c   739        while(menuChoice!=EXIT_OPT)
    000010CC A086                   BRA         L1083
    000010CE 3AFC                   ADD         R15,R10
    000010D0              L1203:                            
    000010D0 0180                   .DATA.W     H'0180
    000010D2 FBFC                   .DATA.W     H'FBFC
    000010D4 038C                   .DATA.W     H'038C
    000010D6 0318                   .DATA.W     H'0318
    000010D8 029C                   .DATA.W     H'029C
    000010DA 0204                   .DATA.W     H'0204
    000010DC <00000000>             .DATA.L     L677
    000010E0 <00000000>             .DATA.L     L679
    000010E4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000010E8 <00000000>             .DATA.L     _sprintf
    000010EC <00000000>             .DATA.L     L693
    000010F0 <00000000>             .DATA.L     _ex
    000010F4 <00000000>             .DATA.L     L694
    000010F8 <00000000>             .DATA.L     L695
    000010FC <00000000>             .DATA.L     _PrintMini
    00001100              L1084:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   740        {
      simplexC.c   741            Bdisp_AllClr_DDVRAM();
    00001100 D341                   MOV.L       L1204+12,R3; _Bdisp_AllClr_DDVRAM
    00001102 430B                   JSR         @R3
    00001104 0009                   NOP
      simplexC.c   742            
      simplexC.c   743            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001106 E710                   MOV         #16,R7
    00001108 9678                   MOV.W       L1204,R6   ; H'0384
    0000110A E500                   MOV         #0,R5
    0000110C 36FC                   ADD         R15,R6
    0000110E 4E0B                   JSR         @R14
    00001110 6453                   MOV         R5,R4
      simplexC.c   744            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001112 E710                   MOV         #16,R7
    00001114 9673                   MOV.W       L1204+2,R6 ; H'0304
    00001116 E507                   MOV         #7,R5
    00001118 36FC                   ADD         R15,R6
    0000111A 4E0B                   JSR         @R14
    0000111C E400                   MOV         #0,R4
      simplexC.c   745            PrintMini(0,14,  (unsigned char *)stroutBasicInfo2, MINI_OVER);
    0000111E E710                   MOV         #16,R7
    00001120 966E                   MOV.W       L1204+4,R6 ; H'0284
    00001122 E50E                   MOV         #14,R5
    00001124 36FC                   ADD         R15,R6
    00001126 4E0B                   JSR         @R14
    00001128 E400                   MOV         #0,R4
      simplexC.c   746            menuChoice = InputI(0, 21);
    0000112A E515                   MOV         #21,R5
    0000112C D237                   MOV.L       L1204+16,R2; _InputI
    0000112E 420B                   JSR         @R2
    00001130 E400                   MOV         #0,R4
      simplexC.c   747            Bdisp_PutDisp_DD();
    00001132 D337                   MOV.L       L1204+20,R3; _Bdisp_PutDisp_DD
    00001134 430B                   JSR         @R3
    00001136 6D03                   MOV         R0,R13
      simplexC.c   748            if(menuChoice<=ex.nVariables)
    00001138 52CB                   MOV.L       @(44,R12),R2
    0000113A 3D27                   CMP/GT      R2,R13
    0000113C 8936                   BT          L1085
    0000113E 69D3                   MOV         R13,R9
    00001140 5BC4                   MOV.L       @(16,R12),R11
    00001142 79FF                   ADD         #-1,R9
    00001144 53C5                   MOV.L       @(20,R12),R3
    00001146 4B08                   SHLL2       R11
    00001148 3B3C                   ADD         R3,R11
    0000114A 6393                   MOV         R9,R3
    0000114C 60B2                   MOV.L       @R11,R0
    0000114E 4308                   SHLL2       R3
    00001150 5001                   MOV.L       @(4,R0),R0
    00001152 023E                   MOV.L       @(R0,R3),R2
    00001154 2228                   TST         R2,R2
    00001156 891E                   BT          L1086
      simplexC.c   749            {
      simplexC.c   750                if(ex.nodes.its[ex.nodes.nIterations]->idBasicVariables[menuChoice-1])
      simplexC.c   751                {
      simplexC.c   752                    for(i=0;i<ex.nodes.its[ex.nodes.nIterations]->BinvSize;i++)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001158 A009                   BRA         L1087
    0000115A E400                   MOV         #0,R4
    0000115C              L1088:                            
      simplexC.c   753                    {
      simplexC.c   754                        if(ex.nodes.its[ex.nodes.nIterations]->idByRowOfBasicVarsInBInv[i]==menuChoice-1)
    0000115C 60B2                   MOV.L       @R11,R0
    0000115E 6343                   MOV         R4,R3
    00001160 5002                   MOV.L       @(8,R0),R0
    00001162 4308                   SHLL2       R3
    00001164 023E                   MOV.L       @(R0,R3),R2
    00001166 3290                   CMP/EQ      R9,R2
    00001168 8B00                   BF          L1089
      simplexC.c   755                        {
      simplexC.c   756                            idBasicVar=i;
    0000116A 2F42                   MOV.L       R4,@R15
    0000116C              L1089:                            
    0000116C 7401                   ADD         #1,R4
    0000116E              L1087:                            
    0000116E 63B2                   MOV.L       @R11,R3
    00001170 5238                   MOV.L       @(32,R3),R2
    00001172 3423                   CMP/GE      R2,R4
    00001174 8BF2                   BF          L1088
      simplexC.c   757                        }
      simplexC.c   758                    }
      simplexC.c   759                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,ex.nodes.its[ex.nodes.nIterations]->xb[idBa
                         +sicVar]);
    00001176 60B2                   MOV.L       @R11,R0
    00001178 63F2                   MOV.L       @R15,R3
    0000117A 4308                   SHLL2       R3
    0000117C 500A                   MOV.L       @(40,R0),R0
    0000117E 003E                   MOV.L       @(R0,R3),R0
    00001180 D224                   MOV.L       L1204+24,R2; __stod
    00001182 7FF8                   ADD         #-8,R15
    00001184 420B                   JSR         @R2
    00001186 2FF6                   MOV.L       R15,@-R15
    00001188 2FD6                   MOV.L       R13,@-R15
    0000118A D323                   MOV.L       L1204+28,R3; L701
    0000118C 2F36                   MOV.L       R3,@-R15
    0000118E 480B                   JSR         @R8
    00001190 64A3                   MOV         R10,R4
    00001192 A008                   BRA         L1090
    00001194 7F10                   ADD         #16,R15
    00001196              L1086:                            
      simplexC.c   760                }else
      simplexC.c   761                {
      simplexC.c   762                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,0);
    00001196 E300                   MOV         #0,R3
    00001198 D21F                   MOV.L       L1204+28,R2; L701
    0000119A 2F36                   MOV.L       R3,@-R15
    0000119C 2FD6                   MOV.L       R13,@-R15
    0000119E 2F26                   MOV.L       R2,@-R15
    000011A0 480B                   JSR         @R8
    000011A2 64A3                   MOV         R10,R4
    000011A4 7F0C                   ADD         #12,R15
    000011A6              L1090:                            
      simplexC.c   763                }
      simplexC.c   764                PrintMini(0,28,(unsigned char*) stroutVariable,MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011A6 E710                   MOV         #16,R7
    000011A8 A002                   BRA         L1188
    000011AA 66A3                   MOV         R10,R6
    000011AC              L1085:                            
      simplexC.c   765            }else
      simplexC.c   766            {
      simplexC.c   767                PrintMini(0,28,  (unsigned char *)"No var found", MINI_OVER);
    000011AC D61B                   MOV.L       L1204+32,R6; L704
    000011AE E710                   MOV         #16,R7
    000011B0              L1188:                            
    000011B0 E51C                   MOV         #28,R5
    000011B2 4E0B                   JSR         @R14
    000011B4 E400                   MOV         #0,R4
      simplexC.c   768            }
      simplexC.c   769            PrintMini(0, 35, (unsigned char*)"Press any key to continue", MINI_OVER);
    000011B6 E710                   MOV         #16,R7
    000011B8 D619                   MOV.L       L1204+36,R6; L588
    000011BA E523                   MOV         #35,R5
    000011BC 4E0B                   JSR         @R14
    000011BE E400                   MOV         #0,R4
      simplexC.c   770            string_input(0, 42, uselessSring);
    000011C0 D218                   MOV.L       L1204+40,R2; _string_input
    000011C2 66F3                   MOV         R15,R6
    000011C4 7604                   ADD         #4,R6
    000011C6 E52A                   MOV         #42,R5
    000011C8 420B                   JSR         @R2
    000011CA E400                   MOV         #0,R4
      simplexC.c   771            Bdisp_PutDisp_DD();
    000011CC D310                   MOV.L       L1204+20,R3; _Bdisp_PutDisp_DD
    000011CE 430B                   JSR         @R3
    000011D0 0009                   NOP
      simplexC.c   772            memset(stroutVariable,0,128);
    000011D2 E500                   MOV         #0,R5
    000011D4 D214                   MOV.L       L1204+44,R2; _memset
    000011D6 9614                   MOV.W       L1204+6,R6 ; H'0080
    000011D8 420B                   JSR         @R2
    000011DA 64A3                   MOV         R10,R4
    000011DC              L1083:                            
    000011DC 2DD8                   TST         R13,R13
    000011DE 8B8F                   BF          L1084
      simplexC.c   773            
      simplexC.c   774        }
      simplexC.c   775        return 0;
      simplexC.c   776    }
    000011E0 9110                   MOV.W       L1204+8,R1 ; H'0404
    000011E2 E000                   MOV         #0,R0
    000011E4 3F1C                   ADD         R1,R15
    000011E6 4F26                   LDS.L       @R15+,PR
    000011E8 68F6                   MOV.L       @R15+,R8
    000011EA 69F6                   MOV.L       @R15+,R9
    000011EC 6AF6                   MOV.L       @R15+,R10
    000011EE 6BF6                   MOV.L       @R15+,R11
    000011F0 6CF6                   MOV.L       @R15+,R12
    000011F2 6DF6                   MOV.L       @R15+,R13
    000011F4 000B                   RTS
    000011F6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   777    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   778    int printIts()
    000011F8              _printIts:                       ; function: printIts
                                                           ; frame size=0
      simplexC.c   779    {
      simplexC.c   780        return 0;
      simplexC.c   781    }
    000011F8 000B                   RTS
    000011FA E000                   MOV         #0,R0
    000011FC              L1204:                            
    000011FC 0384                   .DATA.W     H'0384
    000011FE 0304                   .DATA.W     H'0304
    00001200 0284                   .DATA.W     H'0284
    00001202 0080                   .DATA.W     H'0080
    00001204 0404                   .DATA.W     H'0404
    00001206 0000                   .DATA.W     0
    00001208 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000120C <00000000>             .DATA.L     _InputI
    00001210 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001214 <00000000>             .DATA.L     __stod
    00001218 <00000000>             .DATA.L     L701
    0000121C <00000000>             .DATA.L     L704
    00001220 <00000000>             .DATA.L     L588
    00001224 <00000000>             .DATA.L     _string_input
    00001228 <00000000>             .DATA.L     _memset
      simplexC.c   782    
      simplexC.c   783    int printSolMenu()
    0000122C              _printSolMenu:                   ; function: printSolMenu
                                                           ; frame size=436
                                                           ; used runtime library name:
                                                           ; __stod
    0000122C 2FE6                   MOV.L       R14,@-R15
      simplexC.c   784    {
      simplexC.c   785        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   786        int menuChoice;
      simplexC.c   787        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   788        sprintf(stroutTop,"Problem solution, printMenu. Exit %d", EXIT_OPT);
    0000122E E300                   MOV         #0,R3
    00001230 D235                   MOV.L       L1205+10,R2; L713
    00001232 2FD6                   MOV.L       R13,@-R15
    00001234 2FC6                   MOV.L       R12,@-R15
    00001236 EDFF                   MOV         #-1,R13
    00001238 D134                   MOV.L       L1205+14,R1; _sprintf
    0000123A 2FB6                   MOV.L       R11,@-R15
    0000123C 2FA6                   MOV.L       R10,@-R15
    0000123E 2F96                   MOV.L       R9,@-R15
    00001240 2F86                   MOV.L       R8,@-R15
    00001242 4F22                   STS.L       PR,@-R15
    00001244 905B                   MOV.W       L1205,R0   ; H'FE7C
    00001246 3F0C                   ADD         R0,R15
    00001248 9B5A                   MOV.W       L1205+2,R11; H'0104
    0000124A 3BFC                   ADD         R15,R11
    0000124C 2F36                   MOV.L       R3,@-R15
    0000124E 2F26                   MOV.L       R2,@-R15
    00001250 410B                   JSR         @R1
    00001252 64B3                   MOV         R11,R4
      simplexC.c   789        sprintf(stroutBasicInfo, "Nits: %d, ZSol: %.2f",ex.nodes.nIterations,ex.nodes.its[ex.nodes.nIterations
                         +]->zSol);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001254 9C55                   MOV.W       L1205+4,R12; H'0084
    00001256 7F08                   ADD         #8,R15
    00001258 D32D                   MOV.L       L1205+18,R3; H'00000010+_ex
    0000125A 3CFC                   ADD         R15,R12
    0000125C D12D                   MOV.L       L1205+22,R1; H'00000014+_ex
    0000125E 6032                   MOV.L       @R3,R0
    00001260 2F02                   MOV.L       R0,@R15
    00001262 4008                   SHLL2       R0
    00001264 6212                   MOV.L       @R1,R2
    00001266 002E                   MOV.L       @(R0,R2),R0
    00001268 E240                   MOV         #64,R2
    0000126A 002E                   MOV.L       @(R0,R2),R0
    0000126C D22A                   MOV.L       L1205+26,R2; __stod
    0000126E 7FF8                   ADD         #-8,R15
    00001270 420B                   JSR         @R2
    00001272 2FF6                   MOV.L       R15,@-R15
    00001274 53F2                   MOV.L       @(8,R15),R3
    00001276 2F36                   MOV.L       R3,@-R15
    00001278 D228                   MOV.L       L1205+30,R2; L714
    0000127A 2F26                   MOV.L       R2,@-R15
    0000127C D323                   MOV.L       L1205+14,R3; _sprintf
    0000127E 430B                   JSR         @R3
    00001280 64C3                   MOV         R12,R4
    00001282 D827                   MOV.L       L1205+34,R8; L717
    00001284 D927                   MOV.L       L1205+38,R9; L716
    00001286 DA28                   MOV.L       L1205+42,R10; _Bdisp_AllClr_DDVRAM
    00001288 DE28                   MOV.L       L1205+46,R14; _PrintMini
      simplexC.c   790    
      simplexC.c   791        while(menuChoice!=EXIT_OPT)
    0000128A A02A                   BRA         L1094
    0000128C 7F10                   ADD         #16,R15
    0000128E              L1095:                            
      simplexC.c   792        {
      simplexC.c   793            Bdisp_AllClr_DDVRAM();
    0000128E 4A0B                   JSR         @R10
    00001290 0009                   NOP
      simplexC.c   794            
      simplexC.c   795            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001292 E710                   MOV         #16,R7
    00001294 66B3                   MOV         R11,R6
    00001296 E500                   MOV         #0,R5
    00001298 4E0B                   JSR         @R14
    0000129A 6453                   MOV         R5,R4
      simplexC.c   796            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    0000129C E710                   MOV         #16,R7
    0000129E 66C3                   MOV         R12,R6
    000012A0 E507                   MOV         #7,R5
    000012A2 4E0B                   JSR         @R14
    000012A4 E400                   MOV         #0,R4
      simplexC.c   797            PrintMini(0, 14, (unsigned char*)"1 Pinfo res vars", MINI_OVER);
    000012A6 E710                   MOV         #16,R7
    000012A8 6693                   MOV         R9,R6
    000012AA E50E                   MOV         #14,R5
    000012AC 4E0B                   JSR         @R14
    000012AE E400                   MOV         #0,R4
      simplexC.c   798            PrintMini(0, 21, (unsigned char*)"2 Pinfo its", MINI_OVER);
    000012B0 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B2 6683                   MOV         R8,R6
    000012B4 E515                   MOV         #21,R5
    000012B6 4E0B                   JSR         @R14
    000012B8 E400                   MOV         #0,R4
      simplexC.c   799            menuChoice = InputI(0, 28);
    000012BA E51C                   MOV         #28,R5
    000012BC D31C                   MOV.L       L1205+50,R3; _InputI
    000012BE 430B                   JSR         @R3
    000012C0 E400                   MOV         #0,R4
      simplexC.c   800            Bdisp_PutDisp_DD();
    000012C2 D21C                   MOV.L       L1205+54,R2; _Bdisp_PutDisp_DD
    000012C4 420B                   JSR         @R2
    000012C6 6D03                   MOV         R0,R13
      simplexC.c   801            switch (menuChoice)
    000012C8 60D3                   MOV         R13,R0
    000012CA 8801                   CMP/EQ      #1,R0
    000012CC 8903                   BT          L928
    000012CE 8802                   CMP/EQ      #2,R0
    000012D0 8905                   BT          L929
    000012D2 A006                   BRA         L1094
    000012D4 0009                   NOP
    000012D6              L928:                            ; case label 
      simplexC.c   802            {
      simplexC.c   803                case 1: printResVariables();break;
    000012D6 BED0                   BSR         _printResVariables
    000012D8 0009                   NOP
    000012DA A002                   BRA         L1094
    000012DC 0009                   NOP
    000012DE              L929:                            ; case label 
      simplexC.c   804                case 2: printIts();break;
    000012DE BF8B                   BSR         _printIts
    000012E0 0009                   NOP
      simplexC.c   805                default: break;
    000012E2              L1094:                            
    000012E2 2DD8                   TST         R13,R13
    000012E4 8BD3                   BF          L1095
      simplexC.c   806            }
      simplexC.c   807        }
      simplexC.c   808        return 0;
    000012E6 E000                   MOV         #0,R0
      simplexC.c   809    }
    000012E8 910C                   MOV.W       L1205+6,R1 ; H'0184
    000012EA 3F1C                   ADD         R1,R15
    000012EC 4F26                   LDS.L       @R15+,PR
    000012EE 68F6                   MOV.L       @R15+,R8
    000012F0 69F6                   MOV.L       @R15+,R9
    000012F2 6AF6                   MOV.L       @R15+,R10
    000012F4 6BF6                   MOV.L       @R15+,R11
    000012F6 6CF6                   MOV.L       @R15+,R12
    000012F8 6DF6                   MOV.L       @R15+,R13
    000012FA 000B                   RTS
    000012FC 6EF6                   MOV.L       @R15+,R14
    000012FE              L1205:                            
    000012FE FE7C                   .DATA.W     H'FE7C
    00001300 0104                   .DATA.W     H'0104
    00001302 0084                   .DATA.W     H'0084
    00001304 0184                   .DATA.W     H'0184




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001306 0000                   .DATA.W     0
    00001308 <00000000>             .DATA.L     L713
    0000130C <00000000>             .DATA.L     _sprintf
    00001310 <00000010>             .DATA.L     H'00000010+_ex
    00001314 <00000014>             .DATA.L     H'00000014+_ex
    00001318 <00000000>             .DATA.L     __stod
    0000131C <00000000>             .DATA.L     L714
    00001320 <00000000>             .DATA.L     L717
    00001324 <00000000>             .DATA.L     L716
    00001328 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000132C <00000000>             .DATA.L     _PrintMini
    00001330 <00000000>             .DATA.L     _InputI
    00001334 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
      simplexC.c   810    
      simplexC.c   811    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    00001338              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    00001338 2FE6                   MOV.L       R14,@-R15
    0000133A 4F22                   STS.L       PR,@-R15
    0000133C 9071                   MOV.W       L1206,R0   ; H'FF74
    0000133E 3F0C                   ADD         R0,R15
    00001340 2F42                   MOV.L       R4,@R15
    00001342 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   812    {   
      simplexC.c   813        char strout[128];
      simplexC.c   814        int res;
      simplexC.c   815        Bdisp_AllClr_DDVRAM();
    00001344 D338                   MOV.L       L1206+6,R3 ; _Bdisp_AllClr_DDVRAM
    00001346 430B                   JSR         @R3
    00001348 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c   816        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);
    0000134A 6EF3                   MOV         R15,R14
    0000134C 62F2                   MOV.L       @R15,R2
    0000134E 7E0C                   ADD         #12,R14
    00001350 D336                   MOV.L       L1206+10,R3; L726
    00001352 2F26                   MOV.L       R2,@-R15
    00001354 2F36                   MOV.L       R3,@-R15
    00001356 D236                   MOV.L       L1206+14,R2; _sprintf
    00001358 420B                   JSR         @R2
    0000135A 64E3                   MOV         R14,R4
      simplexC.c   817        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000135C 1FE2                   MOV.L       R14,@(8,R15)
    0000135E 66E3                   MOV         R14,R6
    00001360 D334                   MOV.L       L1206+18,R3; _PrintMini
    00001362 E710                   MOV         #16,R7
    00001364 E500                   MOV         #0,R5
    00001366 430B                   JSR         @R3
    00001368 6453                   MOV         R5,R4
      simplexC.c   818        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c   819            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    0000136A E202                   MOV         #2,R2
    0000136C 2F26                   MOV.L       R2,@-R15
    0000136E E301                   MOV         #1,R3
    00001370 D22F                   MOV.L       L1206+14,R2; _sprintf
    00001372 E100                   MOV         #0,R1
    00001374 2F36                   MOV.L       R3,@-R15
    00001376 2F16                   MOV.L       R1,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001378 D32F                   MOV.L       L1206+22,R3; L727
    0000137A 2F36                   MOV.L       R3,@-R15
    0000137C 420B                   JSR         @R2
    0000137E 64E3                   MOV         R14,R4
      simplexC.c   820        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    00001380 D32C                   MOV.L       L1206+18,R3; _PrintMini
    00001382 7F18                   ADD         #24,R15
    00001384 66F2                   MOV.L       @R15,R6
    00001386 E507                   MOV         #7,R5
    00001388 E710                   MOV         #16,R7
    0000138A 430B                   JSR         @R3
    0000138C E400                   MOV         #0,R4
      simplexC.c   821        res = InputI(0,14);
    0000138E E50E                   MOV         #14,R5
    00001390 D22A                   MOV.L       L1206+26,R2; _InputI
    00001392 420B                   JSR         @R2
    00001394 E400                   MOV         #0,R4
      simplexC.c   822        Bdisp_PutDisp_DD();
    00001396 D32A                   MOV.L       L1206+30,R3; _Bdisp_PutDisp_DD
    00001398 430B                   JSR         @R3
    0000139A 6E03                   MOV         R0,R14
      simplexC.c   823        switch (res)
    0000139C 60E3                   MOV         R14,R0
    0000139E 8800                   CMP/EQ      #0,R0
    000013A0 8905                   BT          L933
    000013A2 8801                   CMP/EQ      #1,R0
    000013A4 8909                   BT          L934
    000013A6 8802                   CMP/EQ      #2,R0
    000013A8 890C                   BT          L935
    000013AA A013                   BRA         L1098
    000013AC 0009                   NOP
    000013AE              L933:                            ; case label 
      simplexC.c   824        {
      simplexC.c   825            case INE_EQUAL: *nVariables2fases+=1; break;
    000013AE 52F2                   MOV.L       @(8,R15),R2
    000013B0 6322                   MOV.L       @R2,R3
    000013B2 7301                   ADD         #1,R3
    000013B4 2232                   MOV.L       R3,@R2
    000013B6 A00D                   BRA         L1098
    000013B8 0009                   NOP
    000013BA              L934:                            ; case label 
      simplexC.c   826            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    000013BA 51F1                   MOV.L       @(4,R15),R1
    000013BC 6312                   MOV.L       @R1,R3
    000013BE 7301                   ADD         #1,R3
    000013C0 A008                   BRA         L1098
    000013C2 2132                   MOV.L       R3,@R1
    000013C4              L935:                            ; case label 
      simplexC.c   827            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    000013C4 51F1                   MOV.L       @(4,R15),R1
    000013C6 6312                   MOV.L       @R1,R3
    000013C8 7301                   ADD         #1,R3
    000013CA 2132                   MOV.L       R3,@R1
    000013CC 52F2                   MOV.L       @(8,R15),R2
    000013CE 6322                   MOV.L       @R2,R3
    000013D0 7301                   ADD         #1,R3
    000013D2 2232                   MOV.L       R3,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013D4              L1098:                            
      simplexC.c   828        }
      simplexC.c   829    
      simplexC.c   830        return res;
      simplexC.c   831    }
    000013D4 9126                   MOV.W       L1206+2,R1 ; H'008C
    000013D6 60E3                   MOV         R14,R0
    000013D8 3F1C                   ADD         R1,R15
    000013DA 4F26                   LDS.L       @R15+,PR
    000013DC 000B                   RTS
    000013DE 6EF6                   MOV.L       @R15+,R14
      simplexC.c   832    
      simplexC.c   833    float getRightValue(int nConstraint)
    000013E0              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=144
    000013E0 4F22                   STS.L       PR,@-R15
    000013E2 9020                   MOV.W       L1206+4,R0 ; H'FF7C
      simplexC.c   834    {   
      simplexC.c   835        char strout[128];
      simplexC.c   836        float res;
      simplexC.c   837        Bdisp_AllClr_DDVRAM();
    000013E4 D310                   MOV.L       L1206+6,R3 ; _Bdisp_AllClr_DDVRAM
    000013E6 3F0C                   ADD         R0,R15
    000013E8 430B                   JSR         @R3
    000013EA 2F42                   MOV.L       R4,@R15
      simplexC.c   838        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    000013EC 62F2                   MOV.L       @R15,R2
    000013EE 2F26                   MOV.L       R2,@-R15
    000013F0 D314                   MOV.L       L1206+34,R3; L734
    000013F2 2F36                   MOV.L       R3,@-R15
    000013F4 D20E                   MOV.L       L1206+14,R2; _sprintf
    000013F6 64F3                   MOV         R15,R4
    000013F8 420B                   JSR         @R2
    000013FA 740C                   ADD         #12,R4
      simplexC.c   839        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000013FC D30D                   MOV.L       L1206+18,R3; _PrintMini
    000013FE E710                   MOV         #16,R7
    00001400 66F3                   MOV         R15,R6
    00001402 760C                   ADD         #12,R6
    00001404 E500                   MOV         #0,R5
    00001406 430B                   JSR         @R3
    00001408 6453                   MOV         R5,R4
      simplexC.c   840        Bdisp_PutDisp_DD();
    0000140A D20D                   MOV.L       L1206+30,R2; _Bdisp_PutDisp_DD
    0000140C 420B                   JSR         @R2
    0000140E 0009                   NOP
      simplexC.c   841        res = InputD(0,7);
    00001410 D30D                   MOV.L       L1206+38,R3; _InputD
    00001412 E507                   MOV         #7,R5
    00001414 430B                   JSR         @R3
    00001416 E400                   MOV         #0,R4
      simplexC.c   842        return res;
      simplexC.c   843    }
    00001418 9104                   MOV.W       L1206+2,R1 ; H'008C
    0000141A 3F1C                   ADD         R1,R15
    0000141C 4F26                   LDS.L       @R15+,PR
    0000141E 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001420 0009                   NOP
    00001422              L1206:                            
    00001422 FF74                   .DATA.W     H'FF74
    00001424 008C                   .DATA.W     H'008C
    00001426 FF7C                   .DATA.W     H'FF7C
    00001428 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000142C <00000000>             .DATA.L     L726
    00001430 <00000000>             .DATA.L     _sprintf
    00001434 <00000000>             .DATA.L     _PrintMini
    00001438 <00000000>             .DATA.L     L727
    0000143C <00000000>             .DATA.L     _InputI
    00001440 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001444 <00000000>             .DATA.L     L734
    00001448 <00000000>             .DATA.L     _InputD
      simplexC.c   844    
      simplexC.c   845    float *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, float *rightValue, int
                         + *nVariablesSlope, int * nVariables2fases)
    0000144C              _getInequation:                  ; function: getInequation
                                                           ; frame size=184
    0000144C 2FE6                   MOV.L       R14,@-R15
    0000144E 2FD6                   MOV.L       R13,@-R15
    00001450 2FC6                   MOV.L       R12,@-R15
    00001452 2FB6                   MOV.L       R11,@-R15
    00001454 2FA6                   MOV.L       R10,@-R15
    00001456 6A43                   MOV         R4,R10
      simplexC.c   846    {
      simplexC.c   847        char strout[128];
      simplexC.c   848        unsigned int i;
      simplexC.c   849        float *constraintValues;
      simplexC.c   850        constraintValues = (float *)malloc(sizeof(float) * nVariables);
    00001458 D329                   MOV.L       L1207+8,R3 ; _malloc
    0000145A 64A3                   MOV         R10,R4
    0000145C 2F96                   MOV.L       R9,@-R15
    0000145E 6953                   MOV         R5,R9
    00001460 2F86                   MOV.L       R8,@-R15
    00001462 4F22                   STS.L       PR,@-R15
    00001464 9048                   MOV.W       L1207,R0   ; H'FF74
    00001466 3F0C                   ADD         R0,R15
    00001468 1F62                   MOV.L       R6,@(8,R15)
    0000146A 1F71                   MOV.L       R7,@(4,R15)
    0000146C 430B                   JSR         @R3
    0000146E 4408                   SHLL2       R4
    00001470 2F02                   MOV.L       R0,@R15
      simplexC.c   851        for (i = 0; i < nVariables; i++)
    00001472 EB00                   MOV         #0,R11
    00001474 D823                   MOV.L       L1207+12,R8; _PrintMini
    00001476 6CF3                   MOV         R15,R12
    00001478 EE00                   MOV         #0,R14
    0000147A 3E0C                   ADD         R0,R14
    0000147C ED01                   MOV         #1,R13
    0000147E 63B3                   MOV         R11,R3
    00001480 33A2                   CMP/HS      R10,R3
    00001482 8D1D                   BT/S        L1101
    00001484 7C0C                   ADD         #12,R12
    00001486              L1102:                            
      simplexC.c   852        {
      simplexC.c   853            Bdisp_AllClr_DDVRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001486 D120                   MOV.L       L1207+16,R1; _Bdisp_AllClr_DDVRAM
    00001488 410B                   JSR         @R1
    0000148A 0009                   NOP
      simplexC.c   854            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    0000148C 2FD6                   MOV.L       R13,@-R15
    0000148E 2F96                   MOV.L       R9,@-R15
    00001490 D31E                   MOV.L       L1207+20,R3; L747
    00001492 2F36                   MOV.L       R3,@-R15
    00001494 D21E                   MOV.L       L1207+24,R2; _sprintf
    00001496 420B                   JSR         @R2
    00001498 64C3                   MOV         R12,R4
    0000149A 7F0C                   ADD         #12,R15
      simplexC.c   855            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000149C E710                   MOV         #16,R7
    0000149E 66C3                   MOV         R12,R6
    000014A0 E500                   MOV         #0,R5
    000014A2 480B                   JSR         @R8
    000014A4 6453                   MOV         R5,R4
      simplexC.c   856            Bdisp_PutDisp_DD();
    000014A6 D31B                   MOV.L       L1207+28,R3; _Bdisp_PutDisp_DD
    000014A8 430B                   JSR         @R3
    000014AA 0009                   NOP
      simplexC.c   857            constraintValues[i] = InputD(0, 7);
    000014AC D21A                   MOV.L       L1207+32,R2; _InputD
    000014AE E507                   MOV         #7,R5
    000014B0 420B                   JSR         @R2
    000014B2 E400                   MOV         #0,R4
    000014B4 2E02                   MOV.L       R0,@R14
    000014B6 7B01                   ADD         #1,R11
    000014B8 7E04                   ADD         #4,R14
    000014BA 3BA2                   CMP/HS      R10,R11
    000014BC 8FE3                   BF/S        L1102
    000014BE 7D01                   ADD         #1,R13
    000014C0              L1101:                            
      simplexC.c   858        }
      simplexC.c   859        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    000014C0 52F2                   MOV.L       @(8,R15),R2
    000014C2 2F26                   MOV.L       R2,@-R15
    000014C4 9019                   MOV.W       L1207+2,R0 ; H'00B4
    000014C6 06FE                   MOV.L       @(R0,R15),R6
    000014C8 9018                   MOV.W       L1207+4,R0 ; H'00B0
    000014CA 05FE                   MOV.L       @(R0,R15),R5
    000014CC BF34                   BSR         _getInequalitySign
    000014CE 6493                   MOV         R9,R4
    000014D0 61F6                   MOV.L       @R15+,R1
    000014D2 2102                   MOV.L       R0,@R1
      simplexC.c   860        *rightValue = getRightValue(nConstraint);
    000014D4 53F1                   MOV.L       @(4,R15),R3
    000014D6 2F36                   MOV.L       R3,@-R15
    000014D8 BF82                   BSR         _getRightValue
    000014DA 6493                   MOV         R9,R4
    000014DC 62F6                   MOV.L       @R15+,R2
    000014DE 2202                   MOV.L       R0,@R2
      simplexC.c   861        return constraintValues;
    000014E0 60F2                   MOV.L       @R15,R0
      simplexC.c   862    }
    000014E2 910C                   MOV.W       L1207+6,R1 ; H'008C




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014E4 3F1C                   ADD         R1,R15
    000014E6 4F26                   LDS.L       @R15+,PR
    000014E8 68F6                   MOV.L       @R15+,R8
    000014EA 69F6                   MOV.L       @R15+,R9
    000014EC 6AF6                   MOV.L       @R15+,R10
    000014EE 6BF6                   MOV.L       @R15+,R11
    000014F0 6CF6                   MOV.L       @R15+,R12
    000014F2 6DF6                   MOV.L       @R15+,R13
    000014F4 000B                   RTS
    000014F6 6EF6                   MOV.L       @R15+,R14
    000014F8              L1207:                            
    000014F8 FF74                   .DATA.W     H'FF74
    000014FA 00B4                   .DATA.W     H'00B4
    000014FC 00B0                   .DATA.W     H'00B0
    000014FE 008C                   .DATA.W     H'008C
    00001500 <00000000>             .DATA.L     _malloc
    00001504 <00000000>             .DATA.L     _PrintMini
    00001508 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000150C <00000000>             .DATA.L     L747
    00001510 <00000000>             .DATA.L     _sprintf
    00001514 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001518 <00000000>             .DATA.L     _InputD
      simplexC.c   863    
      simplexC.c   864    struct problemStatement* getProblemInputs()
    0000151C              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224
    0000151C 2FE6                   MOV.L       R14,@-R15
      simplexC.c   865    {
      simplexC.c   866        char strout[128];
      simplexC.c   867        unsigned int nConstraints;
      simplexC.c   868        unsigned int nVariables;
      simplexC.c   869        unsigned int i;
      simplexC.c   870        int nVariablesInteger;
      simplexC.c   871        int problemType;
      simplexC.c   872        float **constraints;
      simplexC.c   873        float *rightValues;
      simplexC.c   874        float *funcObjtValues;
      simplexC.c   875        int *inequalitiesSigns;
      simplexC.c   876        int *idIntegerVariables;
      simplexC.c   877        int *idSlopeVariables;
      simplexC.c   878        int *id2fasesVariables;
      simplexC.c   879        struct problemStatement *pInput;
      simplexC.c   880        nVariablesInteger=0;
    0000151E E300                   MOV         #0,R3
    00001520 90AD                   MOV.W       L1208,R0   ; H'FF4C
    00001522 2FD6                   MOV.L       R13,@-R15
    00001524 2FC6                   MOV.L       R12,@-R15
    00001526 2FB6                   MOV.L       R11,@-R15
    00001528 2FA6                   MOV.L       R10,@-R15
    0000152A 2F96                   MOV.L       R9,@-R15
    0000152C 2F86                   MOV.L       R8,@-R15
    0000152E 4F22                   STS.L       PR,@-R15
      simplexC.c   881        pInput = malloc(sizeof(struct problemStatement));
    00001530 D954                   MOV.L       L1208+6,R9 ; _malloc
    00001532 3F0C                   ADD         R0,R15
    00001534 1F36                   MOV.L       R3,@(24,R15)
    00001536 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001538 E454                   MOV         #84,R4
      simplexC.c   882        Bdisp_AllClr_DDVRAM();
    0000153A D853                   MOV.L       L1208+10,R8; _Bdisp_AllClr_DDVRAM
    0000153C 480B                   JSR         @R8
    0000153E 6E03                   MOV         R0,R14
      simplexC.c   883        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    00001540 DB52                   MOV.L       L1208+14,R11; _PrintMini
    00001542 E710                   MOV         #16,R7
    00001544 D652                   MOV.L       L1208+18,R6; L764
    00001546 E500                   MOV         #0,R5
    00001548 4B0B                   JSR         @R11
    0000154A 6453                   MOV         R5,R4
      simplexC.c   884        Bdisp_PutDisp_DD();
    0000154C DA51                   MOV.L       L1208+22,R10; _Bdisp_PutDisp_DD
    0000154E 4A0B                   JSR         @R10
    00001550 0009                   NOP
      simplexC.c   885        nConstraints = InputI(0, 7);
    00001552 E507                   MOV         #7,R5
    00001554 D350                   MOV.L       L1208+26,R3; _InputI
    00001556 430B                   JSR         @R3
    00001558 E400                   MOV         #0,R4
      simplexC.c   886        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    0000155A E710                   MOV         #16,R7
    0000155C D64F                   MOV.L       L1208+30,R6; L765
    0000155E E50E                   MOV         #14,R5
    00001560 1F02                   MOV.L       R0,@(8,R15)
    00001562 4B0B                   JSR         @R11
    00001564 E400                   MOV         #0,R4
      simplexC.c   887        Bdisp_PutDisp_DD();
    00001566 4A0B                   JSR         @R10
    00001568 0009                   NOP
      simplexC.c   888        nVariables = InputI(0, 21);
    0000156A E515                   MOV         #21,R5
    0000156C D34A                   MOV.L       L1208+26,R3; _InputI
    0000156E 430B                   JSR         @R3
    00001570 E400                   MOV         #0,R4
    00001572 6C03                   MOV         R0,R12
      simplexC.c   889        PrintMini(0, 28, (unsigned char *)"Press. 1-LP, 2-ILP, 3-Cuts", MINI_OVER);
    00001574 D64A                   MOV.L       L1208+34,R6; L766
    00001576 E51C                   MOV         #28,R5
    00001578 E710                   MOV         #16,R7
    0000157A 4B0B                   JSR         @R11
    0000157C E400                   MOV         #0,R4
      simplexC.c   890        Bdisp_PutDisp_DD();
    0000157E 4A0B                   JSR         @R10
    00001580 0009                   NOP
      simplexC.c   891        problemType = InputI(0, 35);
    00001582 E523                   MOV         #35,R5
    00001584 D244                   MOV.L       L1208+26,R2; _InputI
    00001586 420B                   JSR         @R2
    00001588 E400                   MOV         #0,R4
    0000158A 1F09                   MOV.L       R0,@(36,R15)
      simplexC.c   892        constraints = (float **)malloc(sizeof(float) * nConstraints);
    0000158C 54F2                   MOV.L       @(8,R15),R4
    0000158E 4408                   SHLL2       R4
    00001590 490B                   JSR         @R9
    00001592 2F42                   MOV.L       R4,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001594 1F08                   MOV.L       R0,@(32,R15)
      simplexC.c   893        rightValues=calloc(nConstraints,sizeof(float));
    00001596 E504                   MOV         #4,R5
    00001598 DD42                   MOV.L       L1208+38,R13; _calloc
    0000159A 4D0B                   JSR         @R13
    0000159C 54F2                   MOV.L       @(8,R15),R4
    0000159E 1F07                   MOV.L       R0,@(28,R15)
      simplexC.c   894        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    000015A0 490B                   JSR         @R9
    000015A2 64F2                   MOV.L       @R15,R4
    000015A4 1F03                   MOV.L       R0,@(12,R15)
      simplexC.c   895        funcObjtValues = calloc(nVariables+1,sizeof(float));
    000015A6 E504                   MOV         #4,R5
    000015A8 64C3                   MOV         R12,R4
    000015AA 4D0B                   JSR         @R13
    000015AC 7401                   ADD         #1,R4
      simplexC.c   896        idIntegerVariables = calloc(nVariables,sizeof(int));
    000015AE E504                   MOV         #4,R5
    000015B0 1F04                   MOV.L       R0,@(16,R15)
    000015B2 4D0B                   JSR         @R13
    000015B4 64C3                   MOV         R12,R4
      simplexC.c   897        idSlopeVariables = calloc(nVariables,sizeof(int));
    000015B6 E504                   MOV         #4,R5
    000015B8 1F0A                   MOV.L       R0,@(40,R15)
    000015BA 4D0B                   JSR         @R13
    000015BC 64C3                   MOV         R12,R4
      simplexC.c   898        id2fasesVariables = calloc(nVariables,sizeof(int));
    000015BE E504                   MOV         #4,R5
    000015C0 1F0B                   MOV.L       R0,@(44,R15)
    000015C2 4D0B                   JSR         @R13
    000015C4 64C3                   MOV         R12,R4
      simplexC.c   899        pInput->nVariablesSlope=0;
    000015C6 E300                   MOV         #0,R3
    000015C8 1F0C                   MOV.L       R0,@(48,R15)
      simplexC.c   900        pInput->nVariables2fases=0;
      simplexC.c   901        for(i=0;i<nVariables;i++)
    000015CA 6DF3                   MOV         R15,R13
    000015CC 1E38                   MOV.L       R3,@(32,R14)
    000015CE 6233                   MOV         R3,R2
    000015D0 1E39                   MOV.L       R3,@(36,R14)
    000015D2 1F31                   MOV.L       R3,@(4,R15)
    000015D4 59FA                   MOV.L       @(40,R15),R9
    000015D6 E301                   MOV         #1,R3
    000015D8 2F32                   MOV.L       R3,@R15
    000015DA E300                   MOV         #0,R3
    000015DC 3C36                   CMP/HI      R3,R12
    000015DE 8F31                   BF/S        L1104
    000015E0 7D34                   ADD         #52,R13
    000015E2              L1105:                            
      simplexC.c   902        {
      simplexC.c   903            if(problemType!=TYPE_LP)
    000015E2 50F9                   MOV.L       @(36,R15),R0
    000015E4 8801                   CMP/EQ      #1,R0
    000015E6 8924                   BT          L1106
      simplexC.c   904            {
      simplexC.c   905                Bdisp_AllClr_DDVRAM();
    000015E8 480B                   JSR         @R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015EA 0009                   NOP
      simplexC.c   906                sprintf(strout,"Variable x%d",i+1);
    000015EC 62F2                   MOV.L       @R15,R2
    000015EE 2F26                   MOV.L       R2,@-R15
    000015F0 D32D                   MOV.L       L1208+42,R3; L769
    000015F2 2F36                   MOV.L       R3,@-R15
    000015F4 D22D                   MOV.L       L1208+46,R2; _sprintf
    000015F6 420B                   JSR         @R2
    000015F8 64D3                   MOV         R13,R4
    000015FA 7F08                   ADD         #8,R15
      simplexC.c   907                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000015FC E710                   MOV         #16,R7
    000015FE 66D3                   MOV         R13,R6
    00001600 E500                   MOV         #0,R5
    00001602 4B0B                   JSR         @R11
    00001604 6453                   MOV         R5,R4
      simplexC.c   908                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
    00001606 E710                   MOV         #16,R7
    00001608 D629                   MOV.L       L1208+50,R6; L770
    0000160A E507                   MOV         #7,R5
    0000160C 4B0B                   JSR         @R11
    0000160E E400                   MOV         #0,R4
      simplexC.c   909                idIntegerVariables[i] = InputI(0, 14);
    00001610 D321                   MOV.L       L1208+26,R3; _InputI
    00001612 E50E                   MOV         #14,R5
    00001614 430B                   JSR         @R3
    00001616 E400                   MOV         #0,R4
      simplexC.c   910                Bdisp_PutDisp_DD();
    00001618 4A0B                   JSR         @R10
    0000161A 2902                   MOV.L       R0,@R9
      simplexC.c   911                memset(strout,0,128);
    0000161C 9630                   MOV.W       L1208+2,R6 ; H'0080
    0000161E E500                   MOV         #0,R5
    00001620 D224                   MOV.L       L1208+54,R2; _memset
    00001622 420B                   JSR         @R2
    00001624 64D3                   MOV         R13,R4
      simplexC.c   912                if(idIntegerVariables[i]==1)
    00001626 6092                   MOV.L       @R9,R0
    00001628 8801                   CMP/EQ      #1,R0
    0000162A 8B02                   BF          L1106
      simplexC.c   913                {
      simplexC.c   914                    nVariablesInteger+=1;
    0000162C 52F6                   MOV.L       @(24,R15),R2
    0000162E 7201                   ADD         #1,R2
    00001630 1F26                   MOV.L       R2,@(24,R15)
    00001632              L1106:                            
    00001632 7904                   ADD         #4,R9
    00001634 53F1                   MOV.L       @(4,R15),R3
    00001636 7301                   ADD         #1,R3
    00001638 1F31                   MOV.L       R3,@(4,R15)
    0000163A 33C2                   CMP/HS      R12,R3
    0000163C 62F2                   MOV.L       @R15,R2
    0000163E 7201                   ADD         #1,R2
    00001640 8FCF                   BF/S        L1105
    00001642 2F22                   MOV.L       R2,@R15
    00001644              L1104:                            
      simplexC.c   915                }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   916            }
      simplexC.c   917        }
      simplexC.c   918        for (i = 0; i < nConstraints; i++)
    00001644 E300                   MOV         #0,R3
    00001646 E201                   MOV         #1,R2
    00001648 1F31                   MOV.L       R3,@(4,R15)
    0000164A 2F22                   MOV.L       R2,@R15
    0000164C 52F2                   MOV.L       @(8,R15),R2
    0000164E 3236                   CMP/HI      R3,R2
    00001650 8F3C                   BF/S        L1108
    00001652 6933                   MOV         R3,R9
    00001654              L1109:                            
      simplexC.c   919        {
      simplexC.c   920            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV
                         +ariablesSlope,&pInput->nVariables2fases);
    00001654 50F8                   MOV.L       @(32,R15),R0
    00001656 63E3                   MOV         R14,R3
    00001658 309C                   ADD         R9,R0
    0000165A 7324                   ADD         #36,R3
    0000165C 2F06                   MOV.L       R0,@-R15
    0000165E 2F36                   MOV.L       R3,@-R15
    00001660 63E3                   MOV         R14,R3
    00001662 7320                   ADD         #32,R3
    00001664 2F36                   MOV.L       R3,@-R15
    00001666 57FA                   MOV.L       @(40,R15),R7
    00001668 56F6                   MOV.L       @(24,R15),R6
    0000166A 379C                   ADD         R9,R7
    0000166C 55F3                   MOV.L       @(12,R15),R5
    0000166E 369C                   ADD         R9,R6
    00001670 BEEC                   BSR         _getInequation
    00001672 64C3                   MOV         R12,R4
    00001674 7F08                   ADD         #8,R15
    00001676 63F6                   MOV.L       @R15+,R3
    00001678 2302                   MOV.L       R0,@R3
    0000167A A01D                   BRA         L1189
    0000167C 0009                   NOP
    0000167E              L1208:                            
    0000167E FF4C                   .DATA.W     H'FF4C
    00001680 0080                   .DATA.W     H'0080
    00001682 0000                   .DATA.W     0
    00001684 <00000000>             .DATA.L     _malloc
    00001688 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000168C <00000000>             .DATA.L     _PrintMini
    00001690 <00000000>             .DATA.L     L764
    00001694 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001698 <00000000>             .DATA.L     _InputI
    0000169C <00000000>             .DATA.L     L765
    000016A0 <00000000>             .DATA.L     L766
    000016A4 <00000000>             .DATA.L     _calloc
    000016A8 <00000000>             .DATA.L     L769
    000016AC <00000000>             .DATA.L     _sprintf
    000016B0 <00000000>             .DATA.L     L770
    000016B4 <00000000>             .DATA.L     _memset
    000016B8              L1189:                            
    000016B8 52F1                   MOV.L       @(4,R15),R2
    000016BA 7201                   ADD         #1,R2
    000016BC 1F21                   MOV.L       R2,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016BE 63F2                   MOV.L       @R15,R3
    000016C0 7301                   ADD         #1,R3
    000016C2 2F32                   MOV.L       R3,@R15
    000016C4 51F2                   MOV.L       @(8,R15),R1
    000016C6 3212                   CMP/HS      R1,R2
    000016C8 8FC4                   BF/S        L1109
    000016CA 7904                   ADD         #4,R9
    000016CC              L1108:                            
      simplexC.c   921        }
      simplexC.c   922        
      simplexC.c   923        Bdisp_AllClr_DDVRAM();
    000016CC 480B                   JSR         @R8
    000016CE 0009                   NOP
      simplexC.c   924        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    000016D0 D146                   MOV.L       L1209+6,R1 ; L773
    000016D2 E301                   MOV         #1,R3
    000016D4 2F36                   MOV.L       R3,@-R15
    000016D6 E200                   MOV         #0,R2
    000016D8 D345                   MOV.L       L1209+10,R3; _sprintf
    000016DA 2F26                   MOV.L       R2,@-R15
    000016DC 2F16                   MOV.L       R1,@-R15
    000016DE 430B                   JSR         @R3
    000016E0 64D3                   MOV         R13,R4
    000016E2 7F0C                   ADD         #12,R15
      simplexC.c   925        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000016E4 1FD5                   MOV.L       R13,@(20,R15)
    000016E6 66D3                   MOV         R13,R6
    000016E8 E710                   MOV         #16,R7
    000016EA E500                   MOV         #0,R5
    000016EC 4B0B                   JSR         @R11
    000016EE 6453                   MOV         R5,R4
      simplexC.c   926        pInput->funcObjectivePurpose = InputI(0, 7);
    000016F0 D340                   MOV.L       L1209+14,R3; _InputI
    000016F2 E507                   MOV         #7,R5
    000016F4 430B                   JSR         @R3
    000016F6 E400                   MOV         #0,R4
    000016F8 E144                   MOV         #68,R1
    000016FA 31EC                   ADD         R14,R1
      simplexC.c   927        Bdisp_PutDisp_DD();
    000016FC 4A0B                   JSR         @R10
    000016FE 2102                   MOV.L       R0,@R1
      simplexC.c   928        memset(strout,0,128);
    00001700 9671                   MOV.W       L1209,R6   ; H'0080
    00001702 E500                   MOV         #0,R5
    00001704 D33C                   MOV.L       L1209+18,R3; _memset
    00001706 430B                   JSR         @R3
    00001708 64D3                   MOV         R13,R4
      simplexC.c   929        for(i=0;i<nVariables;i++)
    0000170A E200                   MOV         #0,R2
    0000170C 1F21                   MOV.L       R2,@(4,R15)
    0000170E 53F4                   MOV.L       @(16,R15),R3
    00001710 2F32                   MOV.L       R3,@R15
    00001712 6323                   MOV         R2,R3
    00001714 3C36                   CMP/HI      R3,R12
    00001716 8F25                   BF/S        L1110
    00001718 E901                   MOV         #1,R9
    0000171A              L1111:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   930        {
      simplexC.c   931            Bdisp_AllClr_DDVRAM();
    0000171A 480B                   JSR         @R8
    0000171C 0009                   NOP
      simplexC.c   932            sprintf(strout,"Obj value var x%d",i+1);
    0000171E 2F96                   MOV.L       R9,@-R15
    00001720 D336                   MOV.L       L1209+22,R3; L775
    00001722 2F36                   MOV.L       R3,@-R15
    00001724 D232                   MOV.L       L1209+10,R2; _sprintf
    00001726 420B                   JSR         @R2
    00001728 64D3                   MOV         R13,R4
    0000172A 7F08                   ADD         #8,R15
      simplexC.c   933            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000172C 56F5                   MOV.L       @(20,R15),R6
    0000172E E500                   MOV         #0,R5
    00001730 E710                   MOV         #16,R7
    00001732 4B0B                   JSR         @R11
    00001734 6453                   MOV         R5,R4
      simplexC.c   934            funcObjtValues[i] = InputD(0, 7);
    00001736 E507                   MOV         #7,R5
    00001738 63F2                   MOV.L       @R15,R3
    0000173A 2F36                   MOV.L       R3,@-R15
    0000173C D330                   MOV.L       L1209+26,R3; _InputD
    0000173E 430B                   JSR         @R3
    00001740 E400                   MOV         #0,R4
    00001742 62F6                   MOV.L       @R15+,R2
      simplexC.c   935            Bdisp_PutDisp_DD();
    00001744 4A0B                   JSR         @R10
    00001746 2202                   MOV.L       R0,@R2
      simplexC.c   936            memset(strout,0,128);
    00001748 964D                   MOV.W       L1209,R6   ; H'0080
    0000174A E500                   MOV         #0,R5
    0000174C D32A                   MOV.L       L1209+18,R3; _memset
    0000174E 430B                   JSR         @R3
    00001750 64D3                   MOV         R13,R4
    00001752 52F1                   MOV.L       @(4,R15),R2
    00001754 7201                   ADD         #1,R2
    00001756 32C2                   CMP/HS      R12,R2
    00001758 1F21                   MOV.L       R2,@(4,R15)
    0000175A 63F2                   MOV.L       @R15,R3
    0000175C 7304                   ADD         #4,R3
    0000175E 2F32                   MOV.L       R3,@R15
    00001760 8FDB                   BF/S        L1111
    00001762 7901                   ADD         #1,R9
    00001764              L1110:                            
      simplexC.c   937        }
      simplexC.c   938        Bdisp_AllClr_DDVRAM();
    00001764 480B                   JSR         @R8
    00001766 0009                   NOP
      simplexC.c   939        sprintf(strout,"Obj value Independent");
    00001768 D326                   MOV.L       L1209+30,R3; L776
    0000176A 2F36                   MOV.L       R3,@-R15
    0000176C D220                   MOV.L       L1209+10,R2; _sprintf
    0000176E 420B                   JSR         @R2
    00001770 64D3                   MOV         R13,R4
    00001772 7F04                   ADD         #4,R15
      simplexC.c   940        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001774 56F5                   MOV.L       @(20,R15),R6
    00001776 E500                   MOV         #0,R5
    00001778 E710                   MOV         #16,R7
    0000177A 4B0B                   JSR         @R11
    0000177C 6453                   MOV         R5,R4
      simplexC.c   941        funcObjtValues[nVariables] = InputD(0, 7);
    0000177E 63C3                   MOV         R12,R3
    00001780 50F4                   MOV.L       @(16,R15),R0
    00001782 E507                   MOV         #7,R5
    00001784 4308                   SHLL2       R3
    00001786 303C                   ADD         R3,R0
    00001788 2F06                   MOV.L       R0,@-R15
    0000178A D31D                   MOV.L       L1209+26,R3; _InputD
    0000178C 430B                   JSR         @R3
    0000178E E400                   MOV         #0,R4
    00001790 62F6                   MOV.L       @R15+,R2
      simplexC.c   942        Bdisp_PutDisp_DD();
    00001792 4A0B                   JSR         @R10
    00001794 2202                   MOV.L       R0,@R2
      simplexC.c   943        pInput->constraints=constraints;
      simplexC.c   944        pInput->rightValues=rightValues;
      simplexC.c   945        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c   946        pInput->nVariables=nVariables;
      simplexC.c   947        pInput->nConstraints=nConstraints;
      simplexC.c   948        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c   949        pInput->idSlopeVariables=idSlopeVariables;
      simplexC.c   950        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c   951        pInput->funcObjtValues=funcObjtValues;
    00001796 E048                   MOV         #72,R0
    00001798 53F8                   MOV.L       @(32,R15),R3
    0000179A 1E34                   MOV.L       R3,@(16,R14)
    0000179C 52F7                   MOV.L       @(28,R15),R2
    0000179E 1E25                   MOV.L       R2,@(20,R14)
    000017A0 53F3                   MOV.L       @(12,R15),R3
    000017A2 1E36                   MOV.L       R3,@(24,R14)
    000017A4 1EC7                   MOV.L       R12,@(28,R14)
    000017A6 53F2                   MOV.L       @(8,R15),R3
    000017A8 1E3B                   MOV.L       R3,@(44,R14)
    000017AA 52FA                   MOV.L       @(40,R15),R2
    000017AC 1E2C                   MOV.L       R2,@(48,R14)
    000017AE 53FB                   MOV.L       @(44,R15),R3
    000017B0 1E3D                   MOV.L       R3,@(52,R14)
    000017B2 52FC                   MOV.L       @(48,R15),R2
    000017B4 1E2E                   MOV.L       R2,@(56,R14)
    000017B6 53F4                   MOV.L       @(16,R15),R3
    000017B8 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c   952        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c   953        pInput->modelType=TYPE_INPUT;
    000017BA E301                   MOV         #1,R3
    000017BC 52F6                   MOV.L       @(24,R15),R2
      simplexC.c   954        pInput->problemType=problemType;
      simplexC.c   955        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c   956        return pInput;
    000017BE 60E3                   MOV         R14,R0
    000017C0 1E2A                   MOV.L       R2,@(40,R14)
    000017C2 1E31                   MOV.L       R3,@(4,R14)
    000017C4 52F9                   MOV.L       @(36,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017C6 2E22                   MOV.L       R2,@R14
    000017C8 51E9                   MOV.L       @(36,R14),R1
    000017CA 4115                   CMP/PL      R1
      simplexC.c   957    }
    000017CC 910C                   MOV.W       L1209+2,R1 ; H'00B4
    000017CE 0329                   MOVT        R3
    000017D0 1E32                   MOV.L       R3,@(8,R14)
    000017D2 3F1C                   ADD         R1,R15
    000017D4 4F26                   LDS.L       @R15+,PR
    000017D6 68F6                   MOV.L       @R15+,R8
    000017D8 69F6                   MOV.L       @R15+,R9
    000017DA 6AF6                   MOV.L       @R15+,R10
    000017DC 6BF6                   MOV.L       @R15+,R11
    000017DE 6CF6                   MOV.L       @R15+,R12
    000017E0 6DF6                   MOV.L       @R15+,R13
    000017E2 000B                   RTS
    000017E4 6EF6                   MOV.L       @R15+,R14
    000017E6              L1209:                            
    000017E6 0080                   .DATA.W     H'0080
    000017E8 00B4                   .DATA.W     H'00B4
    000017EA 0000                   .DATA.W     0
    000017EC <00000000>             .DATA.L     L773
    000017F0 <00000000>             .DATA.L     _sprintf
    000017F4 <00000000>             .DATA.L     _InputI
    000017F8 <00000000>             .DATA.L     _memset
    000017FC <00000000>             .DATA.L     L775
    00001800 <00000000>             .DATA.L     _InputD
    00001804 <00000000>             .DATA.L     L776
      simplexC.c   958    
      simplexC.c   959    int selectExecutionMode()
    00001808              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=144
    00001808 4F22                   STS.L       PR,@-R15
    0000180A 7F80                   ADD         #-128,R15
      simplexC.c   960    {
      simplexC.c   961        char strout[128];
      simplexC.c   962        Bdisp_AllClr_DDVRAM();
    0000180C D350                   MOV.L       L1210+2,R3 ; _Bdisp_AllClr_DDVRAM
    0000180E 430B                   JSR         @R3
    00001810 0009                   NOP
      simplexC.c   963        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    00001812 E201                   MOV         #1,R2
    00001814 D14F                   MOV.L       L1210+6,R1 ; L780
    00001816 E300                   MOV         #0,R3
    00001818 2F26                   MOV.L       R2,@-R15
    0000181A 2F36                   MOV.L       R3,@-R15
    0000181C 2F16                   MOV.L       R1,@-R15
    0000181E 64F3                   MOV         R15,R4
    00001820 D34D                   MOV.L       L1210+10,R3; _sprintf
    00001822 430B                   JSR         @R3
    00001824 740C                   ADD         #12,R4
      simplexC.c   964        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00001826 E710                   MOV         #16,R7
    00001828 D24C                   MOV.L       L1210+14,R2; _PrintMini
    0000182A 66F3                   MOV         R15,R6
    0000182C 760C                   ADD         #12,R6
    0000182E E500                   MOV         #0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001830 420B                   JSR         @R2
    00001832 6453                   MOV         R5,R4
      simplexC.c   965        ex.mode = InputI(0, 7);
    00001834 D34A                   MOV.L       L1210+18,R3; _InputI
    00001836 E507                   MOV         #7,R5
    00001838 430B                   JSR         @R3
    0000183A E400                   MOV         #0,R4
    0000183C D249                   MOV.L       L1210+22,R2; _ex
      simplexC.c   966        Bdisp_PutDisp_DD();
    0000183E D34A                   MOV.L       L1210+26,R3; _Bdisp_PutDisp_DD
    00001840 430B                   JSR         @R3
    00001842 2202                   MOV.L       R0,@R2
      simplexC.c   967        ex.nNodes=0;
    00001844 D349                   MOV.L       L1210+30,R3; H'00000024+_ex
    00001846 E100                   MOV         #0,R1
    00001848 2312                   MOV.L       R1,@R3
      simplexC.c   968        return 0;
    0000184A 6013                   MOV         R1,R0
      simplexC.c   969    }
    0000184C 917F                   MOV.W       L1210,R1   ; H'008C
    0000184E 3F1C                   ADD         R1,R15
    00001850 4F26                   LDS.L       @R15+,PR
    00001852 000B                   RTS
    00001854 0009                   NOP
      simplexC.c   970    
      simplexC.c   971    int convertModel()
    00001856              _convertModel:                   ; function: convertModel
                                                           ; frame size=32
    00001856 2FE6                   MOV.L       R14,@-R15
    00001858 2FD6                   MOV.L       R13,@-R15
    0000185A 2FC6                   MOV.L       R12,@-R15
    0000185C 2FB6                   MOV.L       R11,@-R15
      simplexC.c   972    {
      simplexC.c   973        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c   974        struct problemStatement *modelToSolve;
      simplexC.c   975        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
    0000185E EB00                   MOV         #0,R11
      simplexC.c   976        modelToSolve = malloc(sizeof(struct problemStatement));
    00001860 D343                   MOV.L       L1210+34,R3; _malloc
    00001862 6CB3                   MOV         R11,R12
    00001864 2FA6                   MOV.L       R10,@-R15
    00001866 2F96                   MOV.L       R9,@-R15
    00001868 2F86                   MOV.L       R8,@-R15
    0000186A 69B3                   MOV         R11,R9
    0000186C 4F22                   STS.L       PR,@-R15
    0000186E 430B                   JSR         @R3
    00001870 E454                   MOV         #84,R4
    00001872 6E03                   MOV         R0,R14
      simplexC.c   977        modelToSolve->problemType=ex.initialProblemStatement->problemType;
    00001874 DD3B                   MOV.L       L1210+22,R13; _ex
      simplexC.c   978        modelToSolve->nVariablesSlope=ex.initialProblemStatement->nVariablesSlope;
      simplexC.c   979        modelToSolve->nVariables2fases=ex.initialProblemStatement->nVariables2fases;
      simplexC.c   980        modelToSolve->nVariablesInteger=ex.initialProblemStatement->nVariablesInteger;
      simplexC.c   981        modelToSolve->nConstraints=ex.initialProblemStatement->nConstraints;
      simplexC.c   982        modelToSolve->funcObjectivePurpose=ex.initialProblemStatement->funcObjectivePurpose;
    00001876 E044                   MOV         #68,R0
      simplexC.c   983        modelToSolve->is2fasesNeeded=ex.initialProblemStatement->is2fasesNeeded;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   984        modelToSolve->nVariables=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariables
                         +Slope+ex.initialProblemStatement->nVariables2fases;
      simplexC.c   985        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(float));
    00001878 DA3E                   MOV.L       L1210+38,R10; _calloc
    0000187A 52D1                   MOV.L       @(4,R13),R2
    0000187C 6322                   MOV.L       @R2,R3
    0000187E 2E32                   MOV.L       R3,@R14
    00001880 52D1                   MOV.L       @(4,R13),R2
    00001882 5328                   MOV.L       @(32,R2),R3
    00001884 1E38                   MOV.L       R3,@(32,R14)
    00001886 52D1                   MOV.L       @(4,R13),R2
    00001888 5329                   MOV.L       @(36,R2),R3
    0000188A 1E39                   MOV.L       R3,@(36,R14)
    0000188C 52D1                   MOV.L       @(4,R13),R2
    0000188E 532A                   MOV.L       @(40,R2),R3
    00001890 1E3A                   MOV.L       R3,@(40,R14)
    00001892 52D1                   MOV.L       @(4,R13),R2
    00001894 532B                   MOV.L       @(44,R2),R3
    00001896 1E3B                   MOV.L       R3,@(44,R14)
    00001898 52D1                   MOV.L       @(4,R13),R2
    0000189A 032E                   MOV.L       @(R0,R2),R3
    0000189C 0E36                   MOV.L       R3,@(R0,R14)
    0000189E 52D1                   MOV.L       @(4,R13),R2
    000018A0 5322                   MOV.L       @(8,R2),R3
    000018A2 1E32                   MOV.L       R3,@(8,R14)
    000018A4 54D1                   MOV.L       @(4,R13),R4
    000018A6 5348                   MOV.L       @(32,R4),R3
    000018A8 5247                   MOV.L       @(28,R4),R2
    000018AA 323C                   ADD         R3,R2
    000018AC 5149                   MOV.L       @(36,R4),R1
    000018AE 321C                   ADD         R1,R2
    000018B0 1E27                   MOV.L       R2,@(28,R14)
    000018B2 E504                   MOV         #4,R5
    000018B4 6423                   MOV         R2,R4
    000018B6 4A0B                   JSR         @R10
    000018B8 7401                   ADD         #1,R4
    000018BA E148                   MOV         #72,R1
    000018BC 31EC                   ADD         R14,R1
    000018BE 2102                   MOV.L       R0,@R1
      simplexC.c   986        if(modelToSolve->is2fasesNeeded)
    000018C0 53E2                   MOV.L       @(8,R14),R3
    000018C2 2338                   TST         R3,R3
    000018C4 8906                   BT          L1116
      simplexC.c   987        {
      simplexC.c   988            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(float));
    000018C6 E504                   MOV         #4,R5
    000018C8 54E7                   MOV.L       @(28,R14),R4
    000018CA 4A0B                   JSR         @R10
    000018CC 7401                   ADD         #1,R4
    000018CE E14C                   MOV         #76,R1
    000018D0 31EC                   ADD         R14,R1
    000018D2 2102                   MOV.L       R0,@R1
    000018D4              L1116:                            
      simplexC.c   989        }
      simplexC.c   990        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    000018D4 E504                   MOV         #4,R5
    000018D6 4A0B                   JSR         @R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018D8 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   991        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    000018DA E504                   MOV         #4,R5
    000018DC 1E0D                   MOV.L       R0,@(52,R14)
    000018DE 4A0B                   JSR         @R10
    000018E0 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   992        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    000018E2 E504                   MOV         #4,R5
    000018E4 1E0E                   MOV.L       R0,@(56,R14)
    000018E6 4A0B                   JSR         @R10
    000018E8 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   993        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    000018EA E504                   MOV         #4,R5
    000018EC 1E0F                   MOV.L       R0,@(60,R14)
    000018EE 4A0B                   JSR         @R10
    000018F0 54EB                   MOV.L       @(44,R14),R4
    000018F2 E140                   MOV         #64,R1
      simplexC.c   994        memset(modelToSolve->idConstraintTo2fasesVar,-1,sizeof(modelToSolve->idConstraintTo2fasesVar));
    000018F4 D320                   MOV.L       L1210+42,R3; _memset
    000018F6 E604                   MOV         #4,R6
    000018F8 31EC                   ADD         R14,R1
    000018FA E5FF                   MOV         #-1,R5
    000018FC 2102                   MOV.L       R0,@R1
    000018FE E040                   MOV         #64,R0
    00001900 430B                   JSR         @R3
    00001902 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   995        memset(modelToSolve->idConstraintToSlopeVar,-1,sizeof(modelToSolve->idConstraintToSlopeVar));
    00001904 D21C                   MOV.L       L1210+42,R2; _memset
    00001906 E604                   MOV         #4,R6
    00001908 E5FF                   MOV         #-1,R5
    0000190A 420B                   JSR         @R2
    0000190C 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   996        //SET ID TYPES OF VARIABLES
      simplexC.c   997        for(i=0;i<modelToSolve->nVariables;i++)
    0000190E E501                   MOV         #1,R5
    00001910 A018                   BRA         L1117
    00001912 64B3                   MOV         R11,R4
    00001914              L1118:                            
      simplexC.c   998        {
      simplexC.c   999            if(i>=ex.initialProblemStatement->nVariables && i<ex.initialProblemStatement->nVariables+ex.initia
                         +lProblemStatement->nVariablesSlope)
    00001914 57D1                   MOV.L       @(4,R13),R7
    00001916 5677                   MOV.L       @(28,R7),R6
    00001918 3463                   CMP/GE      R6,R4
    0000191A 8B08                   BF          L1119
    0000191C 5378                   MOV.L       @(32,R7),R3
    0000191E 336C                   ADD         R6,R3
    00001920 3433                   CMP/GE      R3,R4
    00001922 8904                   BT          L1119
      simplexC.c  1000            {
      simplexC.c  1001                modelToSolve->idSlopeVariables[i]=1;
    00001924 50ED                   MOV.L       @(52,R14),R0
    00001926 6343                   MOV         R4,R3
    00001928 4308                   SHLL2       R3
    0000192A A00A                   BRA         L1120
    0000192C 0356                   MOV.L       R5,@(R0,R3)
    0000192E              L1119:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1002            }else if(i>=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope)
    0000192E 56D1                   MOV.L       @(4,R13),R6
    00001930 5368                   MOV.L       @(32,R6),R3
    00001932 5267                   MOV.L       @(28,R6),R2
    00001934 323C                   ADD         R3,R2
    00001936 3423                   CMP/GE      R2,R4
    00001938 8B03                   BF          L1120
      simplexC.c  1003            {
      simplexC.c  1004                modelToSolve->id2fasesVariables[i]=1;
    0000193A 6243                   MOV         R4,R2
    0000193C 50EE                   MOV.L       @(56,R14),R0
    0000193E 4208                   SHLL2       R2
    00001940 0256                   MOV.L       R5,@(R0,R2)
    00001942              L1120:                            
    00001942 7401                   ADD         #1,R4
    00001944              L1117:                            
    00001944 53E7                   MOV.L       @(28,R14),R3
    00001946 3433                   CMP/GE      R3,R4
    00001948 8BE4                   BF          L1118
      simplexC.c  1005            }
      simplexC.c  1006            
      simplexC.c  1007        }
      simplexC.c  1008        for(i=0;i<modelToSolve->nVariables;i++)
    0000194A A054                   BRA         L1122
    0000194C 64B3                   MOV         R11,R4
    0000194E              L1210:                            
    0000194E 008C                   .DATA.W     H'008C
    00001950 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001954 <00000000>             .DATA.L     L780
    00001958 <00000000>             .DATA.L     _sprintf
    0000195C <00000000>             .DATA.L     _PrintMini
    00001960 <00000000>             .DATA.L     _InputI
    00001964 <00000000>             .DATA.L     _ex
    00001968 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000196C <00000024>             .DATA.L     H'00000024+_ex
    00001970 <00000000>             .DATA.L     _malloc
    00001974 <00000000>             .DATA.L     _calloc
    00001978 <00000000>             .DATA.L     _memset
    0000197C              L1123:                            
      simplexC.c  1009        {
      simplexC.c  1010            if(modelToSolve->idSlopeVariables[i])
    0000197C 50ED                   MOV.L       @(52,R14),R0
    0000197E 6243                   MOV         R4,R2
    00001980 4208                   SHLL2       R2
    00001982 032E                   MOV.L       @(R0,R2),R3
    00001984 2338                   TST         R3,R3
    00001986 8917                   BT          L1124
      simplexC.c  1011            {
      simplexC.c  1012                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    00001988 A013                   BRA         L1125
    0000198A 6593                   MOV         R9,R5
    0000198C              L1126:                            
      simplexC.c  1013                {
      simplexC.c  1014                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||ex.initialProb
                         +lemStatement->inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    0000198C 50D1                   MOV.L       @(4,R13),R0
    0000198E 6653                   MOV         R5,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001990 5006                   MOV.L       @(24,R0),R0
    00001992 4608                   SHLL2       R6
    00001994 066E                   MOV.L       @(R0,R6),R6
    00001996 6063                   MOV         R6,R0
    00001998 8801                   CMP/EQ      #1,R0
    0000199A 8902                   BT          L1128
    0000199C 6063                   MOV         R6,R0
    0000199E 8802                   CMP/EQ      #2,R0
    000019A0 8B06                   BF          L1127
    000019A2              L1128:                            
      simplexC.c  1015                    {
      simplexC.c  1016                        modelToSolve->idConstraintToSlopeVar[j]=i;
    000019A2 6353                   MOV         R5,R3
    000019A4 50EF                   MOV.L       @(60,R14),R0
      simplexC.c  1017                        nextConstraintSlopeSet=j+1;
    000019A6 6953                   MOV         R5,R9
    000019A8 4308                   SHLL2       R3
    000019AA 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1018                        break;
    000019AC A004                   BRA         L1124
    000019AE 7901                   ADD         #1,R9
    000019B0              L1127:                            
    000019B0 7501                   ADD         #1,R5
    000019B2              L1125:                            
    000019B2 53EB                   MOV.L       @(44,R14),R3
    000019B4 3533                   CMP/GE      R3,R5
    000019B6 8BE9                   BF          L1126
    000019B8              L1124:                            
      simplexC.c  1019                    }
      simplexC.c  1020                }
      simplexC.c  1021            }
      simplexC.c  1022            if(modelToSolve->id2fasesVariables[i])
    000019B8 50EE                   MOV.L       @(56,R14),R0
    000019BA 6143                   MOV         R4,R1
    000019BC 4108                   SHLL2       R1
    000019BE 031E                   MOV.L       @(R0,R1),R3
    000019C0 2338                   TST         R3,R3
    000019C2 8917                   BT          L1130
      simplexC.c  1023            {
      simplexC.c  1024                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    000019C4 A013                   BRA         L1131
    000019C6 65C3                   MOV         R12,R5
    000019C8              L1132:                            
      simplexC.c  1025                {
      simplexC.c  1026                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_EQUAL ||ex.initialProblemStatement-
                         +>inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    000019C8 50D1                   MOV.L       @(4,R13),R0
    000019CA 6653                   MOV         R5,R6
    000019CC 5006                   MOV.L       @(24,R0),R0
    000019CE 4608                   SHLL2       R6
    000019D0 066E                   MOV.L       @(R0,R6),R6
    000019D2 2668                   TST         R6,R6
    000019D4 8902                   BT          L1134
    000019D6 6063                   MOV         R6,R0
    000019D8 8802                   CMP/EQ      #2,R0
    000019DA 8B07                   BF          L1133
    000019DC              L1134:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1027                    {
      simplexC.c  1028                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    000019DC 6353                   MOV         R5,R3
    000019DE 4308                   SHLL2       R3
    000019E0 E040                   MOV         #64,R0
      simplexC.c  1029                        nextConstraint2fasesSet=j+1;
    000019E2 6C53                   MOV         R5,R12
    000019E4 00EE                   MOV.L       @(R0,R14),R0
    000019E6 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1030                        break;
    000019E8 A004                   BRA         L1130
    000019EA 7C01                   ADD         #1,R12
    000019EC              L1133:                            
    000019EC 7501                   ADD         #1,R5
    000019EE              L1131:                            
    000019EE 52EB                   MOV.L       @(44,R14),R2
    000019F0 3523                   CMP/GE      R2,R5
    000019F2 8BE9                   BF          L1132
    000019F4              L1130:                            
    000019F4 7401                   ADD         #1,R4
    000019F6              L1122:                            
    000019F6 52E7                   MOV.L       @(28,R14),R2
    000019F8 3423                   CMP/GE      R2,R4
    000019FA 8BBF                   BF          L1123
      simplexC.c  1031                    }
      simplexC.c  1032                }
      simplexC.c  1033            }
      simplexC.c  1034        }
      simplexC.c  1035        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c  1036        modelToSolve->constraints=(float **)malloc(sizeof(float) * modelToSolve->nConstraints);
    000019FC 54EB                   MOV.L       @(44,R14),R4
    000019FE D26C                   MOV.L       L1211+2,R2 ; _malloc
    00001A00 420B                   JSR         @R2
    00001A02 4408                   SHLL2       R4
    00001A04 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1037        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(float));
    00001A06 E504                   MOV         #4,R5
    00001A08 4A0B                   JSR         @R10
    00001A0A 54EB                   MOV.L       @(44,R14),R4
    00001A0C 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1038        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    00001A0E E504                   MOV         #4,R5
    00001A10 4A0B                   JSR         @R10
    00001A12 54EB                   MOV.L       @(44,R14),R4
    00001A14 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1039        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00001A16 E504                   MOV         #4,R5
    00001A18 4A0B                   JSR         @R10
    00001A1A 54E7                   MOV.L       @(28,R14),R4
    00001A1C 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1040    
      simplexC.c  1041        for(i=0;i<modelToSolve->nConstraints;i++)
    00001A1E A064                   BRA         L1136
    00001A20 69B3                   MOV         R11,R9
    00001A22              L1137:                            
      simplexC.c  1042        {
      simplexC.c  1043            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(float));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A22 6293                   MOV         R9,R2
    00001A24 58E4                   MOV.L       @(16,R14),R8
    00001A26 E504                   MOV         #4,R5
    00001A28 4208                   SHLL2       R2
    00001A2A 382C                   ADD         R2,R8
    00001A2C 4A0B                   JSR         @R10
    00001A2E 54E7                   MOV.L       @(28,R14),R4
    00001A30 2802                   MOV.L       R0,@R8
      simplexC.c  1044            for(j=0;j<modelToSolve->nVariables;j++)
    00001A32 64B3                   MOV         R11,R4
    00001A34 6C93                   MOV         R9,R12
    00001A36 A04C                   BRA         L1138
    00001A38 4C08                   SHLL2       R12
    00001A3A              L1139:                            
      simplexC.c  1045            {
      simplexC.c  1046                if(j<ex.initialProblemStatement->nVariables)//Copiar variables de entrada
    00001A3A 52D1                   MOV.L       @(4,R13),R2
    00001A3C 5327                   MOV.L       @(28,R2),R3
    00001A3E 3433                   CMP/GE      R3,R4
    00001A40 8910                   BT          L1140
      simplexC.c  1047                {
      simplexC.c  1048                    modelToSolve->constraints[i][j]=ex.initialProblemStatement->constraints[i][j];
    00001A42 6543                   MOV         R4,R5
    00001A44 50E4                   MOV.L       @(16,R14),R0
    00001A46 4508                   SHLL2       R5
    00001A48 03CE                   MOV.L       @(R0,R12),R3
    00001A4A 335C                   ADD         R5,R3
    00001A4C 50D1                   MOV.L       @(4,R13),R0
    00001A4E 5004                   MOV.L       @(16,R0),R0
    00001A50 00CE                   MOV.L       @(R0,R12),R0
    00001A52 025E                   MOV.L       @(R0,R5),R2
    00001A54 2322                   MOV.L       R2,@R3
      simplexC.c  1049                    modelToSolve->idIntegerVariables[i]=ex.initialProblemStatement->idIntegerVariables[i];
    00001A56 51EC                   MOV.L       @(48,R14),R1
    00001A58 53D1                   MOV.L       @(4,R13),R3
    00001A5A 31CC                   ADD         R12,R1
    00001A5C 503C                   MOV.L       @(48,R3),R0
    00001A5E 02CE                   MOV.L       @(R0,R12),R2
    00001A60 A036                   BRA         L1141
    00001A62 2122                   MOV.L       R2,@R1
    00001A64              L1140:                            
      simplexC.c  1050                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToS
                         +olve->idConstraintToSlopeVar[i])
    00001A64 50D1                   MOV.L       @(4,R13),R0
    00001A66 5006                   MOV.L       @(24,R0),R0
    00001A68 00CE                   MOV.L       @(R0,R12),R0
    00001A6A 8801                   CMP/EQ      #1,R0
    00001A6C 8B0B                   BF          L1142
    00001A6E 50EF                   MOV.L       @(60,R14),R0
    00001A70 02CE                   MOV.L       @(R0,R12),R2
    00001A72 3420                   CMP/EQ      R2,R4
    00001A74 8B07                   BF          L1142
      simplexC.c  1051                {
      simplexC.c  1052                    modelToSolve->constraints[i][j]=1;
    00001A76 6343                   MOV         R4,R3
    00001A78 D14E                   MOV.L       L1211+6,R1 ; H'3F800000
    00001A7A 4308                   SHLL2       R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A7C 50E4                   MOV.L       @(16,R14),R0
    00001A7E 02CE                   MOV.L       @(R0,R12),R2
    00001A80 323C                   ADD         R3,R2
    00001A82 A00F                   BRA         L1190
    00001A84 0009                   NOP
    00001A86              L1142:                            
      simplexC.c  1053                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==model
                         +ToSolve->idConstraintToSlopeVar[i])
    00001A86 50D1                   MOV.L       @(4,R13),R0
    00001A88 5006                   MOV.L       @(24,R0),R0
    00001A8A 00CE                   MOV.L       @(R0,R12),R0
    00001A8C 8802                   CMP/EQ      #2,R0
    00001A8E 8B0B                   BF          L1144
    00001A90 50EF                   MOV.L       @(60,R14),R0
    00001A92 02CE                   MOV.L       @(R0,R12),R2
    00001A94 3420                   CMP/EQ      R2,R4
    00001A96 8B07                   BF          L1144
      simplexC.c  1054                {
      simplexC.c  1055                    modelToSolve->constraints[i][j]=-1;
    00001A98 50E4                   MOV.L       @(16,R14),R0
    00001A9A 6343                   MOV         R4,R3
    00001A9C D146                   MOV.L       L1211+10,R1; H'BF800000
    00001A9E 4308                   SHLL2       R3
    00001AA0 02CE                   MOV.L       @(R0,R12),R2
    00001AA2 323C                   ADD         R3,R2
    00001AA4              L1190:                            
    00001AA4 A014                   BRA         L1141
    00001AA6 2212                   MOV.L       R1,@R2
    00001AA8              L1144:                            
      simplexC.c  1056                }else if((ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || ex.init
                         +ialProblemStatement->inequalitySigns[i]==INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    00001AA8 50D1                   MOV.L       @(4,R13),R0
    00001AAA 5006                   MOV.L       @(24,R0),R0
    00001AAC 00CE                   MOV.L       @(R0,R12),R0
    00001AAE 8802                   CMP/EQ      #2,R0
    00001AB0 8D02                   BT/S        L1147
    00001AB2 6503                   MOV         R0,R5
    00001AB4 2558                   TST         R5,R5
    00001AB6 8B0B                   BF          L1141
    00001AB8              L1147:                            
    00001AB8 E040                   MOV         #64,R0
    00001ABA 00EE                   MOV.L       @(R0,R14),R0
    00001ABC 03CE                   MOV.L       @(R0,R12),R3
    00001ABE 3430                   CMP/EQ      R3,R4
    00001AC0 8B06                   BF          L1141
      simplexC.c  1057                {
      simplexC.c  1058                    modelToSolve->constraints[i][j]=1;
    00001AC2 6243                   MOV         R4,R2
    00001AC4 D13B                   MOV.L       L1211+6,R1 ; H'3F800000
    00001AC6 4208                   SHLL2       R2
    00001AC8 50E4                   MOV.L       @(16,R14),R0
    00001ACA 03CE                   MOV.L       @(R0,R12),R3
    00001ACC 332C                   ADD         R2,R3
    00001ACE 2312                   MOV.L       R1,@R3
    00001AD0              L1141:                            
    00001AD0 7401                   ADD         #1,R4
    00001AD2              L1138:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001AD2 53E7                   MOV.L       @(28,R14),R3
    00001AD4 3433                   CMP/GE      R3,R4
    00001AD6 8BB0                   BF          L1139
      simplexC.c  1059                }
      simplexC.c  1060                //Cualquier otro caso tiene un 0 por calloc
      simplexC.c  1061            }
      simplexC.c  1062            modelToSolve->rightValues[i]=ex.initialProblemStatement->rightValues[i];
    00001AD8 51E5                   MOV.L       @(20,R14),R1
    00001ADA 6493                   MOV         R9,R4
    00001ADC 53D1                   MOV.L       @(4,R13),R3
    00001ADE 4408                   SHLL2       R4
    00001AE0 5035                   MOV.L       @(20,R3),R0
    00001AE2 7901                   ADD         #1,R9
    00001AE4 024E                   MOV.L       @(R0,R4),R2
    00001AE6 314C                   ADD         R4,R1
    00001AE8 2122                   MOV.L       R2,@R1
    00001AEA              L1136:                            
    00001AEA 53EB                   MOV.L       @(44,R14),R3
    00001AEC 3933                   CMP/GE      R3,R9
    00001AEE 8B98                   BF          L1137
      simplexC.c  1063        }
      simplexC.c  1064    
      simplexC.c  1065        //Create new obj funct
      simplexC.c  1066        for(i=0;i<modelToSolve->nVariables;i++)
    00001AF0 A01B                   BRA         L1148
    00001AF2 64B3                   MOV         R11,R4
    00001AF4              L1149:                            
    00001AF4 5CD1                   MOV.L       @(4,R13),R12
    00001AF6 52C7                   MOV.L       @(28,R12),R2
    00001AF8 3423                   CMP/GE      R2,R4
    00001AFA 890A                   BT          L1150
      simplexC.c  1067        {
      simplexC.c  1068            if(i<ex.initialProblemStatement->nVariables)
      simplexC.c  1069            {
      simplexC.c  1070                modelToSolve->funcObjtValues[i]=ex.initialProblemStatement->funcObjtValues[i];
    00001AFC 6543                   MOV         R4,R5
    00001AFE 4508                   SHLL2       R5
    00001B00 E048                   MOV         #72,R0
    00001B02 00EE                   MOV.L       @(R0,R14),R0
    00001B04 6203                   MOV         R0,R2
    00001B06 325C                   ADD         R5,R2
    00001B08 E048                   MOV         #72,R0
    00001B0A 00CE                   MOV.L       @(R0,R12),R0
    00001B0C 035E                   MOV.L       @(R0,R5),R3
    00001B0E A00B                   BRA         L1151
    00001B10 2232                   MOV.L       R3,@R2
    00001B12              L1150:                            
      simplexC.c  1071            }else if(i>=(ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope))
    00001B12 53C8                   MOV.L       @(32,R12),R3
    00001B14 52C7                   MOV.L       @(28,R12),R2
    00001B16 323C                   ADD         R3,R2
    00001B18 3423                   CMP/GE      R2,R4
    00001B1A 8B05                   BF          L1151
      simplexC.c  1072            {
      simplexC.c  1073                modelToSolve->funcObjtValues2Fases[i]=1;
    00001B1C D325                   MOV.L       L1211+6,R3 ; H'3F800000
    00001B1E 6243                   MOV         R4,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B20 4208                   SHLL2       R2
    00001B22 E04C                   MOV         #76,R0
    00001B24 00EE                   MOV.L       @(R0,R14),R0
    00001B26 0236                   MOV.L       R3,@(R0,R2)
    00001B28              L1151:                            
    00001B28 7401                   ADD         #1,R4
    00001B2A              L1148:                            
    00001B2A 52E7                   MOV.L       @(28,R14),R2
    00001B2C 3423                   CMP/GE      R2,R4
    00001B2E 8BE1                   BF          L1149
      simplexC.c  1074            }
      simplexC.c  1075        }
      simplexC.c  1076    
      simplexC.c  1077        //Create aj vectors
      simplexC.c  1078        ex.ajVector=calloc(modelToSolve->nVariables,sizeof(float*));
    00001B30 E504                   MOV         #4,R5
    00001B32 4A0B                   JSR         @R10
    00001B34 54E7                   MOV.L       @(28,R14),R4
    00001B36 1D0C                   MOV.L       R0,@(48,R13)
      simplexC.c  1079        for(i=0;i<modelToSolve->nVariables;i++)
    00001B38 A018                   BRA         L1153
    00001B3A 69B3                   MOV         R11,R9
    00001B3C              L1154:                            
      simplexC.c  1080        {
      simplexC.c  1081            ex.ajVector[i]=calloc(modelToSolve->nConstraints,sizeof(float));
    00001B3C 58DC                   MOV.L       @(48,R13),R8
    00001B3E E504                   MOV         #4,R5
    00001B40 6C93                   MOV         R9,R12
    00001B42 4C08                   SHLL2       R12
    00001B44 38CC                   ADD         R12,R8
    00001B46 4A0B                   JSR         @R10
    00001B48 54EB                   MOV.L       @(44,R14),R4
    00001B4A 2802                   MOV.L       R0,@R8
      simplexC.c  1082            for(j=0;j<modelToSolve->nConstraints;j++)
    00001B4C A00A                   BRA         L1155
    00001B4E 64B3                   MOV         R11,R4
    00001B50              L1156:                            
      simplexC.c  1083            {
      simplexC.c  1084                ex.ajVector[i][j]=modelToSolve->constraints[j][i];
    00001B50 50DC                   MOV.L       @(48,R13),R0
    00001B52 6543                   MOV         R4,R5
    00001B54 02CE                   MOV.L       @(R0,R12),R2
    00001B56 4508                   SHLL2       R5
    00001B58 50E4                   MOV.L       @(16,R14),R0
    00001B5A 7401                   ADD         #1,R4
    00001B5C 005E                   MOV.L       @(R0,R5),R0
    00001B5E 325C                   ADD         R5,R2
    00001B60 03CE                   MOV.L       @(R0,R12),R3
    00001B62 2232                   MOV.L       R3,@R2
    00001B64              L1155:                            
    00001B64 52EB                   MOV.L       @(44,R14),R2
    00001B66 3423                   CMP/GE      R2,R4
    00001B68 8BF2                   BF          L1156
    00001B6A 7901                   ADD         #1,R9
    00001B6C              L1153:                            
    00001B6C 52E7                   MOV.L       @(28,R14),R2
    00001B6E 3923                   CMP/GE      R2,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B70 8BE4                   BF          L1154
      simplexC.c  1085            }
      simplexC.c  1086        }
      simplexC.c  1087        modelToSolve->ajVector=ex.ajVector;
    00001B72 E050                   MOV         #80,R0
    00001B74 51DC                   MOV.L       @(48,R13),R1
    00001B76 0E16                   MOV.L       R1,@(R0,R14)
      simplexC.c  1088        modelToSolve->funcObjtValues[modelToSolve->nVariables]=ex.initialProblemStatement->funcObjtValues[ex.i
                         +nitialProblemStatement->nVariables];
    00001B78 53E7                   MOV.L       @(28,R14),R3
    00001B7A E048                   MOV         #72,R0
    00001B7C 54D1                   MOV.L       @(4,R13),R4
    00001B7E 4308                   SHLL2       R3
    00001B80 00EE                   MOV.L       @(R0,R14),R0
    00001B82 330C                   ADD         R0,R3
    00001B84 5247                   MOV.L       @(28,R4),R2
    00001B86 E048                   MOV         #72,R0
    00001B88 004E                   MOV.L       @(R0,R4),R0
    00001B8A 4208                   SHLL2       R2
    00001B8C 012E                   MOV.L       @(R0,R2),R1
      simplexC.c  1089        modelToSolve->modelType=TYPE_SOLVE;
    00001B8E E202                   MOV         #2,R2
    00001B90 2312                   MOV.L       R1,@R3
      simplexC.c  1090        ex.canonicalStatement=modelToSolve;
      simplexC.c  1091        ex.nVariables=modelToSolve->nVariables;
      simplexC.c  1092        return 0;
    00001B92 E000                   MOV         #0,R0
    00001B94 1E21                   MOV.L       R2,@(4,R14)
    00001B96 1DE2                   MOV.L       R14,@(8,R13)
    00001B98 53E7                   MOV.L       @(28,R14),R3
    00001B9A 1D3B                   MOV.L       R3,@(44,R13)
      simplexC.c  1093    }
    00001B9C 4F26                   LDS.L       @R15+,PR
    00001B9E 68F6                   MOV.L       @R15+,R8
    00001BA0 69F6                   MOV.L       @R15+,R9
    00001BA2 6AF6                   MOV.L       @R15+,R10
    00001BA4 6BF6                   MOV.L       @R15+,R11
    00001BA6 6CF6                   MOV.L       @R15+,R12
    00001BA8 6DF6                   MOV.L       @R15+,R13
    00001BAA 000B                   RTS
    00001BAC 6EF6                   MOV.L       @R15+,R14
    00001BAE              L1211:                            
    00001BAE 0000                   .DATA.W     0
    00001BB0 <00000000>             .DATA.L     _malloc
    00001BB4 3F800000               .DATA.L     H'3F800000
    00001BB8 BF800000               .DATA.L     H'BF800000
      simplexC.c  1094    
      simplexC.c  1095    struct problemStatement* createProblemStatementToDebug2Fases()
    00001BBC              _createProblemStatementToDebug2Fases:
                                                           ; function: createProblemStatementToDebug2Fases
                                                           ; frame size=28
    00001BBC 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1096    {
      simplexC.c  1097        struct problemStatement *res;
      simplexC.c  1098        int nConstraints;
      simplexC.c  1099        int nVariables;
      simplexC.c  1100        nConstraints=3;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BBE E303                   MOV         #3,R3
    00001BC0 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1101        nVariables=2;
    00001BC2 E202                   MOV         #2,R2
    00001BC4 2FC6                   MOV.L       R12,@-R15
    00001BC6 2F86                   MOV.L       R8,@-R15
    00001BC8 4F22                   STS.L       PR,@-R15
    00001BCA 7FF8                   ADD         #-8,R15
    00001BCC 1F31                   MOV.L       R3,@(4,R15)
    00001BCE 2F22                   MOV.L       R2,@R15
      simplexC.c  1102        res= malloc(sizeof(struct problemStatement));
    00001BD0 D3B8                   MOV.L       L1212,R3   ; _malloc
    00001BD2 430B                   JSR         @R3
    00001BD4 E454                   MOV         #84,R4
    00001BD6 6E03                   MOV         R0,R14
      simplexC.c  1103        res->modelType=TYPE_INPUT;
      simplexC.c  1104        res->nConstraints=nConstraints;
      simplexC.c  1105        res->nVariables=nVariables;
      simplexC.c  1106        res->nVariables2fases=1;
      simplexC.c  1107        res ->nVariablesSlope=2;
      simplexC.c  1108        res->problemType=TYPE_LP;
      simplexC.c  1109        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00001BD8 DCB7                   MOV.L       L1212+4,R12; _calloc
    00001BDA E504                   MOV         #4,R5
    00001BDC ED01                   MOV         #1,R13
    00001BDE 1ED1                   MOV.L       R13,@(4,R14)
    00001BE0 52F1                   MOV.L       @(4,R15),R2
    00001BE2 1E2B                   MOV.L       R2,@(44,R14)
    00001BE4 63F2                   MOV.L       @R15,R3
    00001BE6 1E37                   MOV.L       R3,@(28,R14)
    00001BE8 1ED9                   MOV.L       R13,@(36,R14)
    00001BEA E302                   MOV         #2,R3
    00001BEC 1E38                   MOV.L       R3,@(32,R14)
    00001BEE 2ED2                   MOV.L       R13,@R14
    00001BF0 4C0B                   JSR         @R12
    00001BF2 E403                   MOV         #3,R4
    00001BF4 E148                   MOV         #72,R1
    00001BF6 31EC                   ADD         R14,R1
    00001BF8 2102                   MOV.L       R0,@R1
      simplexC.c  1110        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00001BFA E504                   MOV         #4,R5
    00001BFC 4C0B                   JSR         @R12
    00001BFE E402                   MOV         #2,R4
    00001C00 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1111        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    00001C02 E504                   MOV         #4,R5
    00001C04 4C0B                   JSR         @R12
    00001C06 E402                   MOV         #2,R4
    00001C08 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1112        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00001C0A E504                   MOV         #4,R5
    00001C0C 4C0B                   JSR         @R12
    00001C0E E402                   MOV         #2,R4
    00001C10 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1113        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    00001C12 E504                   MOV         #4,R5
    00001C14 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C16 E403                   MOV         #3,R4
    00001C18 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1114        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
    00001C1A 6303                   MOV         R0,R3
    00001C1C 23D2                   MOV.L       R13,@R3
      simplexC.c  1115        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1116        res->inequalitySigns[2]=INE_EQUAL;
      simplexC.c  1117        res->funcObjectivePurpose=FUNC_MAXIMIZE;
    00001C1E E044                   MOV         #68,R0
    00001C20 52E6                   MOV.L       @(24,R14),R2
      simplexC.c  1118        res->funcObjtValues[0]=3;
      simplexC.c  1119        res->funcObjtValues[1]=5;
      simplexC.c  1120        res->funcObjtValues[2]=0;
      simplexC.c  1121        res->constraints=calloc(nConstraints,sizeof(float));
    00001C22 E504                   MOV         #4,R5
    00001C24 12D1                   MOV.L       R13,@(4,R2)
    00001C26 E200                   MOV         #0,R2
    00001C28 53E6                   MOV.L       @(24,R14),R3
    00001C2A 1322                   MOV.L       R2,@(8,R3)
    00001C2C 0ED6                   MOV.L       R13,@(R0,R14)
    00001C2E E048                   MOV         #72,R0
    00001C30 D2A2                   MOV.L       L1212+8,R2 ; H'40400000
    00001C32 03EE                   MOV.L       @(R0,R14),R3
    00001C34 2322                   MOV.L       R2,@R3
    00001C36 03EE                   MOV.L       @(R0,R14),R3
    00001C38 D2A1                   MOV.L       L1212+12,R2; H'40A00000
    00001C3A 1321                   MOV.L       R2,@(4,R3)
    00001C3C 03EE                   MOV.L       @(R0,R14),R3
    00001C3E E200                   MOV         #0,R2
    00001C40 1322                   MOV.L       R2,@(8,R3)
    00001C42 4C0B                   JSR         @R12
    00001C44 E403                   MOV         #3,R4
      simplexC.c  1122        res->constraints[0]=calloc(nVariables,sizeof(float));
    00001C46 6803                   MOV         R0,R8
    00001C48 1E04                   MOV.L       R0,@(16,R14)
    00001C4A E504                   MOV         #4,R5
    00001C4C 4C0B                   JSR         @R12
    00001C4E E402                   MOV         #2,R4
    00001C50 2802                   MOV.L       R0,@R8
      simplexC.c  1123        res->constraints[1]=calloc(nVariables,sizeof(float));
    00001C52 E504                   MOV         #4,R5
    00001C54 58E4                   MOV.L       @(16,R14),R8
    00001C56 7804                   ADD         #4,R8
    00001C58 4C0B                   JSR         @R12
    00001C5A E402                   MOV         #2,R4
    00001C5C 2802                   MOV.L       R0,@R8
      simplexC.c  1124        res->constraints[2]=calloc(nVariables,sizeof(float));
    00001C5E E504                   MOV         #4,R5
    00001C60 58E4                   MOV.L       @(16,R14),R8
    00001C62 7808                   ADD         #8,R8
    00001C64 4C0B                   JSR         @R12
    00001C66 E402                   MOV         #2,R4
    00001C68 2802                   MOV.L       R0,@R8
      simplexC.c  1125        res->constraints[0][0]=1;
      simplexC.c  1126        res->constraints[0][1]=0;
      simplexC.c  1127        res->constraints[1][0]=0;
      simplexC.c  1128        res->constraints[1][1]=2;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1129        res->constraints[2][0]=3;
      simplexC.c  1130        res->constraints[2][1]=2;
      simplexC.c  1131        res->rightValues=calloc(nConstraints,sizeof(float));
    00001C6A E504                   MOV         #4,R5
    00001C6C D195                   MOV.L       L1212+16,R1; H'3F800000
    00001C6E 53E4                   MOV.L       @(16,R14),R3
    00001C70 6232                   MOV.L       @R3,R2
    00001C72 2212                   MOV.L       R1,@R2
    00001C74 53E4                   MOV.L       @(16,R14),R3
    00001C76 E100                   MOV         #0,R1
    00001C78 6232                   MOV.L       @R3,R2
    00001C7A 1211                   MOV.L       R1,@(4,R2)
    00001C7C 53E4                   MOV.L       @(16,R14),R3
    00001C7E 5231                   MOV.L       @(4,R3),R2
    00001C80 2212                   MOV.L       R1,@R2
    00001C82 53E4                   MOV.L       @(16,R14),R3
    00001C84 D190                   MOV.L       L1212+20,R1; H'40000000
    00001C86 5231                   MOV.L       @(4,R3),R2
    00001C88 1211                   MOV.L       R1,@(4,R2)
    00001C8A 53E4                   MOV.L       @(16,R14),R3
    00001C8C D18B                   MOV.L       L1212+8,R1 ; H'40400000
    00001C8E 5232                   MOV.L       @(8,R3),R2
    00001C90 2212                   MOV.L       R1,@R2
    00001C92 4118                   SHLL8       R1
    00001C94 53E4                   MOV.L       @(16,R14),R3
    00001C96 5232                   MOV.L       @(8,R3),R2
    00001C98 1211                   MOV.L       R1,@(4,R2)
    00001C9A 4C0B                   JSR         @R12
    00001C9C E403                   MOV         #3,R4
      simplexC.c  1132        res->rightValues[0]=4;
    00001C9E 6303                   MOV         R0,R3
    00001CA0 D28A                   MOV.L       L1212+24,R2; H'40800000
    00001CA2 1E05                   MOV.L       R0,@(20,R14)
    00001CA4 2322                   MOV.L       R2,@R3
      simplexC.c  1133        res->rightValues[1]=12;
      simplexC.c  1134        res->rightValues[2]=18;
      simplexC.c  1135        res->nVariables2fases=1;
      simplexC.c  1136        res->is2fasesNeeded=1;
      simplexC.c  1137    
      simplexC.c  1138        return res;
    00001CA6 60E3                   MOV         R14,R0
    00001CA8 53E5                   MOV.L       @(20,R14),R3
    00001CAA D289                   MOV.L       L1212+28,R2; H'41400000
    00001CAC 1321                   MOV.L       R2,@(4,R3)
    00001CAE 53E5                   MOV.L       @(20,R14),R3
    00001CB0 D288                   MOV.L       L1212+32,R2; H'41900000
    00001CB2 1322                   MOV.L       R2,@(8,R3)
    00001CB4 1ED9                   MOV.L       R13,@(36,R14)
    00001CB6 1ED2                   MOV.L       R13,@(8,R14)
      simplexC.c  1139    }
    00001CB8 7F08                   ADD         #8,R15
    00001CBA 4F26                   LDS.L       @R15+,PR
    00001CBC 68F6                   MOV.L       @R15+,R8
    00001CBE 6CF6                   MOV.L       @R15+,R12
    00001CC0 6DF6                   MOV.L       @R15+,R13
    00001CC2 000B                   RTS
    00001CC4 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1140    
      simplexC.c  1141    struct problemStatement* createProblemStatementToDebug()
    00001CC6              _createProblemStatementToDebug:  ; function: createProblemStatementToDebug
                                                           ; frame size=32
      simplexC.c  1142    {
      simplexC.c  1143        struct problemStatement *res;
      simplexC.c  1144        int nConstraints;
      simplexC.c  1145        int nVariables;
      simplexC.c  1146        nConstraints=3;
    00001CC6 E303                   MOV         #3,R3
    00001CC8 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1147        nVariables=2;
    00001CCA E202                   MOV         #2,R2
    00001CCC 2FD6                   MOV.L       R13,@-R15
    00001CCE 2FC6                   MOV.L       R12,@-R15
    00001CD0 2FB6                   MOV.L       R11,@-R15
    00001CD2 2F86                   MOV.L       R8,@-R15
    00001CD4 4F22                   STS.L       PR,@-R15
    00001CD6 7FF8                   ADD         #-8,R15
    00001CD8 1F31                   MOV.L       R3,@(4,R15)
    00001CDA 2F22                   MOV.L       R2,@R15
      simplexC.c  1148        res= malloc(sizeof(struct problemStatement));
    00001CDC D375                   MOV.L       L1212,R3   ; _malloc
    00001CDE 430B                   JSR         @R3
    00001CE0 E454                   MOV         #84,R4
    00001CE2 6E03                   MOV         R0,R14
      simplexC.c  1149        res->modelType=TYPE_INPUT;
      simplexC.c  1150        res->nConstraints=nConstraints;
      simplexC.c  1151        res->nVariables=nVariables;
      simplexC.c  1152        res->nVariables2fases=0;
      simplexC.c  1153        res ->nVariablesSlope=3;
      simplexC.c  1154        res->problemType=TYPE_LP;
      simplexC.c  1155        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00001CE4 DC74                   MOV.L       L1212+4,R12; _calloc
    00001CE6 E504                   MOV         #4,R5
    00001CE8 ED01                   MOV         #1,R13
    00001CEA EB00                   MOV         #0,R11
    00001CEC 1ED1                   MOV.L       R13,@(4,R14)
    00001CEE 52F1                   MOV.L       @(4,R15),R2
    00001CF0 1E2B                   MOV.L       R2,@(44,R14)
    00001CF2 63F2                   MOV.L       @R15,R3
    00001CF4 1E37                   MOV.L       R3,@(28,R14)
    00001CF6 E303                   MOV         #3,R3
    00001CF8 1EB9                   MOV.L       R11,@(36,R14)
    00001CFA 1E38                   MOV.L       R3,@(32,R14)
    00001CFC 2ED2                   MOV.L       R13,@R14
    00001CFE 4C0B                   JSR         @R12
    00001D00 6433                   MOV         R3,R4
    00001D02 E148                   MOV         #72,R1
    00001D04 31EC                   ADD         R14,R1
      simplexC.c  1156        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00001D06 E504                   MOV         #4,R5
    00001D08 2102                   MOV.L       R0,@R1
    00001D0A 4C0B                   JSR         @R12
    00001D0C E402                   MOV         #2,R4
      simplexC.c  1157        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    00001D0E E504                   MOV         #4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D10 1E0C                   MOV.L       R0,@(48,R14)
    00001D12 4C0B                   JSR         @R12
    00001D14 E402                   MOV         #2,R4
      simplexC.c  1158        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00001D16 E504                   MOV         #4,R5
    00001D18 1E0D                   MOV.L       R0,@(52,R14)
    00001D1A 4C0B                   JSR         @R12
    00001D1C E402                   MOV         #2,R4
      simplexC.c  1159        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    00001D1E E504                   MOV         #4,R5
    00001D20 1E0E                   MOV.L       R0,@(56,R14)
    00001D22 4C0B                   JSR         @R12
    00001D24 E403                   MOV         #3,R4
      simplexC.c  1160        res->funcObjectivePurpose=FUNC_MINIMIZE;
      simplexC.c  1161        res->funcObjtValues[0]=-4;
      simplexC.c  1162        res->funcObjtValues[1]=-6;
      simplexC.c  1163        res->funcObjtValues[2]=0;
      simplexC.c  1164        res->constraints=calloc(nConstraints,sizeof(float));
    00001D26 E504                   MOV         #4,R5
    00001D28 1E06                   MOV.L       R0,@(24,R14)
    00001D2A E044                   MOV         #68,R0
    00001D2C D26A                   MOV.L       L1212+36,R2; H'C0800000
    00001D2E 0EB6                   MOV.L       R11,@(R0,R14)
    00001D30 E048                   MOV         #72,R0
    00001D32 03EE                   MOV.L       @(R0,R14),R3
    00001D34 2322                   MOV.L       R2,@R3
    00001D36 03EE                   MOV.L       @(R0,R14),R3
    00001D38 D268                   MOV.L       L1212+40,R2; H'C0C00000
    00001D3A 1321                   MOV.L       R2,@(4,R3)
    00001D3C 03EE                   MOV.L       @(R0,R14),R3
    00001D3E 62B3                   MOV         R11,R2
    00001D40 13B2                   MOV.L       R11,@(8,R3)
    00001D42 4C0B                   JSR         @R12
    00001D44 E403                   MOV         #3,R4
      simplexC.c  1165        res->constraints[0]=calloc(nVariables,sizeof(float));
    00001D46 6803                   MOV         R0,R8
    00001D48 1E04                   MOV.L       R0,@(16,R14)
    00001D4A E504                   MOV         #4,R5
    00001D4C 4C0B                   JSR         @R12
    00001D4E E402                   MOV         #2,R4
    00001D50 2802                   MOV.L       R0,@R8
      simplexC.c  1166        res->constraints[1]=calloc(nVariables,sizeof(float));
    00001D52 E504                   MOV         #4,R5
    00001D54 58E4                   MOV.L       @(16,R14),R8
    00001D56 7804                   ADD         #4,R8
    00001D58 4C0B                   JSR         @R12
    00001D5A E402                   MOV         #2,R4
    00001D5C 2802                   MOV.L       R0,@R8
      simplexC.c  1167        res->constraints[2]=calloc(nVariables,sizeof(float));
    00001D5E E504                   MOV         #4,R5
    00001D60 58E4                   MOV.L       @(16,R14),R8
    00001D62 7808                   ADD         #8,R8
    00001D64 4C0B                   JSR         @R12
    00001D66 E402                   MOV         #2,R4
    00001D68 2802                   MOV.L       R0,@R8
      simplexC.c  1168        res->constraints[0][0]=-1;
      simplexC.c  1169        res->constraints[0][1]=1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1170        res->constraints[1][0]=1;
      simplexC.c  1171        res->constraints[1][1]=1;
      simplexC.c  1172        res->constraints[2][0]=2;
      simplexC.c  1173        res->constraints[2][1]=5;
      simplexC.c  1174        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1175        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1176        res->inequalitySigns[2]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1177        res->rightValues=calloc(nConstraints,sizeof(float));
    00001D6A E504                   MOV         #4,R5
    00001D6C D15C                   MOV.L       L1212+44,R1; H'BF800000
    00001D6E 53E4                   MOV.L       @(16,R14),R3
    00001D70 6232                   MOV.L       @R3,R2
    00001D72 2212                   MOV.L       R1,@R2
    00001D74 53E4                   MOV.L       @(16,R14),R3
    00001D76 6232                   MOV.L       @R3,R2
    00001D78 D152                   MOV.L       L1212+16,R1; H'3F800000
    00001D7A 1211                   MOV.L       R1,@(4,R2)
    00001D7C 53E4                   MOV.L       @(16,R14),R3
    00001D7E 5231                   MOV.L       @(4,R3),R2
    00001D80 2212                   MOV.L       R1,@R2
    00001D82 53E4                   MOV.L       @(16,R14),R3
    00001D84 5231                   MOV.L       @(4,R3),R2
    00001D86 1211                   MOV.L       R1,@(4,R2)
    00001D88 53E4                   MOV.L       @(16,R14),R3
    00001D8A 5232                   MOV.L       @(8,R3),R2
    00001D8C D14E                   MOV.L       L1212+20,R1; H'40000000
    00001D8E 2212                   MOV.L       R1,@R2
    00001D90 53E4                   MOV.L       @(16,R14),R3
    00001D92 5232                   MOV.L       @(8,R3),R2
    00001D94 D14A                   MOV.L       L1212+12,R1; H'40A00000
    00001D96 1211                   MOV.L       R1,@(4,R2)
    00001D98 53E6                   MOV.L       @(24,R14),R3
    00001D9A 23D2                   MOV.L       R13,@R3
    00001D9C 52E6                   MOV.L       @(24,R14),R2
    00001D9E 12D1                   MOV.L       R13,@(4,R2)
    00001DA0 53E6                   MOV.L       @(24,R14),R3
    00001DA2 13D2                   MOV.L       R13,@(8,R3)
    00001DA4 4C0B                   JSR         @R12
    00001DA6 E403                   MOV         #3,R4
    00001DA8 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1178        res->rightValues[0]=11;
    00001DAA 6203                   MOV         R0,R2
    00001DAC D34D                   MOV.L       L1212+48,R3; H'41300000
      simplexC.c  1179        res->rightValues[1]=27;
      simplexC.c  1180        res->rightValues[2]=90;
      simplexC.c  1181        res->nVariables2fases=0;
      simplexC.c  1182        res->is2fasesNeeded=0;
      simplexC.c  1183    
      simplexC.c  1184        return res;
    00001DAE 60E3                   MOV         R14,R0
    00001DB0 2232                   MOV.L       R3,@R2
    00001DB2 52E5                   MOV.L       @(20,R14),R2
    00001DB4 D34C                   MOV.L       L1212+52,R3; H'41D80000
    00001DB6 1231                   MOV.L       R3,@(4,R2)
    00001DB8 52E5                   MOV.L       @(20,R14),R2
    00001DBA D34C                   MOV.L       L1212+56,R3; H'42B40000
    00001DBC 1232                   MOV.L       R3,@(8,R2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DBE 1EB9                   MOV.L       R11,@(36,R14)
    00001DC0 1EB2                   MOV.L       R11,@(8,R14)
      simplexC.c  1185    }
    00001DC2 7F08                   ADD         #8,R15
    00001DC4 4F26                   LDS.L       @R15+,PR
    00001DC6 68F6                   MOV.L       @R15+,R8
    00001DC8 6BF6                   MOV.L       @R15+,R11
    00001DCA 6CF6                   MOV.L       @R15+,R12
    00001DCC 6DF6                   MOV.L       @R15+,R13
    00001DCE 000B                   RTS
    00001DD0 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1186    
      simplexC.c  1187    struct iteration *convertToSecondPhase(int nodeId, int firsItId)
    00001DD2              _convertToSecondPhase:           ; function: convertToSecondPhase
                                                           ; frame size=32
    00001DD2 2FE6                   MOV.L       R14,@-R15
    00001DD4 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1188    {
      simplexC.c  1189        int i,j;
      simplexC.c  1190        struct iteration *it,*originalIt;
      simplexC.c  1191        originalIt=ex.nodes.its[firsItId];
    00001DD6 6D53                   MOV         R5,R13
      simplexC.c  1192        it = malloc(sizeof(struct iteration));
    00001DD8 D336                   MOV.L       L1212,R3   ; _malloc
    00001DDA 4D08                   SHLL2       R13
    00001DDC 2FC6                   MOV.L       R12,@-R15
    00001DDE 2FA6                   MOV.L       R10,@-R15
    00001DE0 2F96                   MOV.L       R9,@-R15
    00001DE2 2F86                   MOV.L       R8,@-R15
    00001DE4 4F22                   STS.L       PR,@-R15
    00001DE6 D942                   MOV.L       L1212+60,R9; _ex
    00001DE8 5095                   MOV.L       @(20,R9),R0
    00001DEA 0DDE                   MOV.L       @(R0,R13),R13
    00001DEC 430B                   JSR         @R3
    00001DEE E444                   MOV         #68,R4
      simplexC.c  1193        it->BinvSize=originalIt->BinvSize;
    00001DF0 52D8                   MOV.L       @(32,R13),R2
      simplexC.c  1194        it->Binv=calloc(it->BinvSize,sizeof(float));
    00001DF2 E504                   MOV         #4,R5
    00001DF4 D830                   MOV.L       L1212+4,R8 ; _calloc
    00001DF6 6E03                   MOV         R0,R14
    00001DF8 1E28                   MOV.L       R2,@(32,R14)
    00001DFA 480B                   JSR         @R8
    00001DFC 6423                   MOV         R2,R4
      simplexC.c  1195        for(i=0;i<it->BinvSize;i++)
    00001DFE EA00                   MOV         #0,R10
    00001E00 1E07                   MOV.L       R0,@(28,R14)
    00001E02 A01C                   BRA         L1160
    00001E04 6CA3                   MOV         R10,R12
    00001E06              L1161:                            
      simplexC.c  1196        {
      simplexC.c  1197            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    00001E06 62C3                   MOV         R12,R2
    00001E08 50E7                   MOV.L       @(28,R14),R0
    00001E0A E504                   MOV         #4,R5
    00001E0C 4208                   SHLL2       R2
    00001E0E 302C                   ADD         R2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E10 2F06                   MOV.L       R0,@-R15
    00001E12 480B                   JSR         @R8
    00001E14 54E8                   MOV.L       @(32,R14),R4
      simplexC.c  1198            for(j=0;j<it->BinvSize;j++)
    00001E16 64A3                   MOV         R10,R4
    00001E18 63F6                   MOV.L       @R15+,R3
    00001E1A 61C3                   MOV         R12,R1
    00001E1C 2302                   MOV.L       R0,@R3
    00001E1E A00A                   BRA         L1162
    00001E20 4108                   SHLL2       R1
    00001E22              L1163:                            
      simplexC.c  1199            {
      simplexC.c  1200                it->Binv[i][j]=originalIt->Binv[i][j];
    00001E22 6543                   MOV         R4,R5
    00001E24 50E7                   MOV.L       @(28,R14),R0
    00001E26 4508                   SHLL2       R5
    00001E28 031E                   MOV.L       @(R0,R1),R3
    00001E2A 7401                   ADD         #1,R4
    00001E2C 50D7                   MOV.L       @(28,R13),R0
    00001E2E 335C                   ADD         R5,R3
    00001E30 001E                   MOV.L       @(R0,R1),R0
    00001E32 025E                   MOV.L       @(R0,R5),R2
    00001E34 2322                   MOV.L       R2,@R3
    00001E36              L1162:                            
    00001E36 53E8                   MOV.L       @(32,R14),R3
    00001E38 3433                   CMP/GE      R3,R4
    00001E3A 8BF2                   BF          L1163
    00001E3C 7C01                   ADD         #1,R12
    00001E3E              L1160:                            
    00001E3E 53E8                   MOV.L       @(32,R14),R3
    00001E40 3C33                   CMP/GE      R3,R12
    00001E42 8BE0                   BF          L1161
      simplexC.c  1201            }
      simplexC.c  1202            
      simplexC.c  1203        }
      simplexC.c  1204        it->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    00001E44 E504                   MOV         #4,R5
    00001E46 480B                   JSR         @R8
    00001E48 549B                   MOV.L       @(44,R9),R4
      simplexC.c  1205        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    00001E4A E504                   MOV         #4,R5
    00001E4C 1E01                   MOV.L       R0,@(4,R14)
    00001E4E 480B                   JSR         @R8
    00001E50 54E8                   MOV.L       @(32,R14),R4
    00001E52 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c  1206        for(i=0;i<it->BinvSize;i++)
    00001E54 A008                   BRA         L1164
    00001E56 64A3                   MOV         R10,R4
    00001E58              L1165:                            
      simplexC.c  1207        {
      simplexC.c  1208            it->idByRowOfBasicVarsInBInv[i]=originalIt->idByRowOfBasicVarsInBInv[i];
    00001E58 53E2                   MOV.L       @(8,R14),R3
    00001E5A 6543                   MOV         R4,R5
    00001E5C 50D2                   MOV.L       @(8,R13),R0
    00001E5E 4508                   SHLL2       R5
    00001E60 025E                   MOV.L       @(R0,R5),R2
    00001E62 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E64 335C                   ADD         R5,R3
    00001E66 2322                   MOV.L       R2,@R3
    00001E68              L1164:                            
    00001E68 52E8                   MOV.L       @(32,R14),R2
    00001E6A 3423                   CMP/GE      R2,R4
    00001E6C 8BF4                   BF          L1165
      simplexC.c  1209        }
      simplexC.c  1210        for(i=0;i<ex.nVariables;i++)
    00001E6E A008                   BRA         L1166
    00001E70 64A3                   MOV         R10,R4
    00001E72              L1167:                            
      simplexC.c  1211        {
      simplexC.c  1212            it->idBasicVariables[i]=originalIt->idBasicVariables[i];
    00001E72 6543                   MOV         R4,R5
    00001E74 52E1                   MOV.L       @(4,R14),R2
    00001E76 4508                   SHLL2       R5
    00001E78 50D1                   MOV.L       @(4,R13),R0
    00001E7A 7401                   ADD         #1,R4
    00001E7C 035E                   MOV.L       @(R0,R5),R3
    00001E7E 325C                   ADD         R5,R2
    00001E80 2232                   MOV.L       R3,@R2
    00001E82              L1166:                            
    00001E82 539B                   MOV.L       @(44,R9),R3
    00001E84 3433                   CMP/GE      R3,R4
    00001E86 8BF4                   BF          L1167
      simplexC.c  1213        }
      simplexC.c  1214        return it;
      simplexC.c  1215    }
    00001E88 4F26                   LDS.L       @R15+,PR
    00001E8A 60E3                   MOV         R14,R0
    00001E8C 68F6                   MOV.L       @R15+,R8
    00001E8E 69F6                   MOV.L       @R15+,R9
    00001E90 6AF6                   MOV.L       @R15+,R10
    00001E92 6CF6                   MOV.L       @R15+,R12
    00001E94 6DF6                   MOV.L       @R15+,R13
    00001E96 000B                   RTS
    00001E98 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1216    
      simplexC.c  1217    int solveSimplexLPOneFase(int nodeId, int firsItId)
    00001E9A              _solveSimplexLPOneFase:          ; function: solveSimplexLPOneFase
                                                           ; frame size=20
      simplexC.c  1218    {
      simplexC.c  1219        int itId, nId;
      simplexC.c  1220        float zSol;
      simplexC.c  1221        itId=firsItId;
      simplexC.c  1222        ex.nodes.its[itId]->numIteration=itId;
    00001E9A 6353                   MOV         R5,R3
    00001E9C 2FE6                   MOV.L       R14,@-R15
    00001E9E 4308                   SHLL2       R3
    00001EA0 2FD6                   MOV.L       R13,@-R15
    00001EA2 6D53                   MOV         R5,R13
    00001EA4 DE12                   MOV.L       L1212+60,R14; _ex
    00001EA6 2FC6                   MOV.L       R12,@-R15
    00001EA8 2FB6                   MOV.L       R11,@-R15
    00001EAA 4F22                   STS.L       PR,@-R15
    00001EAC 50E5                   MOV.L       @(20,R14),R0
    00001EAE 023E                   MOV.L       @(R0,R3),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1223        while(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1)
    00001EB0 A035                   BRA         L1169
    00001EB2 2252                   MOV.L       R5,@R2
    00001EB4              L1212:                            
    00001EB4 <00000000>             .DATA.L     _malloc
    00001EB8 <00000000>             .DATA.L     _calloc
    00001EBC 40400000               .DATA.L     H'40400000
    00001EC0 40A00000               .DATA.L     H'40A00000
    00001EC4 3F800000               .DATA.L     H'3F800000
    00001EC8 40000000               .DATA.L     H'40000000
    00001ECC 40800000               .DATA.L     H'40800000
    00001ED0 41400000               .DATA.L     H'41400000
    00001ED4 41900000               .DATA.L     H'41900000
    00001ED8 C0800000               .DATA.L     H'C0800000
    00001EDC C0C00000               .DATA.L     H'C0C00000
    00001EE0 BF800000               .DATA.L     H'BF800000
    00001EE4 41300000               .DATA.L     H'41300000
    00001EE8 41D80000               .DATA.L     H'41D80000
    00001EEC 42B40000               .DATA.L     H'42B40000
    00001EF0 <00000000>             .DATA.L     _ex
    00001EF4              L1170:                            
      simplexC.c  1224        {
      simplexC.c  1225            calculateIteration(ex.nodes.its[itId]);
    00001EF4 50E5                   MOV.L       @(20,R14),R0
    00001EF6 6CD3                   MOV         R13,R12
    00001EF8 D23D                   MOV.L       L1213+2,R2 ; _calculateIteration
    00001EFA 4C08                   SHLL2       R12
    00001EFC 420B                   JSR         @R2
    00001EFE 04CE                   MOV.L       @(R0,R12),R4
      simplexC.c  1226            if(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1){
    00001F00 50E5                   MOV.L       @(20,R14),R0
    00001F02 04CE                   MOV.L       @(R0,R12),R4
    00001F04 5044                   MOV.L       @(16,R4),R0
    00001F06 88FF                   CMP/EQ      #-1,R0
    00001F08 8909                   BT          L1169
    00001F0A 5045                   MOV.L       @(20,R4),R0
    00001F0C 88FF                   CMP/EQ      #-1,R0
    00001F0E 8906                   BT          L1169
      simplexC.c  1227                ex.nodes.its[itId+1]=createNewIteration(ex.nodes.its[itId]);
    00001F10 5BE5                   MOV.L       @(20,R14),R11
    00001F12 3BCC                   ADD         R12,R11
    00001F14 D337                   MOV.L       L1213+6,R3 ; _createNewIteration
    00001F16 430B                   JSR         @R3
    00001F18 64B2                   MOV.L       @R11,R4
      simplexC.c  1228                zSol= ex.nodes.its[itId]->zSol;
      simplexC.c  1229                    itId++;
    00001F1A 7D01                   ADD         #1,R13
    00001F1C 1B01                   MOV.L       R0,@(4,R11)
    00001F1E              L1169:                            
    00001F1E 64D3                   MOV         R13,R4
    00001F20 50E5                   MOV.L       @(20,R14),R0
    00001F22 4408                   SHLL2       R4
    00001F24 044E                   MOV.L       @(R0,R4),R4
    00001F26 5044                   MOV.L       @(16,R4),R0
    00001F28 88FF                   CMP/EQ      #-1,R0
    00001F2A 8902                   BT          L1172
    00001F2C 5045                   MOV.L       @(20,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F2E 88FF                   CMP/EQ      #-1,R0
    00001F30 8BE0                   BF          L1170
    00001F32              L1172:                            
      simplexC.c  1230            }
      simplexC.c  1231                
      simplexC.c  1232        }
      simplexC.c  1233        return itId;
    00001F32 60D3                   MOV         R13,R0
      simplexC.c  1234    }
    00001F34 4F26                   LDS.L       @R15+,PR
    00001F36 6BF6                   MOV.L       @R15+,R11
    00001F38 6CF6                   MOV.L       @R15+,R12
    00001F3A 6DF6                   MOV.L       @R15+,R13
    00001F3C 000B                   RTS
    00001F3E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1235    
      simplexC.c  1236    int solveSimplexLP(int nodeId)
    00001F40              _solveSimplexLP:                 ; function: solveSimplexLP
                                                           ; frame size=148
    00001F40 2FE6                   MOV.L       R14,@-R15
    00001F42 2FD6                   MOV.L       R13,@-R15
    00001F44 2FC6                   MOV.L       R12,@-R15
    00001F46 6D43                   MOV         R4,R13
      simplexC.c  1237    {
      simplexC.c  1238        int itId,lastItId;
      simplexC.c  1239        char strSol[128];
      simplexC.c  1240        itId=0;
      simplexC.c  1241        ex.nodes.id=nodeId;
    00001F48 DE2B                   MOV.L       L1213+10,R14; _ex
    00001F4A 2F86                   MOV.L       R8,@-R15
    00001F4C 4F22                   STS.L       PR,@-R15
    00001F4E 7F80                   ADD         #-128,R15
      simplexC.c  1242        ex.nodes.its=malloc(10*sizeof(struct iteration*));
    00001F50 D32A                   MOV.L       L1213+14,R3; _malloc
    00001F52 1E43                   MOV.L       R4,@(12,R14)
    00001F54 430B                   JSR         @R3
    00001F56 E428                   MOV         #40,R4
    00001F58 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1243        ex.nodes.its[0]=modelToIteration(ex.canonicalStatement);
    00001F5A 6803                   MOV         R0,R8
    00001F5C D328                   MOV.L       L1213+18,R3; _modelToIteration
    00001F5E 430B                   JSR         @R3
    00001F60 54E2                   MOV.L       @(8,R14),R4
    00001F62 2802                   MOV.L       R0,@R8
      simplexC.c  1244        if(ex.canonicalStatement->is2fasesActive)
    00001F64 53E2                   MOV.L       @(8,R14),R3
    00001F66 5233                   MOV.L       @(12,R3),R2
    00001F68 2228                   TST         R2,R2
    00001F6A 8917                   BT          L1174
      simplexC.c  1245        {
      simplexC.c  1246            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00001F6C E500                   MOV         #0,R5
    00001F6E BF94                   BSR         _solveSimplexLPOneFase
    00001F70 64D3                   MOV         R13,R4
    00001F72 6C03                   MOV         R0,R12
      simplexC.c  1247            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;//CAMBIAR
    00001F74 52E2                   MOV.L       @(8,R14),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F76 E044                   MOV         #68,R0
    00001F78 032E                   MOV.L       @(R0,R2),R3
      simplexC.c  1248            //NO SE SI HACE FALTA MAS
      simplexC.c  1249            ex.canonicalStatement->is2fasesActive=0;
      simplexC.c  1250            ex.nodes.its[lastItId+1]=convertToSecondPhase(nodeId, lastItId);
    00001F7A 65C3                   MOV         R12,R5
    00001F7C 1E3A                   MOV.L       R3,@(40,R14)
    00001F7E E300                   MOV         #0,R3
    00001F80 52E2                   MOV.L       @(8,R14),R2
    00001F82 1233                   MOV.L       R3,@(12,R2)
    00001F84 53E5                   MOV.L       @(20,R14),R3
    00001F86 62C3                   MOV         R12,R2
    00001F88 4208                   SHLL2       R2
    00001F8A 323C                   ADD         R3,R2
    00001F8C 6823                   MOV         R2,R8
    00001F8E 7804                   ADD         #4,R8
    00001F90 BF1F                   BSR         _convertToSecondPhase
    00001F92 64D3                   MOV         R13,R4
    00001F94 2802                   MOV.L       R0,@R8
      simplexC.c  1251            lastItId=solveSimplexLPOneFase(nodeId, lastItId+1);
    00001F96 65C3                   MOV         R12,R5
    00001F98 A001                   BRA         L1191
    00001F9A 7501                   ADD         #1,R5
    00001F9C              L1174:                            
      simplexC.c  1252        }else
      simplexC.c  1253        {
      simplexC.c  1254            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00001F9C E500                   MOV         #0,R5
    00001F9E              L1191:                            
    00001F9E BF7C                   BSR         _solveSimplexLPOneFase
    00001FA0 64D3                   MOV         R13,R4
    00001FA2 6403                   MOV         R0,R4
      simplexC.c  1255        }
      simplexC.c  1256        ex.nodes.nIterations=lastItId;
    00001FA4 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1257    
      simplexC.c  1258        return 0;
    00001FA6 E000                   MOV         #0,R0
      simplexC.c  1259    }
    00001FA8 9121                   MOV.W       L1213,R1   ; H'0080
    00001FAA 3F1C                   ADD         R1,R15
    00001FAC 4F26                   LDS.L       @R15+,PR
    00001FAE 68F6                   MOV.L       @R15+,R8
    00001FB0 6CF6                   MOV.L       @R15+,R12
    00001FB2 6DF6                   MOV.L       @R15+,R13
    00001FB4 000B                   RTS
    00001FB6 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1260    
      simplexC.c  1261    
      simplexC.c  1262    int initializeExecution()
    00001FB8              _initializeExecution:            ; function: initializeExecution
                                                           ; frame size=0
      simplexC.c  1263    {
      simplexC.c  1264        ex.bVectorValues=ex.canonicalStatement->rightValues;
    00001FB8 D40F                   MOV.L       L1213+10,R4; _ex
    00001FBA 5342                   MOV.L       @(8,R4),R3
    00001FBC 5235                   MOV.L       @(20,R3),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FBE 1426                   MOV.L       R2,@(24,R4)
    00001FC0 5542                   MOV.L       @(8,R4),R5
    00001FC2 6353                   MOV         R5,R3
    00001FC4 5232                   MOV.L       @(8,R3),R2
    00001FC6 2228                   TST         R2,R2
    00001FC8 8904                   BT          L1177
      simplexC.c  1265        if(ex.canonicalStatement->is2fasesNeeded)
      simplexC.c  1266        {
      simplexC.c  1267            ex.canonicalStatement->is2fasesActive=1;
    00001FCA E201                   MOV         #1,R2
    00001FCC 1523                   MOV.L       R2,@(12,R5)
      simplexC.c  1268            ex.currentFuncObjectivePurpose=FUNC_MINIMIZE;
    00001FCE E300                   MOV         #0,R3
    00001FD0 A003                   BRA         L1178
    00001FD2 143A                   MOV.L       R3,@(40,R4)
    00001FD4              L1177:                            
      simplexC.c  1269        }else
      simplexC.c  1270        {
      simplexC.c  1271            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;
    00001FD4 E044                   MOV         #68,R0
    00001FD6 015E                   MOV.L       @(R0,R5),R1
    00001FD8 141A                   MOV.L       R1,@(40,R4)
    00001FDA              L1178:                            
      simplexC.c  1272        }
      simplexC.c  1273        ex.inputCvectorValues=ex.canonicalStatement->funcObjtValues;
    00001FDA E048                   MOV         #72,R0
    00001FDC 5342                   MOV.L       @(8,R4),R3
    00001FDE 023E                   MOV.L       @(R0,R3),R2
    00001FE0 1427                   MOV.L       R2,@(28,R4)
      simplexC.c  1274        ex.fases2CvectorValues=ex.canonicalStatement->funcObjtValues2Fases;
    00001FE2 E04C                   MOV         #76,R0
    00001FE4 5342                   MOV.L       @(8,R4),R3
    00001FE6 023E                   MOV.L       @(R0,R3),R2
    00001FE8 1428                   MOV.L       R2,@(32,R4)
      simplexC.c  1275        return 0;
      simplexC.c  1276    }
    00001FEA 000B                   RTS
    00001FEC E000                   MOV         #0,R0
    00001FEE              L1213:                            
    00001FEE 0080                   .DATA.W     H'0080
    00001FF0 <00000000>             .DATA.L     _calculateIteration
    00001FF4 <00000000>             .DATA.L     _createNewIteration
    00001FF8 <00000000>             .DATA.L     _ex
    00001FFC <00000000>             .DATA.L     _malloc
    00002000 <00000000>             .DATA.L     _modelToIteration
      simplexC.c  1277    
      simplexC.c  1278    int AddIn_main(int isAppli, unsigned short OptionNum)
    00002004              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=188
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    00002004 2FE6                   MOV.L       R14,@-R15
    00002006 4F22                   STS.L       PR,@-R15
    00002008 DE1F                   MOV.L       L1214+6,R14; _ex
    0000200A 7F80                   ADD         #-128,R15
    0000200C 64E2                   MOV.L       @R14,R4
    0000200E 2448                   TST         R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002010 8B16                   BF          L1180
      simplexC.c  1279    {
      simplexC.c  1280        char str[128];
      simplexC.c  1281        // selectExecutionMode();
      simplexC.c  1282        if(ex.mode==MODE_FULL_EXECUTION)
      simplexC.c  1283        {
      simplexC.c  1284            ex.initialProblemStatement=createProblemStatementToDebug2Fases();
    00002012 BDD3                   BSR         _createProblemStatementToDebug2Fases
    00002014 0009                   NOP
      simplexC.c  1285            // ex.initialProblemStatement=getProblemInputs();
      simplexC.c  1286            // Bdisp_AllClr_DDVRAM();
      simplexC.c  1287            // sprintf(str,"nSlope %d, N2F %d",ex.initialProblemStatement->nVariablesSlope,ex.initialProblemSt
                         +atement->nVariables2fases);
      simplexC.c  1288            // PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
      simplexC.c  1289            // Bdisp_PutDisp_DD();
      simplexC.c  1290            // Sleep(3000);
      simplexC.c  1291            // printStatementMenu(ex.initialProblemStatement);
      simplexC.c  1292            convertModel(ex);
    00002016 62E3                   MOV         R14,R2
    00002018 D31C                   MOV.L       L1214+10,R3; __quick_odd_mvn
    0000201A 1E01                   MOV.L       R0,@(4,R14)
    0000201C E034                   MOV         #52,R0
    0000201E 3F08                   SUB         R0,R15
    00002020 430B                   JSR         @R3
    00002022 61F3                   MOV         R15,R1
    00002024 BC17                   BSR         _convertModel
    00002026 0009                   NOP
      simplexC.c  1293            printStatementMenu(ex.canonicalStatement);
    00002028 D319                   MOV.L       L1214+14,R3; _printStatementMenu
    0000202A 7F34                   ADD         #52,R15
    0000202C 430B                   JSR         @R3
    0000202E 54E2                   MOV.L       @(8,R14),R4
      simplexC.c  1294            initializeExecution();
    00002030 BFC2                   BSR         _initializeExecution
    00002032 0009                   NOP
      simplexC.c  1295            solveSimplexLP(0);
    00002034 BF84                   BSR         _solveSimplexLP
    00002036 E400                   MOV         #0,R4
      simplexC.c  1296            printSolMenu();
    00002038 B8F8                   BSR         _printSolMenu
    0000203A 0009                   NOP
    0000203C A013                   BRA         L1181
    0000203E 0009                   NOP
    00002040              L1180:                            
      simplexC.c  1297    
      simplexC.c  1298        }else if(ex.mode==MODE_INPUT_TABLE)
    00002040 6043                   MOV         R4,R0
    00002042 8801                   CMP/EQ      #1,R0
    00002044 890F                   BT          L1181
      simplexC.c  1299        {
      simplexC.c  1300            //TODO
      simplexC.c  1301        }else
      simplexC.c  1302        {
      simplexC.c  1303            Bdisp_AllClr_DDVRAM();
    00002046 D213                   MOV.L       L1214+18,R2; _Bdisp_AllClr_DDVRAM
    00002048 420B                   JSR         @R2
    0000204A 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1304            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    0000204C D612                   MOV.L       L1214+22,R6; L555
    0000204E E500                   MOV         #0,R5
    00002050 D312                   MOV.L       L1214+26,R3; _PrintMini
    00002052 E710                   MOV         #16,R7
    00002054 430B                   JSR         @R3
    00002056 6453                   MOV         R5,R4
      simplexC.c  1305            Bdisp_PutDisp_DD();
    00002058 D211                   MOV.L       L1214+30,R2; _Bdisp_PutDisp_DD
    0000205A 420B                   JSR         @R2
    0000205C 0009                   NOP
      simplexC.c  1306            Sleep(3000);
    0000205E 9410                   MOV.W       L1214,R4   ; H'0BB8
    00002060 D310                   MOV.L       L1214+34,R3; _Sleep
    00002062 430B                   JSR         @R3
    00002064 0009                   NOP
    00002066              L1181:                            
      simplexC.c  1307        }
      simplexC.c  1308        freeMemoryExecution(ex);
    00002066 62E3                   MOV         R14,R2
    00002068 D308                   MOV.L       L1214+10,R3; __quick_odd_mvn
    0000206A E034                   MOV         #52,R0
    0000206C 3F08                   SUB         R0,R15
    0000206E 430B                   JSR         @R3
    00002070 61F3                   MOV         R15,R1
    00002072 D20D                   MOV.L       L1214+38,R2; _freeMemoryExecution
    00002074 420B                   JSR         @R2
    00002076 0009                   NOP
      simplexC.c  1309        
      simplexC.c  1310    }
    00002078 9104                   MOV.W       L1214+2,R1 ; H'00B4
    0000207A 3F1C                   ADD         R1,R15
    0000207C 4F26                   LDS.L       @R15+,PR
    0000207E 000B                   RTS
    00002080 6EF6                   MOV.L       @R15+,R14
    00002082              L1214:                            
    00002082 0BB8                   .DATA.W     H'0BB8
    00002084 00B4                   .DATA.W     H'00B4
    00002086 0000                   .DATA.W     0
    00002088 <00000000>             .DATA.L     _ex
    0000208C <00000000>             .DATA.L     __quick_odd_mvn
    00002090 <00000000>             .DATA.L     _printStatementMenu
    00002094 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00002098 <00000000>             .DATA.L     L555
    0000209C <00000000>             .DATA.L     _PrintMini
    000020A0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000020A4 <00000000>             .DATA.L     _Sleep
    000020A8 <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c  1311    
      simplexC.c  1312    #pragma section _BR_Size
      simplexC.c  1313    unsigned long BR_Size;
      simplexC.c  1314    #pragma section
      simplexC.c  1315    
      simplexC.c  1316    #pragma section _TOP
      simplexC.c  1317    
      simplexC.c  1318    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=0
      simplexC.c  1319    {
      simplexC.c  1320        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L1215+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1215:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c  1321    }
      simplexC.c  1322    
      simplexC.c  1323    #pragma section
C   00000000              L552:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              L553:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L554:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L555:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L561:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L562:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L574:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C204F424A   
             2E20457869   
             74202564     
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L575:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L576:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L577:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"
             747261696E   
             74733A2025   
             642C204E56   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L579:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L580:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   
             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L582:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L586:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L588:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L597:
    000000CC 417825642E             .SDATA      "Ax%d. nConstraints: %d, Exit %d"
             206E436F6E   
             7374726169   
             6E74733A20   
             25642C2045   
             7869742025   
             64           
    000000EB 00                     .DATA.B     H'00
    000000EC              L600:
    000000EC 417825642E             .SDATA      "Ax%d. %.2f Pos %d"
             20252E3266   
             20506F7320   
             2564         
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L608:
    00000100 41786A2070             .SDATA      "Axj pMenu Vars %d.  %d exit"
             4D656E7520   
             5661727320   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             25642E2020   
             2564206578   
             6974         
    0000011B 00                     .DATA.B     H'00
    0000011C              L620:
    0000011C 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   
             2564         
    0000013C 00                     .DATA.B     H'00
    0000013D 00000001               .RES.B      1
    0000013E 00000002               .RES.W      1
    00000140              L622:
    00000140 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    00000152 00                     .DATA.B     H'00
    00000153 00000001               .RES.B      1
    00000154              L624:
    00000154 20536C6F70             .SDATA      " Slope"
             65           
    0000015A 00                     .DATA.B     H'00
    0000015B 00000001               .RES.B      1
    0000015C              L626:
    0000015C 204475616C             .SDATA      " Dual"
    00000161 00                     .DATA.B     H'00
    00000162 00000002               .RES.W      1
    00000164              L628:
    00000164 20496E74               .SDATA      " Int"
    00000168 00                     .DATA.B     H'00
    00000169 00000001               .RES.B      1
    0000016A 00000002               .RES.W      1
    0000016C              L635:
    0000016C 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         
    00000182 00                     .DATA.B     H'00
    00000183 00000001               .RES.B      1
    00000184              L642:
    00000184 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    0000019D 00                     .DATA.B     H'00
    0000019E 00000002               .RES.W      1
    000001A0              L650:
    000001A0 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             656E752E20   
             2564206578   
             6974         
    000001C0 00                     .DATA.B     H'00
    000001C1 00000001               .RES.B      1
    000001C2 00000002               .RES.W      1
    000001C4              L651:
    000001C4 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    000001CF 00                     .DATA.B     H'00
    000001D0              L652:
    000001D0 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    000001DB 00                     .DATA.B     H'00
    000001DC              L653:
    000001DC 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    000001E8 00                     .DATA.B     H'00
    000001E9 00000001               .RES.B      1
    000001EA 00000002               .RES.W      1
    000001EC              L662:
    000001EC 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    00000205 00                     .DATA.B     H'00
    00000206 00000002               .RES.W      1
    00000208              L671:
    00000208 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    00000230 00                     .DATA.B     H'00
    00000231 00000001               .RES.B      1
    00000232 00000002               .RES.W      1
    00000234              L673:
    00000234 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    00000254 00                     .DATA.B     H'00
    00000255 00000001               .RES.B      1
    00000256 00000002               .RES.W      1
    00000258              L675:
    00000258 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6A2066756E   
             632E         
    00000269 00                     .DATA.B     H'00
    0000026A 00000002               .RES.W      1
    0000026C              L677:
    0000026C 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       
    0000027E 00                     .DATA.B     H'00
    0000027F 00000001               .RES.B      1
    00000280              L679:
    00000280 342050696E             .SDATA      "4 Pinfo aj vec"
             666F20616A   
             20766563     
    0000028E 00                     .DATA.B     H'00
    0000028F 00000001               .RES.B      1
    00000290              L693:
    00000290 5661722072             .SDATA      "Var res, printMenu. Exit %d"
             65732C2070   
             72696E744D   
             656E752E20   
             4578697420   
             2564         
    000002AB 00                     .DATA.B     H'00
    000002AC              L694:
    000002AC 4E76617273             .SDATA      "Nvars: %d, NVB: %d"
             3A2025642C   
             204E56423A   
             202564       
    000002BE 00                     .DATA.B     H'00
    000002BF 00000001               .RES.B      1
    000002C0              L695:
    000002C0 53656C6563             .SDATA      "Select a var:"
             7420612076   
             61723A       
    000002CD 00                     .DATA.B     H'00
    000002CE 00000002               .RES.W      1
    000002D0              L701:
    000002D0 7825643A20             .SDATA      "x%d: %.2f"
             252E3266     
    000002D9 00                     .DATA.B     H'00
    000002DA 00000002               .RES.W      1
    000002DC              L704:
    000002DC 4E6F207661             .SDATA      "No var found"
             7220666F75   
             6E64         
    000002E8 00                     .DATA.B     H'00
    000002E9 00000001               .RES.B      1
    000002EA 00000002               .RES.W      1
    000002EC              L713:
    000002EC 50726F626C             .SDATA      "Problem solution, printMenu. Exit %d"
             656D20736F   
             6C7574696F   
             6E2C207072   
             696E744D65   
             6E752E2045   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             7869742025   
             64           
    00000310 00                     .DATA.B     H'00
    00000311 00000001               .RES.B      1
    00000312 00000002               .RES.W      1
    00000314              L714:
    00000314 4E6974733A             .SDATA      "Nits: %d, ZSol: %.2f"
             2025642C20   
             5A536F6C3A   
             20252E3266   
    00000328 00                     .DATA.B     H'00
    00000329 00000001               .RES.B      1
    0000032A 00000002               .RES.W      1
    0000032C              L716:
    0000032C 312050696E             .SDATA      "1 Pinfo res vars"
             666F207265   
             7320766172   
             73           
    0000033C 00                     .DATA.B     H'00
    0000033D 00000001               .RES.B      1
    0000033E 00000002               .RES.W      1
    00000340              L717:
    00000340 322050696E             .SDATA      "2 Pinfo its"
             666F206974   
             73           
    0000034B 00                     .DATA.B     H'00
    0000034C              L726:
    0000034C 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    0000036D 00                     .DATA.B     H'00
    0000036E 00000002               .RES.W      1
    00000370              L727:
    00000370 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    0000038C 00                     .DATA.B     H'00
    0000038D 00000001               .RES.B      1
    0000038E 00000002               .RES.W      1
    00000390              L734:
    00000390 436F6E7374             .SDATA      "Constraint: %d, Right Value"
             7261696E74   
             3A2025642C   
             2052696768   
             742056616C   
             7565         
    000003AB 00                     .DATA.B     H'00
    000003AC              L747:
    000003AC 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    000003C8 00                     .DATA.B     H'00
    000003C9 00000001               .RES.B      1
    000003CA 00000002               .RES.W      1
    000003CC              L764:
    000003CC 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    000003D9 00                     .DATA.B     H'00
    000003DA 00000002               .RES.W      1
    000003DC              L765:
    000003DC 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    000003E7 00                     .DATA.B     H'00
    000003E8              L766:
    000003E8 5072657373             .SDATA      "Press. 1-LP, 2-ILP, 3-Cuts"
             2E20312D4C   
             502C20322D   
             494C502C20   
             332D437574   
             73           
    00000402 00                     .DATA.B     H'00
    00000403 00000001               .RES.B      1
    00000404              L769:
    00000404 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    00000410 00                     .DATA.B     H'00
    00000411 00000001               .RES.B      1
    00000412 00000002               .RES.W      1
    00000414              L770:
    00000414 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   
             20496E7420   
             7661722C20   
             30206E6F     
    0000042C 00                     .DATA.B     H'00
    0000042D 00000001               .RES.B      1
    0000042E 00000002               .RES.W      1
    00000430              L773:
    00000430 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   
             25642C204D   
             6178202564   
    00000444 00                     .DATA.B     H'00
    00000445 00000001               .RES.B      1
    00000446 00000002               .RES.W      1
    00000448              L775:
    00000448 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    00000459 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000045A 00000002               .RES.W      1
    0000045C              L776:
    0000045C 4F626A2076             .SDATA      "Obj value Independent"
             616C756520   
             496E646570   
             656E64656E   
             74           
    00000471 00                     .DATA.B     H'00
    00000472 00000002               .RES.W      1
    00000474              L780:
    00000474 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    0000048B 00                     .DATA.B     H'00
B   00000000              _ex:                             ; static: ex
    00000000 00000034               .RES.L      13
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1









































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 14:45:10  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        59




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1323



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000020AC Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000048C Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000034 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000257C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          46
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           335






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmkF7EF.tmp 

