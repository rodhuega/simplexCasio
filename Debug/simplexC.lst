SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include <stdlib.h>
      simplexC.c     4    #include "stdio.h"
      simplexC.c     5    #include "SH4_compatibility.h"
      simplexC.c     6    
      simplexC.c     7    
      simplexC.c     8    #define TYPE_LP 1
      simplexC.c     9    #define TYPE_ILP 2
      simplexC.c    10    #define TYPE_CUT 3
      simplexC.c    11    
      simplexC.c    12    #define TYPE_INPUT 1
      simplexC.c    13    #define TYPE_SOLVE 2
      simplexC.c    14    
      simplexC.c    15    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    16    #define EXIT_OPT 0
      simplexC.c    17    
      simplexC.c    18    #define INE_EQUAL 0
      simplexC.c    19    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    20    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    21    
      simplexC.c    22    
      simplexC.c    23    #define FUNC_MINIMIZE 0
      simplexC.c    24    #define FUNC_MAXIMIZE 1
      simplexC.c    25    
      simplexC.c    26    
      simplexC.c    27    #define MODE_FULL_EXECUTION 0
      simplexC.c    28    #define MODE_INPUT_TABLE 1
      simplexC.c    29    
      simplexC.c    30    
      simplexC.c    31    struct iteration
      simplexC.c    32    {
      simplexC.c    33        int numIteration;
      simplexC.c    34        int* idBasicVariables;
      simplexC.c    35        int* idNoBasicVariables;
      simplexC.c    36        int idVarIn;
      simplexC.c    37        int idVarOut;
      simplexC.c    38    
      simplexC.c    39        double **Binv;
      simplexC.c    40        int BinvRowsSize;
      simplexC.c    41        int BinvColumnSize;
      simplexC.c    42    
      simplexC.c    43        double *xb;
      simplexC.c    44        double *ct;
      simplexC.c    45        double *ctBinv;
      simplexC.c    46        double *zj;
      simplexC.c    47        double *cjMinusZj;
      simplexC.c    48        double *yj;
      simplexC.c    49        double *xbDivYj;
      simplexC.c    50    
      simplexC.c    51        double zSol ;
      simplexC.c    52    };
      simplexC.c    53    
      simplexC.c    54    struct problemStatement




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    55    {
      simplexC.c    56        int problemType;
      simplexC.c    57        int modelType;
      simplexC.c    58        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    59        //1 array de variables por cada constraint
      simplexC.c    60        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    61        double **constraints;
      simplexC.c    62        double *rightValues;
      simplexC.c    63        int *inequalitySigns;
      simplexC.c    64        int nVariables;
      simplexC.c    65        int nVariablesSlope;
      simplexC.c    66        int nVariables2fases;
      simplexC.c    67        int nVariablesInteger;
      simplexC.c    68        int nConstraints;
      simplexC.c    69        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    70        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    71        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    72        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    73        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    74    
      simplexC.c    75        int funcObjectivePurpose;
      simplexC.c    76        double *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    77        double *funcObjtValues2Fases;
      simplexC.c    78    
      simplexC.c    79        double** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c    80    };
      simplexC.c    81    
      simplexC.c    82    struct node
      simplexC.c    83    {
      simplexC.c    84        int id;
      simplexC.c    85        int nIterations;
      simplexC.c    86        struct iteration **its;
      simplexC.c    87    };
      simplexC.c    88    
      simplexC.c    89    struct execution
      simplexC.c    90    {
      simplexC.c    91        int mode;
      simplexC.c    92        struct problemStatement *initialProblemStatement;
      simplexC.c    93        struct problemStatement *canonicalStatement;
      simplexC.c    94        struct node **nodes;
      simplexC.c    95        int nNodes;
      simplexC.c    96    };
      simplexC.c    97    
      simplexC.c    98    double InputD(int, int);
      simplexC.c    99    
      simplexC.c   100    int InputI(int, int);
      simplexC.c   101    
      simplexC.c   102    double InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=524
    00000000 4F22                   STS.L       PR,@-R15
    00000002 9095                   MOV.W       L906,R0    ; H'FDFC
      simplexC.c   103    {
      simplexC.c   104        char *string[128], *stopstring;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   105        string_input(x, y, string);
    00000004 D34C                   MOV.L       L906+8,R3  ; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c   106        return strtod(string, &stopstring);
    0000000E 65F3                   MOV         R15,R5
    00000010 928F                   MOV.W       L906+2,R2  ; H'0208
    00000012 64F3                   MOV         R15,R4
    00000014 D349                   MOV.L       L906+12,R3 ; _strtod
    00000016 32FC                   ADD         R15,R2
    00000018 6222                   MOV.L       @R2,R2
    0000001A 7404                   ADD         #4,R4
    0000001C 430B                   JSR         @R3
    0000001E 2F26                   MOV.L       R2,@-R15
      simplexC.c   107    }
    00000020 9187                   MOV.W       L906+2,R1  ; H'0208
    00000022 3F1C                   ADD         R1,R15
    00000024 4F26                   LDS.L       @R15+,PR
    00000026 000B                   RTS
    00000028 0009                   NOP
      simplexC.c   108    
      simplexC.c   109    int InputI(int x, int y)
    0000002A              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002A 4F22                   STS.L       PR,@-R15
    0000002C 9082                   MOV.W       L906+4,R0  ; H'FE00
    0000002E 3F0C                   ADD         R0,R15
      simplexC.c   110    {
      simplexC.c   111        char *string[128], *stopstring;
      simplexC.c   112        string_input(x, y, string);
    00000030 D341                   MOV.L       L906+8,R3  ; _string_input
    00000032 430B                   JSR         @R3
    00000034 66F3                   MOV         R15,R6
      simplexC.c   113        return atoi(&string);
    00000036 D242                   MOV.L       L906+16,R2 ; _atoi
    00000038 420B                   JSR         @R2
    0000003A 64F3                   MOV         R15,R4
      simplexC.c   114    }
    0000003C 917B                   MOV.W       L906+6,R1  ; H'0200
    0000003E 3F1C                   ADD         R1,R15
    00000040 4F26                   LDS.L       @R15+,PR
    00000042 000B                   RTS
    00000044 0009                   NOP
      simplexC.c   115    
      simplexC.c   116    int freeMemoryStatement(struct problemStatement *pS)
    00000046              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    00000046 2FE6                   MOV.L       R14,@-R15
    00000048 2FD6                   MOV.L       R13,@-R15
    0000004A 6E43                   MOV         R4,R14
    0000004C 2FC6                   MOV.L       R12,@-R15
    0000004E 4F22                   STS.L       PR,@-R15
      simplexC.c   117    {
      simplexC.c   118        int i;
      simplexC.c   119        for(i=0;i<pS->nConstraints;i++)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000050 DD3C                   MOV.L       L906+20,R13; _free
    00000052 A006                   BRA         L769
    00000054 EC00                   MOV         #0,R12
    00000056              L770:                             
      simplexC.c   120        {
      simplexC.c   121            free(pS->constraints[i]);
    00000056 64C3                   MOV         R12,R4
    00000058 50E3                   MOV.L       @(12,R14),R0
    0000005A 4408                   SHLL2       R4
    0000005C 4D0B                   JSR         @R13
    0000005E 044E                   MOV.L       @(R0,R4),R4
    00000060 7C01                   ADD         #1,R12
    00000062              L769:                             
    00000062 53EA                   MOV.L       @(40,R14),R3
    00000064 3C33                   CMP/GE      R3,R12
    00000066 8BF6                   BF          L770
      simplexC.c   122        }
      simplexC.c   123        free(pS->constraints);
    00000068 4D0B                   JSR         @R13
    0000006A 54E3                   MOV.L       @(12,R14),R4
      simplexC.c   124        free(pS->rightValues);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   125        free(pS->inequalitySigns);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   126        free(pS->idIntegerVariables);
    00000074 4D0B                   JSR         @R13
    00000076 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   127        free(pS->idSlopeVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   128        free(pS->id2fasesVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   129        free(pS->funcObjtValues);
    00000080 E044                   MOV         #68,R0
    00000082 4D0B                   JSR         @R13
    00000084 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   130        if(pS->modelType==TYPE_SOLVE)
    00000086 50E1                   MOV.L       @(4,R14),R0
    00000088 8802                   CMP/EQ      #2,R0
    0000008A 8B12                   BF          L771
      simplexC.c   131        {
      simplexC.c   132            free(pS->idConstraintTo2fasesVar);
    0000008C 4D0B                   JSR         @R13
    0000008E 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   133            free(pS->idConstraintToSlopeVar);
    00000090 4D0B                   JSR         @R13
    00000092 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   134            for(i=0;pS->nVariables;i++)
    00000094 A007                   BRA         L772
    00000096 EC00                   MOV         #0,R12
    00000098              L773:                             
      simplexC.c   135            {
      simplexC.c   136                free(pS->ajVector[i]);
    00000098 64C3                   MOV         R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009A 4408                   SHLL2       R4
    0000009C E04C                   MOV         #76,R0
    0000009E 00EE                   MOV.L       @(R0,R14),R0
    000000A0 4D0B                   JSR         @R13
    000000A2 044E                   MOV.L       @(R0,R4),R4
    000000A4 7C01                   ADD         #1,R12
    000000A6              L772:                             
    000000A6 53E6                   MOV.L       @(24,R14),R3
    000000A8 2338                   TST         R3,R3
    000000AA 8BF5                   BF          L773
      simplexC.c   137            }
      simplexC.c   138            free(pS->ajVector);
    000000AC E04C                   MOV         #76,R0
    000000AE 4D0B                   JSR         @R13
    000000B0 04EE                   MOV.L       @(R0,R14),R4
    000000B2              L771:                             
      simplexC.c   139        }
      simplexC.c   140        return 0;
    000000B2 E000                   MOV         #0,R0
      simplexC.c   141    }
    000000B4 4F26                   LDS.L       @R15+,PR
    000000B6 6CF6                   MOV.L       @R15+,R12
    000000B8 6DF6                   MOV.L       @R15+,R13
    000000BA 000B                   RTS
    000000BC 6EF6                   MOV.L       @R15+,R14
      simplexC.c   142    int freeMemoryIteration(struct iteration *it)
    000000BE              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=8
    000000BE 4F22                   STS.L       PR,@-R15
      simplexC.c   143    {
      simplexC.c   144        //TODO
      simplexC.c   145        free(it->idBasicVariables);
    000000C0 D320                   MOV.L       L906+20,R3 ; _free
    000000C2 7FFC                   ADD         #-4,R15
    000000C4 2F42                   MOV.L       R4,@R15
    000000C6 430B                   JSR         @R3
    000000C8 5441                   MOV.L       @(4,R4),R4
      simplexC.c   146        return 0;
      simplexC.c   147    }
    000000CA 7F04                   ADD         #4,R15
    000000CC 4F26                   LDS.L       @R15+,PR
    000000CE 000B                   RTS
    000000D0 E000                   MOV         #0,R0
      simplexC.c   148    int freeMemoryNode(struct node *n)
    000000D2              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000D2 2FE6                   MOV.L       R14,@-R15
    000000D4 2FD6                   MOV.L       R13,@-R15
    000000D6 6D43                   MOV         R4,R13
    000000D8 4F22                   STS.L       PR,@-R15
      simplexC.c   149    {
      simplexC.c   150        int i;
      simplexC.c   151        for(i=0; i<n->nIterations;i++)
    000000DA A006                   BRA         L776
    000000DC EE00                   MOV         #0,R14
    000000DE              L777:                             
      simplexC.c   152        {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   153            freeMemoryIteration(n->its[i]);
    000000DE 64E3                   MOV         R14,R4
    000000E0 50D2                   MOV.L       @(8,R13),R0
    000000E2 4408                   SHLL2       R4
    000000E4 BFEB                   BSR         _freeMemoryIteration
    000000E6 044E                   MOV.L       @(R0,R4),R4
    000000E8 7E01                   ADD         #1,R14
    000000EA              L776:                             
    000000EA 52D1                   MOV.L       @(4,R13),R2
    000000EC 3E23                   CMP/GE      R2,R14
    000000EE 8BF6                   BF          L777
      simplexC.c   154        }
      simplexC.c   155        return 0;
      simplexC.c   156    }
    000000F0 4F26                   LDS.L       @R15+,PR
    000000F2 E000                   MOV         #0,R0
    000000F4 6DF6                   MOV.L       @R15+,R13
    000000F6 000B                   RTS
    000000F8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   157    
      simplexC.c   158    int freeMemoryExecution(struct execution *ex)
    000000FA              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    000000FA 2FE6                   MOV.L       R14,@-R15
    000000FC 2FD6                   MOV.L       R13,@-R15
    000000FE 6E43                   MOV         R4,R14
    00000100 4F22                   STS.L       PR,@-R15
      simplexC.c   159    {
      simplexC.c   160        int i;
      simplexC.c   161        if(ex->mode == MODE_FULL_EXECUTION)
    00000102 63E2                   MOV.L       @R14,R3
    00000104 2338                   TST         R3,R3
    00000106 8B03                   BF          L779
      simplexC.c   162        {
      simplexC.c   163            freeMemoryStatement(ex->initialProblemStatement);
    00000108 BF9D                   BSR         _freeMemoryStatement
    0000010A 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   164            freeMemoryStatement(ex->canonicalStatement);
    0000010C BF9B                   BSR         _freeMemoryStatement
    0000010E 54E2                   MOV.L       @(8,R14),R4
    00000110              L779:                             
      simplexC.c   165        }
      simplexC.c   166        for(i=0;i<ex->nNodes;i++)
    00000110 A006                   BRA         L780
    00000112 ED00                   MOV         #0,R13
    00000114              L781:                             
      simplexC.c   167        {
      simplexC.c   168            freeMemoryNode(ex->nodes[i]);
    00000114 50E3                   MOV.L       @(12,R14),R0
    00000116 64D3                   MOV         R13,R4
    00000118 4408                   SHLL2       R4
    0000011A BFDA                   BSR         _freeMemoryNode
    0000011C 044E                   MOV.L       @(R0,R4),R4
    0000011E 7D01                   ADD         #1,R13
    00000120              L780:                             
    00000120 52E4                   MOV.L       @(16,R14),R2
    00000122 3D23                   CMP/GE      R2,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000124 8BF6                   BF          L781
      simplexC.c   169        }
      simplexC.c   170        return 0;
    00000126 E000                   MOV         #0,R0
      simplexC.c   171    }
    00000128 4F26                   LDS.L       @R15+,PR
    0000012A 6DF6                   MOV.L       @R15+,R13
    0000012C 000B                   RTS
    0000012E 6EF6                   MOV.L       @R15+,R14
    00000130              L906:                             
    00000130 FDFC                   .DATA.W     H'FDFC
    00000132 0208                   .DATA.W     H'0208
    00000134 FE00                   .DATA.W     H'FE00
    00000136 0200                   .DATA.W     H'0200
    00000138 <00000000>             .DATA.L     _string_input
    0000013C <00000000>             .DATA.L     _strtod
    00000140 <00000000>             .DATA.L     _atoi
    00000144 <00000000>             .DATA.L     _free
      simplexC.c   172    
      simplexC.c   173    int lengthConcatenate(int sprintLength)
    00000148              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   174    {
      simplexC.c   175        return (sprintLength > 0) ? sprintLength : 0;
    00000148 4415                   CMP/PL      R4
    0000014A 8B01                   BF          L783
    0000014C 000B                   RTS
    0000014E 6043                   MOV         R4,R0
    00000150              L783:                             
    00000150 E000                   MOV         #0,R0
      simplexC.c   176    }
    00000152              L785:                             
    00000152 000B                   RTS
    00000154 0009                   NOP
      simplexC.c   177    
      simplexC.c   178    char* getInequalityChar(int inequalitySign)
    00000156              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0
      simplexC.c   179    {
      simplexC.c   180        char * res;
      simplexC.c   181        switch (inequalitySign)
    00000156 6043                   MOV         R4,R0
    00000158 8800                   CMP/EQ      #0,R0
    0000015A 8905                   BT          L699
    0000015C 8801                   CMP/EQ      #1,R0
    0000015E 8906                   BT          L701
    00000160 8802                   CMP/EQ      #2,R0
    00000162 8907                   BT          L703
    00000164 A009                   BRA         L705
    00000166 0009                   NOP
    00000168              L699:                            ; case label 
      simplexC.c   182        {
      simplexC.c   183            case INE_EQUAL: res="="; break;
    00000168 D432                   MOV.L       L907+12,R4 ; L460
    0000016A A007                   BRA         L786
    0000016C 0009                   NOP
    0000016E              L701:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   184            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    0000016E D432                   MOV.L       L907+16,R4 ; L461
    00000170 A004                   BRA         L786
    00000172 0009                   NOP
    00000174              L703:                            ; case label 
      simplexC.c   185            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    00000174 D431                   MOV.L       L907+20,R4 ; L462
    00000176 A001                   BRA         L786
    00000178 0009                   NOP
    0000017A              L705:                            ; default label 
      simplexC.c   186            default: res = "ERROR"; break;
    0000017A D431                   MOV.L       L907+24,R4 ; L463
    0000017C              L786:                             
      simplexC.c   187        }
      simplexC.c   188        return res;
      simplexC.c   189    }
    0000017C 000B                   RTS
    0000017E 6043                   MOV         R4,R0
      simplexC.c   190    
      simplexC.c   191    char * getFuncObjPurposeChar(int purpose)
    00000180              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   192    {
      simplexC.c   193        char * res;
      simplexC.c   194        switch (purpose)
    00000180 6043                   MOV         R4,R0
    00000182 8800                   CMP/EQ      #0,R0
    00000184 8903                   BT          L707
    00000186 8801                   CMP/EQ      #1,R0
    00000188 8904                   BT          L709
    0000018A A006                   BRA         L711
    0000018C 0009                   NOP
    0000018E              L707:                            ; case label 
      simplexC.c   195        {
      simplexC.c   196            case FUNC_MINIMIZE: res="MIN"; break;
    0000018E D42D                   MOV.L       L907+28,R4 ; L469
    00000190 A004                   BRA         L788
    00000192 0009                   NOP
    00000194              L709:                            ; case label 
      simplexC.c   197            case FUNC_MAXIMIZE: res="MAX"; break;
    00000194 D42C                   MOV.L       L907+32,R4 ; L470
    00000196 A001                   BRA         L788
    00000198 0009                   NOP
    0000019A              L711:                            ; default label 
      simplexC.c   198            default: res = "ERROR";break;
    0000019A D429                   MOV.L       L907+24,R4 ; L463
    0000019C              L788:                             
      simplexC.c   199        }
      simplexC.c   200        return res;
      simplexC.c   201    } 
    0000019C 000B                   RTS
    0000019E 6043                   MOV         R4,R0
      simplexC.c   202    
      simplexC.c   203    int printObjFunc(struct problemStatement* pS,int modelType)
    000001A0              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1212
    000001A0 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   204    {
      simplexC.c   205        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   206        char *uselessSring[128];
      simplexC.c   207        int menuChoice;
      simplexC.c   208        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   209        sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOLVE",
                         + EXIT_OPT);
    000001A2 E300                   MOV         #0,R3
    000001A4 9040                   MOV.W       L907,R0    ; H'FB7C
    000001A6 2FD6                   MOV.L       R13,@-R15
    000001A8 2FC6                   MOV.L       R12,@-R15
    000001AA 6C43                   MOV         R4,R12
    000001AC 2FB6                   MOV.L       R11,@-R15
    000001AE 2FA6                   MOV.L       R10,@-R15
    000001B0 2F96                   MOV.L       R9,@-R15
    000001B2 2F86                   MOV.L       R8,@-R15
    000001B4 4F22                   STS.L       PR,@-R15
    000001B6 3F0C                   ADD         R0,R15
    000001B8 DB24                   MOV.L       L907+36,R11; _sprintf
    000001BA 2F52                   MOV.L       R5,@R15
    000001BC 2F36                   MOV.L       R3,@-R15
    000001BE 50C1                   MOV.L       @(4,R12),R0
    000001C0 8801                   CMP/EQ      #1,R0
    000001C2 8F03                   BF/S        L790
    000001C4 EDFF                   MOV         #-1,R13
    000001C6 D122                   MOV.L       L907+40,R1 ; L483
    000001C8 A002                   BRA         L791
    000001CA 2F16                   MOV.L       R1,@-R15
    000001CC              L790:                             
    000001CC D221                   MOV.L       L907+44,R2 ; L484
    000001CE 2F26                   MOV.L       R2,@-R15
    000001D0              L791:                             
    000001D0 D121                   MOV.L       L907+48,R1 ; L482
    000001D2 2F16                   MOV.L       R1,@-R15
    000001D4 9429                   MOV.W       L907+2,R4  ; H'0410
    000001D6 4B0B                   JSR         @R11
    000001D8 34FC                   ADD         R15,R4
      simplexC.c   210        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    000001DA 53C6                   MOV.L       @(24,R12),R3
    000001DC 9426                   MOV.W       L907+4,R4  ; H'039C
    000001DE 2F36                   MOV.L       R3,@-R15
    000001E0 52CA                   MOV.L       @(40,R12),R2
    000001E2 2F26                   MOV.L       R2,@-R15
    000001E4 D31D                   MOV.L       L907+52,R3 ; L485
    000001E6 2F36                   MOV.L       R3,@-R15
    000001E8 4B0B                   JSR         @R11
    000001EA 34FC                   ADD         R15,R4
    000001EC 7F18                   ADD         #24,R15
      simplexC.c   211        if(modelType==TYPE_INPUT)
    000001EE 60F2                   MOV.L       @R15,R0
    000001F0 8801                   CMP/EQ      #1,R0
    000001F2 8B39                   BF          L792
      simplexC.c   212        {
      simplexC.c   213            sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    000001F4 E040                   MOV         #64,R0
    000001F6 BFC3                   BSR         _getFuncObjPurposeChar




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F8 04CE                   MOV.L       @(R0,R12),R4
    000001FA 2F06                   MOV.L       R0,@-R15
    000001FC D218                   MOV.L       L907+56,R2 ; L487
    000001FE 2F26                   MOV.L       R2,@-R15
    00000200 9415                   MOV.W       L907+6,R4  ; H'030C
    00000202 4B0B                   JSR         @R11
    00000204 34FC                   ADD         R15,R4
      simplexC.c   214            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    00000206 E044                   MOV         #68,R0
    00000208 9412                   MOV.W       L907+8,R4  ; H'0298
    0000020A 53C6                   MOV.L       @(24,R12),R3
    0000020C 02CE                   MOV.L       @(R0,R12),R2
    0000020E 4308                   SHLL2       R3
    00000210 4300                   SHLL        R3
    00000212 332C                   ADD         R2,R3
    00000214 5131                   MOV.L       @(4,R3),R1
    00000216 2F16                   MOV.L       R1,@-R15
    00000218 6132                   MOV.L       @R3,R1
    0000021A 2F16                   MOV.L       R1,@-R15
    0000021C D211                   MOV.L       L907+60,R2 ; L488
    0000021E 2F26                   MOV.L       R2,@-R15
    00000220 4B0B                   JSR         @R11
    00000222 34FC                   ADD         R15,R4
    00000224 A035                   BRA         L793
    00000226 7F14                   ADD         #20,R15
    00000228              L907:                             
    00000228 FB7C                   .DATA.W     H'FB7C
    0000022A 0410                   .DATA.W     H'0410
    0000022C 039C                   .DATA.W     H'039C
    0000022E 030C                   .DATA.W     H'030C
    00000230 0298                   .DATA.W     H'0298
    00000232 0000                   .DATA.W     0
    00000234 <00000000>             .DATA.L     L460
    00000238 <00000000>             .DATA.L     L461
    0000023C <00000000>             .DATA.L     L462
    00000240 <00000000>             .DATA.L     L463
    00000244 <00000000>             .DATA.L     L469
    00000248 <00000000>             .DATA.L     L470
    0000024C <00000000>             .DATA.L     _sprintf
    00000250 <00000000>             .DATA.L     L483
    00000254 <00000000>             .DATA.L     L484
    00000258 <00000000>             .DATA.L     L482
    0000025C <00000000>             .DATA.L     L485
    00000260 <00000000>             .DATA.L     L487
    00000264 <00000000>             .DATA.L     L488
    00000268              L792:                             
      simplexC.c   215        }else
      simplexC.c   216        {
      simplexC.c   217            sprintf(stroutBasicInfo2, "OBJ MIN");
    00000268 D241                   MOV.L       L908+16,R2 ; L490
    0000026A 2F26                   MOV.L       R2,@-R15
    0000026C 9478                   MOV.W       L908,R4    ; H'0308
    0000026E 4B0B                   JSR         @R11
    00000270 34FC                   ADD         R15,R4
      simplexC.c   218            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]);
    00000272 E048                   MOV         #72,R0
    00000274 9475                   MOV.W       L908+2,R4  ; H'0294




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000276 53C6                   MOV.L       @(24,R12),R3
    00000278 02CE                   MOV.L       @(R0,R12),R2
    0000027A 4308                   SHLL2       R3
    0000027C 4300                   SHLL        R3
    0000027E 332C                   ADD         R2,R3
    00000280 5131                   MOV.L       @(4,R3),R1
    00000282 2F16                   MOV.L       R1,@-R15
    00000284 6132                   MOV.L       @R3,R1
    00000286 2F16                   MOV.L       R1,@-R15
    00000288 D23A                   MOV.L       L908+20,R2 ; L488
    0000028A 2F26                   MOV.L       R2,@-R15
    0000028C 4B0B                   JSR         @R11
    0000028E 34FC                   ADD         R15,R4
    00000290 7F10                   ADD         #16,R15
    00000292              L793:                             
    00000292 D839                   MOV.L       L908+24,R8 ; _Bdisp_PutDisp_DD
    00000294 9A66                   MOV.W       L908+4,R10 ; H'0204
    00000296 DE39                   MOV.L       L908+28,R14; _PrintMini
      simplexC.c   219        }
      simplexC.c   220        while(menuChoice!=EXIT_OPT)
    00000298 A054                   BRA         L794
    0000029A 3AFC                   ADD         R15,R10
    0000029C              L795:                             
      simplexC.c   221        {
      simplexC.c   222            Bdisp_AllClr_DDVRAM();
    0000029C D238                   MOV.L       L908+32,R2 ; _Bdisp_AllClr_DDVRAM
    0000029E 420B                   JSR         @R2
    000002A0 0009                   NOP
      simplexC.c   223            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000002A2 E710                   MOV         #16,R7
    000002A4 965F                   MOV.W       L908+6,R6  ; H'0404
    000002A6 E500                   MOV         #0,R5
    000002A8 36FC                   ADD         R15,R6
    000002AA 4E0B                   JSR         @R14
    000002AC 6453                   MOV         R5,R4
      simplexC.c   224            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000002AE E710                   MOV         #16,R7
    000002B0 965A                   MOV.W       L908+8,R6  ; H'0384
    000002B2 E507                   MOV         #7,R5
    000002B4 36FC                   ADD         R15,R6
    000002B6 4E0B                   JSR         @R14
    000002B8 E400                   MOV         #0,R4
      simplexC.c   225            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000002BA E710                   MOV         #16,R7
    000002BC 9655                   MOV.W       L908+10,R6 ; H'0304
    000002BE E50E                   MOV         #14,R5
    000002C0 36FC                   ADD         R15,R6
    000002C2 4E0B                   JSR         @R14
    000002C4 E400                   MOV         #0,R4
      simplexC.c   226            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    000002C6 E710                   MOV         #16,R7
    000002C8 9650                   MOV.W       L908+12,R6 ; H'0284
    000002CA E515                   MOV         #21,R5
    000002CC 36FC                   ADD         R15,R6
    000002CE 4E0B                   JSR         @R14
    000002D0 E400                   MOV         #0,R4
      simplexC.c   227            menuChoice = InputI(0, 35);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002D2 E523                   MOV         #35,R5
    000002D4 BEA9                   BSR         _InputI
    000002D6 E400                   MOV         #0,R4
      simplexC.c   228            Bdisp_PutDisp_DD();
    000002D8 480B                   JSR         @R8
    000002DA 6D03                   MOV         R0,R13
      simplexC.c   229            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000002DC 2DD8                   TST         R13,R13
    000002DE 8931                   BT          L794
    000002E0 53C6                   MOV.L       @(24,R12),R3
    000002E2 3D37                   CMP/GT      R3,R13
    000002E4 892E                   BT          L794
    000002E6 69D3                   MOV         R13,R9
    000002E8 60F2                   MOV.L       @R15,R0
    000002EA 79FF                   ADD         #-1,R9
    000002EC 4908                   SHLL2       R9
    000002EE 4900                   SHLL        R9
    000002F0 8801                   CMP/EQ      #1,R0
    000002F2 8B08                   BF          L797
      simplexC.c   230            {
      simplexC.c   231                if(modelType==TYPE_INPUT)
      simplexC.c   232                {
      simplexC.c   233                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    000002F4 E044                   MOV         #68,R0
    000002F6 02CE                   MOV.L       @(R0,R12),R2
    000002F8 392C                   ADD         R2,R9
    000002FA 5391                   MOV.L       @(4,R9),R3
    000002FC 2F36                   MOV.L       R3,@-R15
    000002FE 6392                   MOV.L       @R9,R3
    00000300 2F36                   MOV.L       R3,@-R15
    00000302 A007                   BRA         L902
    00000304 0009                   NOP
    00000306              L797:                             
      simplexC.c   234                }else
      simplexC.c   235                {
      simplexC.c   236                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    00000306 E048                   MOV         #72,R0
    00000308 02CE                   MOV.L       @(R0,R12),R2
    0000030A 392C                   ADD         R2,R9
    0000030C 5391                   MOV.L       @(4,R9),R3
    0000030E 2F36                   MOV.L       R3,@-R15
    00000310 6392                   MOV.L       @R9,R3
    00000312 2F36                   MOV.L       R3,@-R15
    00000314              L902:                             
    00000314 2FD6                   MOV.L       R13,@-R15
    00000316 D21B                   MOV.L       L908+36,R2 ; L494
    00000318 2F26                   MOV.L       R2,@-R15
    0000031A 4B0B                   JSR         @R11
    0000031C 64A3                   MOV         R10,R4
    0000031E 7F10                   ADD         #16,R15
      simplexC.c   237                }
      simplexC.c   238                
      simplexC.c   239                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    00000320 E710                   MOV         #16,R7
    00000322 66A3                   MOV         R10,R6
    00000324 E52A                   MOV         #42,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000326 4E0B                   JSR         @R14
    00000328 E400                   MOV         #0,R4
      simplexC.c   240                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    0000032A E710                   MOV         #16,R7
    0000032C D616                   MOV.L       L908+40,R6 ; L496
    0000032E E531                   MOV         #49,R5
    00000330 4E0B                   JSR         @R14
    00000332 E400                   MOV         #0,R4
      simplexC.c   241                string_input(0, 56, uselessSring);
    00000334 D315                   MOV.L       L908+44,R3 ; _string_input
    00000336 66F3                   MOV         R15,R6
    00000338 7604                   ADD         #4,R6
    0000033A E538                   MOV         #56,R5
    0000033C 430B                   JSR         @R3
    0000033E E400                   MOV         #0,R4
      simplexC.c   242                Bdisp_PutDisp_DD();
    00000340 480B                   JSR         @R8
    00000342 0009                   NOP
    00000344              L794:                             
    00000344 2DD8                   TST         R13,R13
    00000346 8BA9                   BF          L795
      simplexC.c   243            }
      simplexC.c   244        }
      simplexC.c   245        return 0;
      simplexC.c   246    }
    00000348 9111                   MOV.W       L908+14,R1 ; H'0484
    0000034A E000                   MOV         #0,R0
    0000034C 3F1C                   ADD         R1,R15
    0000034E 4F26                   LDS.L       @R15+,PR
    00000350 68F6                   MOV.L       @R15+,R8
    00000352 69F6                   MOV.L       @R15+,R9
    00000354 6AF6                   MOV.L       @R15+,R10
    00000356 6BF6                   MOV.L       @R15+,R11
    00000358 6CF6                   MOV.L       @R15+,R12
    0000035A 6DF6                   MOV.L       @R15+,R13
    0000035C 000B                   RTS
    0000035E 6EF6                   MOV.L       @R15+,R14
    00000360              L908:                             
    00000360 0308                   .DATA.W     H'0308
    00000362 0294                   .DATA.W     H'0294
    00000364 0204                   .DATA.W     H'0204
    00000366 0404                   .DATA.W     H'0404
    00000368 0384                   .DATA.W     H'0384
    0000036A 0304                   .DATA.W     H'0304
    0000036C 0284                   .DATA.W     H'0284
    0000036E 0484                   .DATA.W     H'0484
    00000370 <00000000>             .DATA.L     L490
    00000374 <00000000>             .DATA.L     L488
    00000378 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000037C <00000000>             .DATA.L     _PrintMini
    00000380 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000384 <00000000>             .DATA.L     L494
    00000388 <00000000>             .DATA.L     L496
    0000038C <00000000>             .DATA.L     _string_input
      simplexC.c   247    
      simplexC.c   248    int printAjVal(struct problemStatement* pS, int varId)
    00000390              _printAjVal:                     ; function: printAjVal




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=828
    00000390 2FE6                   MOV.L       R14,@-R15
      simplexC.c   249    {
      simplexC.c   250        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   251        char *uselessSring[128];
      simplexC.c   252        int menuChoice;
      simplexC.c   253        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   254        sprintf(stroutBasicInfo, "Ax%d. nConstraints: %d, Exit %d",varId,pS->nConstraints,EXIT_OPT);
    00000392 E300                   MOV         #0,R3
    00000394 9080                   MOV.W       L909,R0    ; H'FCF8
    00000396 EEFF                   MOV         #-1,R14
    00000398 2FD6                   MOV.L       R13,@-R15
    0000039A 2FC6                   MOV.L       R12,@-R15
    0000039C 2FB6                   MOV.L       R11,@-R15
    0000039E 2FA6                   MOV.L       R10,@-R15
    000003A0 2F96                   MOV.L       R9,@-R15
    000003A2 6943                   MOV         R4,R9
    000003A4 2F86                   MOV.L       R8,@-R15
    000003A6 4F22                   STS.L       PR,@-R15
    000003A8 9877                   MOV.W       L909+2,R8  ; H'0288
    000003AA 3F0C                   ADD         R0,R15
    000003AC 2F52                   MOV.L       R5,@R15
    000003AE 38FC                   ADD         R15,R8
    000003B0 2F36                   MOV.L       R3,@-R15
    000003B2 529A                   MOV.L       @(40,R9),R2
    000003B4 2F26                   MOV.L       R2,@-R15
    000003B6 51F2                   MOV.L       @(8,R15),R1
    000003B8 D23A                   MOV.L       L909+12,R2 ; L505
    000003BA 2F16                   MOV.L       R1,@-R15
    000003BC 2F26                   MOV.L       R2,@-R15
    000003BE D13A                   MOV.L       L909+16,R1 ; _sprintf
    000003C0 410B                   JSR         @R1
    000003C2 6483                   MOV         R8,R4
    000003C4 DA39                   MOV.L       L909+20,R10; _Bdisp_PutDisp_DD
    000003C6 7F10                   ADD         #16,R15
    000003C8 DB39                   MOV.L       L909+24,R11; _Bdisp_AllClr_DDVRAM
    000003CA 9C67                   MOV.W       L909+4,R12 ; H'0208
    000003CC DD39                   MOV.L       L909+28,R13; _PrintMini
    000003CE 3CFC                   ADD         R15,R12
    000003D0 63F2                   MOV.L       @R15,R3
    000003D2 73FF                   ADD         #-1,R3
    000003D4 4308                   SHLL2       R3
      simplexC.c   255        while(menuChoice!=EXIT_OPT)
    000003D6 A040                   BRA         L800
    000003D8 1F31                   MOV.L       R3,@(4,R15)
    000003DA              L801:                             
      simplexC.c   256        {
      simplexC.c   257            Bdisp_AllClr_DDVRAM();
    000003DA 4B0B                   JSR         @R11
    000003DC 0009                   NOP
      simplexC.c   258            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000003DE E710                   MOV         #16,R7
    000003E0 6683                   MOV         R8,R6
    000003E2 E500                   MOV         #0,R5
    000003E4 4D0B                   JSR         @R13
    000003E6 6453                   MOV         R5,R4
      simplexC.c   259            menuChoice=InputI(0,7);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E8 E507                   MOV         #7,R5
    000003EA BE1E                   BSR         _InputI
    000003EC E400                   MOV         #0,R4
      simplexC.c   260            Bdisp_PutDisp_DD();
    000003EE 4A0B                   JSR         @R10
    000003F0 6E03                   MOV         R0,R14
      simplexC.c   261            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000003F2 2EE8                   TST         R14,R14
    000003F4 8931                   BT          L800
    000003F6 5396                   MOV.L       @(24,R9),R3
    000003F8 3E37                   CMP/GT      R3,R14
    000003FA 892E                   BT          L800
      simplexC.c   262            {
      simplexC.c   263                Bdisp_AllClr_DDVRAM();
    000003FC 4B0B                   JSR         @R11
    000003FE 0009                   NOP
      simplexC.c   264                sprintf(stroutVariable, "Ax%d. %.2f Pos %d",varId,pS->ajVector[varId-1][menuChoice-1],menuChoi
                         +ce);
    00000400 2FE6                   MOV.L       R14,@-R15
    00000402 E04C                   MOV         #76,R0
    00000404 53F2                   MOV.L       @(8,R15),R3
    00000406 61E3                   MOV         R14,R1
    00000408 009E                   MOV.L       @(R0,R9),R0
    0000040A 71FF                   ADD         #-1,R1
    0000040C 023E                   MOV.L       @(R0,R3),R2
    0000040E 4108                   SHLL2       R1
    00000410 4100                   SHLL        R1
    00000412 321C                   ADD         R1,R2
    00000414 5021                   MOV.L       @(4,R2),R0
    00000416 2F06                   MOV.L       R0,@-R15
    00000418 6022                   MOV.L       @R2,R0
    0000041A 2F06                   MOV.L       R0,@-R15
    0000041C 51F3                   MOV.L       @(12,R15),R1
    0000041E 2F16                   MOV.L       R1,@-R15
    00000420 D225                   MOV.L       L909+32,R2 ; L508
    00000422 2F26                   MOV.L       R2,@-R15
    00000424 D120                   MOV.L       L909+16,R1 ; _sprintf
    00000426 410B                   JSR         @R1
    00000428 64C3                   MOV         R12,R4
    0000042A 7F14                   ADD         #20,R15
      simplexC.c   265                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    0000042C E710                   MOV         #16,R7
    0000042E 66C3                   MOV         R12,R6
    00000430 E500                   MOV         #0,R5
    00000432 4D0B                   JSR         @R13
    00000434 6453                   MOV         R5,R4
      simplexC.c   266                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000436 E710                   MOV         #16,R7
    00000438 D620                   MOV.L       L909+36,R6 ; L496
    0000043A E507                   MOV         #7,R5
    0000043C 4D0B                   JSR         @R13
    0000043E E400                   MOV         #0,R4
      simplexC.c   267                string_input(0, 14, uselessSring);
    00000440 D31F                   MOV.L       L909+40,R3 ; _string_input
    00000442 66F3                   MOV         R15,R6
    00000444 7608                   ADD         #8,R6
    00000446 E50E                   MOV         #14,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000448 430B                   JSR         @R3
    0000044A E400                   MOV         #0,R4
      simplexC.c   268                Bdisp_PutDisp_DD();
    0000044C 4A0B                   JSR         @R10
    0000044E 0009                   NOP
      simplexC.c   269                memset(stroutVariable,0,128);
    00000450 9625                   MOV.W       L909+6,R6  ; H'0080
    00000452 E500                   MOV         #0,R5
    00000454 D21B                   MOV.L       L909+44,R2 ; _memset
    00000456 420B                   JSR         @R2
    00000458 64C3                   MOV         R12,R4
    0000045A              L800:                             
    0000045A 2EE8                   TST         R14,R14
    0000045C 8BBD                   BF          L801
      simplexC.c   270            }
      simplexC.c   271        }
      simplexC.c   272        return 0;
    0000045E E000                   MOV         #0,R0
      simplexC.c   273    }
    00000460 911E                   MOV.W       L909+8,R1  ; H'0308
    00000462 3F1C                   ADD         R1,R15
    00000464 4F26                   LDS.L       @R15+,PR
    00000466 68F6                   MOV.L       @R15+,R8
    00000468 69F6                   MOV.L       @R15+,R9
    0000046A 6AF6                   MOV.L       @R15+,R10
    0000046C 6BF6                   MOV.L       @R15+,R11
    0000046E 6CF6                   MOV.L       @R15+,R12
    00000470 6DF6                   MOV.L       @R15+,R13
    00000472 000B                   RTS
    00000474 6EF6                   MOV.L       @R15+,R14
      simplexC.c   274    
      simplexC.c   275    int printAjVec(struct problemStatement* pS)
    00000476              _printAjVec:                     ; function: printAjVec
                                                           ; frame size=172
    00000476 2FE6                   MOV.L       R14,@-R15
    00000478 2FD6                   MOV.L       R13,@-R15
      simplexC.c   276    {
      simplexC.c   277        char stroutBasicInfo[128];
      simplexC.c   278        int menuChoice;
      simplexC.c   279        menuChoice=INITIALIZE_VALUE_OPT;
    0000047A EEFF                   MOV         #-1,R14
    0000047C 2FC6                   MOV.L       R12,@-R15
    0000047E 6D43                   MOV         R4,R13
    00000480 2FB6                   MOV.L       R11,@-R15
    00000482 2FA6                   MOV.L       R10,@-R15
    00000484 2F96                   MOV.L       R9,@-R15
    00000486 2F86                   MOV.L       R8,@-R15
    00000488 4F22                   STS.L       PR,@-R15
    0000048A 7F80                   ADD         #-128,R15
    0000048C D809                   MOV.L       L909+28,R8 ; _PrintMini
    0000048E D906                   MOV.L       L909+16,R9 ; _sprintf
    00000490 DA0D                   MOV.L       L909+48,R10; L516
    00000492 DB07                   MOV.L       L909+24,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   280        while(menuChoice!=EXIT_OPT)
    00000494 A037                   BRA         L804
    00000496 6CF3                   MOV         R15,R12
    00000498              L909:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000498 FCF8                   .DATA.W     H'FCF8
    0000049A 0288                   .DATA.W     H'0288
    0000049C 0208                   .DATA.W     H'0208
    0000049E 0080                   .DATA.W     H'0080
    000004A0 0308                   .DATA.W     H'0308
    000004A2 0000                   .DATA.W     0
    000004A4 <00000000>             .DATA.L     L505
    000004A8 <00000000>             .DATA.L     _sprintf
    000004AC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000004B0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000004B4 <00000000>             .DATA.L     _PrintMini
    000004B8 <00000000>             .DATA.L     L508
    000004BC <00000000>             .DATA.L     L496
    000004C0 <00000000>             .DATA.L     _string_input
    000004C4 <00000000>             .DATA.L     _memset
    000004C8 <00000000>             .DATA.L     L516
    000004CC              L805:                             
      simplexC.c   281        {
      simplexC.c   282            Bdisp_AllClr_DDVRAM();
    000004CC 4B0B                   JSR         @R11
    000004CE 0009                   NOP
      simplexC.c   283            sprintf(stroutBasicInfo, "Axj pMenu Vars %d.  %d exit",pS->nVariables,EXIT_OPT);
    000004D0 E200                   MOV         #0,R2
    000004D2 2F26                   MOV.L       R2,@-R15
    000004D4 53D6                   MOV.L       @(24,R13),R3
    000004D6 2F36                   MOV.L       R3,@-R15
    000004D8 2FA6                   MOV.L       R10,@-R15
    000004DA 490B                   JSR         @R9
    000004DC 64C3                   MOV         R12,R4
    000004DE 7F0C                   ADD         #12,R15
      simplexC.c   284            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000004E0 E710                   MOV         #16,R7
    000004E2 66C3                   MOV         R12,R6
    000004E4 E500                   MOV         #0,R5
    000004E6 480B                   JSR         @R8
    000004E8 6453                   MOV         R5,R4
      simplexC.c   285            menuChoice = InputI(0, 7);
    000004EA E507                   MOV         #7,R5
    000004EC BD9D                   BSR         _InputI
    000004EE E400                   MOV         #0,R4
      simplexC.c   286            Bdisp_PutDisp_DD();
    000004F0 D32B                   MOV.L       L910+10,R3 ; _Bdisp_PutDisp_DD
    000004F2 430B                   JSR         @R3
    000004F4 6E03                   MOV         R0,R14
      simplexC.c   287            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000004F6 2EE8                   TST         R14,R14
    000004F8 8905                   BT          L804
    000004FA 53D6                   MOV.L       @(24,R13),R3
    000004FC 3E37                   CMP/GT      R3,R14
    000004FE 8902                   BT          L804
      simplexC.c   288            {
      simplexC.c   289                printAjVal(pS,menuChoice);
    00000500 65E3                   MOV         R14,R5
    00000502 BF45                   BSR         _printAjVal
    00000504 64D3                   MOV         R13,R4
    00000506              L804:                             
    00000506 2EE8                   TST         R14,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000508 8BE0                   BF          L805
      simplexC.c   290            }
      simplexC.c   291        }
      simplexC.c   292        return 0;
    0000050A E000                   MOV         #0,R0
      simplexC.c   293    }
    0000050C 9143                   MOV.W       L910,R1    ; H'0080
    0000050E 3F1C                   ADD         R1,R15
    00000510 4F26                   LDS.L       @R15+,PR
    00000512 68F6                   MOV.L       @R15+,R8
    00000514 69F6                   MOV.L       @R15+,R9
    00000516 6AF6                   MOV.L       @R15+,R10
    00000518 6BF6                   MOV.L       @R15+,R11
    0000051A 6CF6                   MOV.L       @R15+,R12
    0000051C 6DF6                   MOV.L       @R15+,R13
    0000051E 000B                   RTS
    00000520 6EF6                   MOV.L       @R15+,R14
      simplexC.c   294    
      simplexC.c   295    int printStatementMenu(struct problemStatement* pS)
    00000522              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
      simplexC.c   296    {
      simplexC.c   297        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   298        int menuChoice;
      simplexC.c   299        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   300        sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"S
                         +OLVE", EXIT_OPT);
    00000522 E300                   MOV         #0,R3
    00000524 2FE6                   MOV.L       R14,@-R15
    00000526 6E43                   MOV         R4,R14
    00000528 2FD6                   MOV.L       R13,@-R15
    0000052A 2FC6                   MOV.L       R12,@-R15
    0000052C 2FB6                   MOV.L       R11,@-R15
    0000052E 2FA6                   MOV.L       R10,@-R15
    00000530 2F96                   MOV.L       R9,@-R15
    00000532 2F86                   MOV.L       R8,@-R15
    00000534 4F22                   STS.L       PR,@-R15
    00000536 902F                   MOV.W       L910+2,R0  ; H'FE80
    00000538 DD1A                   MOV.L       L910+14,R13; _sprintf
    0000053A 3F0C                   ADD         R0,R15
    0000053C 9A2D                   MOV.W       L910+4,R10 ; H'0100
    0000053E 3AFC                   ADD         R15,R10
    00000540 2F36                   MOV.L       R3,@-R15
    00000542 50E1                   MOV.L       @(4,R14),R0
    00000544 8801                   CMP/EQ      #1,R0
    00000546 8F03                   BF/S        L808
    00000548 ECFF                   MOV         #-1,R12
    0000054A D117                   MOV.L       L910+18,R1 ; L483
    0000054C A002                   BRA         L809
    0000054E 2F16                   MOV.L       R1,@-R15
    00000550              L808:                             
    00000550 D216                   MOV.L       L910+22,R2 ; L484
    00000552 2F26                   MOV.L       R2,@-R15
    00000554              L809:                             
    00000554 D116                   MOV.L       L910+26,R1 ; L525
    00000556 2F16                   MOV.L       R1,@-R15
    00000558 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000055A 64A3                   MOV         R10,R4
      simplexC.c   301        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    0000055C 991E                   MOV.W       L910+6,R9  ; H'008C
    0000055E 39FC                   ADD         R15,R9
    00000560 53E6                   MOV.L       @(24,R14),R3
    00000562 2F36                   MOV.L       R3,@-R15
    00000564 52EA                   MOV.L       @(40,R14),R2
    00000566 2F26                   MOV.L       R2,@-R15
    00000568 D312                   MOV.L       L910+30,R3 ; L485
    0000056A 2F36                   MOV.L       R3,@-R15
    0000056C 4D0B                   JSR         @R13
    0000056E 6493                   MOV         R9,R4
    00000570 7F18                   ADD         #24,R15
      simplexC.c   302    
      simplexC.c   303        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000572 50E1                   MOV.L       @(4,R14),R0
    00000574 8802                   CMP/EQ      #2,R0
    00000576 8F06                   BF/S        L810
    00000578 6BF3                   MOV         R15,R11
    0000057A 53E2                   MOV.L       @(8,R14),R3
    0000057C 2338                   TST         R3,R3
    0000057E 8902                   BT          L810
      simplexC.c   304        {
      simplexC.c   305            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000580 D30D                   MOV.L       L910+34,R3 ; L527
    00000582 A001                   BRA         L903
    00000584 0009                   NOP
    00000586              L810:                             
      simplexC.c   306        }else
      simplexC.c   307        {
      simplexC.c   308            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000586 D30D                   MOV.L       L910+38,R3 ; L529
    00000588              L903:                             
    00000588 2F36                   MOV.L       R3,@-R15
    0000058A 4D0B                   JSR         @R13
    0000058C 64B3                   MOV         R11,R4
    0000058E D80C                   MOV.L       L910+42,R8 ; _Bdisp_AllClr_DDVRAM
    00000590 DD0C                   MOV.L       L910+46,R13; _PrintMini
      simplexC.c   309        }
      simplexC.c   310        
      simplexC.c   311        while(menuChoice!=EXIT_OPT)
    00000592 A05E                   BRA         L812
    00000594 7F04                   ADD         #4,R15
    00000596              L910:                             
    00000596 0080                   .DATA.W     H'0080
    00000598 FE80                   .DATA.W     H'FE80
    0000059A 0100                   .DATA.W     H'0100
    0000059C 008C                   .DATA.W     H'008C
    0000059E 0000                   .DATA.W     0
    000005A0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000005A4 <00000000>             .DATA.L     _sprintf
    000005A8 <00000000>             .DATA.L     L483
    000005AC <00000000>             .DATA.L     L484
    000005B0 <00000000>             .DATA.L     L525
    000005B4 <00000000>             .DATA.L     L485
    000005B8 <00000000>             .DATA.L     L527
    000005BC <00000000>             .DATA.L     L529




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005C0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000005C4 <00000000>             .DATA.L     _PrintMini
    000005C8              L813:                             
      simplexC.c   312        {
      simplexC.c   313            Bdisp_AllClr_DDVRAM();
    000005C8 480B                   JSR         @R8
    000005CA 0009                   NOP
      simplexC.c   314            
      simplexC.c   315            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000005CC E710                   MOV         #16,R7
    000005CE 66A3                   MOV         R10,R6
    000005D0 E500                   MOV         #0,R5
    000005D2 4D0B                   JSR         @R13
    000005D4 6453                   MOV         R5,R4
      simplexC.c   316            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000005D6 E710                   MOV         #16,R7
    000005D8 6693                   MOV         R9,R6
    000005DA E507                   MOV         #7,R5
    000005DC 4D0B                   JSR         @R13
    000005DE E400                   MOV         #0,R4
      simplexC.c   317            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    000005E0 D630                   MOV.L       L911+8,R6  ; L531
    000005E2 E50E                   MOV         #14,R5
    000005E4 E710                   MOV         #16,R7
    000005E6 4D0B                   JSR         @R13
    000005E8 E400                   MOV         #0,R4
      simplexC.c   318            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    000005EA E710                   MOV         #16,R7
    000005EC 66B3                   MOV         R11,R6
    000005EE E515                   MOV         #21,R5
    000005F0 4D0B                   JSR         @R13
    000005F2 E400                   MOV         #0,R4
      simplexC.c   319            if(pS->modelType==TYPE_SOLVE)
    000005F4 50E1                   MOV.L       @(4,R14),R0
    000005F6 8802                   CMP/EQ      #2,R0
    000005F8 8B04                   BF          L814
      simplexC.c   320            {
      simplexC.c   321                PrintMini(0, 14, (unsigned char*)"4 Pinfo aj vec", MINI_OVER);
    000005FA E710                   MOV         #16,R7
    000005FC D62A                   MOV.L       L911+12,R6 ; L533
    000005FE E50E                   MOV         #14,R5
    00000600 4D0B                   JSR         @R13
    00000602 E400                   MOV         #0,R4
    00000604              L814:                             
      simplexC.c   322            }
      simplexC.c   323            menuChoice = InputI(0, 35);
    00000604 E523                   MOV         #35,R5
    00000606 BD10                   BSR         _InputI
    00000608 E400                   MOV         #0,R4
      simplexC.c   324            Bdisp_PutDisp_DD();
    0000060A D328                   MOV.L       L911+16,R3 ; _Bdisp_PutDisp_DD
    0000060C 430B                   JSR         @R3
    0000060E 6C03                   MOV         R0,R12
      simplexC.c   325            switch (menuChoice)
    00000610 60C3                   MOV         R12,R0
    00000612 8801                   CMP/EQ      #1,R0
    00000614 8907                   BT          L729




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000616 8802                   CMP/EQ      #2,R0
    00000618 8909                   BT          L730
    0000061A 8803                   CMP/EQ      #3,R0
    0000061C 890C                   BT          L731
    0000061E 8804                   CMP/EQ      #4,R0
    00000620 8912                   BT          L732
    00000622 A016                   BRA         L812
    00000624 0009                   NOP
    00000626              L729:                            ; case label 
      simplexC.c   326            {
      simplexC.c   327            case 1: printAllConstraintsMenu(pS);break;
    00000626 B1C8                   BSR         _printAllConstraintsMenu
    00000628 64E3                   MOV         R14,R4
    0000062A A012                   BRA         L812
    0000062C 0009                   NOP
    0000062E              L730:                            ; case label 
      simplexC.c   328            case 2: printObjFunc(pS,TYPE_INPUT);break;
    0000062E E501                   MOV         #1,R5
    00000630 BDB6                   BSR         _printObjFunc
    00000632 64E3                   MOV         R14,R4
    00000634 A00D                   BRA         L812
    00000636 0009                   NOP
    00000638              L731:                            ; case label 
      simplexC.c   329            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    00000638 50E1                   MOV.L       @(4,R14),R0
    0000063A 8802                   CMP/EQ      #2,R0
    0000063C 8B09                   BF          L812
    0000063E E502                   MOV         #2,R5
    00000640 BDAE                   BSR         _printObjFunc
    00000642 64E3                   MOV         R14,R4
    00000644 A005                   BRA         L812
    00000646 0009                   NOP
    00000648              L732:                            ; case label 
      simplexC.c   330            case 4: if(pS->modelType==TYPE_SOLVE){printAjVec(pS);};break;
    00000648 50E1                   MOV.L       @(4,R14),R0
    0000064A 8802                   CMP/EQ      #2,R0
    0000064C 8B01                   BF          L812
    0000064E BF12                   BSR         _printAjVec
    00000650 64E3                   MOV         R14,R4
      simplexC.c   331            default: break;
    00000652              L812:                             
    00000652 2CC8                   TST         R12,R12
    00000654 8BB8                   BF          L813
      simplexC.c   332            }
      simplexC.c   333        }
      simplexC.c   334        return 0;
    00000656 E000                   MOV         #0,R0
      simplexC.c   335    }
    00000658 9120                   MOV.W       L911,R1    ; H'0180
    0000065A 3F1C                   ADD         R1,R15
    0000065C 4F26                   LDS.L       @R15+,PR
    0000065E 68F6                   MOV.L       @R15+,R8
    00000660 69F6                   MOV.L       @R15+,R9
    00000662 6AF6                   MOV.L       @R15+,R10
    00000664 6BF6                   MOV.L       @R15+,R11
    00000666 6CF6                   MOV.L       @R15+,R12
    00000668 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000066A 000B                   RTS
    0000066C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   336    
      simplexC.c   337    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    0000066E              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
    0000066E 6343                   MOV         R4,R3
    00000670 2FE6                   MOV.L       R14,@-R15
    00000672 73FF                   ADD         #-1,R3
    00000674 9013                   MOV.W       L911+2,R0  ; H'FCF8
    00000676 4308                   SHLL2       R3
    00000678 2FD6                   MOV.L       R13,@-R15
      simplexC.c   338    {
      simplexC.c   339        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   340        char *uselessSring[128];
      simplexC.c   341        int menuChoice;
      simplexC.c   342        int lengthString;
      simplexC.c   343        lengthString=0;
    0000067A ED00                   MOV         #0,R13
    0000067C 9E10                   MOV.W       L911+4,R14 ; H'0208
    0000067E 2FC6                   MOV.L       R12,@-R15
    00000680 2FB6                   MOV.L       R11,@-R15
      simplexC.c   344        menuChoice=INITIALIZE_VALUE_OPT;
    00000682 EBFF                   MOV         #-1,R11
    00000684 DC0B                   MOV.L       L911+24,R12; _sprintf
    00000686 2FA6                   MOV.L       R10,@-R15
    00000688 2F96                   MOV.L       R9,@-R15
    0000068A 6A53                   MOV         R5,R10
    0000068C 2F86                   MOV.L       R8,@-R15
    0000068E 4F22                   STS.L       PR,@-R15
    00000690 D907                   MOV.L       L911+20,R9 ; _PrintMini
    00000692 3F0C                   ADD         R0,R15
    00000694 2F42                   MOV.L       R4,@R15
    00000696 3EFC                   ADD         R15,R14
      simplexC.c   345        
      simplexC.c   346        while(menuChoice!=EXIT_OPT)
    00000698 A08B                   BRA         L819
    0000069A 1F31                   MOV.L       R3,@(4,R15)
    0000069C              L911:                             
    0000069C 0180                   .DATA.W     H'0180
    0000069E FCF8                   .DATA.W     H'FCF8
    000006A0 0208                   .DATA.W     H'0208
    000006A2 0000                   .DATA.W     0
    000006A4 <00000000>             .DATA.L     L531
    000006A8 <00000000>             .DATA.L     L533
    000006AC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000006B0 <00000000>             .DATA.L     _PrintMini
    000006B4 <00000000>             .DATA.L     _sprintf
    000006B8              L820:                             
      simplexC.c   347        {
      simplexC.c   348            Bdisp_AllClr_DDVRAM();
    000006B8 D147                   MOV.L       L912+10,R1 ; _Bdisp_AllClr_DDVRAM
    000006BA 410B                   JSR         @R1
    000006BC 0009                   NOP
      simplexC.c   349            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    000006BE E200                   MOV         #0,R2
    000006C0 9485                   MOV.W       L912,R4    ; H'0298




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006C2 2F26                   MOV.L       R2,@-R15
    000006C4 53A6                   MOV.L       @(24,R10),R3
    000006C6 2F36                   MOV.L       R3,@-R15
    000006C8 51F2                   MOV.L       @(8,R15),R1
    000006CA 2F16                   MOV.L       R1,@-R15
    000006CC D343                   MOV.L       L912+14,R3 ; L548
    000006CE 2F36                   MOV.L       R3,@-R15
    000006D0 4C0B                   JSR         @R12
    000006D2 34FC                   ADD         R15,R4
      simplexC.c   350            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000006D4 967C                   MOV.W       L912+2,R6  ; H'0288
    000006D6 E500                   MOV         #0,R5
    000006D8 7F10                   ADD         #16,R15
    000006DA E710                   MOV         #16,R7
    000006DC 36FC                   ADD         R15,R6
    000006DE 490B                   JSR         @R9
    000006E0 6453                   MOV         R5,R4
      simplexC.c   351            menuChoice=InputI(0,7);
    000006E2 E507                   MOV         #7,R5
    000006E4 BCA1                   BSR         _InputI
    000006E6 E400                   MOV         #0,R4
      simplexC.c   352            Bdisp_PutDisp_DD();
    000006E8 D33D                   MOV.L       L912+18,R3 ; _Bdisp_PutDisp_DD
    000006EA 430B                   JSR         @R3
    000006EC 6B03                   MOV         R0,R11
      simplexC.c   353            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000006EE 2BB8                   TST         R11,R11
    000006F0 895F                   BT          L819
    000006F2 53A6                   MOV.L       @(24,R10),R3
    000006F4 3B37                   CMP/GT      R3,R11
    000006F6 895C                   BT          L819
      simplexC.c   354            {
      simplexC.c   355                Bdisp_AllClr_DDVRAM();
    000006F8 D137                   MOV.L       L912+10,R1 ; _Bdisp_AllClr_DDVRAM
    000006FA 410B                   JSR         @R1
    000006FC 0009                   NOP
      simplexC.c   356                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    000006FE 61B3                   MOV         R11,R1
    00000700 2FB6                   MOV.L       R11,@-R15
    00000702 64D3                   MOV         R13,R4
    00000704 53F2                   MOV.L       @(8,R15),R3
    00000706 71FF                   ADD         #-1,R1
    00000708 50A3                   MOV.L       @(12,R10),R0
    0000070A 4108                   SHLL2       R1
    0000070C 023E                   MOV.L       @(R0,R3),R2
    0000070E 4100                   SHLL        R1
    00000710 321C                   ADD         R1,R2
    00000712 5021                   MOV.L       @(4,R2),R0
    00000714 2F06                   MOV.L       R0,@-R15
    00000716 6022                   MOV.L       @R2,R0
    00000718 D232                   MOV.L       L912+22,R2 ; L550
    0000071A 2F06                   MOV.L       R0,@-R15
    0000071C 51F3                   MOV.L       @(12,R15),R1
    0000071E 2F16                   MOV.L       R1,@-R15
    00000720 2F26                   MOV.L       R2,@-R15
    00000722 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000724 34EC                   ADD         R14,R4
    00000726 7F14                   ADD         #20,R15
    00000728 BD0E                   BSR         _lengthConcatenate
    0000072A 6403                   MOV         R0,R4
    0000072C 3D0C                   ADD         R0,R13
    0000072E 68B3                   MOV         R11,R8
    00000730 50AC                   MOV.L       @(48,R10),R0
    00000732 78FF                   ADD         #-1,R8
    00000734 4808                   SHLL2       R8
    00000736 038E                   MOV.L       @(R0,R8),R3
    00000738 2338                   TST         R3,R3
    0000073A 8908                   BT          L822
      simplexC.c   357    
      simplexC.c   358                if(pS->idSlopeVariables[menuChoice-1])
      simplexC.c   359                {
      simplexC.c   360                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    0000073C D12A                   MOV.L       L912+26,R1 ; L552
    0000073E 64D3                   MOV         R13,R4
    00000740 2F16                   MOV.L       R1,@-R15
    00000742 4C0B                   JSR         @R12
    00000744 34EC                   ADD         R14,R4
    00000746 7F04                   ADD         #4,R15
    00000748 BCFE                   BSR         _lengthConcatenate
    0000074A 6403                   MOV         R0,R4
    0000074C 3D0C                   ADD         R0,R13
    0000074E              L822:                             
      simplexC.c   361                }
      simplexC.c   362                if(pS->id2fasesVariables[menuChoice-1])
    0000074E 50AD                   MOV.L       @(52,R10),R0
    00000750 028E                   MOV.L       @(R0,R8),R2
    00000752 2228                   TST         R2,R2
    00000754 8908                   BT          L823
      simplexC.c   363                {
      simplexC.c   364                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    00000756 64D3                   MOV         R13,R4
    00000758 D124                   MOV.L       L912+30,R1 ; L554
    0000075A 2F16                   MOV.L       R1,@-R15
    0000075C 4C0B                   JSR         @R12
    0000075E 34EC                   ADD         R14,R4
    00000760 7F04                   ADD         #4,R15
    00000762 BCF1                   BSR         _lengthConcatenate
    00000764 6403                   MOV         R0,R4
    00000766 3D0C                   ADD         R0,R13
    00000768              L823:                             
      simplexC.c   365                }
      simplexC.c   366                if(pS->idIntegerVariables[menuChoice-1])
    00000768 50AB                   MOV.L       @(44,R10),R0
    0000076A 028E                   MOV.L       @(R0,R8),R2
    0000076C 2228                   TST         R2,R2
    0000076E 8907                   BT          L824
      simplexC.c   367                {
      simplexC.c   368                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000770 D11F                   MOV.L       L912+34,R1 ; L556
    00000772 64D3                   MOV         R13,R4
    00000774 2F16                   MOV.L       R1,@-R15
    00000776 4C0B                   JSR         @R12
    00000778 34EC                   ADD         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000077A 7F04                   ADD         #4,R15
    0000077C BCE4                   BSR         _lengthConcatenate
    0000077E 6403                   MOV         R0,R4
    00000780              L824:                             
      simplexC.c   369                }
      simplexC.c   370                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000780 E710                   MOV         #16,R7
    00000782 66E3                   MOV         R14,R6
    00000784 E500                   MOV         #0,R5
    00000786 490B                   JSR         @R9
    00000788 6453                   MOV         R5,R4
      simplexC.c   371                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    0000078A E710                   MOV         #16,R7
    0000078C D619                   MOV.L       L912+38,R6 ; L496
    0000078E E507                   MOV         #7,R5
    00000790 490B                   JSR         @R9
    00000792 E400                   MOV         #0,R4
      simplexC.c   372                string_input(0, 14, uselessSring);
    00000794 D218                   MOV.L       L912+42,R2 ; _string_input
    00000796 66F3                   MOV         R15,R6
    00000798 7608                   ADD         #8,R6
    0000079A E50E                   MOV         #14,R5
    0000079C 420B                   JSR         @R2
    0000079E E400                   MOV         #0,R4
      simplexC.c   373                Bdisp_PutDisp_DD();
    000007A0 D30F                   MOV.L       L912+18,R3 ; _Bdisp_PutDisp_DD
    000007A2 430B                   JSR         @R3
    000007A4 0009                   NOP
      simplexC.c   374                memset(stroutVariable,0,128);
    000007A6 E500                   MOV         #0,R5
    000007A8 D214                   MOV.L       L912+46,R2 ; _memset
    000007AA 9612                   MOV.W       L912+4,R6  ; H'0080
    000007AC 420B                   JSR         @R2
    000007AE 64E3                   MOV         R14,R4
      simplexC.c   375                lengthString=0;
    000007B0 ED00                   MOV         #0,R13
    000007B2              L819:                             
    000007B2 2BB8                   TST         R11,R11
    000007B4 8B80                   BF          L820
      simplexC.c   376            }
      simplexC.c   377        }
      simplexC.c   378        return 0;
    000007B6 E000                   MOV         #0,R0
      simplexC.c   379    }
    000007B8 910C                   MOV.W       L912+6,R1  ; H'0308
    000007BA 3F1C                   ADD         R1,R15
    000007BC 4F26                   LDS.L       @R15+,PR
    000007BE 68F6                   MOV.L       @R15+,R8
    000007C0 69F6                   MOV.L       @R15+,R9
    000007C2 6AF6                   MOV.L       @R15+,R10
    000007C4 6BF6                   MOV.L       @R15+,R11
    000007C6 6CF6                   MOV.L       @R15+,R12
    000007C8 6DF6                   MOV.L       @R15+,R13
    000007CA 000B                   RTS
    000007CC 6EF6                   MOV.L       @R15+,R14
    000007CE              L912:                             
    000007CE 0298                   .DATA.W     H'0298




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007D0 0288                   .DATA.W     H'0288
    000007D2 0080                   .DATA.W     H'0080
    000007D4 0308                   .DATA.W     H'0308
    000007D6 0000                   .DATA.W     0
    000007D8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000007DC <00000000>             .DATA.L     L548
    000007E0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000007E4 <00000000>             .DATA.L     L550
    000007E8 <00000000>             .DATA.L     L552
    000007EC <00000000>             .DATA.L     L554
    000007F0 <00000000>             .DATA.L     L556
    000007F4 <00000000>             .DATA.L     L496
    000007F8 <00000000>             .DATA.L     _string_input
    000007FC <00000000>             .DATA.L     _memset
      simplexC.c   380    
      simplexC.c   381    int printIne(int contsId, struct problemStatement* pS)
    00000800              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000800 4F22                   STS.L       PR,@-R15
    00000802 9075                   MOV.W       L913,R0    ; H'FD78
      simplexC.c   382    {
      simplexC.c   383        char stroutBasicInfo[128];
      simplexC.c   384        char *uselessSring[128];
      simplexC.c   385        Bdisp_AllClr_DDVRAM();
    00000804 D33D                   MOV.L       L913+12,R3 ; _Bdisp_AllClr_DDVRAM
    00000806 3F0C                   ADD         R0,R15
    00000808 2F42                   MOV.L       R4,@R15
    0000080A 430B                   JSR         @R3
    0000080C 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   386        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    0000080E 50F1                   MOV.L       @(4,R15),R0
    00000810 64F2                   MOV.L       @R15,R4
    00000812 74FF                   ADD         #-1,R4
    00000814 5005                   MOV.L       @(20,R0),R0
    00000816 4408                   SHLL2       R4
    00000818 BC9D                   BSR         _getInequalityChar
    0000081A 044E                   MOV.L       @(R0,R4),R4
    0000081C 2F06                   MOV.L       R0,@-R15
    0000081E 52F1                   MOV.L       @(4,R15),R2
    00000820 D337                   MOV.L       L913+16,R3 ; L563
    00000822 2F26                   MOV.L       R2,@-R15
    00000824 2F36                   MOV.L       R3,@-R15
    00000826 9464                   MOV.W       L913+2,R4  ; H'0214
    00000828 D236                   MOV.L       L913+20,R2 ; _sprintf
    0000082A 420B                   JSR         @R2
    0000082C 34FC                   ADD         R15,R4
      simplexC.c   387        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000082E E710                   MOV         #16,R7
    00000830 965F                   MOV.W       L913+2,R6  ; H'0214
    00000832 E500                   MOV         #0,R5
    00000834 D334                   MOV.L       L913+24,R3 ; _PrintMini
    00000836 36FC                   ADD         R15,R6
    00000838 430B                   JSR         @R3
    0000083A 6453                   MOV         R5,R4
      simplexC.c   388        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    0000083C D633                   MOV.L       L913+28,R6 ; L496




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000083E E507                   MOV         #7,R5
    00000840 D231                   MOV.L       L913+24,R2 ; _PrintMini
    00000842 E710                   MOV         #16,R7
    00000844 420B                   JSR         @R2
    00000846 E400                   MOV         #0,R4
      simplexC.c   389        string_input(0, 14, uselessSring);
    00000848 D331                   MOV.L       L913+32,R3 ; _string_input
    0000084A 66F3                   MOV         R15,R6
    0000084C 7614                   ADD         #20,R6
    0000084E E50E                   MOV         #14,R5
    00000850 430B                   JSR         @R3
    00000852 E400                   MOV         #0,R4
      simplexC.c   390        Bdisp_PutDisp_DD();
    00000854 D22F                   MOV.L       L913+36,R2 ; _Bdisp_PutDisp_DD
    00000856 420B                   JSR         @R2
    00000858 0009                   NOP
      simplexC.c   391        return 0;
      simplexC.c   392    }
    0000085A 914B                   MOV.W       L913+4,R1  ; H'0294
    0000085C 3F1C                   ADD         R1,R15
    0000085E 4F26                   LDS.L       @R15+,PR
    00000860 000B                   RTS
    00000862 E000                   MOV         #0,R0
      simplexC.c   393    
      simplexC.c   394    int printRVal(int contsId, struct problemStatement* pS)
    00000864              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
    00000864 4F22                   STS.L       PR,@-R15
    00000866 9043                   MOV.W       L913,R0    ; H'FD78
      simplexC.c   395    {
      simplexC.c   396        char stroutBasicInfo[128];
      simplexC.c   397        char *uselessSring[128];
      simplexC.c   398        Bdisp_AllClr_DDVRAM();
    00000868 D324                   MOV.L       L913+12,R3 ; _Bdisp_AllClr_DDVRAM
    0000086A 3F0C                   ADD         R0,R15
    0000086C 2F42                   MOV.L       R4,@R15
    0000086E 430B                   JSR         @R3
    00000870 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   399        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    00000872 52F1                   MOV.L       @(4,R15),R2
    00000874 63F2                   MOV.L       @R15,R3
    00000876 73FF                   ADD         #-1,R3
    00000878 5224                   MOV.L       @(16,R2),R2
    0000087A 4308                   SHLL2       R3
    0000087C 943B                   MOV.W       L913+6,R4  ; H'0218
    0000087E 4300                   SHLL        R3
    00000880 332C                   ADD         R2,R3
    00000882 5131                   MOV.L       @(4,R3),R1
    00000884 2F16                   MOV.L       R1,@-R15
    00000886 6132                   MOV.L       @R3,R1
    00000888 D323                   MOV.L       L913+40,R3 ; L570
    0000088A 2F16                   MOV.L       R1,@-R15
    0000088C 52F2                   MOV.L       @(8,R15),R2
    0000088E 2F26                   MOV.L       R2,@-R15
    00000890 2F36                   MOV.L       R3,@-R15
    00000892 D21C                   MOV.L       L913+20,R2 ; _sprintf
    00000894 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000896 34FC                   ADD         R15,R4
      simplexC.c   400        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000898 962D                   MOV.W       L913+6,R6  ; H'0218
    0000089A E500                   MOV         #0,R5
    0000089C D31A                   MOV.L       L913+24,R3 ; _PrintMini
    0000089E E710                   MOV         #16,R7
    000008A0 36FC                   ADD         R15,R6
    000008A2 430B                   JSR         @R3
    000008A4 6453                   MOV         R5,R4
      simplexC.c   401        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    000008A6 E710                   MOV         #16,R7
    000008A8 D618                   MOV.L       L913+28,R6 ; L496
    000008AA E507                   MOV         #7,R5
    000008AC D216                   MOV.L       L913+24,R2 ; _PrintMini
    000008AE 420B                   JSR         @R2
    000008B0 E400                   MOV         #0,R4
      simplexC.c   402        string_input(0, 14, uselessSring);
    000008B2 66F3                   MOV         R15,R6
    000008B4 D316                   MOV.L       L913+32,R3 ; _string_input
    000008B6 E50E                   MOV         #14,R5
    000008B8 7618                   ADD         #24,R6
    000008BA 430B                   JSR         @R3
    000008BC E400                   MOV         #0,R4
      simplexC.c   403        Bdisp_PutDisp_DD();
    000008BE D215                   MOV.L       L913+36,R2 ; _Bdisp_PutDisp_DD
    000008C0 420B                   JSR         @R2
    000008C2 0009                   NOP
      simplexC.c   404        return 0;
      simplexC.c   405    }
    000008C4 9118                   MOV.W       L913+8,R1  ; H'0298
    000008C6 3F1C                   ADD         R1,R15
    000008C8 4F26                   LDS.L       @R15+,PR
    000008CA 000B                   RTS
    000008CC E000                   MOV         #0,R0
      simplexC.c   406    
      simplexC.c   407    
      simplexC.c   408    int printInfoConstraint(int contsId, struct problemStatement* pS)
    000008CE              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    000008CE 2FE6                   MOV.L       R14,@-R15
    000008D0 2FD6                   MOV.L       R13,@-R15
      simplexC.c   409    {
      simplexC.c   410        char stroutBasicInfo[128];
      simplexC.c   411        int menuChoice;
      simplexC.c   412        menuChoice=INITIALIZE_VALUE_OPT;
    000008D2 EDFF                   MOV         #-1,R13
    000008D4 DE0C                   MOV.L       L913+24,R14; _PrintMini
    000008D6 2FC6                   MOV.L       R12,@-R15
    000008D8 2FB6                   MOV.L       R11,@-R15
    000008DA 6C43                   MOV         R4,R12
    000008DC 2FA6                   MOV.L       R10,@-R15
    000008DE 6B53                   MOV         R5,R11
    000008E0 2F96                   MOV.L       R9,@-R15
    000008E2 2F86                   MOV.L       R8,@-R15
    000008E4 4F22                   STS.L       PR,@-R15
    000008E6 7F80                   ADD         #-128,R15
    000008E8 D80C                   MOV.L       L913+44,R8 ; L578




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008EA D906                   MOV.L       L913+20,R9 ; _sprintf
      simplexC.c   413        while(menuChoice!=EXIT_OPT)
    000008EC A057                   BRA         L828
    000008EE 6AF3                   MOV         R15,R10
    000008F0              L913:                             
    000008F0 FD78                   .DATA.W     H'FD78
    000008F2 0214                   .DATA.W     H'0214
    000008F4 0294                   .DATA.W     H'0294
    000008F6 0218                   .DATA.W     H'0218
    000008F8 0298                   .DATA.W     H'0298
    000008FA 0000                   .DATA.W     0
    000008FC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000900 <00000000>             .DATA.L     L563
    00000904 <00000000>             .DATA.L     _sprintf
    00000908 <00000000>             .DATA.L     _PrintMini
    0000090C <00000000>             .DATA.L     L496
    00000910 <00000000>             .DATA.L     _string_input
    00000914 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000918 <00000000>             .DATA.L     L570
    0000091C <00000000>             .DATA.L     L578
    00000920              L829:                             
      simplexC.c   414        {
      simplexC.c   415            Bdisp_AllClr_DDVRAM();
    00000920 D22F                   MOV.L       L914+4,R2  ; _Bdisp_AllClr_DDVRAM
    00000922 420B                   JSR         @R2
    00000924 0009                   NOP
      simplexC.c   416            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    00000926 E300                   MOV         #0,R3
    00000928 2F36                   MOV.L       R3,@-R15
    0000092A 2FC6                   MOV.L       R12,@-R15
    0000092C 2F86                   MOV.L       R8,@-R15
    0000092E 490B                   JSR         @R9
    00000930 64A3                   MOV         R10,R4
    00000932 7F0C                   ADD         #12,R15
      simplexC.c   417            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000934 E710                   MOV         #16,R7
    00000936 66A3                   MOV         R10,R6
    00000938 E500                   MOV         #0,R5
    0000093A 4E0B                   JSR         @R14
    0000093C 6453                   MOV         R5,R4
      simplexC.c   418            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    0000093E E710                   MOV         #16,R7
    00000940 D628                   MOV.L       L914+8,R6  ; L579
    00000942 E507                   MOV         #7,R5
    00000944 4E0B                   JSR         @R14
    00000946 E400                   MOV         #0,R4
      simplexC.c   419            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000948 D627                   MOV.L       L914+12,R6 ; L580
    0000094A E50E                   MOV         #14,R5
    0000094C E710                   MOV         #16,R7
    0000094E 4E0B                   JSR         @R14
    00000950 E400                   MOV         #0,R4
      simplexC.c   420            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);
    00000952 E710                   MOV         #16,R7
    00000954 D625                   MOV.L       L914+16,R6 ; L581
    00000956 E515                   MOV         #21,R5
    00000958 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000095A E400                   MOV         #0,R4
      simplexC.c   421            menuChoice = InputI(0, 28);
    0000095C E51C                   MOV         #28,R5
    0000095E BB64                   BSR         _InputI
    00000960 E400                   MOV         #0,R4
      simplexC.c   422            Bdisp_PutDisp_DD();
    00000962 D323                   MOV.L       L914+20,R3 ; _Bdisp_PutDisp_DD
    00000964 430B                   JSR         @R3
    00000966 6D03                   MOV         R0,R13
      simplexC.c   423            if(menuChoice!=EXIT_OPT && menuChoice<=3)
    00000968 2DD8                   TST         R13,R13
    0000096A 8918                   BT          L828
    0000096C E303                   MOV         #3,R3
    0000096E 3D37                   CMP/GT      R3,R13
    00000970 8915                   BT          L828
      simplexC.c   424            {
      simplexC.c   425                switch (menuChoice)
    00000972 60D3                   MOV         R13,R0
    00000974 8801                   CMP/EQ      #1,R0
    00000976 8905                   BT          L745
    00000978 8802                   CMP/EQ      #2,R0
    0000097A 8908                   BT          L746
    0000097C 8803                   CMP/EQ      #3,R0
    0000097E 890B                   BT          L747
    00000980 A00D                   BRA         L828
    00000982 0009                   NOP
    00000984              L745:                            ; case label 
      simplexC.c   426                {
      simplexC.c   427                case 1: printVariablesProblemStatement(contsId,pS);break;
    00000984 65B3                   MOV         R11,R5
    00000986 BE72                   BSR         _printVariablesProblemStatement
    00000988 64C3                   MOV         R12,R4
    0000098A A008                   BRA         L828
    0000098C 0009                   NOP
    0000098E              L746:                            ; case label 
      simplexC.c   428                case 2: printIne(contsId,pS);break;
    0000098E 65B3                   MOV         R11,R5
    00000990 BF36                   BSR         _printIne
    00000992 64C3                   MOV         R12,R4
    00000994 A003                   BRA         L828
    00000996 0009                   NOP
    00000998              L747:                            ; case label 
      simplexC.c   429                case 3: printRVal(contsId,pS);break;
    00000998 65B3                   MOV         R11,R5
    0000099A BF63                   BSR         _printRVal
    0000099C 64C3                   MOV         R12,R4
      simplexC.c   430                default: break;
    0000099E              L828:                             
    0000099E 2DD8                   TST         R13,R13
    000009A0 8BBE                   BF          L829
      simplexC.c   431                }
      simplexC.c   432            }
      simplexC.c   433        }
      simplexC.c   434        return 0;
    000009A2 E000                   MOV         #0,R0
      simplexC.c   435    }
    000009A4 911A                   MOV.W       L914,R1    ; H'0080




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009A6 3F1C                   ADD         R1,R15
    000009A8 4F26                   LDS.L       @R15+,PR
    000009AA 68F6                   MOV.L       @R15+,R8
    000009AC 69F6                   MOV.L       @R15+,R9
    000009AE 6AF6                   MOV.L       @R15+,R10
    000009B0 6BF6                   MOV.L       @R15+,R11
    000009B2 6CF6                   MOV.L       @R15+,R12
    000009B4 6DF6                   MOV.L       @R15+,R13
    000009B6 000B                   RTS
    000009B8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   436    
      simplexC.c   437    int printAllConstraintsMenu(struct problemStatement* pS)
    000009BA              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    000009BA 2FE6                   MOV.L       R14,@-R15
    000009BC 2FD6                   MOV.L       R13,@-R15
      simplexC.c   438    {
      simplexC.c   439        char stroutBasicInfo[128];
      simplexC.c   440        int menuChoice;
      simplexC.c   441        menuChoice=INITIALIZE_VALUE_OPT;
    000009BE EEFF                   MOV         #-1,R14
    000009C0 2FC6                   MOV.L       R12,@-R15
    000009C2 6D43                   MOV         R4,R13
    000009C4 2FB6                   MOV.L       R11,@-R15
    000009C6 2FA6                   MOV.L       R10,@-R15
    000009C8 2F96                   MOV.L       R9,@-R15
    000009CA 2F86                   MOV.L       R8,@-R15
    000009CC 4F22                   STS.L       PR,@-R15
    000009CE 7F80                   ADD         #-128,R15
    000009D0 D808                   MOV.L       L914+24,R8 ; _PrintMini
    000009D2 D909                   MOV.L       L914+28,R9 ; _sprintf
    000009D4 DA09                   MOV.L       L914+32,R10; L589
    000009D6 DB02                   MOV.L       L914+4,R11 ; _Bdisp_AllClr_DDVRAM
      simplexC.c   442        while(menuChoice!=EXIT_OPT)
    000009D8 A02F                   BRA         L833
    000009DA 6CF3                   MOV         R15,R12
    000009DC              L914:                             
    000009DC 0080                   .DATA.W     H'0080
    000009DE 0000                   .DATA.W     0
    000009E0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000009E4 <00000000>             .DATA.L     L579
    000009E8 <00000000>             .DATA.L     L580
    000009EC <00000000>             .DATA.L     L581
    000009F0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000009F4 <00000000>             .DATA.L     _PrintMini
    000009F8 <00000000>             .DATA.L     _sprintf
    000009FC <00000000>             .DATA.L     L589
    00000A00              L834:                             
      simplexC.c   443        {
      simplexC.c   444            Bdisp_AllClr_DDVRAM();
    00000A00 4B0B                   JSR         @R11
    00000A02 0009                   NOP
      simplexC.c   445            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);
    00000A04 E200                   MOV         #0,R2
    00000A06 2F26                   MOV.L       R2,@-R15
    00000A08 53DA                   MOV.L       @(40,R13),R3
    00000A0A 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A0C 2FA6                   MOV.L       R10,@-R15
    00000A0E 490B                   JSR         @R9
    00000A10 64C3                   MOV         R12,R4
    00000A12 7F0C                   ADD         #12,R15
      simplexC.c   446            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000A14 E710                   MOV         #16,R7
    00000A16 66C3                   MOV         R12,R6
    00000A18 E500                   MOV         #0,R5
    00000A1A 480B                   JSR         @R8
    00000A1C 6453                   MOV         R5,R4
      simplexC.c   447            menuChoice = InputI(0, 7);
    00000A1E E507                   MOV         #7,R5
    00000A20 BB03                   BSR         _InputI
    00000A22 E400                   MOV         #0,R4
      simplexC.c   448            Bdisp_PutDisp_DD();
    00000A24 D337                   MOV.L       L915+8,R3  ; _Bdisp_PutDisp_DD
    00000A26 430B                   JSR         @R3
    00000A28 6E03                   MOV         R0,R14
      simplexC.c   449            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000A2A 2EE8                   TST         R14,R14
    00000A2C 8905                   BT          L833
    00000A2E 53DA                   MOV.L       @(40,R13),R3
    00000A30 3E37                   CMP/GT      R3,R14
    00000A32 8902                   BT          L833
      simplexC.c   450            {
      simplexC.c   451                printInfoConstraint(menuChoice,pS);
    00000A34 65D3                   MOV         R13,R5
    00000A36 BF4A                   BSR         _printInfoConstraint
    00000A38 64E3                   MOV         R14,R4
    00000A3A              L833:                             
    00000A3A 2EE8                   TST         R14,R14
    00000A3C 8BE0                   BF          L834
      simplexC.c   452            }
      simplexC.c   453        }
      simplexC.c   454        return 0;
    00000A3E E000                   MOV         #0,R0
      simplexC.c   455    }
    00000A40 915C                   MOV.W       L915,R1    ; H'0080
    00000A42 3F1C                   ADD         R1,R15
    00000A44 4F26                   LDS.L       @R15+,PR
    00000A46 68F6                   MOV.L       @R15+,R8
    00000A48 69F6                   MOV.L       @R15+,R9
    00000A4A 6AF6                   MOV.L       @R15+,R10
    00000A4C 6BF6                   MOV.L       @R15+,R11
    00000A4E 6CF6                   MOV.L       @R15+,R12
    00000A50 6DF6                   MOV.L       @R15+,R13
    00000A52 000B                   RTS
    00000A54 6EF6                   MOV.L       @R15+,R14
      simplexC.c   456    
      simplexC.c   457    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    00000A56              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    00000A56 2FE6                   MOV.L       R14,@-R15
    00000A58 4F22                   STS.L       PR,@-R15
    00000A5A 9050                   MOV.W       L915+2,R0  ; H'FF74
      simplexC.c   458    {   
      simplexC.c   459        char strout[128];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   460        int res;
      simplexC.c   461        Bdisp_AllClr_DDVRAM();
    00000A5C D32A                   MOV.L       L915+12,R3 ; _Bdisp_AllClr_DDVRAM
    00000A5E 3F0C                   ADD         R0,R15
    00000A60 2F42                   MOV.L       R4,@R15
    00000A62 1F51                   MOV.L       R5,@(4,R15)
    00000A64 430B                   JSR         @R3
    00000A66 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c   462        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);
    00000A68 62F2                   MOV.L       @R15,R2
    00000A6A 6EF3                   MOV         R15,R14
    00000A6C D327                   MOV.L       L915+16,R3 ; L598
    00000A6E 7E0C                   ADD         #12,R14
    00000A70 2F26                   MOV.L       R2,@-R15
    00000A72 2F36                   MOV.L       R3,@-R15
    00000A74 D226                   MOV.L       L915+20,R2 ; _sprintf
    00000A76 420B                   JSR         @R2
    00000A78 64E3                   MOV         R14,R4
      simplexC.c   463        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000A7A E710                   MOV         #16,R7
    00000A7C 1FE2                   MOV.L       R14,@(8,R15)
    00000A7E 66E3                   MOV         R14,R6
    00000A80 D324                   MOV.L       L915+24,R3 ; _PrintMini
    00000A82 E500                   MOV         #0,R5
    00000A84 430B                   JSR         @R3
    00000A86 6453                   MOV         R5,R4
      simplexC.c   464        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c   465            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    00000A88 E202                   MOV         #2,R2
    00000A8A E301                   MOV         #1,R3
    00000A8C 2F26                   MOV.L       R2,@-R15
    00000A8E E100                   MOV         #0,R1
    00000A90 2F36                   MOV.L       R3,@-R15
    00000A92 2F16                   MOV.L       R1,@-R15
    00000A94 D320                   MOV.L       L915+28,R3 ; L599
    00000A96 2F36                   MOV.L       R3,@-R15
    00000A98 D21D                   MOV.L       L915+20,R2 ; _sprintf
    00000A9A 420B                   JSR         @R2
    00000A9C 64E3                   MOV         R14,R4
    00000A9E 7F18                   ADD         #24,R15
      simplexC.c   466        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    00000AA0 D31C                   MOV.L       L915+24,R3 ; _PrintMini
    00000AA2 E710                   MOV         #16,R7
    00000AA4 66F2                   MOV.L       @R15,R6
    00000AA6 E507                   MOV         #7,R5
    00000AA8 430B                   JSR         @R3
    00000AAA E400                   MOV         #0,R4
      simplexC.c   467        res = InputI(0,14);
    00000AAC E50E                   MOV         #14,R5
    00000AAE BABC                   BSR         _InputI
    00000AB0 E400                   MOV         #0,R4
      simplexC.c   468        Bdisp_PutDisp_DD();
    00000AB2 D314                   MOV.L       L915+8,R3  ; _Bdisp_PutDisp_DD
    00000AB4 430B                   JSR         @R3
    00000AB6 6E03                   MOV         R0,R14
      simplexC.c   469        switch (res)
    00000AB8 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ABA 8800                   CMP/EQ      #0,R0
    00000ABC 8905                   BT          L752
    00000ABE 8801                   CMP/EQ      #1,R0
    00000AC0 8909                   BT          L753
    00000AC2 8802                   CMP/EQ      #2,R0
    00000AC4 890C                   BT          L754
    00000AC6 A013                   BRA         L837
    00000AC8 0009                   NOP
    00000ACA              L752:                            ; case label 
      simplexC.c   470        {
      simplexC.c   471            case INE_EQUAL: *nVariables2fases+=1; break;
    00000ACA 52F2                   MOV.L       @(8,R15),R2
    00000ACC 6322                   MOV.L       @R2,R3
    00000ACE 7301                   ADD         #1,R3
    00000AD0 2232                   MOV.L       R3,@R2
    00000AD2 A00D                   BRA         L837
    00000AD4 0009                   NOP
    00000AD6              L753:                            ; case label 
      simplexC.c   472            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    00000AD6 51F1                   MOV.L       @(4,R15),R1
    00000AD8 6312                   MOV.L       @R1,R3
    00000ADA 7301                   ADD         #1,R3
    00000ADC A008                   BRA         L837
    00000ADE 2132                   MOV.L       R3,@R1
    00000AE0              L754:                            ; case label 
      simplexC.c   473            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    00000AE0 51F1                   MOV.L       @(4,R15),R1
    00000AE2 6312                   MOV.L       @R1,R3
    00000AE4 7301                   ADD         #1,R3
    00000AE6 2132                   MOV.L       R3,@R1
    00000AE8 52F2                   MOV.L       @(8,R15),R2
    00000AEA 6322                   MOV.L       @R2,R3
    00000AEC 7301                   ADD         #1,R3
    00000AEE 2232                   MOV.L       R3,@R2
    00000AF0              L837:                             
      simplexC.c   474        }
      simplexC.c   475    
      simplexC.c   476        return res;
      simplexC.c   477    }
    00000AF0 9106                   MOV.W       L915+4,R1  ; H'008C
    00000AF2 60E3                   MOV         R14,R0
    00000AF4 3F1C                   ADD         R1,R15
    00000AF6 4F26                   LDS.L       @R15+,PR
    00000AF8 000B                   RTS
    00000AFA 6EF6                   MOV.L       @R15+,R14
    00000AFC              L915:                             
    00000AFC 0080                   .DATA.W     H'0080
    00000AFE FF74                   .DATA.W     H'FF74
    00000B00 008C                   .DATA.W     H'008C
    00000B02 0000                   .DATA.W     0
    00000B04 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000B08 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000B0C <00000000>             .DATA.L     L598
    00000B10 <00000000>             .DATA.L     _sprintf
    00000B14 <00000000>             .DATA.L     _PrintMini
    00000B18 <00000000>             .DATA.L     L599
      simplexC.c   478    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   479    double getRightValue(int nConstraint)
    00000B1C              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=156
    00000B1C 4F22                   STS.L       PR,@-R15
    00000B1E 907D                   MOV.W       L916,R0    ; H'FF74
      simplexC.c   480    {   
      simplexC.c   481        char strout[128];
      simplexC.c   482        double res;
      simplexC.c   483        Bdisp_AllClr_DDVRAM();
    00000B20 D341                   MOV.L       L916+12,R3 ; _Bdisp_AllClr_DDVRAM
    00000B22 3F0C                   ADD         R0,R15
    00000B24 430B                   JSR         @R3
    00000B26 2F42                   MOV.L       R4,@R15
      simplexC.c   484        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    00000B28 62F2                   MOV.L       @R15,R2
    00000B2A 2F26                   MOV.L       R2,@-R15
    00000B2C D33F                   MOV.L       L916+16,R3 ; L606
    00000B2E 2F36                   MOV.L       R3,@-R15
    00000B30 D23F                   MOV.L       L916+20,R2 ; _sprintf
    00000B32 64F3                   MOV         R15,R4
    00000B34 420B                   JSR         @R2
    00000B36 7414                   ADD         #20,R4
      simplexC.c   485        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000B38 D33E                   MOV.L       L916+24,R3 ; _PrintMini
    00000B3A E710                   MOV         #16,R7
    00000B3C 66F3                   MOV         R15,R6
    00000B3E 7614                   ADD         #20,R6
    00000B40 E500                   MOV         #0,R5
    00000B42 430B                   JSR         @R3
    00000B44 6453                   MOV         R5,R4
      simplexC.c   486        Bdisp_PutDisp_DD();
    00000B46 D23C                   MOV.L       L916+28,R2 ; _Bdisp_PutDisp_DD
    00000B48 420B                   JSR         @R2
    00000B4A 0009                   NOP
      simplexC.c   487        res = InputD(0,7);
    00000B4C E507                   MOV         #7,R5
    00000B4E E400                   MOV         #0,R4
    00000B50 63F3                   MOV         R15,R3
    00000B52 730C                   ADD         #12,R3
    00000B54 BA54                   BSR         _InputD
    00000B56 2F36                   MOV.L       R3,@-R15
      simplexC.c   488        return res;
    00000B58 9361                   MOV.W       L916+2,R3  ; H'009C
    00000B5A 62F3                   MOV         R15,R2
    00000B5C 33FC                   ADD         R15,R3
    00000B5E 7210                   ADD         #16,R2
    00000B60 6132                   MOV.L       @R3,R1
    00000B62 6022                   MOV.L       @R2,R0
    00000B64 2102                   MOV.L       R0,@R1
    00000B66 5021                   MOV.L       @(4,R2),R0
    00000B68 1101                   MOV.L       R0,@(4,R1)
      simplexC.c   489    }
    00000B6A 9159                   MOV.W       L916+4,R1  ; H'0098
    00000B6C 3F1C                   ADD         R1,R15
    00000B6E 4F26                   LDS.L       @R15+,PR
    00000B70 000B                   RTS
    00000B72 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   490    
      simplexC.c   491    double *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, double *rightValue, i
                         +nt *nVariablesSlope, int * nVariables2fases)
    00000B74              _getInequation:                  ; function: getInequation
                                                           ; frame size=188
    00000B74 2FE6                   MOV.L       R14,@-R15
    00000B76 2FD6                   MOV.L       R13,@-R15
    00000B78 2FC6                   MOV.L       R12,@-R15
    00000B7A 2FB6                   MOV.L       R11,@-R15
    00000B7C 2FA6                   MOV.L       R10,@-R15
    00000B7E 6A43                   MOV         R4,R10
      simplexC.c   492    {
      simplexC.c   493        char strout[128];
      simplexC.c   494        unsigned int i;
      simplexC.c   495        double *constraintValues;
      simplexC.c   496        constraintValues = (double *)malloc(sizeof(double) * nVariables);
    00000B80 D32E                   MOV.L       L916+32,R3 ; _malloc
    00000B82 64A3                   MOV         R10,R4
    00000B84 2F96                   MOV.L       R9,@-R15
    00000B86 4408                   SHLL2       R4
    00000B88 9048                   MOV.W       L916,R0    ; H'FF74
    00000B8A 6953                   MOV         R5,R9
    00000B8C 2F86                   MOV.L       R8,@-R15
    00000B8E 4F22                   STS.L       PR,@-R15
    00000B90 3F0C                   ADD         R0,R15
    00000B92 1F62                   MOV.L       R6,@(8,R15)
    00000B94 1F71                   MOV.L       R7,@(4,R15)
    00000B96 430B                   JSR         @R3
    00000B98 4400                   SHLL        R4
      simplexC.c   497        for (i = 0; i < nVariables; i++)
    00000B9A EB00                   MOV         #0,R11
    00000B9C D825                   MOV.L       L916+24,R8 ; _PrintMini
    00000B9E 6CF3                   MOV         R15,R12
    00000BA0 2F02                   MOV.L       R0,@R15
    00000BA2 EE00                   MOV         #0,R14
    00000BA4 3E0C                   ADD         R0,R14
    00000BA6 ED01                   MOV         #1,R13
    00000BA8 63B3                   MOV         R11,R3
    00000BAA 33A2                   CMP/HS      R10,R3
    00000BAC 8D1C                   BT/S        L840
    00000BAE 7C0C                   ADD         #12,R12
    00000BB0              L841:                             
      simplexC.c   498        {
      simplexC.c   499            Bdisp_AllClr_DDVRAM();
    00000BB0 D11D                   MOV.L       L916+12,R1 ; _Bdisp_AllClr_DDVRAM
    00000BB2 410B                   JSR         @R1
    00000BB4 0009                   NOP
      simplexC.c   500            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    00000BB6 2FD6                   MOV.L       R13,@-R15
    00000BB8 2F96                   MOV.L       R9,@-R15
    00000BBA D321                   MOV.L       L916+36,R3 ; L619
    00000BBC D21C                   MOV.L       L916+20,R2 ; _sprintf
    00000BBE 2F36                   MOV.L       R3,@-R15
    00000BC0 420B                   JSR         @R2
    00000BC2 64C3                   MOV         R12,R4
      simplexC.c   501            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000BC4 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BC6 66C3                   MOV         R12,R6
    00000BC8 E500                   MOV         #0,R5
    00000BCA 480B                   JSR         @R8
    00000BCC 6453                   MOV         R5,R4
      simplexC.c   502            Bdisp_PutDisp_DD();
    00000BCE D31A                   MOV.L       L916+28,R3 ; _Bdisp_PutDisp_DD
    00000BD0 430B                   JSR         @R3
    00000BD2 0009                   NOP
      simplexC.c   503            constraintValues[i] = InputD(0, 7);
    00000BD4 E507                   MOV         #7,R5
    00000BD6 E400                   MOV         #0,R4
    00000BD8 BA12                   BSR         _InputD
    00000BDA 2FE6                   MOV.L       R14,@-R15
    00000BDC 7F10                   ADD         #16,R15
    00000BDE 7B01                   ADD         #1,R11
    00000BE0 7E08                   ADD         #8,R14
    00000BE2 3BA2                   CMP/HS      R10,R11
    00000BE4 8FE4                   BF/S        L841
    00000BE6 7D01                   ADD         #1,R13
    00000BE8              L840:                             
      simplexC.c   504        }
      simplexC.c   505        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    00000BE8 53F2                   MOV.L       @(8,R15),R3
    00000BEA 2F36                   MOV.L       R3,@-R15
    00000BEC 9019                   MOV.W       L916+6,R0  ; H'00B4
    00000BEE 06FE                   MOV.L       @(R0,R15),R6
    00000BF0 9018                   MOV.W       L916+8,R0  ; H'00B0
    00000BF2 05FE                   MOV.L       @(R0,R15),R5
    00000BF4 BF2F                   BSR         _getInequalitySign
    00000BF6 6493                   MOV         R9,R4
    00000BF8 62F6                   MOV.L       @R15+,R2
    00000BFA 2202                   MOV.L       R0,@R2
      simplexC.c   506        *rightValue = getRightValue(nConstraint);
    00000BFC 53F1                   MOV.L       @(4,R15),R3
    00000BFE 2F36                   MOV.L       R3,@-R15
    00000C00 BF8C                   BSR         _getRightValue
    00000C02 6493                   MOV         R9,R4
      simplexC.c   507        return constraintValues;
    00000C04 50F1                   MOV.L       @(4,R15),R0
      simplexC.c   508    }
    00000C06 910E                   MOV.W       L916+10,R1 ; H'0090
    00000C08 3F1C                   ADD         R1,R15
    00000C0A 4F26                   LDS.L       @R15+,PR
    00000C0C 68F6                   MOV.L       @R15+,R8
    00000C0E 69F6                   MOV.L       @R15+,R9
    00000C10 6AF6                   MOV.L       @R15+,R10
    00000C12 6BF6                   MOV.L       @R15+,R11
    00000C14 6CF6                   MOV.L       @R15+,R12
    00000C16 6DF6                   MOV.L       @R15+,R13
    00000C18 000B                   RTS
    00000C1A 6EF6                   MOV.L       @R15+,R14
    00000C1C              L916:                             
    00000C1C FF74                   .DATA.W     H'FF74
    00000C1E 009C                   .DATA.W     H'009C
    00000C20 0098                   .DATA.W     H'0098
    00000C22 00B4                   .DATA.W     H'00B4
    00000C24 00B0                   .DATA.W     H'00B0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C26 0090                   .DATA.W     H'0090
    00000C28 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000C2C <00000000>             .DATA.L     L606
    00000C30 <00000000>             .DATA.L     _sprintf
    00000C34 <00000000>             .DATA.L     _PrintMini
    00000C38 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000C3C <00000000>             .DATA.L     _malloc
    00000C40 <00000000>             .DATA.L     L619
      simplexC.c   509    
      simplexC.c   510    struct problemStatement* getProblemInputs()
    00000C44              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224
    00000C44 2FE6                   MOV.L       R14,@-R15
      simplexC.c   511    {
      simplexC.c   512        char strout[128];
      simplexC.c   513        unsigned int nConstraints;
      simplexC.c   514        unsigned int nVariables;
      simplexC.c   515        unsigned int i;
      simplexC.c   516        int nVariablesInteger;
      simplexC.c   517        int problemType;
      simplexC.c   518        double **constraints;
      simplexC.c   519        double *rightValues;
      simplexC.c   520        double *funcObjtValues;
      simplexC.c   521        int *inequalitiesSigns;
      simplexC.c   522        int *idIntegerVariables;
      simplexC.c   523        int *idSlopeVariables;
      simplexC.c   524        int *id2fasesVariables;
      simplexC.c   525        struct problemStatement *pInput;
      simplexC.c   526        nVariablesInteger=0;
    00000C46 E300                   MOV         #0,R3
    00000C48 90A7                   MOV.W       L917,R0    ; H'FF4C
    00000C4A 2FD6                   MOV.L       R13,@-R15
    00000C4C 2FC6                   MOV.L       R12,@-R15
    00000C4E 2FB6                   MOV.L       R11,@-R15
    00000C50 2FA6                   MOV.L       R10,@-R15
    00000C52 2F96                   MOV.L       R9,@-R15
    00000C54 2F86                   MOV.L       R8,@-R15
    00000C56 4F22                   STS.L       PR,@-R15
      simplexC.c   527        pInput = malloc(sizeof(struct problemStatement));
    00000C58 DD51                   MOV.L       L917+6,R13 ; _malloc
    00000C5A 3F0C                   ADD         R0,R15
    00000C5C 1F38                   MOV.L       R3,@(32,R15)
    00000C5E 4D0B                   JSR         @R13
    00000C60 E450                   MOV         #80,R4
      simplexC.c   528        Bdisp_AllClr_DDVRAM();
    00000C62 D850                   MOV.L       L917+10,R8 ; _Bdisp_AllClr_DDVRAM
    00000C64 480B                   JSR         @R8
    00000C66 6E03                   MOV         R0,R14
      simplexC.c   529        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    00000C68 DB4F                   MOV.L       L917+14,R11; _PrintMini
    00000C6A E710                   MOV         #16,R7
    00000C6C D64F                   MOV.L       L917+18,R6 ; L636
    00000C6E E500                   MOV         #0,R5
    00000C70 4B0B                   JSR         @R11
    00000C72 6453                   MOV         R5,R4
      simplexC.c   530        Bdisp_PutDisp_DD();
    00000C74 DA4E                   MOV.L       L917+22,R10; _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C76 4A0B                   JSR         @R10
    00000C78 0009                   NOP
      simplexC.c   531        nConstraints = InputI(0, 7);
    00000C7A E507                   MOV         #7,R5
    00000C7C B9D5                   BSR         _InputI
    00000C7E E400                   MOV         #0,R4
    00000C80 1F02                   MOV.L       R0,@(8,R15)
      simplexC.c   532        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    00000C82 E710                   MOV         #16,R7
    00000C84 D64B                   MOV.L       L917+26,R6 ; L637
    00000C86 E50E                   MOV         #14,R5
    00000C88 4B0B                   JSR         @R11
    00000C8A E400                   MOV         #0,R4
      simplexC.c   533        Bdisp_PutDisp_DD();
    00000C8C 4A0B                   JSR         @R10
    00000C8E 0009                   NOP
      simplexC.c   534        nVariables = InputI(0, 21);
    00000C90 E515                   MOV         #21,R5
    00000C92 B9CA                   BSR         _InputI
    00000C94 E400                   MOV         #0,R4
    00000C96 6C03                   MOV         R0,R12
      simplexC.c   535        PrintMini(0, 28, (unsigned char *)"Press. 1-LP, 2-ILP, 3-Cuts", MINI_OVER);
    00000C98 D647                   MOV.L       L917+30,R6 ; L638
    00000C9A E51C                   MOV         #28,R5
    00000C9C E710                   MOV         #16,R7
    00000C9E 4B0B                   JSR         @R11
    00000CA0 E400                   MOV         #0,R4
      simplexC.c   536        Bdisp_PutDisp_DD();
    00000CA2 4A0B                   JSR         @R10
    00000CA4 0009                   NOP
      simplexC.c   537        problemType = InputI(0, 35);
    00000CA6 E523                   MOV         #35,R5
    00000CA8 B9BF                   BSR         _InputI
    00000CAA E400                   MOV         #0,R4
    00000CAC 1F07                   MOV.L       R0,@(28,R15)
      simplexC.c   538        constraints = (double **)malloc(sizeof(double) * nConstraints);
    00000CAE 54F2                   MOV.L       @(8,R15),R4
    00000CB0 4408                   SHLL2       R4
    00000CB2 4400                   SHLL        R4
    00000CB4 4D0B                   JSR         @R13
    00000CB6 2F42                   MOV.L       R4,@R15
    00000CB8 1F06                   MOV.L       R0,@(24,R15)
      simplexC.c   539        rightValues = (double *) malloc(sizeof(double)*nConstraints);
    00000CBA 4D0B                   JSR         @R13
    00000CBC 64F2                   MOV.L       @R15,R4
    00000CBE 1F0A                   MOV.L       R0,@(40,R15)
      simplexC.c   540        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    00000CC0 54F2                   MOV.L       @(8,R15),R4
    00000CC2 4D0B                   JSR         @R13
    00000CC4 4408                   SHLL2       R4
      simplexC.c   541        funcObjtValues = calloc(nVariables+1,sizeof(double));
    00000CC6 E508                   MOV         #8,R5
    00000CC8 1F05                   MOV.L       R0,@(20,R15)
    00000CCA 64C3                   MOV         R12,R4
    00000CCC DD3B                   MOV.L       L917+34,R13; _calloc
    00000CCE 4D0B                   JSR         @R13
    00000CD0 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   542        idIntegerVariables = calloc(nVariables,sizeof(int));
    00000CD2 E504                   MOV         #4,R5
    00000CD4 1F04                   MOV.L       R0,@(16,R15)
    00000CD6 4D0B                   JSR         @R13
    00000CD8 64C3                   MOV         R12,R4
      simplexC.c   543        idSlopeVariables = calloc(nVariables,sizeof(int));
    00000CDA E504                   MOV         #4,R5
    00000CDC 1F09                   MOV.L       R0,@(36,R15)
    00000CDE 4D0B                   JSR         @R13
    00000CE0 64C3                   MOV         R12,R4
      simplexC.c   544        id2fasesVariables = calloc(nVariables,sizeof(int));
    00000CE2 E504                   MOV         #4,R5
    00000CE4 1F0B                   MOV.L       R0,@(44,R15)
    00000CE6 4D0B                   JSR         @R13
    00000CE8 64C3                   MOV         R12,R4
      simplexC.c   545        pInput->nVariablesSlope=0;
    00000CEA E300                   MOV         #0,R3
    00000CEC 1F0C                   MOV.L       R0,@(48,R15)
      simplexC.c   546        pInput->nVariables2fases=0;
      simplexC.c   547        for(i=0;i<nVariables;i++)
    00000CEE 6DF3                   MOV         R15,R13
    00000CF0 1E37                   MOV.L       R3,@(28,R14)
    00000CF2 6233                   MOV         R3,R2
    00000CF4 1E38                   MOV.L       R3,@(32,R14)
    00000CF6 1F31                   MOV.L       R3,@(4,R15)
    00000CF8 59F9                   MOV.L       @(36,R15),R9
    00000CFA E301                   MOV         #1,R3
    00000CFC 2F32                   MOV.L       R3,@R15
    00000CFE E300                   MOV         #0,R3
    00000D00 3C36                   CMP/HI      R3,R12
    00000D02 8F30                   BF/S        L843
    00000D04 7D34                   ADD         #52,R13
    00000D06              L844:                             
      simplexC.c   548        {
      simplexC.c   549            if(problemType!=TYPE_LP)
    00000D06 50F7                   MOV.L       @(28,R15),R0
    00000D08 8801                   CMP/EQ      #1,R0
    00000D0A 8923                   BT          L845
      simplexC.c   550            {
      simplexC.c   551                Bdisp_AllClr_DDVRAM();
    00000D0C 480B                   JSR         @R8
    00000D0E 0009                   NOP
      simplexC.c   552                sprintf(strout,"Variable x%d",i+1);
    00000D10 62F2                   MOV.L       @R15,R2
    00000D12 2F26                   MOV.L       R2,@-R15
    00000D14 D32A                   MOV.L       L917+38,R3 ; L641
    00000D16 2F36                   MOV.L       R3,@-R15
    00000D18 D22A                   MOV.L       L917+42,R2 ; _sprintf
    00000D1A 420B                   JSR         @R2
    00000D1C 64D3                   MOV         R13,R4
    00000D1E 7F08                   ADD         #8,R15
      simplexC.c   553                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000D20 E710                   MOV         #16,R7
    00000D22 66D3                   MOV         R13,R6
    00000D24 E500                   MOV         #0,R5
    00000D26 4B0B                   JSR         @R11
    00000D28 6453                   MOV         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   554                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
    00000D2A E710                   MOV         #16,R7
    00000D2C D626                   MOV.L       L917+46,R6 ; L642
    00000D2E E507                   MOV         #7,R5
    00000D30 4B0B                   JSR         @R11
    00000D32 E400                   MOV         #0,R4
      simplexC.c   555                idIntegerVariables[i] = InputI(0, 14);
    00000D34 E50E                   MOV         #14,R5
    00000D36 B978                   BSR         _InputI
    00000D38 E400                   MOV         #0,R4
      simplexC.c   556                Bdisp_PutDisp_DD();
    00000D3A 4A0B                   JSR         @R10
    00000D3C 2902                   MOV.L       R0,@R9
      simplexC.c   557                memset(strout,0,128);
    00000D3E E500                   MOV         #0,R5
    00000D40 D222                   MOV.L       L917+50,R2 ; _memset
    00000D42 962B                   MOV.W       L917+2,R6  ; H'0080
    00000D44 420B                   JSR         @R2
    00000D46 64D3                   MOV         R13,R4
      simplexC.c   558                if(idIntegerVariables[i]==1)
    00000D48 6092                   MOV.L       @R9,R0
    00000D4A 8801                   CMP/EQ      #1,R0
    00000D4C 8B02                   BF          L845
      simplexC.c   559                {
      simplexC.c   560                    nVariablesInteger+=1;
    00000D4E 52F8                   MOV.L       @(32,R15),R2
    00000D50 7201                   ADD         #1,R2
    00000D52 1F28                   MOV.L       R2,@(32,R15)
    00000D54              L845:                             
    00000D54 53F1                   MOV.L       @(4,R15),R3
    00000D56 7904                   ADD         #4,R9
    00000D58 7301                   ADD         #1,R3
    00000D5A 33C2                   CMP/HS      R12,R3
    00000D5C 1F31                   MOV.L       R3,@(4,R15)
    00000D5E 62F2                   MOV.L       @R15,R2
    00000D60 7201                   ADD         #1,R2
    00000D62 8FD0                   BF/S        L844
    00000D64 2F22                   MOV.L       R2,@R15
    00000D66              L843:                             
      simplexC.c   561                }
      simplexC.c   562            }
      simplexC.c   563        }
      simplexC.c   564        for (i = 0; i < nConstraints; i++)
    00000D66 E300                   MOV         #0,R3
    00000D68 1F33                   MOV.L       R3,@(12,R15)
    00000D6A E201                   MOV         #1,R2
    00000D6C 2F22                   MOV.L       R2,@R15
    00000D6E E900                   MOV         #0,R9
    00000D70 53FA                   MOV.L       @(40,R15),R3
    00000D72 1F31                   MOV.L       R3,@(4,R15)
    00000D74 52F2                   MOV.L       @(8,R15),R2
    00000D76 6393                   MOV         R9,R3
    00000D78 3236                   CMP/HI      R3,R2
    00000D7A 8B3B                   BF          L847
    00000D7C              L848:                             
      simplexC.c   565        {
      simplexC.c   566            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +ariablesSlope,&pInput->nVariables2fases);
    00000D7C 50F6                   MOV.L       @(24,R15),R0
    00000D7E 63E3                   MOV         R14,R3
    00000D80 309C                   ADD         R9,R0
    00000D82 7320                   ADD         #32,R3
    00000D84 2F06                   MOV.L       R0,@-R15
    00000D86 2F36                   MOV.L       R3,@-R15
    00000D88 63E3                   MOV         R14,R3
    00000D8A 731C                   ADD         #28,R3
    00000D8C 2F36                   MOV.L       R3,@-R15
    00000D8E 57F4                   MOV.L       @(16,R15),R7
    00000D90 56F8                   MOV.L       @(32,R15),R6
    00000D92 369C                   ADD         R9,R6
    00000D94 55F3                   MOV.L       @(12,R15),R5
    00000D96 A01B                   BRA         L904
    00000D98 64C3                   MOV         R12,R4
    00000D9A              L917:                             
    00000D9A FF4C                   .DATA.W     H'FF4C
    00000D9C 0080                   .DATA.W     H'0080
    00000D9E 0000                   .DATA.W     0
    00000DA0 <00000000>             .DATA.L     _malloc
    00000DA4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000DA8 <00000000>             .DATA.L     _PrintMini
    00000DAC <00000000>             .DATA.L     L636
    00000DB0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000DB4 <00000000>             .DATA.L     L637
    00000DB8 <00000000>             .DATA.L     L638
    00000DBC <00000000>             .DATA.L     _calloc
    00000DC0 <00000000>             .DATA.L     L641
    00000DC4 <00000000>             .DATA.L     _sprintf
    00000DC8 <00000000>             .DATA.L     L642
    00000DCC <00000000>             .DATA.L     _memset
    00000DD0              L904:                             
    00000DD0 BED0                   BSR         _getInequation
    00000DD2 0009                   NOP
    00000DD4 7F08                   ADD         #8,R15
    00000DD6 63F6                   MOV.L       @R15+,R3
    00000DD8 2302                   MOV.L       R0,@R3
    00000DDA 52F3                   MOV.L       @(12,R15),R2
    00000DDC 7201                   ADD         #1,R2
    00000DDE 1F23                   MOV.L       R2,@(12,R15)
    00000DE0 63F2                   MOV.L       @R15,R3
    00000DE2 7301                   ADD         #1,R3
    00000DE4 2F32                   MOV.L       R3,@R15
    00000DE6 51F1                   MOV.L       @(4,R15),R1
    00000DE8 7108                   ADD         #8,R1
    00000DEA 1F11                   MOV.L       R1,@(4,R15)
    00000DEC 53F2                   MOV.L       @(8,R15),R3
    00000DEE 3232                   CMP/HS      R3,R2
    00000DF0 8FC4                   BF/S        L848
    00000DF2 7904                   ADD         #4,R9
    00000DF4              L847:                             
      simplexC.c   567        }
      simplexC.c   568        
      simplexC.c   569        Bdisp_AllClr_DDVRAM();
    00000DF4 480B                   JSR         @R8
    00000DF6 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   570        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    00000DF8 D142                   MOV.L       L918+6,R1  ; L645
    00000DFA E201                   MOV         #1,R2
    00000DFC 2F26                   MOV.L       R2,@-R15
    00000DFE E300                   MOV         #0,R3
    00000E00 2F36                   MOV.L       R3,@-R15
    00000E02 2F16                   MOV.L       R1,@-R15
    00000E04 D340                   MOV.L       L918+10,R3 ; _sprintf
    00000E06 430B                   JSR         @R3
    00000E08 64D3                   MOV         R13,R4
    00000E0A 7F0C                   ADD         #12,R15
      simplexC.c   571        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000E0C 2FD2                   MOV.L       R13,@R15
    00000E0E 66D3                   MOV         R13,R6
    00000E10 E710                   MOV         #16,R7
    00000E12 E500                   MOV         #0,R5
    00000E14 4B0B                   JSR         @R11
    00000E16 6453                   MOV         R5,R4
      simplexC.c   572        pInput->funcObjectivePurpose = InputI(0, 7);
    00000E18 E507                   MOV         #7,R5
    00000E1A B906                   BSR         _InputI
    00000E1C E400                   MOV         #0,R4
    00000E1E E140                   MOV         #64,R1
    00000E20 31EC                   ADD         R14,R1
      simplexC.c   573        Bdisp_PutDisp_DD();
    00000E22 4A0B                   JSR         @R10
    00000E24 2102                   MOV.L       R0,@R1
      simplexC.c   574        memset(strout,0,128);
    00000E26 E500                   MOV         #0,R5
    00000E28 D338                   MOV.L       L918+14,R3 ; _memset
    00000E2A 9668                   MOV.W       L918,R6    ; H'0080
    00000E2C 430B                   JSR         @R3
    00000E2E 64D3                   MOV         R13,R4
      simplexC.c   575        for(i=0;i<nVariables;i++)
    00000E30 E900                   MOV         #0,R9
    00000E32 6293                   MOV         R9,R2
    00000E34 3C26                   CMP/HI      R2,R12
    00000E36 8B21                   BF          L849
    00000E38              L850:                             
      simplexC.c   576        {
      simplexC.c   577            Bdisp_AllClr_DDVRAM();
    00000E38 480B                   JSR         @R8
    00000E3A 0009                   NOP
      simplexC.c   578            sprintf(strout,"Obj value var x%d",i+1);
    00000E3C D334                   MOV.L       L918+18,R3 ; L647
    00000E3E 6193                   MOV         R9,R1
    00000E40 D231                   MOV.L       L918+10,R2 ; _sprintf
    00000E42 7101                   ADD         #1,R1
    00000E44 2F16                   MOV.L       R1,@-R15
    00000E46 2F36                   MOV.L       R3,@-R15
    00000E48 420B                   JSR         @R2
    00000E4A 64D3                   MOV         R13,R4
      simplexC.c   579            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000E4C 56F2                   MOV.L       @(8,R15),R6
    00000E4E E500                   MOV         #0,R5
    00000E50 E710                   MOV         #16,R7
    00000E52 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E54 6453                   MOV         R5,R4
      simplexC.c   580            funcObjtValues[i] = InputD(0, 7);
    00000E56 6393                   MOV         R9,R3
    00000E58 52F6                   MOV.L       @(24,R15),R2
    00000E5A E507                   MOV         #7,R5
    00000E5C 4308                   SHLL2       R3
    00000E5E 4300                   SHLL        R3
    00000E60 332C                   ADD         R2,R3
    00000E62 2F36                   MOV.L       R3,@-R15
    00000E64 B8CC                   BSR         _InputD
    00000E66 E400                   MOV         #0,R4
      simplexC.c   581            Bdisp_PutDisp_DD();
    00000E68 4A0B                   JSR         @R10
    00000E6A 7F0C                   ADD         #12,R15
      simplexC.c   582            memset(strout,0,128);
    00000E6C 9647                   MOV.W       L918,R6    ; H'0080
    00000E6E E500                   MOV         #0,R5
    00000E70 D226                   MOV.L       L918+14,R2 ; _memset
    00000E72 420B                   JSR         @R2
    00000E74 64D3                   MOV         R13,R4
    00000E76 7901                   ADD         #1,R9
    00000E78 39C2                   CMP/HS      R12,R9
    00000E7A 8BDD                   BF          L850
    00000E7C              L849:                             
      simplexC.c   583        }
      simplexC.c   584        Bdisp_AllClr_DDVRAM();
    00000E7C 480B                   JSR         @R8
    00000E7E 0009                   NOP
      simplexC.c   585        sprintf(strout,"Obj value Independent",i+1);
    00000E80 D224                   MOV.L       L918+22,R2 ; L648
    00000E82 7901                   ADD         #1,R9
    00000E84 D320                   MOV.L       L918+10,R3 ; _sprintf
    00000E86 2F96                   MOV.L       R9,@-R15
    00000E88 2F26                   MOV.L       R2,@-R15
    00000E8A 430B                   JSR         @R3
    00000E8C 64D3                   MOV         R13,R4
      simplexC.c   586        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000E8E E710                   MOV         #16,R7
    00000E90 56F2                   MOV.L       @(8,R15),R6
    00000E92 E500                   MOV         #0,R5
    00000E94 4B0B                   JSR         @R11
    00000E96 6453                   MOV         R5,R4
      simplexC.c   587        funcObjtValues[nVariables] = InputD(0, 7);
    00000E98 52F6                   MOV.L       @(24,R15),R2
    00000E9A E507                   MOV         #7,R5
    00000E9C 63C3                   MOV         R12,R3
    00000E9E 4308                   SHLL2       R3
    00000EA0 4300                   SHLL        R3
    00000EA2 332C                   ADD         R2,R3
    00000EA4 2F36                   MOV.L       R3,@-R15
    00000EA6 B8AB                   BSR         _InputD
    00000EA8 E400                   MOV         #0,R4
      simplexC.c   588        Bdisp_PutDisp_DD();
    00000EAA 4A0B                   JSR         @R10
    00000EAC 7F0C                   ADD         #12,R15
      simplexC.c   589        pInput->constraints=constraints;
      simplexC.c   590        pInput->rightValues=rightValues;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   591        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c   592        pInput->nVariables=nVariables;
      simplexC.c   593        pInput->nConstraints=nConstraints;
      simplexC.c   594        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c   595        pInput->idSlopeVariables=idSlopeVariables;
      simplexC.c   596        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c   597        pInput->funcObjtValues=funcObjtValues;
    00000EAE E044                   MOV         #68,R0
    00000EB0 52F6                   MOV.L       @(24,R15),R2
    00000EB2 1E23                   MOV.L       R2,@(12,R14)
    00000EB4 53FA                   MOV.L       @(40,R15),R3
    00000EB6 1E34                   MOV.L       R3,@(16,R14)
    00000EB8 52F5                   MOV.L       @(20,R15),R2
    00000EBA 1E25                   MOV.L       R2,@(20,R14)
    00000EBC 1EC6                   MOV.L       R12,@(24,R14)
    00000EBE 53F2                   MOV.L       @(8,R15),R3
    00000EC0 1E3A                   MOV.L       R3,@(40,R14)
    00000EC2 52F9                   MOV.L       @(36,R15),R2
    00000EC4 1E2B                   MOV.L       R2,@(44,R14)
    00000EC6 53FB                   MOV.L       @(44,R15),R3
    00000EC8 1E3C                   MOV.L       R3,@(48,R14)
    00000ECA 52FC                   MOV.L       @(48,R15),R2
    00000ECC 1E2D                   MOV.L       R2,@(52,R14)
    00000ECE 53F4                   MOV.L       @(16,R15),R3
    00000ED0 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c   598        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c   599        pInput->modelType=TYPE_INPUT;
    00000ED2 E301                   MOV         #1,R3
    00000ED4 52F8                   MOV.L       @(32,R15),R2
      simplexC.c   600        pInput->problemType=problemType;
      simplexC.c   601        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c   602        return pInput;
    00000ED6 60E3                   MOV         R14,R0
    00000ED8 1E29                   MOV.L       R2,@(36,R14)
    00000EDA 1E31                   MOV.L       R3,@(4,R14)
    00000EDC 52F7                   MOV.L       @(28,R15),R2
    00000EDE 2E22                   MOV.L       R2,@R14
    00000EE0 51E8                   MOV.L       @(32,R14),R1
    00000EE2 4115                   CMP/PL      R1
      simplexC.c   603    }
    00000EE4 910C                   MOV.W       L918+2,R1  ; H'00B4
    00000EE6 0329                   MOVT        R3
    00000EE8 1E32                   MOV.L       R3,@(8,R14)
    00000EEA 3F1C                   ADD         R1,R15
    00000EEC 4F26                   LDS.L       @R15+,PR
    00000EEE 68F6                   MOV.L       @R15+,R8
    00000EF0 69F6                   MOV.L       @R15+,R9
    00000EF2 6AF6                   MOV.L       @R15+,R10
    00000EF4 6BF6                   MOV.L       @R15+,R11
    00000EF6 6CF6                   MOV.L       @R15+,R12
    00000EF8 6DF6                   MOV.L       @R15+,R13
    00000EFA 000B                   RTS
    00000EFC 6EF6                   MOV.L       @R15+,R14
    00000EFE              L918:                             
    00000EFE 0080                   .DATA.W     H'0080
    00000F00 00B4                   .DATA.W     H'00B4
    00000F02 0000                   .DATA.W     0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F04 <00000000>             .DATA.L     L645
    00000F08 <00000000>             .DATA.L     _sprintf
    00000F0C <00000000>             .DATA.L     _memset
    00000F10 <00000000>             .DATA.L     L647
    00000F14 <00000000>             .DATA.L     L648
      simplexC.c   604    
      simplexC.c   605    struct execution* selectExecutionMode()
    00000F18              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=148
    00000F18 2FE6                   MOV.L       R14,@-R15
    00000F1A 4F22                   STS.L       PR,@-R15
      simplexC.c   606    {
      simplexC.c   607        char strout[128];
      simplexC.c   608        struct execution *ex;
      simplexC.c   609        ex = malloc(sizeof(struct execution));
    00000F1C D34E                   MOV.L       L919+2,R3  ; _malloc
    00000F1E 7F80                   ADD         #-128,R15
    00000F20 430B                   JSR         @R3
    00000F22 E414                   MOV         #20,R4
      simplexC.c   610        Bdisp_AllClr_DDVRAM();
    00000F24 D24D                   MOV.L       L919+6,R2  ; _Bdisp_AllClr_DDVRAM
    00000F26 420B                   JSR         @R2
    00000F28 6E03                   MOV         R0,R14
      simplexC.c   611        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    00000F2A E301                   MOV         #1,R3
    00000F2C D14C                   MOV.L       L919+10,R1 ; L653
    00000F2E E200                   MOV         #0,R2
    00000F30 2F36                   MOV.L       R3,@-R15
    00000F32 2F26                   MOV.L       R2,@-R15
    00000F34 2F16                   MOV.L       R1,@-R15
    00000F36 64F3                   MOV         R15,R4
    00000F38 D34A                   MOV.L       L919+14,R3 ; _sprintf
    00000F3A 430B                   JSR         @R3
    00000F3C 740C                   ADD         #12,R4
      simplexC.c   612        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00000F3E E710                   MOV         #16,R7
    00000F40 D249                   MOV.L       L919+18,R2 ; _PrintMini
    00000F42 66F3                   MOV         R15,R6
    00000F44 760C                   ADD         #12,R6
    00000F46 E500                   MOV         #0,R5
    00000F48 420B                   JSR         @R2
    00000F4A 6453                   MOV         R5,R4
      simplexC.c   613        ex->mode = InputI(0, 7);
    00000F4C E507                   MOV         #7,R5
    00000F4E B86C                   BSR         _InputI
    00000F50 E400                   MOV         #0,R4
      simplexC.c   614        Bdisp_PutDisp_DD();
    00000F52 D246                   MOV.L       L919+22,R2 ; _Bdisp_PutDisp_DD
    00000F54 420B                   JSR         @R2
    00000F56 2E02                   MOV.L       R0,@R14
      simplexC.c   615        ex->nNodes=0;
      simplexC.c   616        return ex;
      simplexC.c   617    }
    00000F58 917D                   MOV.W       L919,R1    ; H'008C
    00000F5A E300                   MOV         #0,R3
    00000F5C 1E34                   MOV.L       R3,@(16,R14)
    00000F5E 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F60 3F1C                   ADD         R1,R15
    00000F62 4F26                   LDS.L       @R15+,PR
    00000F64 000B                   RTS
    00000F66 6EF6                   MOV.L       @R15+,R14
      simplexC.c   618    
      simplexC.c   619    struct problemStatement* convertModel(struct problemStatement* pInput)
    00000F68              _convertModel:                   ; function: convertModel
                                                           ; frame size=32
    00000F68 2FE6                   MOV.L       R14,@-R15
    00000F6A 2FD6                   MOV.L       R13,@-R15
    00000F6C 2FC6                   MOV.L       R12,@-R15
    00000F6E 6D43                   MOV         R4,R13
      simplexC.c   620    {
      simplexC.c   621        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c   622        struct problemStatement *modelToSolve;
      simplexC.c   623        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
      simplexC.c   624        modelToSolve = malloc(sizeof(struct problemStatement));
    00000F70 D339                   MOV.L       L919+2,R3  ; _malloc
    00000F72 2FB6                   MOV.L       R11,@-R15
    00000F74 2FA6                   MOV.L       R10,@-R15
    00000F76 EA00                   MOV         #0,R10
    00000F78 2F96                   MOV.L       R9,@-R15
    00000F7A 6CA3                   MOV         R10,R12
    00000F7C 2F86                   MOV.L       R8,@-R15
    00000F7E 69A3                   MOV         R10,R9
    00000F80 4F22                   STS.L       PR,@-R15
    00000F82 430B                   JSR         @R3
    00000F84 E450                   MOV         #80,R4
    00000F86 6E03                   MOV         R0,R14
      simplexC.c   625        modelToSolve->problemType=pInput->problemType;
    00000F88 62D2                   MOV.L       @R13,R2
      simplexC.c   626        modelToSolve->nVariablesSlope=pInput->nVariablesSlope;
      simplexC.c   627        modelToSolve->nVariables2fases=pInput->nVariables2fases;
      simplexC.c   628        modelToSolve->nVariablesInteger=pInput->nVariablesInteger;
      simplexC.c   629        modelToSolve->nConstraints=pInput->nConstraints;
      simplexC.c   630        modelToSolve->funcObjectivePurpose=pInput->funcObjectivePurpose;
      simplexC.c   631        modelToSolve->is2fasesNeeded=pInput->is2fasesNeeded;
      simplexC.c   632        modelToSolve->nVariables=pInput->nVariables+pInput->nVariablesSlope+pInput->nVariables2fases;
      simplexC.c   633        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(double));
    00000F8A E508                   MOV         #8,R5
    00000F8C DB38                   MOV.L       L919+26,R11; _calloc
    00000F8E E040                   MOV         #64,R0
    00000F90 2E22                   MOV.L       R2,@R14
    00000F92 53D7                   MOV.L       @(28,R13),R3
    00000F94 1E37                   MOV.L       R3,@(28,R14)
    00000F96 52D8                   MOV.L       @(32,R13),R2
    00000F98 1E28                   MOV.L       R2,@(32,R14)
    00000F9A 53D9                   MOV.L       @(36,R13),R3
    00000F9C 1E39                   MOV.L       R3,@(36,R14)
    00000F9E 52DA                   MOV.L       @(40,R13),R2
    00000FA0 1E2A                   MOV.L       R2,@(40,R14)
    00000FA2 03DE                   MOV.L       @(R0,R13),R3
    00000FA4 0E36                   MOV.L       R3,@(R0,R14)
    00000FA6 52D2                   MOV.L       @(8,R13),R2
    00000FA8 1E22                   MOV.L       R2,@(8,R14)
    00000FAA 53D7                   MOV.L       @(28,R13),R3
    00000FAC 51D6                   MOV.L       @(24,R13),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FAE 313C                   ADD         R3,R1
    00000FB0 52D8                   MOV.L       @(32,R13),R2
    00000FB2 312C                   ADD         R2,R1
    00000FB4 1E16                   MOV.L       R1,@(24,R14)
    00000FB6 6413                   MOV         R1,R4
    00000FB8 4B0B                   JSR         @R11
    00000FBA 7401                   ADD         #1,R4
    00000FBC E144                   MOV         #68,R1
    00000FBE 31EC                   ADD         R14,R1
    00000FC0 2102                   MOV.L       R0,@R1
      simplexC.c   634        if(modelToSolve->is2fasesNeeded)
    00000FC2 53E2                   MOV.L       @(8,R14),R3
    00000FC4 2338                   TST         R3,R3
    00000FC6 8906                   BT          L855
      simplexC.c   635        {
      simplexC.c   636            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(double));
    00000FC8 54E6                   MOV.L       @(24,R14),R4
    00000FCA E508                   MOV         #8,R5
    00000FCC 4B0B                   JSR         @R11
    00000FCE 7401                   ADD         #1,R4
    00000FD0 E148                   MOV         #72,R1
    00000FD2 31EC                   ADD         R14,R1
    00000FD4 2102                   MOV.L       R0,@R1
    00000FD6              L855:                             
      simplexC.c   637        }
      simplexC.c   638        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00000FD6 E504                   MOV         #4,R5
    00000FD8 4B0B                   JSR         @R11
    00000FDA 54E6                   MOV.L       @(24,R14),R4
    00000FDC 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c   639        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00000FDE E504                   MOV         #4,R5
    00000FE0 4B0B                   JSR         @R11
    00000FE2 54E6                   MOV.L       @(24,R14),R4
    00000FE4 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c   640        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00000FE6 E504                   MOV         #4,R5
    00000FE8 4B0B                   JSR         @R11
    00000FEA 54EA                   MOV.L       @(40,R14),R4
    00000FEC 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   641        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00000FEE E504                   MOV         #4,R5
    00000FF0 4B0B                   JSR         @R11
    00000FF2 54EA                   MOV.L       @(40,R14),R4
    00000FF4 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c   642        memset(modelToSolve->idConstraintTo2fasesVar,-1,modelToSolve->nConstraints);
    00000FF6 E5FF                   MOV         #-1,R5
    00000FF8 D31E                   MOV.L       L919+30,R3 ; _memset
    00000FFA 56EA                   MOV.L       @(40,R14),R6
    00000FFC 430B                   JSR         @R3
    00000FFE 6403                   MOV         R0,R4
      simplexC.c   643        memset(modelToSolve->idConstraintToSlopeVar,-1,modelToSolve->nConstraints);
    00001000 56EA                   MOV.L       @(40,R14),R6
    00001002 E5FF                   MOV         #-1,R5
    00001004 D21B                   MOV.L       L919+30,R2 ; _memset
    00001006 420B                   JSR         @R2
    00001008 54EE                   MOV.L       @(56,R14),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   644        //SET ID TYPES OF VARIABLES
      simplexC.c   645        for(i=0;i<modelToSolve->nVariables;i++)
    0000100A E501                   MOV         #1,R5
    0000100C A016                   BRA         L856
    0000100E 64A3                   MOV         R10,R4
    00001010              L857:                             
      simplexC.c   646        {
      simplexC.c   647            if(i>=pInput->nVariables && i<pInput->nVariables+pInput->nVariablesSlope)
    00001010 56D6                   MOV.L       @(24,R13),R6
    00001012 3463                   CMP/GE      R6,R4
    00001014 8B08                   BF          L858
    00001016 53D7                   MOV.L       @(28,R13),R3
    00001018 336C                   ADD         R6,R3
    0000101A 3433                   CMP/GE      R3,R4
    0000101C 8904                   BT          L858
      simplexC.c   648            {
      simplexC.c   649                modelToSolve->idSlopeVariables[i]=1;
    0000101E 6343                   MOV         R4,R3
    00001020 50EC                   MOV.L       @(48,R14),R0
    00001022 4308                   SHLL2       R3
    00001024 A009                   BRA         L859
    00001026 0356                   MOV.L       R5,@(R0,R3)
    00001028              L858:                             
      simplexC.c   650            }else if(i>=pInput->nVariables+pInput->nVariablesSlope)
    00001028 53D7                   MOV.L       @(28,R13),R3
    0000102A 52D6                   MOV.L       @(24,R13),R2
    0000102C 323C                   ADD         R3,R2
    0000102E 3423                   CMP/GE      R2,R4
    00001030 8B03                   BF          L859
      simplexC.c   651            {
      simplexC.c   652                modelToSolve->id2fasesVariables[i]=1;
    00001032 6243                   MOV         R4,R2
    00001034 50ED                   MOV.L       @(52,R14),R0
    00001036 4208                   SHLL2       R2
    00001038 0256                   MOV.L       R5,@(R0,R2)
    0000103A              L859:                             
    0000103A 7401                   ADD         #1,R4
    0000103C              L856:                             
    0000103C 53E6                   MOV.L       @(24,R14),R3
    0000103E 3433                   CMP/GE      R3,R4
    00001040 8BE6                   BF          L857
      simplexC.c   653            }
      simplexC.c   654            
      simplexC.c   655        }
      simplexC.c   656        for(i=0;i<modelToSolve->nVariables;i++)
    00001042 A04B                   BRA         L861
    00001044 64A3                   MOV         R10,R4
    00001046              L862:                             
      simplexC.c   657        {
      simplexC.c   658            if(modelToSolve->idSlopeVariables[i])
    00001046 6243                   MOV         R4,R2
    00001048 50EC                   MOV.L       @(48,R14),R0
    0000104A 4208                   SHLL2       R2
    0000104C 032E                   MOV.L       @(R0,R2),R3
    0000104E 2338                   TST         R3,R3
    00001050 8927                   BT          L863
      simplexC.c   659            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   660                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    00001052 A023                   BRA         L864
    00001054 6593                   MOV         R9,R5
    00001056              L919:                             
    00001056 008C                   .DATA.W     H'008C
    00001058 <00000000>             .DATA.L     _malloc
    0000105C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001060 <00000000>             .DATA.L     L653
    00001064 <00000000>             .DATA.L     _sprintf
    00001068 <00000000>             .DATA.L     _PrintMini
    0000106C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001070 <00000000>             .DATA.L     _calloc
    00001074 <00000000>             .DATA.L     _memset
    00001078              L865:                             
      simplexC.c   661                {
      simplexC.c   662                    if(pInput->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||pInput->inequalitySigns[j]==INE_GR
                         +EATER_OR_EQUAL_THAN)
    00001078 50D5                   MOV.L       @(20,R13),R0
    0000107A 6653                   MOV         R5,R6
    0000107C 4608                   SHLL2       R6
    0000107E 066E                   MOV.L       @(R0,R6),R6
    00001080 6063                   MOV         R6,R0
    00001082 8801                   CMP/EQ      #1,R0
    00001084 8902                   BT          L867
    00001086 6063                   MOV         R6,R0
    00001088 8802                   CMP/EQ      #2,R0
    0000108A 8B06                   BF          L866
    0000108C              L867:                             
      simplexC.c   663                    {
      simplexC.c   664                        modelToSolve->idConstraintToSlopeVar[j]=i;
    0000108C 50EE                   MOV.L       @(56,R14),R0
      simplexC.c   665                        nextConstraintSlopeSet=j+1;
    0000108E 6953                   MOV         R5,R9
    00001090 6353                   MOV         R5,R3
    00001092 4308                   SHLL2       R3
    00001094 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c   666                        break;
    00001096 A004                   BRA         L863
    00001098 7901                   ADD         #1,R9
    0000109A              L866:                             
    0000109A 7501                   ADD         #1,R5
    0000109C              L864:                             
    0000109C 53EA                   MOV.L       @(40,R14),R3
    0000109E 3533                   CMP/GE      R3,R5
    000010A0 8BEA                   BF          L865
    000010A2              L863:                             
      simplexC.c   667                    }
      simplexC.c   668                }
      simplexC.c   669            }
      simplexC.c   670            if(modelToSolve->id2fasesVariables[i])
    000010A2 6143                   MOV         R4,R1
    000010A4 50ED                   MOV.L       @(52,R14),R0
    000010A6 4108                   SHLL2       R1
    000010A8 031E                   MOV.L       @(R0,R1),R3
    000010AA 2338                   TST         R3,R3
    000010AC 8915                   BT          L869
      simplexC.c   671            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   672                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    000010AE A011                   BRA         L870
    000010B0 65C3                   MOV         R12,R5
    000010B2              L871:                             
      simplexC.c   673                {
      simplexC.c   674                    if(pInput->inequalitySigns[j]==INE_EQUAL ||pInput->inequalitySigns[j]==INE_GREATER_OR_EQUA
                         +L_THAN)
    000010B2 6653                   MOV         R5,R6
    000010B4 50D5                   MOV.L       @(20,R13),R0
    000010B6 4608                   SHLL2       R6
    000010B8 066E                   MOV.L       @(R0,R6),R6
    000010BA 2668                   TST         R6,R6
    000010BC 8902                   BT          L873
    000010BE 6063                   MOV         R6,R0
    000010C0 8802                   CMP/EQ      #2,R0
    000010C2 8B06                   BF          L872
    000010C4              L873:                             
      simplexC.c   675                    {
      simplexC.c   676                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    000010C4 50EF                   MOV.L       @(60,R14),R0
      simplexC.c   677                        nextConstraint2fasesSet=j+1;
    000010C6 6C53                   MOV         R5,R12
    000010C8 6353                   MOV         R5,R3
    000010CA 4308                   SHLL2       R3
    000010CC 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c   678                        break;
    000010CE A004                   BRA         L869
    000010D0 7C01                   ADD         #1,R12
    000010D2              L872:                             
    000010D2 7501                   ADD         #1,R5
    000010D4              L870:                             
    000010D4 53EA                   MOV.L       @(40,R14),R3
    000010D6 3533                   CMP/GE      R3,R5
    000010D8 8BEB                   BF          L871
    000010DA              L869:                             
    000010DA 7401                   ADD         #1,R4
    000010DC              L861:                             
    000010DC 53E6                   MOV.L       @(24,R14),R3
    000010DE 3433                   CMP/GE      R3,R4
    000010E0 8BB1                   BF          L862
      simplexC.c   679                    }
      simplexC.c   680                }
      simplexC.c   681            }
      simplexC.c   682        }
      simplexC.c   683        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c   684        modelToSolve->constraints=(double **)malloc(sizeof(double) * modelToSolve->nConstraints);
    000010E2 54EA                   MOV.L       @(40,R14),R4
    000010E4 D37E                   MOV.L       L920+2,R3  ; _malloc
    000010E6 4408                   SHLL2       R4
    000010E8 430B                   JSR         @R3
    000010EA 4400                   SHLL        R4
    000010EC 1E03                   MOV.L       R0,@(12,R14)
      simplexC.c   685        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(double));
    000010EE E508                   MOV         #8,R5
    000010F0 4B0B                   JSR         @R11
    000010F2 54EA                   MOV.L       @(40,R14),R4
    000010F4 1E04                   MOV.L       R0,@(16,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   686        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    000010F6 E504                   MOV         #4,R5
    000010F8 4B0B                   JSR         @R11
    000010FA 54EA                   MOV.L       @(40,R14),R4
    000010FC 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c   687        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    000010FE E504                   MOV         #4,R5
    00001100 4B0B                   JSR         @R11
    00001102 54E6                   MOV.L       @(24,R14),R4
    00001104 1E0B                   MOV.L       R0,@(44,R14)
      simplexC.c   688    
      simplexC.c   689        for(i=0;i<modelToSolve->nConstraints;i++)
    00001106 A071                   BRA         L875
    00001108 69A3                   MOV         R10,R9
    0000110A              L876:                             
      simplexC.c   690        {
      simplexC.c   691            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(double));
    0000110A 6393                   MOV         R9,R3
    0000110C 58E3                   MOV.L       @(12,R14),R8
    0000110E E508                   MOV         #8,R5
    00001110 4308                   SHLL2       R3
    00001112 383C                   ADD         R3,R8
    00001114 4B0B                   JSR         @R11
    00001116 54E6                   MOV.L       @(24,R14),R4
    00001118 2802                   MOV.L       R0,@R8
      simplexC.c   692            for(j=0;j<modelToSolve->nVariables;j++)
    0000111A 64A3                   MOV         R10,R4
    0000111C 6C93                   MOV         R9,R12
    0000111E A054                   BRA         L877
    00001120 4C08                   SHLL2       R12
    00001122              L878:                             
      simplexC.c   693            {
      simplexC.c   694                if(j<pInput->nVariables)//Copiar variables de entrada
    00001122 52D6                   MOV.L       @(24,R13),R2
    00001124 3423                   CMP/GE      R2,R4
    00001126 8914                   BT          L879
      simplexC.c   695                {
      simplexC.c   696                    modelToSolve->constraints[i][j]=pInput->constraints[i][j];
    00001128 50E3                   MOV.L       @(12,R14),R0
    0000112A 6543                   MOV         R4,R5
    0000112C 02CE                   MOV.L       @(R0,R12),R2
    0000112E 4508                   SHLL2       R5
    00001130 50D3                   MOV.L       @(12,R13),R0
    00001132 4500                   SHLL        R5
    00001134 03CE                   MOV.L       @(R0,R12),R3
    00001136 325C                   ADD         R5,R2
    00001138 335C                   ADD         R5,R3
    0000113A 6133                   MOV         R3,R1
    0000113C 6312                   MOV.L       @R1,R3
    0000113E 6023                   MOV         R2,R0
    00001140 2032                   MOV.L       R3,@R0
    00001142 5311                   MOV.L       @(4,R1),R3
    00001144 1031                   MOV.L       R3,@(4,R0)
      simplexC.c   697                    modelToSolve->idIntegerVariables[i]=pInput->idIntegerVariables[i];
    00001146 53EB                   MOV.L       @(44,R14),R3
    00001148 50DB                   MOV.L       @(44,R13),R0
    0000114A 33CC                   ADD         R12,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000114C 02CE                   MOV.L       @(R0,R12),R2
    0000114E A03B                   BRA         L880
    00001150 2322                   MOV.L       R2,@R3
    00001152              L879:                             
      simplexC.c   698                }else if(pInput->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToSolve->idConstraintTo
                         +SlopeVar[i])
    00001152 50D5                   MOV.L       @(20,R13),R0
    00001154 00CE                   MOV.L       @(R0,R12),R0
    00001156 8801                   CMP/EQ      #1,R0
    00001158 8B0C                   BF          L881
    0000115A 50EE                   MOV.L       @(56,R14),R0
    0000115C 02CE                   MOV.L       @(R0,R12),R2
    0000115E 3420                   CMP/EQ      R2,R4
    00001160 8B08                   BF          L881
      simplexC.c   699                {
      simplexC.c   700                    modelToSolve->constraints[i][j]=1;
    00001162 6343                   MOV         R4,R3
    00001164 50E3                   MOV.L       @(12,R14),R0
    00001166 4308                   SHLL2       R3
    00001168 02CE                   MOV.L       @(R0,R12),R2
    0000116A 4300                   SHLL        R3
    0000116C 323C                   ADD         R3,R2
    0000116E D35D                   MOV.L       L920+6,R3  ; H'3FF00000
    00001170 A010                   BRA         L905
    00001172 6123                   MOV         R2,R1
    00001174              L881:                             
      simplexC.c   701                }else if(pInput->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==modelToSolve->idConstrain
                         +tToSlopeVar[i])
    00001174 50D5                   MOV.L       @(20,R13),R0
    00001176 00CE                   MOV.L       @(R0,R12),R0
    00001178 8802                   CMP/EQ      #2,R0
    0000117A 8B0F                   BF          L883
    0000117C 50EE                   MOV.L       @(56,R14),R0
    0000117E 02CE                   MOV.L       @(R0,R12),R2
    00001180 3420                   CMP/EQ      R2,R4
    00001182 8B0B                   BF          L883
      simplexC.c   702                {
      simplexC.c   703                    modelToSolve->constraints[i][j]=-1;
    00001184 50E3                   MOV.L       @(12,R14),R0
    00001186 6343                   MOV         R4,R3
    00001188 02CE                   MOV.L       @(R0,R12),R2
    0000118A 4308                   SHLL2       R3
    0000118C 4300                   SHLL        R3
    0000118E 323C                   ADD         R3,R2
    00001190 D355                   MOV.L       L920+10,R3 ; H'BFF00000
    00001192 6123                   MOV         R2,R1
    00001194              L905:                             
    00001194 2132                   MOV.L       R3,@R1
    00001196 E300                   MOV         #0,R3
    00001198 A016                   BRA         L880
    0000119A 1131                   MOV.L       R3,@(4,R1)
    0000119C              L883:                             
      simplexC.c   704                }else if((pInput->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || pInput->inequalitySigns[i]=
                         +=INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    0000119C 50D5                   MOV.L       @(20,R13),R0
    0000119E 00CE                   MOV.L       @(R0,R12),R0
    000011A0 8802                   CMP/EQ      #2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011A2 8D02                   BT/S        L886
    000011A4 6503                   MOV         R0,R5
    000011A6 2558                   TST         R5,R5
    000011A8 8B0E                   BF          L880
    000011AA              L886:                             
    000011AA 50EF                   MOV.L       @(60,R14),R0
    000011AC 03CE                   MOV.L       @(R0,R12),R3
    000011AE 3430                   CMP/EQ      R3,R4
    000011B0 8B0A                   BF          L880
      simplexC.c   705                {
      simplexC.c   706                    modelToSolve->constraints[i][j]=1;
    000011B2 6243                   MOV         R4,R2
    000011B4 50E3                   MOV.L       @(12,R14),R0
    000011B6 4208                   SHLL2       R2
    000011B8 03CE                   MOV.L       @(R0,R12),R3
    000011BA 4200                   SHLL        R2
    000011BC 332C                   ADD         R2,R3
    000011BE 6133                   MOV         R3,R1
    000011C0 D248                   MOV.L       L920+6,R2  ; H'3FF00000
    000011C2 2122                   MOV.L       R2,@R1
    000011C4 E200                   MOV         #0,R2
    000011C6 1121                   MOV.L       R2,@(4,R1)
    000011C8              L880:                             
    000011C8 7401                   ADD         #1,R4
    000011CA              L877:                             
    000011CA 53E6                   MOV.L       @(24,R14),R3
    000011CC 3433                   CMP/GE      R3,R4
    000011CE 8BA8                   BF          L878
      simplexC.c   707                }
      simplexC.c   708                //Cualquier otro caso tiene un 0 por calloc
      simplexC.c   709            }
      simplexC.c   710            modelToSolve->rightValues[i]=pInput->rightValues[i];
    000011D0 53E4                   MOV.L       @(16,R14),R3
    000011D2 6493                   MOV         R9,R4
    000011D4 52D4                   MOV.L       @(16,R13),R2
    000011D6 4408                   SHLL2       R4
    000011D8 4400                   SHLL        R4
    000011DA 334C                   ADD         R4,R3
    000011DC 324C                   ADD         R4,R2
    000011DE 6123                   MOV         R2,R1
    000011E0 6212                   MOV.L       @R1,R2
    000011E2 7901                   ADD         #1,R9
    000011E4 6033                   MOV         R3,R0
    000011E6 2022                   MOV.L       R2,@R0
    000011E8 5211                   MOV.L       @(4,R1),R2
    000011EA 1021                   MOV.L       R2,@(4,R0)
    000011EC              L875:                             
    000011EC 53EA                   MOV.L       @(40,R14),R3
    000011EE 3933                   CMP/GE      R3,R9
    000011F0 8B8B                   BF          L876
      simplexC.c   711        }
      simplexC.c   712    
      simplexC.c   713        //Create new obj funct
      simplexC.c   714        for(i=0;i<modelToSolve->nVariables;i++)
    000011F2 A023                   BRA         L887
    000011F4 64A3                   MOV         R10,R4
    000011F6              L888:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   715        {
      simplexC.c   716            if(i<pInput->nVariables)
    000011F6 52D6                   MOV.L       @(24,R13),R2
    000011F8 3423                   CMP/GE      R2,R4
    000011FA 890E                   BT          L889
      simplexC.c   717            {
      simplexC.c   718                modelToSolve->funcObjtValues[i]=pInput->funcObjtValues[i];
    000011FC 6543                   MOV         R4,R5
    000011FE 4508                   SHLL2       R5
    00001200 4500                   SHLL        R5
    00001202 E044                   MOV         #68,R0
    00001204 02EE                   MOV.L       @(R0,R14),R2
    00001206 325C                   ADD         R5,R2
    00001208 03DE                   MOV.L       @(R0,R13),R3
    0000120A 6023                   MOV         R2,R0
    0000120C 335C                   ADD         R5,R3
    0000120E 6133                   MOV         R3,R1
    00001210 6312                   MOV.L       @R1,R3
    00001212 2032                   MOV.L       R3,@R0
    00001214 5311                   MOV.L       @(4,R1),R3
    00001216 A010                   BRA         L890
    00001218 1031                   MOV.L       R3,@(4,R0)
    0000121A              L889:                             
      simplexC.c   719            }else if(i>=(pInput->nVariables+pInput->nVariablesSlope))
    0000121A 53D7                   MOV.L       @(28,R13),R3
    0000121C 51D6                   MOV.L       @(24,R13),R1
    0000121E 313C                   ADD         R3,R1
    00001220 3413                   CMP/GE      R1,R4
    00001222 8B0A                   BF          L890
      simplexC.c   720            {
      simplexC.c   721                modelToSolve->funcObjtValues2Fases[i]=1;
    00001224 6243                   MOV         R4,R2
    00001226 4208                   SHLL2       R2
    00001228 4200                   SHLL        R2
    0000122A E048                   MOV         #72,R0
    0000122C 03EE                   MOV.L       @(R0,R14),R3
    0000122E 323C                   ADD         R3,R2
    00001230 D32C                   MOV.L       L920+6,R3  ; H'3FF00000
    00001232 6123                   MOV         R2,R1
    00001234 2132                   MOV.L       R3,@R1
    00001236 E300                   MOV         #0,R3
    00001238 1131                   MOV.L       R3,@(4,R1)
    0000123A              L890:                             
    0000123A 7401                   ADD         #1,R4
    0000123C              L887:                             
    0000123C 52E6                   MOV.L       @(24,R14),R2
    0000123E 3423                   CMP/GE      R2,R4
    00001240 8BD9                   BF          L888
      simplexC.c   722            }
      simplexC.c   723        }
      simplexC.c   724    
      simplexC.c   725        //Create aj vectors
      simplexC.c   726        modelToSolve->ajVector=calloc(modelToSolve->nVariables,sizeof(double));
    00001242 E508                   MOV         #8,R5
    00001244 4B0B                   JSR         @R11
    00001246 54E6                   MOV.L       @(24,R14),R4
    00001248 E14C                   MOV         #76,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000124A 31EC                   ADD         R14,R1
    0000124C 2102                   MOV.L       R0,@R1
      simplexC.c   727        for(i=0;i<modelToSolve->nVariables;i++)
    0000124E A026                   BRA         L892
    00001250 6CA3                   MOV         R10,R12
    00001252              L893:                             
      simplexC.c   728        {
      simplexC.c   729            modelToSolve->ajVector[i]=calloc(modelToSolve->nConstraints,sizeof(double));
    00001252 69C3                   MOV         R12,R9
    00001254 4908                   SHLL2       R9
    00001256 E04C                   MOV         #76,R0
    00001258 00EE                   MOV.L       @(R0,R14),R0
    0000125A E508                   MOV         #8,R5
    0000125C 6803                   MOV         R0,R8
    0000125E 389C                   ADD         R9,R8
    00001260 4B0B                   JSR         @R11
    00001262 54EA                   MOV.L       @(40,R14),R4
    00001264 2802                   MOV.L       R0,@R8
      simplexC.c   730            for(j=0;j<modelToSolve->nConstraints;j++)
    00001266 64A3                   MOV         R10,R4
    00001268 65C3                   MOV         R12,R5
    0000126A 4508                   SHLL2       R5
    0000126C A013                   BRA         L894
    0000126E 4500                   SHLL        R5
    00001270              L895:                             
      simplexC.c   731            {
      simplexC.c   732                modelToSolve->ajVector[i][j]=modelToSolve->constraints[j][i];
    00001270 E04C                   MOV         #76,R0
    00001272 6243                   MOV         R4,R2
    00001274 00EE                   MOV.L       @(R0,R14),R0
    00001276 6143                   MOV         R4,R1
    00001278 039E                   MOV.L       @(R0,R9),R3
    0000127A 4208                   SHLL2       R2
    0000127C 50E3                   MOV.L       @(12,R14),R0
    0000127E 7401                   ADD         #1,R4
    00001280 4200                   SHLL        R2
    00001282 332C                   ADD         R2,R3
    00001284 4108                   SHLL2       R1
    00001286 021E                   MOV.L       @(R0,R1),R2
    00001288 325C                   ADD         R5,R2
    0000128A 6123                   MOV         R2,R1
    0000128C 6212                   MOV.L       @R1,R2
    0000128E 6033                   MOV         R3,R0
    00001290 2022                   MOV.L       R2,@R0
    00001292 5211                   MOV.L       @(4,R1),R2
    00001294 1021                   MOV.L       R2,@(4,R0)
    00001296              L894:                             
    00001296 53EA                   MOV.L       @(40,R14),R3
    00001298 3433                   CMP/GE      R3,R4
    0000129A 8BE9                   BF          L895
    0000129C 7C01                   ADD         #1,R12
    0000129E              L892:                             
    0000129E 53E6                   MOV.L       @(24,R14),R3
    000012A0 3C33                   CMP/GE      R3,R12
    000012A2 8BD6                   BF          L893
      simplexC.c   733            }
      simplexC.c   734        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   735    
      simplexC.c   736        modelToSolve->funcObjtValues[modelToSolve->nVariables]=pInput->funcObjtValues[pInput->nVariables];
    000012A4 51E6                   MOV.L       @(24,R14),R1
    000012A6 E044                   MOV         #68,R0
    000012A8 52D6                   MOV.L       @(24,R13),R2
    000012AA 4108                   SHLL2       R1
    000012AC 03EE                   MOV.L       @(R0,R14),R3
    000012AE 4208                   SHLL2       R2
    000012B0 4100                   SHLL        R1
    000012B2 313C                   ADD         R3,R1
    000012B4 03DE                   MOV.L       @(R0,R13),R3
    000012B6 4200                   SHLL        R2
    000012B8 323C                   ADD         R3,R2
    000012BA 6323                   MOV         R2,R3
    000012BC 6232                   MOV.L       @R3,R2
    000012BE 6013                   MOV         R1,R0
    000012C0 2022                   MOV.L       R2,@R0
    000012C2 5231                   MOV.L       @(4,R3),R2
    000012C4 1021                   MOV.L       R2,@(4,R0)
      simplexC.c   737        modelToSolve->modelType=TYPE_SOLVE;
    000012C6 E302                   MOV         #2,R3
    000012C8 1E31                   MOV.L       R3,@(4,R14)
      simplexC.c   738        return modelToSolve;
    000012CA 60E3                   MOV         R14,R0
      simplexC.c   739    }
    000012CC 4F26                   LDS.L       @R15+,PR
    000012CE 68F6                   MOV.L       @R15+,R8
    000012D0 69F6                   MOV.L       @R15+,R9
    000012D2 6AF6                   MOV.L       @R15+,R10
    000012D4 6BF6                   MOV.L       @R15+,R11
    000012D6 6CF6                   MOV.L       @R15+,R12
    000012D8 6DF6                   MOV.L       @R15+,R13
    000012DA 000B                   RTS
    000012DC 6EF6                   MOV.L       @R15+,R14
    000012DE              L920:                             
    000012DE 0000                   .DATA.W     0
    000012E0 <00000000>             .DATA.L     _malloc
    000012E4 3FF00000               .DATA.L     H'3FF00000
    000012E8 BFF00000               .DATA.L     H'BFF00000
      simplexC.c   740    
      simplexC.c   741    int AddIn_main(int isAppli, unsigned short OptionNum)
    000012EC              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=152
    000012EC 2FE6                   MOV.L       R14,@-R15
    000012EE 4F22                   STS.L       PR,@-R15
    000012F0 904B                   MOV.W       L921,R0    ; H'FF7C
    000012F2 3F0C                   ADD         R0,R15
      simplexC.c   742    {
      simplexC.c   743        char str[128];
      simplexC.c   744        struct execution *ex;
      simplexC.c   745        ex = selectExecutionMode();
    000012F4 BE10                   BSR         _selectExecutionMode
    000012F6 0009                   NOP
    000012F8 6E03                   MOV         R0,R14
      simplexC.c   746        if(ex->mode==MODE_FULL_EXECUTION)
    000012FA 62E2                   MOV.L       @R14,R2
    000012FC 2228                   TST         R2,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012FE 8B29                   BF          L897
      simplexC.c   747        {
      simplexC.c   748            ex->initialProblemStatement=getProblemInputs();
    00001300 BCA0                   BSR         _getProblemInputs
    00001302 0009                   NOP
      simplexC.c   749            Bdisp_AllClr_DDVRAM();
    00001304 D222                   MOV.L       L921+6,R2  ; _Bdisp_AllClr_DDVRAM
    00001306 420B                   JSR         @R2
    00001308 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c   750            sprintf(str,"nSlope %d, N2F %d",ex->initialProblemStatement->nVariablesSlope,ex->initialProblemSta
                         +tement->nVariables2fases);
    0000130A 53E1                   MOV.L       @(4,R14),R3
    0000130C 2F32                   MOV.L       R3,@R15
    0000130E 5238                   MOV.L       @(32,R3),R2
    00001310 2F26                   MOV.L       R2,@-R15
    00001312 51F1                   MOV.L       @(4,R15),R1
    00001314 D21F                   MOV.L       L921+10,R2 ; L691
    00001316 5317                   MOV.L       @(28,R1),R3
    00001318 2F36                   MOV.L       R3,@-R15
    0000131A 2F26                   MOV.L       R2,@-R15
    0000131C D31E                   MOV.L       L921+14,R3 ; _sprintf
    0000131E 64F3                   MOV         R15,R4
    00001320 430B                   JSR         @R3
    00001322 7410                   ADD         #16,R4
      simplexC.c   751            PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
    00001324 D21D                   MOV.L       L921+18,R2 ; _PrintMini
    00001326 7F0C                   ADD         #12,R15
    00001328 E710                   MOV         #16,R7
    0000132A 66F3                   MOV         R15,R6
    0000132C 7604                   ADD         #4,R6
    0000132E E500                   MOV         #0,R5
    00001330 420B                   JSR         @R2
    00001332 6453                   MOV         R5,R4
      simplexC.c   752            Bdisp_PutDisp_DD();
    00001334 D31A                   MOV.L       L921+22,R3 ; _Bdisp_PutDisp_DD
    00001336 430B                   JSR         @R3
    00001338 0009                   NOP
      simplexC.c   753            Sleep(3000);
    0000133A 9427                   MOV.W       L921+2,R4  ; H'0BB8
    0000133C D219                   MOV.L       L921+26,R2 ; _Sleep
    0000133E 420B                   JSR         @R2
    00001340 0009                   NOP
      simplexC.c   754            printStatementMenu(ex->initialProblemStatement);
    00001342 B8EE                   BSR         _printStatementMenu
    00001344 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   755            ex->canonicalStatement=convertModel(ex->initialProblemStatement);
    00001346 BE0F                   BSR         _convertModel
    00001348 54E1                   MOV.L       @(4,R14),R4
    0000134A 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c   756            printStatementMenu(ex->canonicalStatement);
    0000134C B8E9                   BSR         _printStatementMenu
    0000134E 6403                   MOV         R0,R4
    00001350 A013                   BRA         L898
    00001352 0009                   NOP
    00001354              L897:                             
      simplexC.c   757        }else if(ex->mode==MODE_INPUT_TABLE)
    00001354 60E2                   MOV.L       @R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001356 8801                   CMP/EQ      #1,R0
    00001358 890F                   BT          L898
      simplexC.c   758        {
      simplexC.c   759            //TODO
      simplexC.c   760        }else
      simplexC.c   761        {
      simplexC.c   762            Bdisp_AllClr_DDVRAM();
    0000135A D30D                   MOV.L       L921+6,R3  ; _Bdisp_AllClr_DDVRAM
    0000135C 430B                   JSR         @R3
    0000135E 0009                   NOP
      simplexC.c   763            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    00001360 D611                   MOV.L       L921+30,R6 ; L463
    00001362 E500                   MOV         #0,R5
    00001364 D20D                   MOV.L       L921+18,R2 ; _PrintMini
    00001366 E710                   MOV         #16,R7
    00001368 420B                   JSR         @R2
    0000136A 6453                   MOV         R5,R4
      simplexC.c   764            Bdisp_PutDisp_DD();
    0000136C D30C                   MOV.L       L921+22,R3 ; _Bdisp_PutDisp_DD
    0000136E 430B                   JSR         @R3
    00001370 0009                   NOP
      simplexC.c   765            Sleep(3000);
    00001372 940B                   MOV.W       L921+2,R4  ; H'0BB8
    00001374 D20B                   MOV.L       L921+26,R2 ; _Sleep
    00001376 420B                   JSR         @R2
    00001378 0009                   NOP
    0000137A              L898:                             
      simplexC.c   766        }
      simplexC.c   767        freeMemoryExecution(ex);
    0000137A D30C                   MOV.L       L921+34,R3 ; _freeMemoryExecution
    0000137C 430B                   JSR         @R3
    0000137E 64E3                   MOV         R14,R4
      simplexC.c   768        
      simplexC.c   769    }
    00001380 9105                   MOV.W       L921+4,R1  ; H'0084
    00001382 3F1C                   ADD         R1,R15
    00001384 4F26                   LDS.L       @R15+,PR
    00001386 000B                   RTS
    00001388 6EF6                   MOV.L       @R15+,R14
    0000138A              L921:                             
    0000138A FF7C                   .DATA.W     H'FF7C
    0000138C 0BB8                   .DATA.W     H'0BB8
    0000138E 0084                   .DATA.W     H'0084
    00001390 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001394 <00000000>             .DATA.L     L691
    00001398 <00000000>             .DATA.L     _sprintf
    0000139C <00000000>             .DATA.L     _PrintMini
    000013A0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000013A4 <00000000>             .DATA.L     _Sleep
    000013A8 <00000000>             .DATA.L     L463
    000013AC <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c   770    
      simplexC.c   771    #pragma section _BR_Size
      simplexC.c   772    unsigned long BR_Size;
      simplexC.c   773    #pragma section
      simplexC.c   774    
      simplexC.c   775    #pragma section _TOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   776    
      simplexC.c   777    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
      simplexC.c   778    {
      simplexC.c   779        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L922+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L922:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c   780    }
      simplexC.c   781    
      simplexC.c   782    #pragma section
C   00000000              L460:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              L461:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L462:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L463:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L469:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L470:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L482:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C204F424A   
             2E20457869   
             74202564     
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L483:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L484:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L485:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             747261696E   
             74733A2025   
             642C204E56   
             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L487:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L488:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   
             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L490:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L494:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L496:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L505:
    000000CC 417825642E             .SDATA      "Ax%d. nConstraints: %d, Exit %d"
             206E436F6E   
             7374726169   
             6E74733A20   
             25642C2045   
             7869742025   
             64           
    000000EB 00                     .DATA.B     H'00
    000000EC              L508:
    000000EC 417825642E             .SDATA      "Ax%d. %.2f Pos %d"
             20252E3266   
             20506F7320   
             2564         
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L516:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000100 41786A2070             .SDATA      "Axj pMenu Vars %d.  %d exit"
             4D656E7520   
             5661727320   
             25642E2020   
             2564206578   
             6974         
    0000011B 00                     .DATA.B     H'00
    0000011C              L525:
    0000011C 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    00000144 00                     .DATA.B     H'00
    00000145 00000001               .RES.B      1
    00000146 00000002               .RES.W      1
    00000148              L527:
    00000148 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    00000168 00                     .DATA.B     H'00
    00000169 00000001               .RES.B      1
    0000016A 00000002               .RES.W      1
    0000016C              L529:
    0000016C 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   
             6A2066756E   
             632E         
    0000017D 00                     .DATA.B     H'00
    0000017E 00000002               .RES.W      1
    00000180              L531:
    00000180 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       
    00000192 00                     .DATA.B     H'00
    00000193 00000001               .RES.B      1
    00000194              L533:
    00000194 342050696E             .SDATA      "4 Pinfo aj vec"
             666F20616A   
             20766563     
    000001A2 00                     .DATA.B     H'00
    000001A3 00000001               .RES.B      1
    000001A4              L548:
    000001A4 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2564         
    000001C4 00                     .DATA.B     H'00
    000001C5 00000001               .RES.B      1
    000001C6 00000002               .RES.W      1
    000001C8              L550:
    000001C8 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    000001DA 00                     .DATA.B     H'00
    000001DB 00000001               .RES.B      1
    000001DC              L552:
    000001DC 20536C6F70             .SDATA      " Slope"
             65           
    000001E2 00                     .DATA.B     H'00
    000001E3 00000001               .RES.B      1
    000001E4              L554:
    000001E4 204475616C             .SDATA      " Dual"
    000001E9 00                     .DATA.B     H'00
    000001EA 00000002               .RES.W      1
    000001EC              L556:
    000001EC 20496E74               .SDATA      " Int"
    000001F0 00                     .DATA.B     H'00
    000001F1 00000001               .RES.B      1
    000001F2 00000002               .RES.W      1
    000001F4              L563:
    000001F4 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         
    0000020A 00                     .DATA.B     H'00
    0000020B 00000001               .RES.B      1
    0000020C              L570:
    0000020C 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    00000225 00                     .DATA.B     H'00
    00000226 00000002               .RES.W      1
    00000228              L578:
    00000228 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   
             656E752E20   
             2564206578   
             6974         
    00000248 00                     .DATA.B     H'00
    00000249 00000001               .RES.B      1
    0000024A 00000002               .RES.W      1
    0000024C              L579:
    0000024C 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    00000257 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000258              L580:
    00000258 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    00000263 00                     .DATA.B     H'00
    00000264              L581:
    00000264 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    00000270 00                     .DATA.B     H'00
    00000271 00000001               .RES.B      1
    00000272 00000002               .RES.W      1
    00000274              L589:
    00000274 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    0000028D 00                     .DATA.B     H'00
    0000028E 00000002               .RES.W      1
    00000290              L598:
    00000290 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    000002B1 00                     .DATA.B     H'00
    000002B2 00000002               .RES.W      1
    000002B4              L599:
    000002B4 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    000002D0 00                     .DATA.B     H'00
    000002D1 00000001               .RES.B      1
    000002D2 00000002               .RES.W      1
    000002D4              L606:
    000002D4 436F6E7374             .SDATA      "Constraint: %d, Right Value"
             7261696E74   
             3A2025642C   
             2052696768   
             742056616C   
             7565         
    000002EF 00                     .DATA.B     H'00
    000002F0              L619:
    000002F0 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   
             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    0000030C 00                     .DATA.B     H'00
    0000030D 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000030E 00000002               .RES.W      1
    00000310              L636:
    00000310 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    0000031D 00                     .DATA.B     H'00
    0000031E 00000002               .RES.W      1
    00000320              L637:
    00000320 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    0000032B 00                     .DATA.B     H'00
    0000032C              L638:
    0000032C 5072657373             .SDATA      "Press. 1-LP, 2-ILP, 3-Cuts"
             2E20312D4C   
             502C20322D   
             494C502C20   
             332D437574   
             73           
    00000346 00                     .DATA.B     H'00
    00000347 00000001               .RES.B      1
    00000348              L641:
    00000348 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    00000354 00                     .DATA.B     H'00
    00000355 00000001               .RES.B      1
    00000356 00000002               .RES.W      1
    00000358              L642:
    00000358 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   
             20496E7420   
             7661722C20   
             30206E6F     
    00000370 00                     .DATA.B     H'00
    00000371 00000001               .RES.B      1
    00000372 00000002               .RES.W      1
    00000374              L645:
    00000374 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   
             25642C204D   
             6178202564   
    00000388 00                     .DATA.B     H'00
    00000389 00000001               .RES.B      1
    0000038A 00000002               .RES.W      1
    0000038C              L647:
    0000038C 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    0000039D 00                     .DATA.B     H'00
    0000039E 00000002               .RES.W      1
    000003A0              L648:
    000003A0 4F626A2076             .SDATA      "Obj value Independent"
             616C756520   
             496E646570   
             656E64656E   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             74           
    000003B5 00                     .DATA.B     H'00
    000003B6 00000002               .RES.W      1
    000003B8              L653:
    000003B8 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    000003CF 00                     .DATA.B     H'00
    000003D0              L691:
    000003D0 6E536C6F70             .SDATA      "nSlope %d, N2F %d"
             652025642C   
             204E324620   
             2564         
    000003E1 00                     .DATA.B     H'00
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1











































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 21-Dec-2020 12:37:05  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        58




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      782



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000013B0 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000003E2 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000017A2 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           13
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          27
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           213






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmk374.tmp 

