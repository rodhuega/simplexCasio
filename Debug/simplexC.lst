SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include "limits.h"
      simplexC.c     4    #include <stdlib.h>
      simplexC.c     5    #include "stdio.h"
      simplexC.c     6    #include "SH4_compatibility.h"
      simplexC.c     7    
      simplexC.c     8    #define NO_EVAL_VALUE INT_MAX
      simplexC.c     9    
      simplexC.c    10    #define TYPE_LP 1
      simplexC.c    11    #define TYPE_ILP 2
      simplexC.c    12    #define TYPE_CUT 3
      simplexC.c    13    
      simplexC.c    14    #define TYPE_INPUT 1
      simplexC.c    15    #define TYPE_SOLVE 2
      simplexC.c    16    
      simplexC.c    17    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    18    #define EXIT_OPT 0
      simplexC.c    19    
      simplexC.c    20    #define INE_EQUAL 0
      simplexC.c    21    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    22    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    23    
      simplexC.c    24    
      simplexC.c    25    #define FUNC_MINIMIZE 0
      simplexC.c    26    #define FUNC_MAXIMIZE 1
      simplexC.c    27    
      simplexC.c    28    
      simplexC.c    29    #define MODE_FULL_EXECUTION 0
      simplexC.c    30    #define MODE_INPUT_TABLE 1
      simplexC.c    31    
      simplexC.c    32    
      simplexC.c    33    struct iteration
      simplexC.c    34    {
      simplexC.c    35        int numIteration;
      simplexC.c    36        int* idBasicVariables;//1 si esa variable es Basica. 0 sera NoBasica
      simplexC.c    37        int *idByRowOfBasicVarsInBInv;//ejemplo [0]->2. la row 0 tiene asociala la variable 3
      simplexC.c    38        int isUnbounded;//1 en caso de si, 0 en caso de no
      simplexC.c    39    
      simplexC.c    40        int idVarIn;
      simplexC.c    41        int idVarOut;
      simplexC.c    42        int indexVarOutInBInvMatrix;
      simplexC.c    43    
      simplexC.c    44        float **Binv;
      simplexC.c    45        int BinvSize;
      simplexC.c    46    
      simplexC.c    47        float *ct;
      simplexC.c    48        float *xb;
      simplexC.c    49        float *ctBinv;
      simplexC.c    50        float *zj;
      simplexC.c    51        float *cjMinusZj;
      simplexC.c    52        float *yj;
      simplexC.c    53        float *xbDivYj;
      simplexC.c    54    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    55        float zSol ;
      simplexC.c    56    };
      simplexC.c    57    
      simplexC.c    58    struct problemStatement
      simplexC.c    59    {
      simplexC.c    60        int problemType;
      simplexC.c    61        int modelType;
      simplexC.c    62        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    63        int is2fasesActive;//1 en caso de si. 0 en caso que no
      simplexC.c    64        
      simplexC.c    65        //1 array de variables por cada constraint
      simplexC.c    66        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    67        float **constraints;
      simplexC.c    68        float *rightValues;
      simplexC.c    69        int *inequalitySigns;
      simplexC.c    70        int nVariables;
      simplexC.c    71        int nVariablesSlope;
      simplexC.c    72        int nVariables2fases;
      simplexC.c    73        int nVariablesInteger;
      simplexC.c    74        int nConstraints;
      simplexC.c    75        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    76        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    77        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    78        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    79        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    80    
      simplexC.c    81        int funcObjectivePurpose;
      simplexC.c    82        float *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    83        float *funcObjtValues2Fases;
      simplexC.c    84    
      simplexC.c    85        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c    86        
      simplexC.c    87    };
      simplexC.c    88    
      simplexC.c    89    struct node
      simplexC.c    90    {
      simplexC.c    91        int id;
      simplexC.c    92        int nIterations;
      simplexC.c    93        struct iteration **its;
      simplexC.c    94    };
      simplexC.c    95    
      simplexC.c    96    struct execution
      simplexC.c    97    {
      simplexC.c    98        int mode;
      simplexC.c    99        struct problemStatement *initialProblemStatement;
      simplexC.c   100        struct problemStatement *canonicalStatement;
      simplexC.c   101        struct node nodes;
      simplexC.c   102        float *bVectorValues;//Right values;
      simplexC.c   103        float *inputCvectorValues;//Values of cost variable
      simplexC.c   104        float *fases2CvectorValues;
      simplexC.c   105        int nNodes;
      simplexC.c   106        int currentFuncObjectivePurpose;
      simplexC.c   107        int nVariables;
      simplexC.c   108    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   109        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c   110    };
      simplexC.c   111    
      simplexC.c   112    struct execution ex;
      simplexC.c   113    
      simplexC.c   114    float InputD(int, int);
      simplexC.c   115    
      simplexC.c   116    int InputI(int, int);
      simplexC.c   117    
      simplexC.c   118    float InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=532
                                                           ; used runtime library name:
                                                           ; __dtos
    00000000 4F22                   STS.L       PR,@-R15
    00000002 909E                   MOV.W       L1130,R0   ; H'FDFC
      simplexC.c   119    {
      simplexC.c   120        char *string[128], *stopstring;
      simplexC.c   121        string_input(x, y, string);
    00000004 D351                   MOV.L       L1130+10,R3; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c   122        return strtod(string, &stopstring);
    0000000E 7FF8                   ADD         #-8,R15
    00000010 D24F                   MOV.L       L1130+14,R2; _strtod
    00000012 65F3                   MOV         R15,R5
    00000014 7508                   ADD         #8,R5
    00000016 64F3                   MOV         R15,R4
    00000018 740C                   ADD         #12,R4
    0000001A 420B                   JSR         @R2
    0000001C 2FF6                   MOV.L       R15,@-R15
    0000001E D34D                   MOV.L       L1130+18,R3; __dtos
    00000020 430B                   JSR         @R3
    00000022 7F04                   ADD         #4,R15
      simplexC.c   123    }
    00000024 918E                   MOV.W       L1130+2,R1 ; H'0204
    00000026 3F1C                   ADD         R1,R15
    00000028 4F26                   LDS.L       @R15+,PR
    0000002A 000B                   RTS
    0000002C 0009                   NOP
      simplexC.c   124    
      simplexC.c   125    int InputI(int x, int y)
    0000002E              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 9089                   MOV.W       L1130+4,R0 ; H'FE00
    00000032 3F0C                   ADD         R0,R15
      simplexC.c   126    {
      simplexC.c   127        char *string[128], *stopstring;
      simplexC.c   128        string_input(x, y, string);
    00000034 D345                   MOV.L       L1130+10,R3; _string_input
    00000036 430B                   JSR         @R3
    00000038 66F3                   MOV         R15,R6
      simplexC.c   129        return atoi(&string);
    0000003A D247                   MOV.L       L1130+22,R2; _atoi




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 420B                   JSR         @R2
    0000003E 64F3                   MOV         R15,R4
      simplexC.c   130    }
    00000040 9182                   MOV.W       L1130+6,R1 ; H'0200
    00000042 3F1C                   ADD         R1,R15
    00000044 4F26                   LDS.L       @R15+,PR
    00000046 000B                   RTS
    00000048 0009                   NOP
      simplexC.c   131    
      simplexC.c   132    int freeMemoryStatement(struct problemStatement *pS)
    0000004A              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    0000004A 2FE6                   MOV.L       R14,@-R15
    0000004C 2FD6                   MOV.L       R13,@-R15
    0000004E 6E43                   MOV         R4,R14
    00000050 2FC6                   MOV.L       R12,@-R15
    00000052 4F22                   STS.L       PR,@-R15
      simplexC.c   133    {
      simplexC.c   134        int i;
      simplexC.c   135        for(i=0;i<pS->nConstraints;i++)
    00000054 DD41                   MOV.L       L1130+26,R13; _free
    00000056 A006                   BRA         L905
    00000058 EC00                   MOV         #0,R12
    0000005A              L906:                             
      simplexC.c   136        {
      simplexC.c   137            free(pS->constraints[i]);
    0000005A 64C3                   MOV         R12,R4
    0000005C 50E4                   MOV.L       @(16,R14),R0
    0000005E 4408                   SHLL2       R4
    00000060 4D0B                   JSR         @R13
    00000062 044E                   MOV.L       @(R0,R4),R4
    00000064 7C01                   ADD         #1,R12
    00000066              L905:                             
    00000066 53EB                   MOV.L       @(44,R14),R3
    00000068 3C33                   CMP/GE      R3,R12
    0000006A 8BF6                   BF          L906
      simplexC.c   138        }
      simplexC.c   139        free(pS->constraints);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   140        free(pS->rightValues);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   141        free(pS->inequalitySigns);
    00000074 4D0B                   JSR         @R13
    00000076 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   142        free(pS->idIntegerVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   143        free(pS->idSlopeVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   144        free(pS->id2fasesVariables);
    00000080 4D0B                   JSR         @R13
    00000082 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   145        free(pS->funcObjtValues);
    00000084 E048                   MOV         #72,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000086 4D0B                   JSR         @R13
    00000088 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   146        if(pS->modelType==TYPE_SOLVE)
    0000008A 50E1                   MOV.L       @(4,R14),R0
    0000008C 8802                   CMP/EQ      #2,R0
    0000008E 8B04                   BF          L907
      simplexC.c   147        {
      simplexC.c   148            free(pS->idConstraintTo2fasesVar);
    00000090 E040                   MOV         #64,R0
    00000092 4D0B                   JSR         @R13
    00000094 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   149            free(pS->idConstraintToSlopeVar);
    00000096 4D0B                   JSR         @R13
    00000098 54EF                   MOV.L       @(60,R14),R4
    0000009A              L907:                             
      simplexC.c   150        }
      simplexC.c   151        return 0;
    0000009A E000                   MOV         #0,R0
      simplexC.c   152    }
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6CF6                   MOV.L       @R15+,R12
    000000A0 6DF6                   MOV.L       @R15+,R13
    000000A2 000B                   RTS
    000000A4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   153    
      simplexC.c   154    int freeMemoryIteration(struct iteration *it)
    000000A6              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=12
    000000A6 2FE6                   MOV.L       R14,@-R15
    000000A8 2FD6                   MOV.L       R13,@-R15
    000000AA 6E43                   MOV         R4,R14
    000000AC 4F22                   STS.L       PR,@-R15
      simplexC.c   155    {
      simplexC.c   156        //TODO
      simplexC.c   157        free(it->idBasicVariables);
    000000AE DD2B                   MOV.L       L1130+26,R13; _free
    000000B0 4D0B                   JSR         @R13
    000000B2 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   158        free(it->idByRowOfBasicVarsInBInv);
    000000B4 4D0B                   JSR         @R13
    000000B6 54E2                   MOV.L       @(8,R14),R4
      simplexC.c   159        free(it->xb);
    000000B8 4D0B                   JSR         @R13
    000000BA 54EA                   MOV.L       @(40,R14),R4
      simplexC.c   160        free(it->ctBinv);
    000000BC 4D0B                   JSR         @R13
    000000BE 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   161        free(it->zj);
    000000C0 4D0B                   JSR         @R13
    000000C2 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   162        free(it->cjMinusZj);
    000000C4 4D0B                   JSR         @R13
    000000C6 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   163        free(it->yj);
    000000C8 4D0B                   JSR         @R13
    000000CA 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   164        free(it->xbDivYj);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000CC 4D0B                   JSR         @R13
    000000CE 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   165        return 0;
      simplexC.c   166    }
    000000D0 4F26                   LDS.L       @R15+,PR
    000000D2 E000                   MOV         #0,R0
    000000D4 6DF6                   MOV.L       @R15+,R13
    000000D6 000B                   RTS
    000000D8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   167    int freeMemoryNode(struct node *n)
    000000DA              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000DA 2FE6                   MOV.L       R14,@-R15
    000000DC 2FD6                   MOV.L       R13,@-R15
    000000DE 6D43                   MOV         R4,R13
    000000E0 4F22                   STS.L       PR,@-R15
      simplexC.c   168    {
      simplexC.c   169        int i;
      simplexC.c   170        for(i=0; i<n->nIterations;i++)
    000000E2 A006                   BRA         L910
    000000E4 EE00                   MOV         #0,R14
    000000E6              L911:                             
      simplexC.c   171        {
      simplexC.c   172            freeMemoryIteration(n->its[i]);
    000000E6 64E3                   MOV         R14,R4
    000000E8 50D2                   MOV.L       @(8,R13),R0
    000000EA 4408                   SHLL2       R4
    000000EC BFDB                   BSR         _freeMemoryIteration
    000000EE 044E                   MOV.L       @(R0,R4),R4
    000000F0 7E01                   ADD         #1,R14
    000000F2              L910:                             
    000000F2 52D1                   MOV.L       @(4,R13),R2
    000000F4 3E23                   CMP/GE      R2,R14
    000000F6 8BF6                   BF          L911
      simplexC.c   173        }
      simplexC.c   174        free(n->its);
    000000F8 D218                   MOV.L       L1130+26,R2; _free
    000000FA 420B                   JSR         @R2
    000000FC 54D2                   MOV.L       @(8,R13),R4
      simplexC.c   175        return 0;
    000000FE E000                   MOV         #0,R0
      simplexC.c   176    }
    00000100 4F26                   LDS.L       @R15+,PR
    00000102 6DF6                   MOV.L       @R15+,R13
    00000104 000B                   RTS
    00000106 6EF6                   MOV.L       @R15+,R14
      simplexC.c   177    
      simplexC.c   178    int freeMemoryExecution()
    00000108              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    00000108 2FE6                   MOV.L       R14,@-R15
    0000010A 2FD6                   MOV.L       R13,@-R15
    0000010C 4F22                   STS.L       PR,@-R15
      simplexC.c   179    {
      simplexC.c   180        int i;
      simplexC.c   181        if(ex.mode == MODE_FULL_EXECUTION)
    0000010E DE14                   MOV.L       L1130+30,R14; _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110 63E2                   MOV.L       @R14,R3
    00000112 2338                   TST         R3,R3
    00000114 8B03                   BF          L913
      simplexC.c   182        {
      simplexC.c   183            freeMemoryStatement(ex.initialProblemStatement);
    00000116 BF98                   BSR         _freeMemoryStatement
    00000118 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   184            freeMemoryStatement(ex.canonicalStatement);
    0000011A BF96                   BSR         _freeMemoryStatement
    0000011C 54E2                   MOV.L       @(8,R14),R4
    0000011E              L913:                             
      simplexC.c   185        }
      simplexC.c   186        for(i=0;i<ex.nVariables;i++)
    0000011E A001                   BRA         L914
    00000120 E400                   MOV         #0,R4
    00000122              L915:                             
    00000122 7401                   ADD         #1,R4
    00000124              L914:                             
    00000124 52EB                   MOV.L       @(44,R14),R2
    00000126 3423                   CMP/GE      R2,R4
    00000128 8BFB                   BF          L915
      simplexC.c   187        {
      simplexC.c   188            // free(ex.ajVector[i]);
      simplexC.c   189        }
      simplexC.c   190        // free(ex.ajVector);
      simplexC.c   191        free(ex.bVectorValues);
    0000012A DD0C                   MOV.L       L1130+26,R13; _free
    0000012C 4D0B                   JSR         @R13
    0000012E 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   192        free(ex.inputCvectorValues);
    00000130 4D0B                   JSR         @R13
    00000132 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   193        free(ex.fases2CvectorValues);
    00000134 4D0B                   JSR         @R13
    00000136 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   194        return 0;
      simplexC.c   195    }
    00000138 4F26                   LDS.L       @R15+,PR
    0000013A E000                   MOV         #0,R0
    0000013C 6DF6                   MOV.L       @R15+,R13
    0000013E 000B                   RTS
    00000140 6EF6                   MOV.L       @R15+,R14
    00000142              L1130:                            
    00000142 FDFC                   .DATA.W     H'FDFC
    00000144 0204                   .DATA.W     H'0204
    00000146 FE00                   .DATA.W     H'FE00
    00000148 0200                   .DATA.W     H'0200
    0000014A 0000                   .DATA.W     0
    0000014C <00000000>             .DATA.L     _string_input
    00000150 <00000000>             .DATA.L     _strtod
    00000154 <00000000>             .DATA.L     __dtos
    00000158 <00000000>             .DATA.L     _atoi
    0000015C <00000000>             .DATA.L     _free
    00000160 <00000000>             .DATA.L     _ex
      simplexC.c   196    
      simplexC.c   197    float* calculateVectorMatrixrMul(int size, float **M, float *V)
    00000164              _calculateVectorMatrixrMul:      ; function: calculateVectorMatrixrMul




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    00000164 2FE6                   MOV.L       R14,@-R15
    00000166 2FD6                   MOV.L       R13,@-R15
    00000168 2FC6                   MOV.L       R12,@-R15
    0000016A 6D43                   MOV         R4,R13
      simplexC.c   198    {
      simplexC.c   199        float *res;
      simplexC.c   200        int i,j;
      simplexC.c   201        res = calloc(size,sizeof(float));
    0000016C D399                   MOV.L       L1131,R3   ; _calloc
    0000016E 2FB6                   MOV.L       R11,@-R15
    00000170 2FA6                   MOV.L       R10,@-R15
    00000172 6B53                   MOV         R5,R11
    00000174 4F22                   STS.L       PR,@-R15
    00000176 6A63                   MOV         R6,R10
    00000178 430B                   JSR         @R3
    0000017A E504                   MOV         #4,R5
    0000017C 6C03                   MOV         R0,R12
      simplexC.c   202        for(i=0;i<size;i++)
    0000017E E500                   MOV         #0,R5
    00000180 A018                   BRA         L917
    00000182 6753                   MOV         R5,R7
    00000184              L918:                             
      simplexC.c   203        {
      simplexC.c   204            for(j=0;j<size;j++)
    00000184 6653                   MOV         R5,R6
    00000186 6453                   MOV         R5,R4
    00000188 6E73                   MOV         R7,R14
    0000018A 4D15                   CMP/PL      R13
    0000018C 8F11                   BF/S        L919
    0000018E 4E08                   SHLL2       R14
    00000190              L920:                             
      simplexC.c   205            {
      simplexC.c   206                res[i]+=V[j]*M[j][i];
    00000190 D291                   MOV.L       L1131+4,R2 ; __muls
    00000192 63E3                   MOV         R14,R3
    00000194 33CC                   ADD         R12,R3
    00000196 6043                   MOV         R4,R0
    00000198 01BE                   MOV.L       @(R0,R11),R1
    0000019A 31EC                   ADD         R14,R1
    0000019C 00AE                   MOV.L       @(R0,R10),R0
    0000019E 420B                   JSR         @R2
    000001A0 6112                   MOV.L       @R1,R1
    000001A2 D28E                   MOV.L       L1131+8,R2 ; __adds
    000001A4 420B                   JSR         @R2
    000001A6 6132                   MOV.L       @R3,R1
    000001A8 2302                   MOV.L       R0,@R3
    000001AA 7601                   ADD         #1,R6
    000001AC 36D3                   CMP/GE      R13,R6
    000001AE 8FEF                   BF/S        L920
    000001B0 7404                   ADD         #4,R4
    000001B2              L919:                             
    000001B2 7701                   ADD         #1,R7
    000001B4              L917:                             
    000001B4 37D3                   CMP/GE      R13,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B6 8BE5                   BF          L918
      simplexC.c   207            }
      simplexC.c   208        }
      simplexC.c   209        return res;
      simplexC.c   210    }
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 60C3                   MOV         R12,R0
    000001BC 6AF6                   MOV.L       @R15+,R10
    000001BE 6BF6                   MOV.L       @R15+,R11
    000001C0 6CF6                   MOV.L       @R15+,R12
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   211    
      simplexC.c   212    float* calculateMatrixVectorMul(int size, float **M, float *V)
    000001C8              _calculateMatrixVectorMul:       ; function: calculateMatrixVectorMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 6D43                   MOV         R4,R13
      simplexC.c   213    {
      simplexC.c   214        float *res;
      simplexC.c   215        int i,j;
      simplexC.c   216        res = calloc(size,sizeof(float*));
    000001D0 D380                   MOV.L       L1131,R3   ; _calloc
    000001D2 2FB6                   MOV.L       R11,@-R15
    000001D4 2FA6                   MOV.L       R10,@-R15
    000001D6 6B53                   MOV         R5,R11
    000001D8 4F22                   STS.L       PR,@-R15
    000001DA 6A63                   MOV         R6,R10
    000001DC 430B                   JSR         @R3
    000001DE E504                   MOV         #4,R5
    000001E0 6C03                   MOV         R0,R12
      simplexC.c   217        for(i=0;i<size;i++)
    000001E2 E500                   MOV         #0,R5
    000001E4 A019                   BRA         L922
    000001E6 6753                   MOV         R5,R7
    000001E8              L923:                             
      simplexC.c   218        {
      simplexC.c   219            for(j=0;j<size;j++)
    000001E8 6653                   MOV         R5,R6
    000001EA 6453                   MOV         R5,R4
    000001EC 6E73                   MOV         R7,R14
    000001EE 4D15                   CMP/PL      R13
    000001F0 8F12                   BF/S        L924
    000001F2 4E08                   SHLL2       R14
    000001F4              L925:                             
      simplexC.c   220            {
      simplexC.c   221                res[i]+=M[i][j]*V[j];
    000001F4 D278                   MOV.L       L1131+4,R2 ; __muls
    000001F6 63E3                   MOV         R14,R3
    000001F8 33CC                   ADD         R12,R3
    000001FA 60E3                   MOV         R14,R0
    000001FC 01BE                   MOV.L       @(R0,R11),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FE 60A3                   MOV         R10,R0
    00000200 004E                   MOV.L       @(R0,R4),R0
    00000202 314C                   ADD         R4,R1
    00000204 420B                   JSR         @R2
    00000206 6112                   MOV.L       @R1,R1
    00000208 D274                   MOV.L       L1131+8,R2 ; __adds
    0000020A 420B                   JSR         @R2
    0000020C 6132                   MOV.L       @R3,R1
    0000020E 7601                   ADD         #1,R6
    00000210 2302                   MOV.L       R0,@R3
    00000212 36D3                   CMP/GE      R13,R6
    00000214 8FEE                   BF/S        L925
    00000216 7404                   ADD         #4,R4
    00000218              L924:                             
    00000218 7701                   ADD         #1,R7
    0000021A              L922:                             
    0000021A 37D3                   CMP/GE      R13,R7
    0000021C 8BE4                   BF          L923
      simplexC.c   222            }
      simplexC.c   223        }
      simplexC.c   224        return res;
    0000021E 60C3                   MOV         R12,R0
      simplexC.c   225    }
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 6AF6                   MOV.L       @R15+,R10
    00000224 6BF6                   MOV.L       @R15+,R11
    00000226 6CF6                   MOV.L       @R15+,R12
    00000228 6DF6                   MOV.L       @R15+,R13
    0000022A 000B                   RTS
    0000022C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   226    
      simplexC.c   227    float calculateVectorDotProduct(int size, float* A, float *B)
    0000022E              _calculateVectorDotProduct:      ; function: calculateVectorDotProduct
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __adds, __muls
      simplexC.c   228    {
      simplexC.c   229        float res;
      simplexC.c   230        int i;
      simplexC.c   231        res=0;
      simplexC.c   232        for(i=0;i<size;i++)
    0000022E 4415                   CMP/PL      R4
    00000230 2FE6                   MOV.L       R14,@-R15
    00000232 2FD6                   MOV.L       R13,@-R15
    00000234 4F22                   STS.L       PR,@-R15
    00000236 ED00                   MOV         #0,R13
    00000238 6ED3                   MOV         R13,R14
    0000023A 8F0D                   BF/S        L927
    0000023C 67D3                   MOV         R13,R7
    0000023E              L928:                             
      simplexC.c   233        {
      simplexC.c   234            res+=A[i]*B[i];
    0000023E 6073                   MOV         R7,R0
    00000240 D365                   MOV.L       L1131+4,R3 ; __muls
    00000242 015E                   MOV.L       @(R0,R5),R1
    00000244 430B                   JSR         @R3
    00000246 006E                   MOV.L       @(R0,R6),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000248 D364                   MOV.L       L1131+8,R3 ; __adds
    0000024A 430B                   JSR         @R3
    0000024C 61D3                   MOV         R13,R1
    0000024E 6D03                   MOV         R0,R13
    00000250 7E01                   ADD         #1,R14
    00000252 3E43                   CMP/GE      R4,R14
    00000254 8FF3                   BF/S        L928
    00000256 7704                   ADD         #4,R7
    00000258              L927:                             
      simplexC.c   235        }
      simplexC.c   236        return res;
      simplexC.c   237    }
    00000258 4F26                   LDS.L       @R15+,PR
    0000025A 60D3                   MOV         R13,R0
    0000025C 6DF6                   MOV.L       @R15+,R13
    0000025E 000B                   RTS
    00000260 6EF6                   MOV.L       @R15+,R14
      simplexC.c   238    
      simplexC.c   239    float* getCurrentCvectorValues(struct iteration *it)
    00000262              _getCurrentCvectorValues:        ; function: getCurrentCvectorValues
                                                           ; frame size=8
      simplexC.c   240    {
      simplexC.c   241        float* res;
      simplexC.c   242        res = calloc(ex.nVariables,sizeof(float));
    00000262 E504                   MOV         #4,R5
    00000264 D35B                   MOV.L       L1131,R3   ; _calloc
    00000266 2FE6                   MOV.L       R14,@-R15
    00000268 4F22                   STS.L       PR,@-R15
    0000026A DE5D                   MOV.L       L1131+12,R14; _ex
    0000026C 430B                   JSR         @R3
    0000026E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   243        if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement->is2
                         +fasesActive)
    00000270 62E2                   MOV.L       @R14,R2
    00000272 2228                   TST         R2,R2
    00000274 8B09                   BF          L930
    00000276 53E2                   MOV.L       @(8,R14),R3
    00000278 5232                   MOV.L       @(8,R3),R2
    0000027A 2228                   TST         R2,R2
    0000027C 8905                   BT          L930
    0000027E 52E2                   MOV.L       @(8,R14),R2
    00000280 5323                   MOV.L       @(12,R2),R3
    00000282 2338                   TST         R3,R3
    00000284 8901                   BT          L930
      simplexC.c   244        {
      simplexC.c   245            res= ex.fases2CvectorValues;
    00000286 A001                   BRA         L931
    00000288 54E8                   MOV.L       @(32,R14),R4
    0000028A              L930:                             
      simplexC.c   246        }else
      simplexC.c   247        {
      simplexC.c   248            res=ex.inputCvectorValues;
    0000028A 54E7                   MOV.L       @(28,R14),R4
    0000028C              L931:                             
      simplexC.c   249        }
      simplexC.c   250        return res;
      simplexC.c   251    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028C 4F26                   LDS.L       @R15+,PR
    0000028E 6043                   MOV         R4,R0
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
      simplexC.c   252    
      simplexC.c   253    float* getCurrentCt(struct iteration *it)
    00000294              _getCurrentCt:                   ; function: getCurrentCt
                                                           ; frame size=8
    00000294 2FD6                   MOV.L       R13,@-R15
      simplexC.c   254    {
      simplexC.c   255        float* res;
      simplexC.c   256        int i;
      simplexC.c   257        res = calloc(it->BinvSize,sizeof(float));
    00000296 E504                   MOV         #4,R5
    00000298 D34E                   MOV.L       L1131,R3   ; _calloc
    0000029A 6D43                   MOV         R4,R13
    0000029C 4F22                   STS.L       PR,@-R15
    0000029E 430B                   JSR         @R3
    000002A0 54D8                   MOV.L       @(32,R13),R4
    000002A2 6603                   MOV         R0,R6
      simplexC.c   258        
      simplexC.c   259        for(i=0;i<it->BinvSize;i++)
    000002A4 D44E                   MOV.L       L1131+12,R4; _ex
    000002A6 A020                   BRA         L933
    000002A8 E500                   MOV         #0,R5
    000002AA              L934:                             
    000002AA 6153                   MOV         R5,R1
    000002AC 6342                   MOV.L       @R4,R3
    000002AE 2338                   TST         R3,R3
    000002B0 8F12                   BF/S        L935
    000002B2 4108                   SHLL2       R1
    000002B4 5342                   MOV.L       @(8,R4),R3
    000002B6 5232                   MOV.L       @(8,R3),R2
    000002B8 2228                   TST         R2,R2
    000002BA 890D                   BT          L935
    000002BC 5242                   MOV.L       @(8,R4),R2
    000002BE 5323                   MOV.L       @(12,R2),R3
    000002C0 2338                   TST         R3,R3
    000002C2 8909                   BT          L935
      simplexC.c   260        {
      simplexC.c   261            if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement-
                         +>is2fasesActive)
      simplexC.c   262            {
      simplexC.c   263                res[i]= ex.fases2CvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002C4 50D2                   MOV.L       @(8,R13),R0
    000002C6 6313                   MOV         R1,R3
    000002C8 021E                   MOV.L       @(R0,R1),R2
    000002CA 336C                   ADD         R6,R3
    000002CC 5048                   MOV.L       @(32,R4),R0
    000002CE 4208                   SHLL2       R2
    000002D0 022E                   MOV.L       @(R0,R2),R2
    000002D2 2322                   MOV.L       R2,@R3
    000002D4 A008                   BRA         L936
    000002D6 0009                   NOP
    000002D8              L935:                             
      simplexC.c   264            }else
      simplexC.c   265            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   266                res[i]=ex.inputCvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002D8 50D2                   MOV.L       @(8,R13),R0
    000002DA 6313                   MOV         R1,R3
    000002DC 021E                   MOV.L       @(R0,R1),R2
    000002DE 336C                   ADD         R6,R3
    000002E0 5047                   MOV.L       @(28,R4),R0
    000002E2 4208                   SHLL2       R2
    000002E4 022E                   MOV.L       @(R0,R2),R2
    000002E6 2322                   MOV.L       R2,@R3
    000002E8              L936:                             
    000002E8 7501                   ADD         #1,R5
    000002EA              L933:                             
    000002EA 53D8                   MOV.L       @(32,R13),R3
    000002EC 3533                   CMP/GE      R3,R5
    000002EE 8BDC                   BF          L934
      simplexC.c   267            }
      simplexC.c   268        }
      simplexC.c   269        
      simplexC.c   270        return res;
      simplexC.c   271    }
    000002F0 4F26                   LDS.L       @R15+,PR
    000002F2 6063                   MOV         R6,R0
    000002F4 000B                   RTS
    000002F6 6DF6                   MOV.L       @R15+,R13
      simplexC.c   272    
      simplexC.c   273    float** calculateNewBinv(struct iteration *oldIt)
    000002F8              _calculateNewBinv:               ; function: calculateNewBinv
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __subs, __muls, __divs
    000002F8 2FE6                   MOV.L       R14,@-R15
      simplexC.c   274    {
      simplexC.c   275        float **res;
      simplexC.c   276        int i,j,indexPivot;
      simplexC.c   277        indexPivot=-1;
      simplexC.c   278        res=calloc(oldIt->BinvSize,sizeof(float*));
    000002FA E504                   MOV         #4,R5
    000002FC 2FD6                   MOV.L       R13,@-R15
    000002FE 6E43                   MOV         R4,R14
    00000300 2FC6                   MOV.L       R12,@-R15
    00000302 2FB6                   MOV.L       R11,@-R15
    00000304 2FA6                   MOV.L       R10,@-R15
    00000306 EBFF                   MOV         #-1,R11
    00000308 2F96                   MOV.L       R9,@-R15
    0000030A 2F86                   MOV.L       R8,@-R15
    0000030C 4F22                   STS.L       PR,@-R15
    0000030E D931                   MOV.L       L1131,R9   ; _calloc
    00000310 490B                   JSR         @R9
    00000312 54E8                   MOV.L       @(32,R14),R4
    00000314 6D03                   MOV         R0,R13
      simplexC.c   279        for(i=0;i<oldIt->BinvSize;i++)
    00000316 EA00                   MOV         #0,R10
    00000318 A011                   BRA         L938
    0000031A 6CA3                   MOV         R10,R12
    0000031C              L939:                             
      simplexC.c   280        {
      simplexC.c   281            res[i]=calloc(oldIt->BinvSize,sizeof(float));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000031C 68C3                   MOV         R12,R8
    0000031E 4808                   SHLL2       R8
    00000320 6383                   MOV         R8,R3
    00000322 33DC                   ADD         R13,R3
    00000324 2F36                   MOV.L       R3,@-R15
    00000326 E504                   MOV         #4,R5
    00000328 490B                   JSR         @R9
    0000032A 54E8                   MOV.L       @(32,R14),R4
    0000032C 63F6                   MOV.L       @R15+,R3
    0000032E 2302                   MOV.L       R0,@R3
      simplexC.c   282            if(oldIt->idVarOut==oldIt->idByRowOfBasicVarsInBInv[i])
    00000330 50E2                   MOV.L       @(8,R14),R0
    00000332 028E                   MOV.L       @(R0,R8),R2
    00000334 53E5                   MOV.L       @(20,R14),R3
    00000336 3320                   CMP/EQ      R2,R3
    00000338 8B00                   BF          L940
      simplexC.c   283            {
      simplexC.c   284                indexPivot=i;
    0000033A 6BC3                   MOV         R12,R11
    0000033C              L940:                             
    0000033C 7C01                   ADD         #1,R12
    0000033E              L938:                             
    0000033E 53E8                   MOV.L       @(32,R14),R3
    00000340 3C33                   CMP/GE      R3,R12
    00000342 8BEB                   BF          L939
      simplexC.c   285            }
      simplexC.c   286        }
      simplexC.c   287        //Calculo de la fila pivote
      simplexC.c   288        for(i=0;i<oldIt->BinvSize;i++)
    00000344 64A3                   MOV         R10,R4
    00000346 6CB3                   MOV         R11,R12
    00000348 A00F                   BRA         L941
    0000034A 4C08                   SHLL2       R12
    0000034C              L942:                             
      simplexC.c   289        {
      simplexC.c   290            res[indexPivot][i]=oldIt->Binv[indexPivot][i]/oldIt->yj[indexPivot];
    0000034C D225                   MOV.L       L1131+16,R2; __divs
    0000034E 60C3                   MOV         R12,R0
    00000350 03DE                   MOV.L       @(R0,R13),R3
    00000352 6543                   MOV         R4,R5
    00000354 50E7                   MOV.L       @(28,R14),R0
    00000356 4508                   SHLL2       R5
    00000358 01CE                   MOV.L       @(R0,R12),R1
    0000035A 335C                   ADD         R5,R3
    0000035C 50EE                   MOV.L       @(56,R14),R0
    0000035E 315C                   ADD         R5,R1
    00000360 00CE                   MOV.L       @(R0,R12),R0
    00000362 420B                   JSR         @R2
    00000364 6112                   MOV.L       @R1,R1
    00000366 7401                   ADD         #1,R4
    00000368 2302                   MOV.L       R0,@R3
    0000036A              L941:                             
    0000036A 53E8                   MOV.L       @(32,R14),R3
    0000036C 3433                   CMP/GE      R3,R4
    0000036E 8BED                   BF          L942
      simplexC.c   291        }
      simplexC.c   292    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   293        //Calculo del resto de filas
      simplexC.c   294        for(i=0;i<oldIt->BinvSize;i++)
    00000370 65A3                   MOV         R10,R5
    00000372 67C3                   MOV         R12,R7
    00000374 A021                   BRA         L943
    00000376 37DC                   ADD         R13,R7
    00000378              L944:                             
      simplexC.c   295        {
      simplexC.c   296            for(j=0;j<oldIt->BinvSize && i!=indexPivot;j++)
    00000378 64A3                   MOV         R10,R4
    0000037A 6C53                   MOV         R5,R12
    0000037C A017                   BRA         L945
    0000037E 4C08                   SHLL2       R12
    00000380              L946:                             
      simplexC.c   297            {
      simplexC.c   298                res[i][j]=oldIt->Binv[i][j]-(oldIt->yj[i]*res[indexPivot][j]);
    00000380 D215                   MOV.L       L1131+4,R2 ; __muls
    00000382 60C3                   MOV         R12,R0
    00000384 03DE                   MOV.L       @(R0,R13),R3
    00000386 6643                   MOV         R4,R6
    00000388 4608                   SHLL2       R6
    0000038A 336C                   ADD         R6,R3
    0000038C 2F36                   MOV.L       R3,@-R15
    0000038E 50E7                   MOV.L       @(28,R14),R0
    00000390 01CE                   MOV.L       @(R0,R12),R1
    00000392 316C                   ADD         R6,R1
    00000394 6312                   MOV.L       @R1,R3
    00000396 50EE                   MOV.L       @(56,R14),R0
    00000398 01CE                   MOV.L       @(R0,R12),R1
    0000039A 6072                   MOV.L       @R7,R0
    0000039C 420B                   JSR         @R2
    0000039E 006E                   MOV.L       @(R0,R6),R0
    000003A0 6133                   MOV         R3,R1
    000003A2 D311                   MOV.L       L1131+20,R3; __subs
    000003A4 430B                   JSR         @R3
    000003A6 0009                   NOP
    000003A8 63F6                   MOV.L       @R15+,R3
    000003AA 7401                   ADD         #1,R4
    000003AC 2302                   MOV.L       R0,@R3
    000003AE              L945:                             
    000003AE 52E8                   MOV.L       @(32,R14),R2
    000003B0 3423                   CMP/GE      R2,R4
    000003B2 8901                   BT          L947
    000003B4 35B0                   CMP/EQ      R11,R5
    000003B6 8BE3                   BF          L946
    000003B8              L947:                             
    000003B8 7501                   ADD         #1,R5
    000003BA              L943:                             
    000003BA 53E8                   MOV.L       @(32,R14),R3
    000003BC 3533                   CMP/GE      R3,R5
    000003BE 8BDB                   BF          L944
      simplexC.c   299            }
      simplexC.c   300        }
      simplexC.c   301        return res;
      simplexC.c   302    }
    000003C0 4F26                   LDS.L       @R15+,PR
    000003C2 60D3                   MOV         R13,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C4 68F6                   MOV.L       @R15+,R8
    000003C6 69F6                   MOV.L       @R15+,R9
    000003C8 6AF6                   MOV.L       @R15+,R10
    000003CA 6BF6                   MOV.L       @R15+,R11
    000003CC 6CF6                   MOV.L       @R15+,R12
    000003CE 6DF6                   MOV.L       @R15+,R13
    000003D0 000B                   RTS
    000003D2 6EF6                   MOV.L       @R15+,R14
    000003D4              L1131:                            
    000003D4 <00000000>             .DATA.L     _calloc
    000003D8 <00000000>             .DATA.L     __muls
    000003DC <00000000>             .DATA.L     __adds
    000003E0 <00000000>             .DATA.L     _ex
    000003E4 <00000000>             .DATA.L     __divs
    000003E8 <00000000>             .DATA.L     __subs
      simplexC.c   303    
      simplexC.c   304    struct iteration* createNewIteration(struct iteration *oldIt)
    000003EC              _createNewIteration:             ; function: createNewIteration
                                                           ; frame size=16
    000003EC 2FE6                   MOV.L       R14,@-R15
    000003EE 6E43                   MOV         R4,R14
      simplexC.c   305    {
      simplexC.c   306        struct iteration *newIt;
      simplexC.c   307        int i;
      simplexC.c   308        newIt = malloc(sizeof(struct iteration));
    000003F0 D392                   MOV.L       L1132+2,R3 ; _malloc
    000003F2 2FD6                   MOV.L       R13,@-R15
    000003F4 2FC6                   MOV.L       R12,@-R15
    000003F6 4F22                   STS.L       PR,@-R15
    000003F8 430B                   JSR         @R3
    000003FA E444                   MOV         #68,R4
      simplexC.c   309        newIt->numIteration=oldIt->numIteration+1;
    000003FC 62E2                   MOV.L       @R14,R2
    000003FE 6D03                   MOV         R0,R13
    00000400 7201                   ADD         #1,R2
    00000402 2D22                   MOV.L       R2,@R13
      simplexC.c   310        newIt->BinvSize=oldIt->BinvSize;
    00000404 53E8                   MOV.L       @(32,R14),R3
    00000406 1D38                   MOV.L       R3,@(32,R13)
      simplexC.c   311        newIt->Binv=calculateNewBinv(oldIt);
    00000408 BF76                   BSR         _calculateNewBinv
    0000040A 64E3                   MOV         R14,R4
    0000040C 1D07                   MOV.L       R0,@(28,R13)
      simplexC.c   312        newIt->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    0000040E E504                   MOV         #4,R5
    00000410 D38C                   MOV.L       L1132+10,R3; _calloc
    00000412 DC8B                   MOV.L       L1132+6,R12; _ex
    00000414 430B                   JSR         @R3
    00000416 54CB                   MOV.L       @(44,R12),R4
    00000418 1D01                   MOV.L       R0,@(4,R13)
      simplexC.c   313        newIt->idByRowOfBasicVarsInBInv=calloc(newIt->BinvSize,sizeof(int));
    0000041A E504                   MOV         #4,R5
    0000041C D289                   MOV.L       L1132+10,R2; _calloc
    0000041E 420B                   JSR         @R2
    00000420 54D8                   MOV.L       @(32,R13),R4
      simplexC.c   314        for(i=0;i<ex.nVariables;i++)
    00000422 E600                   MOV         #0,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000424 1D02                   MOV.L       R0,@(8,R13)
    00000426 A008                   BRA         L949
    00000428 6463                   MOV         R6,R4
    0000042A              L950:                             
      simplexC.c   315        {
      simplexC.c   316            newIt->idBasicVariables[i]=oldIt->idBasicVariables[i];
    0000042A 6543                   MOV         R4,R5
    0000042C 53D1                   MOV.L       @(4,R13),R3
    0000042E 4508                   SHLL2       R5
    00000430 50E1                   MOV.L       @(4,R14),R0
    00000432 7401                   ADD         #1,R4
    00000434 025E                   MOV.L       @(R0,R5),R2
    00000436 335C                   ADD         R5,R3
    00000438 2322                   MOV.L       R2,@R3
    0000043A              L949:                             
    0000043A 52CB                   MOV.L       @(44,R12),R2
    0000043C 3423                   CMP/GE      R2,R4
    0000043E 8BF4                   BF          L950
      simplexC.c   317        }
      simplexC.c   318        for(i=0;i<oldIt->BinvSize;i++)
    00000440 A011                   BRA         L951
    00000442 6463                   MOV         R6,R4
    00000444              L952:                             
    00000444 50E2                   MOV.L       @(8,R14),R0
    00000446 6C43                   MOV         R4,R12
    00000448 52E5                   MOV.L       @(20,R14),R2
    0000044A 4C08                   SHLL2       R12
    0000044C 03CE                   MOV.L       @(R0,R12),R3
    0000044E 3320                   CMP/EQ      R2,R3
    00000450 8D06                   BT/S        L953
    00000452 7401                   ADD         #1,R4
      simplexC.c   319        {
      simplexC.c   320            if(oldIt->idByRowOfBasicVarsInBInv[i]!=oldIt->idVarOut)
      simplexC.c   321            {
      simplexC.c   322                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idByRowOfBasicVarsInBInv[i];
    00000454 53D2                   MOV.L       @(8,R13),R3
    00000456 33CC                   ADD         R12,R3
    00000458 50E2                   MOV.L       @(8,R14),R0
    0000045A 02CE                   MOV.L       @(R0,R12),R2
    0000045C A003                   BRA         L954
    0000045E 2322                   MOV.L       R2,@R3
    00000460              L953:                             
      simplexC.c   323            }else
      simplexC.c   324            {
      simplexC.c   325                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idVarIn;
    00000460 50D2                   MOV.L       @(8,R13),R0
    00000462 53E4                   MOV.L       @(16,R14),R3
    00000464 0C36                   MOV.L       R3,@(R0,R12)
    00000466              L954:                             
    00000466              L951:                             
    00000466 52E8                   MOV.L       @(32,R14),R2
    00000468 3423                   CMP/GE      R2,R4
    0000046A 8BEB                   BF          L952
      simplexC.c   326            }
      simplexC.c   327        }
      simplexC.c   328        newIt->idBasicVariables[oldIt->idVarOut]=0;
    0000046C 51E5                   MOV.L       @(20,R14),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   329        newIt->idBasicVariables[oldIt->idVarIn]=1;
    0000046E E201                   MOV         #1,R2
    00000470 50D1                   MOV.L       @(4,R13),R0
    00000472 4108                   SHLL2       R1
    00000474 0166                   MOV.L       R6,@(R0,R1)
    00000476 53E4                   MOV.L       @(16,R14),R3
    00000478 50D1                   MOV.L       @(4,R13),R0
    0000047A 4308                   SHLL2       R3
    0000047C 0326                   MOV.L       R2,@(R0,R3)
      simplexC.c   330        return newIt;
    0000047E 60D3                   MOV         R13,R0
      simplexC.c   331    }
    00000480 4F26                   LDS.L       @R15+,PR
    00000482 6CF6                   MOV.L       @R15+,R12
    00000484 6DF6                   MOV.L       @R15+,R13
    00000486 000B                   RTS
    00000488 6EF6                   MOV.L       @R15+,R14
      simplexC.c   332    
      simplexC.c   333    int calculateIteration(struct iteration *it)
    0000048A              _calculateIteration:             ; function: calculateIteration
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __subs, __divs, __eqs, __gts, __lts
    0000048A 2FE6                   MOV.L       R14,@-R15
    0000048C 2FD6                   MOV.L       R13,@-R15
    0000048E 2FC6                   MOV.L       R12,@-R15
    00000490 2FB6                   MOV.L       R11,@-R15
    00000492 2FA6                   MOV.L       R10,@-R15
    00000494 2F96                   MOV.L       R9,@-R15
    00000496 EA00                   MOV         #0,R10
    00000498 DD69                   MOV.L       L1132+6,R13; _ex
    0000049A 2F86                   MOV.L       R8,@-R15
    0000049C 4F22                   STS.L       PR,@-R15
    0000049E 7FF8                   ADD         #-8,R15
    000004A0 D868                   MOV.L       L1132+10,R8; _calloc
      simplexC.c   334    {
      simplexC.c   335        int i;
      simplexC.c   336        float * cVectorValues,*ct;
      simplexC.c   337        float bestEntryVarValue,bestExitVarValue;
      simplexC.c   338        cVectorValues=getCurrentCvectorValues(it);
    000004A2 BEDE                   BSR         _getCurrentCvectorValues
    000004A4 6E43                   MOV         R4,R14
    000004A6 1F01                   MOV.L       R0,@(4,R15)
      simplexC.c   339        ct=getCurrentCt(it);
    000004A8 BEF4                   BSR         _getCurrentCt
    000004AA 64E3                   MOV         R14,R4
      simplexC.c   340        it->ct=ct;
    000004AC 1E09                   MOV.L       R0,@(36,R14)
    000004AE 6C03                   MOV         R0,R12
      simplexC.c   341        it->xb=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.bVectorValues);
    000004B0 56D6                   MOV.L       @(24,R13),R6
    000004B2 55E7                   MOV.L       @(28,R14),R5
    000004B4 BE88                   BSR         _calculateMatrixVectorMul
    000004B6 54E8                   MOV.L       @(32,R14),R4
    000004B8 1E0A                   MOV.L       R0,@(40,R14)
      simplexC.c   342        it->ctBinv=calculateVectorMatrixrMul(it->BinvSize,it->Binv,ct);
    000004BA 66C3                   MOV         R12,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004BC 55E7                   MOV.L       @(28,R14),R5
    000004BE BE51                   BSR         _calculateVectorMatrixrMul
    000004C0 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   343        it->zSol=calculateVectorDotProduct(it->BinvSize,ct,it->xb);
    000004C2 65C3                   MOV         R12,R5
    000004C4 1E0B                   MOV.L       R0,@(44,R14)
    000004C6 56EA                   MOV.L       @(40,R14),R6
    000004C8 BEB1                   BSR         _calculateVectorDotProduct
    000004CA 54E8                   MOV.L       @(32,R14),R4
    000004CC E140                   MOV         #64,R1
    000004CE 31EC                   ADD         R14,R1
    000004D0 2102                   MOV.L       R0,@R1
      simplexC.c   344        //Calculate values for zj and cj-zj and idVarIn
      simplexC.c   345        it->zj=calloc(ex.nVariables,sizeof(float));
    000004D2 E504                   MOV         #4,R5
    000004D4 480B                   JSR         @R8
    000004D6 54DB                   MOV.L       @(44,R13),R4
    000004D8 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c   346        it->cjMinusZj=calloc(ex.nVariables,sizeof(float));
    000004DA E504                   MOV         #4,R5
    000004DC 480B                   JSR         @R8
    000004DE 54DB                   MOV.L       @(44,R13),R4
    000004E0 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c   347        it->idVarIn=-1;
    000004E2 E3FF                   MOV         #-1,R3
    000004E4 1E34                   MOV.L       R3,@(16,R14)
      simplexC.c   348        if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE)
    000004E6 50DA                   MOV.L       @(40,R13),R0
    000004E8 8801                   CMP/EQ      #1,R0
    000004EA 8F03                   BF/S        L956
      simplexC.c   349        {
      simplexC.c   350            bestEntryVarValue=INT_MIN;
      simplexC.c   351        }else
      simplexC.c   352        {
      simplexC.c   353            bestEntryVarValue=INT_MAX;
      simplexC.c   354        }
      simplexC.c   355        
      simplexC.c   356        
      simplexC.c   357        for(i=0;i<ex.nVariables;i++)
    000004EC 6CA3                   MOV         R10,R12
    000004EE D956                   MOV.L       L1132+14,R9; H'CF000000
    000004F0 A001                   BRA         L957
    000004F2 0009                   NOP
    000004F4              L956:                             
    000004F4 D955                   MOV.L       L1132+18,R9; H'4F000000
    000004F6              L957:                             
    000004F6 A05C                   BRA         L958
    000004F8 0009                   NOP
    000004FA              L959:                             
      simplexC.c   358        {
      simplexC.c   359            if((!it->idBasicVariables[i] && ex.canonicalStatement->is2fasesActive) ||
      simplexC.c   360                (!it->idBasicVariables[i] && !ex.canonicalStatement->is2fasesActive && !ex.canonicalStatement-
                         +>id2fasesVariables[i]) )
    000004FA 64C3                   MOV         R12,R4
    000004FC 50E1                   MOV.L       @(4,R14),R0
    000004FE 4408                   SHLL2       R4
    00000500 034E                   MOV.L       @(R0,R4),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000502 2338                   TST         R3,R3
    00000504 8B54                   BF          L960
    00000506 D252                   MOV.L       L1132+22,R2; H'00000008+_ex
    00000508 6122                   MOV.L       @R2,R1
    0000050A 5313                   MOV.L       @(12,R1),R3
    0000050C 2338                   TST         R3,R3
    0000050E 8B0E                   BF          L961
    00000510 50E1                   MOV.L       @(4,R14),R0
    00000512 034E                   MOV.L       @(R0,R4),R3
    00000514 2338                   TST         R3,R3
    00000516 8B4B                   BF          L960
    00000518 D24D                   MOV.L       L1132+22,R2; H'00000008+_ex
    0000051A 6122                   MOV.L       @R2,R1
    0000051C 5313                   MOV.L       @(12,R1),R3
    0000051E 2338                   TST         R3,R3
    00000520 8B46                   BF          L960
    00000522 D34B                   MOV.L       L1132+22,R3; H'00000008+_ex
    00000524 6032                   MOV.L       @R3,R0
    00000526 500E                   MOV.L       @(56,R0),R0
    00000528 014E                   MOV.L       @(R0,R4),R1
    0000052A 2118                   TST         R1,R1
    0000052C 8B40                   BF          L960
    0000052E              L961:                             
      simplexC.c   361            {
      simplexC.c   362                it->zj[i]=calculateVectorDotProduct(it->BinvSize,it->ctBinv,ex.ajVector[i]);
    0000052E 6BC3                   MOV         R12,R11
    00000530 50EC                   MOV.L       @(48,R14),R0
    00000532 4B08                   SHLL2       R11
    00000534 30BC                   ADD         R11,R0
    00000536 2F06                   MOV.L       R0,@-R15
    00000538 50F1                   MOV.L       @(4,R15),R0
    0000053A 06BE                   MOV.L       @(R0,R11),R6
    0000053C 55EB                   MOV.L       @(44,R14),R5
    0000053E BE76                   BSR         _calculateVectorDotProduct
    00000540 54E8                   MOV.L       @(32,R14),R4
    00000542 62F6                   MOV.L       @R15+,R2
      simplexC.c   363                it->cjMinusZj[i]=cVectorValues[i]-it->zj[i];
    00000544 D343                   MOV.L       L1132+26,R3; __subs
    00000546 2202                   MOV.L       R0,@R2
    00000548 50ED                   MOV.L       @(52,R14),R0
    0000054A 6203                   MOV         R0,R2
    0000054C 50F1                   MOV.L       @(4,R15),R0
    0000054E 32BC                   ADD         R11,R2
    00000550 01BE                   MOV.L       @(R0,R11),R1
    00000552 50EC                   MOV.L       @(48,R14),R0
    00000554 430B                   JSR         @R3
    00000556 00BE                   MOV.L       @(R0,R11),R0
    00000558 2202                   MOV.L       R0,@R2
      simplexC.c   364    
      simplexC.c   365                if(ex.currentFuncObjectivePurpose==FUNC_MINIMIZE && it->cjMinusZj[i]<0 && it->cjMinusZj[i]<bes
                         +tEntryVarValue )
    0000055A 53DA                   MOV.L       @(40,R13),R3
    0000055C 2338                   TST         R3,R3
    0000055E 8B0D                   BF          L963
    00000560 50ED                   MOV.L       @(52,R14),R0
    00000562 01BE                   MOV.L       @(R0,R11),R1
    00000564 D33C                   MOV.L       L1132+30,R3; __lts




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000566 430B                   JSR         @R3
    00000568 E000                   MOV         #0,R0
    0000056A 8800                   CMP/EQ      #0,R0
    0000056C 8906                   BT          L963
    0000056E 50ED                   MOV.L       @(52,R14),R0
    00000570 D339                   MOV.L       L1132+30,R3; __lts
    00000572 01BE                   MOV.L       @(R0,R11),R1
    00000574 430B                   JSR         @R3
    00000576 6093                   MOV         R9,R0
    00000578 8800                   CMP/EQ      #0,R0
    0000057A 8B14                   BF          L832
    0000057C              L963:                             
      simplexC.c   366                {
      simplexC.c   367                    bestEntryVarValue=it->cjMinusZj[i];
      simplexC.c   368                    it->idVarIn=i;
      simplexC.c   369                }else if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE && it->cjMinusZj[i]>0 && it->cjMinusZj[
                         +i]>bestEntryVarValue )
    0000057C 50DA                   MOV.L       @(40,R13),R0
    0000057E 8801                   CMP/EQ      #1,R0
    00000580 8B16                   BF          L960
    00000582 61C3                   MOV         R12,R1
    00000584 50ED                   MOV.L       @(52,R14),R0
    00000586 4108                   SHLL2       R1
    00000588 D334                   MOV.L       L1132+34,R3; __gts
    0000058A 011E                   MOV.L       @(R0,R1),R1
    0000058C 430B                   JSR         @R3
    0000058E E000                   MOV         #0,R0
    00000590 8800                   CMP/EQ      #0,R0
    00000592 890D                   BT          L960
    00000594 50ED                   MOV.L       @(52,R14),R0
    00000596 61C3                   MOV         R12,R1
    00000598 D330                   MOV.L       L1132+34,R3; __gts
    0000059A 4108                   SHLL2       R1
    0000059C 011E                   MOV.L       @(R0,R1),R1
    0000059E 430B                   JSR         @R3
    000005A0 6093                   MOV         R9,R0
    000005A2 8800                   CMP/EQ      #0,R0
    000005A4 8904                   BT          L960
    000005A6              L832:
      simplexC.c   370                {
      simplexC.c   371                    bestEntryVarValue=it->cjMinusZj[i];
    000005A6 69C3                   MOV         R12,R9
    000005A8 50ED                   MOV.L       @(52,R14),R0
    000005AA 4908                   SHLL2       R9
    000005AC 099E                   MOV.L       @(R0,R9),R9
      simplexC.c   372                    it->idVarIn=i;
    000005AE 1EC4                   MOV.L       R12,@(16,R14)
    000005B0              L960:                             
    000005B0 7C01                   ADD         #1,R12
    000005B2              L958:                             
    000005B2 53DC                   MOV.L       @(48,R13),R3
    000005B4 2F32                   MOV.L       R3,@R15
    000005B6 52DB                   MOV.L       @(44,R13),R2
    000005B8 3C23                   CMP/GE      R2,R12
    000005BA 8B9E                   BF          L959
      simplexC.c   373                }
      simplexC.c   374            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   375        }
      simplexC.c   376        if(it->idVarIn!=-1)//Check optimum criteria
    000005BC 50E4                   MOV.L       @(16,R14),R0
    000005BE 88FF                   CMP/EQ      #-1,R0
    000005C0 896C                   BT          L966
      simplexC.c   377        {
      simplexC.c   378            //Calculate yj
      simplexC.c   379            it->yj=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.ajVector[it->idVarIn]);
    000005C2 56E4                   MOV.L       @(16,R14),R6
    000005C4 60F2                   MOV.L       @R15,R0
    000005C6 4608                   SHLL2       R6
    000005C8 55E7                   MOV.L       @(28,R14),R5
    000005CA 066E                   MOV.L       @(R0,R6),R6
    000005CC BDFC                   BSR         _calculateMatrixVectorMul
    000005CE 54E8                   MOV.L       @(32,R14),R4
    000005D0 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   380            it->xbDivYj= calloc(it->BinvSize,sizeof(float));
    000005D2 E504                   MOV         #4,R5
    000005D4 480B                   JSR         @R8
    000005D6 54E8                   MOV.L       @(32,R14),R4
    000005D8 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c   381            bestExitVarValue=INT_MAX;
      simplexC.c   382            it->indexVarOutInBInvMatrix=-1;
    000005DA E2FF                   MOV         #-1,R2
    000005DC D61B                   MOV.L       L1132+18,R6; H'4F000000
      simplexC.c   383            it->isUnbounded=1;
    000005DE E301                   MOV         #1,R3
    000005E0 1E26                   MOV.L       R2,@(24,R14)
    000005E2 1E33                   MOV.L       R3,@(12,R14)
      simplexC.c   384            for(i=0;i<it->BinvSize;i++)
    000005E4 A04F                   BRA         L967
    000005E6 64A3                   MOV         R10,R4
    000005E8              L968:                             
      simplexC.c   385            {
      simplexC.c   386                if(it->yj[i]!=0)
    000005E8 50EE                   MOV.L       @(56,R14),R0
    000005EA 6143                   MOV         R4,R1
    000005EC D31C                   MOV.L       L1132+38,R3; __eqs
    000005EE 4108                   SHLL2       R1
    000005F0 011E                   MOV.L       @(R0,R1),R1
    000005F2 430B                   JSR         @R3
    000005F4 E000                   MOV         #0,R0
    000005F6 8800                   CMP/EQ      #0,R0
    000005F8 8B3F                   BF          L831
      simplexC.c   387                {
      simplexC.c   388                    it->xbDivYj[i]=it->xb[i]/it->yj[i];
    000005FA 6543                   MOV         R4,R5
    000005FC 52EF                   MOV.L       @(60,R14),R2
    000005FE 4508                   SHLL2       R5
    00000600 50EA                   MOV.L       @(40,R14),R0
    00000602 325C                   ADD         R5,R2
    00000604 D317                   MOV.L       L1132+42,R3; __divs
    00000606 015E                   MOV.L       @(R0,R5),R1
    00000608 50EE                   MOV.L       @(56,R14),R0
    0000060A 430B                   JSR         @R3
    0000060C 005E                   MOV.L       @(R0,R5),R0
    0000060E 2202                   MOV.L       R0,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   389                    if(it->xbDivYj[i]>0 && it->xbDivYj[i]<bestExitVarValue)
    00000610 50EF                   MOV.L       @(60,R14),R0
    00000612 075E                   MOV.L       @(R0,R5),R7
    00000614 D311                   MOV.L       L1132+34,R3; __gts
    00000616 6173                   MOV         R7,R1
    00000618 430B                   JSR         @R3
    0000061A E000                   MOV         #0,R0
    0000061C 8800                   CMP/EQ      #0,R0
    0000061E 8923                   BT          L970
    00000620 D20D                   MOV.L       L1132+30,R2; __lts
    00000622 6173                   MOV         R7,R1
    00000624 420B                   JSR         @R2
    00000626 6063                   MOV         R6,R0
    00000628 8800                   CMP/EQ      #0,R0
    0000062A 891D                   BT          L970
      simplexC.c   390                    {
      simplexC.c   391                        it->indexVarOutInBInvMatrix=i;
    0000062C 1E46                   MOV.L       R4,@(24,R14)
      simplexC.c   392                        bestExitVarValue=it->xbDivYj[i];
    0000062E 6643                   MOV         R4,R6
    00000630 50EF                   MOV.L       @(60,R14),R0
    00000632 4608                   SHLL2       R6
    00000634 066E                   MOV.L       @(R0,R6),R6
      simplexC.c   393                        it->isUnbounded=0;
    00000636 A025                   BRA         L973
    00000638 1EA3                   MOV.L       R10,@(12,R14)
    0000063A              L1132:                            
    0000063A 0000                   .DATA.W     0
    0000063C <00000000>             .DATA.L     _malloc
    00000640 <00000000>             .DATA.L     _ex
    00000644 <00000000>             .DATA.L     _calloc
    00000648 CF000000               .DATA.L     H'CF000000
    0000064C 4F000000               .DATA.L     H'4F000000
    00000650 <00000008>             .DATA.L     H'00000008+_ex
    00000654 <00000000>             .DATA.L     __subs
    00000658 <00000000>             .DATA.L     __lts
    0000065C <00000000>             .DATA.L     __gts
    00000660 <00000000>             .DATA.L     __eqs
    00000664 <00000000>             .DATA.L     __divs
    00000668              L970:                             
      simplexC.c   394                    }else if(it->xbDivYj[i]<0)
    00000668 50EF                   MOV.L       @(60,R14),R0
    0000066A 6143                   MOV         R4,R1
    0000066C D358                   MOV.L       L1133,R3   ; __lts
    0000066E 4108                   SHLL2       R1
    00000670 011E                   MOV.L       @(R0,R1),R1
    00000672 430B                   JSR         @R3
    00000674 E000                   MOV         #0,R0
    00000676 8800                   CMP/EQ      #0,R0
    00000678 8904                   BT          L973
    0000067A              L831:
      simplexC.c   395                    {
      simplexC.c   396                        it->xbDivYj[i]=NO_EVAL_VALUE;
      simplexC.c   397                    }
      simplexC.c   398                    
      simplexC.c   399                }else
      simplexC.c   400                {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   401                    it->xbDivYj[i]=NO_EVAL_VALUE;
    0000067A 6243                   MOV         R4,R2
    0000067C 50EF                   MOV.L       @(60,R14),R0
    0000067E 4208                   SHLL2       R2
    00000680 D354                   MOV.L       L1133+4,R3 ; H'4F000000
    00000682 0236                   MOV.L       R3,@(R0,R2)
    00000684              L973:                             
    00000684 7401                   ADD         #1,R4
    00000686              L967:                             
    00000686 52E8                   MOV.L       @(32,R14),R2
    00000688 3423                   CMP/GE      R2,R4
    0000068A 8BAD                   BF          L968
      simplexC.c   402                }
      simplexC.c   403                
      simplexC.c   404            }
      simplexC.c   405            if(!it->isUnbounded)
    0000068C 51E3                   MOV.L       @(12,R14),R1
    0000068E 2118                   TST         R1,R1
    00000690 8B04                   BF          L966
      simplexC.c   406            {
      simplexC.c   407                it->idVarOut=it->idByRowOfBasicVarsInBInv[it->indexVarOutInBInvMatrix];
    00000692 53E6                   MOV.L       @(24,R14),R3
    00000694 50E2                   MOV.L       @(8,R14),R0
    00000696 4308                   SHLL2       R3
    00000698 023E                   MOV.L       @(R0,R3),R2
    0000069A 1E25                   MOV.L       R2,@(20,R14)
    0000069C              L966:                             
      simplexC.c   408            }
      simplexC.c   409            
      simplexC.c   410        }
      simplexC.c   411        
      simplexC.c   412    }
    0000069C 7F08                   ADD         #8,R15
    0000069E 4F26                   LDS.L       @R15+,PR
    000006A0 68F6                   MOV.L       @R15+,R8
    000006A2 69F6                   MOV.L       @R15+,R9
    000006A4 6AF6                   MOV.L       @R15+,R10
    000006A6 6BF6                   MOV.L       @R15+,R11
    000006A8 6CF6                   MOV.L       @R15+,R12
    000006AA 6DF6                   MOV.L       @R15+,R13
    000006AC 000B                   RTS
    000006AE 6EF6                   MOV.L       @R15+,R14
      simplexC.c   413    
      simplexC.c   414    struct iteration* modelToIteration(struct problemStatement *pS)
    000006B0              _modelToIteration:               ; function: modelToIteration
                                                           ; frame size=32
    000006B0 2FE6                   MOV.L       R14,@-R15
    000006B2 2FD6                   MOV.L       R13,@-R15
    000006B4 2FC6                   MOV.L       R12,@-R15
    000006B6 6D43                   MOV         R4,R13
      simplexC.c   415    {
      simplexC.c   416        struct iteration *it;
      simplexC.c   417        int i;
      simplexC.c   418        it = malloc(sizeof(struct iteration));
    000006B8 D347                   MOV.L       L1133+8,R3 ; _malloc
    000006BA 2FB6                   MOV.L       R11,@-R15
    000006BC 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006BE 2F96                   MOV.L       R9,@-R15
    000006C0 2F86                   MOV.L       R8,@-R15
    000006C2 4F22                   STS.L       PR,@-R15
    000006C4 430B                   JSR         @R3
    000006C6 E444                   MOV         #68,R4
      simplexC.c   419        it->numIteration=0;
      simplexC.c   420        //Matriz B-1
      simplexC.c   421        it->BinvSize=pS->nConstraints;
      simplexC.c   422        it->Binv=calloc(it->BinvSize,sizeof(float));
    000006C8 DA44                   MOV.L       L1133+12,R10; _calloc
    000006CA E504                   MOV         #4,R5
    000006CC 6E03                   MOV         R0,R14
    000006CE E900                   MOV         #0,R9
    000006D0 2E92                   MOV.L       R9,@R14
    000006D2 52DB                   MOV.L       @(44,R13),R2
    000006D4 1E28                   MOV.L       R2,@(32,R14)
    000006D6 4A0B                   JSR         @R10
    000006D8 6423                   MOV         R2,R4
    000006DA 1E07                   MOV.L       R0,@(28,R14)
      simplexC.c   423        for(i=0;i<it->BinvSize;i++)
    000006DC A00E                   BRA         L975
    000006DE 6C93                   MOV         R9,R12
    000006E0              L976:                             
      simplexC.c   424        {
      simplexC.c   425            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    000006E0 58E7                   MOV.L       @(28,R14),R8
    000006E2 E504                   MOV         #4,R5
    000006E4 6BC3                   MOV         R12,R11
    000006E6 4B08                   SHLL2       R11
    000006E8 38BC                   ADD         R11,R8
    000006EA 4A0B                   JSR         @R10
    000006EC 54E8                   MOV.L       @(32,R14),R4
    000006EE 7C01                   ADD         #1,R12
    000006F0 2802                   MOV.L       R0,@R8
      simplexC.c   426            it->Binv[i][i]=1;
    000006F2 50E7                   MOV.L       @(28,R14),R0
    000006F4 D23A                   MOV.L       L1133+16,R2; H'3F800000
    000006F6 03BE                   MOV.L       @(R0,R11),R3
    000006F8 33BC                   ADD         R11,R3
    000006FA 2322                   MOV.L       R2,@R3
    000006FC              L975:                             
    000006FC 53E8                   MOV.L       @(32,R14),R3
    000006FE 3C33                   CMP/GE      R3,R12
    00000700 8BEE                   BF          L976
      simplexC.c   427        }
      simplexC.c   428        it->idBasicVariables=calloc(pS->nVariables,sizeof(int));
    00000702 E504                   MOV         #4,R5
    00000704 4A0B                   JSR         @R10
    00000706 54D7                   MOV.L       @(28,R13),R4
    00000708 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c   429        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    0000070A E504                   MOV         #4,R5
    0000070C 4A0B                   JSR         @R10
    0000070E 54E8                   MOV.L       @(32,R14),R4
    00000710 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c   430        for(i=0;i<it->BinvSize;i++)
    00000712 E401                   MOV         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000714 A023                   BRA         L977
    00000716 6593                   MOV         R9,R5
    00000718              L978:                             
    00000718 6C53                   MOV         R5,R12
    0000071A 4C08                   SHLL2       R12
    0000071C E040                   MOV         #64,R0
    0000071E 00DE                   MOV.L       @(R0,R13),R0
    00000720 03CE                   MOV.L       @(R0,R12),R3
    00000722 4315                   CMP/PL      R3
    00000724 8B0C                   BF          L979
      simplexC.c   431        {
      simplexC.c   432            if(pS->idConstraintTo2fasesVar[i]>0)
      simplexC.c   433            {
      simplexC.c   434                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintTo2fasesVar[i];
    00000726 E040                   MOV         #64,R0
    00000728 52E2                   MOV.L       @(8,R14),R2
    0000072A 32CC                   ADD         R12,R2
    0000072C 00DE                   MOV.L       @(R0,R13),R0
    0000072E 03CE                   MOV.L       @(R0,R12),R3
    00000730 2232                   MOV.L       R3,@R2
      simplexC.c   435                it->idBasicVariables[pS->idConstraintTo2fasesVar[i]]=1;
    00000732 E040                   MOV         #64,R0
    00000734 00DE                   MOV.L       @(R0,R13),R0
    00000736 03CE                   MOV.L       @(R0,R12),R3
    00000738 50E1                   MOV.L       @(4,R14),R0
    0000073A 4308                   SHLL2       R3
    0000073C A00E                   BRA         L980
    0000073E 0346                   MOV.L       R4,@(R0,R3)
    00000740              L979:                             
      simplexC.c   436            }else if(pS->idConstraintToSlopeVar[i]>0)
    00000740 50DF                   MOV.L       @(60,R13),R0
    00000742 03CE                   MOV.L       @(R0,R12),R3
    00000744 4315                   CMP/PL      R3
    00000746 8B09                   BF          L980
      simplexC.c   437            {
      simplexC.c   438                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintToSlopeVar[i];
    00000748 52E2                   MOV.L       @(8,R14),R2
    0000074A 32CC                   ADD         R12,R2
    0000074C 50DF                   MOV.L       @(60,R13),R0
    0000074E 03CE                   MOV.L       @(R0,R12),R3
    00000750 2232                   MOV.L       R3,@R2
      simplexC.c   439                it->idBasicVariables[pS->idConstraintToSlopeVar[i]]=1;
    00000752 50DF                   MOV.L       @(60,R13),R0
    00000754 03CE                   MOV.L       @(R0,R12),R3
    00000756 4308                   SHLL2       R3
    00000758 50E1                   MOV.L       @(4,R14),R0
    0000075A 0346                   MOV.L       R4,@(R0,R3)
    0000075C              L980:                             
    0000075C 7501                   ADD         #1,R5
    0000075E              L977:                             
    0000075E 52E8                   MOV.L       @(32,R14),R2
    00000760 3523                   CMP/GE      R2,R5
    00000762 8BD9                   BF          L978
      simplexC.c   440            }
      simplexC.c   441        }
      simplexC.c   442        return it;
      simplexC.c   443    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000764 4F26                   LDS.L       @R15+,PR
    00000766 60E3                   MOV         R14,R0
    00000768 68F6                   MOV.L       @R15+,R8
    0000076A 69F6                   MOV.L       @R15+,R9
    0000076C 6AF6                   MOV.L       @R15+,R10
    0000076E 6BF6                   MOV.L       @R15+,R11
    00000770 6CF6                   MOV.L       @R15+,R12
    00000772 6DF6                   MOV.L       @R15+,R13
    00000774 000B                   RTS
    00000776 6EF6                   MOV.L       @R15+,R14
      simplexC.c   444    
      simplexC.c   445    int lengthConcatenate(int sprintLength)
    00000778              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   446    {
      simplexC.c   447        return (sprintLength > 0) ? sprintLength : 0;
    00000778 4415                   CMP/PL      R4
    0000077A 8B01                   BF          L983
    0000077C 000B                   RTS
    0000077E 6043                   MOV         R4,R0
    00000780              L983:                             
    00000780 E000                   MOV         #0,R0
      simplexC.c   448    }
    00000782              L985:                             
    00000782 000B                   RTS
    00000784 0009                   NOP
      simplexC.c   449    
      simplexC.c   450    char* getInequalityChar(int inequalitySign)
    00000786              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0
      simplexC.c   451    {
      simplexC.c   452        char * res;
      simplexC.c   453        switch (inequalitySign)
    00000786 6043                   MOV         R4,R0
    00000788 8800                   CMP/EQ      #0,R0
    0000078A 8905                   BT          L833
    0000078C 8801                   CMP/EQ      #1,R0
    0000078E 8906                   BT          L835
    00000790 8802                   CMP/EQ      #2,R0
    00000792 8907                   BT          L837
    00000794 A009                   BRA         L839
    00000796 0009                   NOP
    00000798              L833:                            ; case label 
      simplexC.c   454        {
      simplexC.c   455            case INE_EQUAL: res="="; break;
    00000798 D412                   MOV.L       L1133+20,R4; L552
    0000079A A007                   BRA         L986
    0000079C 0009                   NOP
    0000079E              L835:                            ; case label 
      simplexC.c   456            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    0000079E D412                   MOV.L       L1133+24,R4; L553
    000007A0 A004                   BRA         L986
    000007A2 0009                   NOP
    000007A4              L837:                            ; case label 
      simplexC.c   457            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    000007A4 D411                   MOV.L       L1133+28,R4; L554
    000007A6 A001                   BRA         L986




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007A8 0009                   NOP
    000007AA              L839:                            ; default label 
      simplexC.c   458            default: res = "ERROR"; break;
    000007AA D411                   MOV.L       L1133+32,R4; L555
    000007AC              L986:                             
      simplexC.c   459        }
      simplexC.c   460        return res;
      simplexC.c   461    }
    000007AC 000B                   RTS
    000007AE 6043                   MOV         R4,R0
      simplexC.c   462    
      simplexC.c   463    char * getFuncObjPurposeChar(int purpose)
    000007B0              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   464    {
      simplexC.c   465        char * res;
      simplexC.c   466        switch (purpose)
    000007B0 6043                   MOV         R4,R0
    000007B2 8800                   CMP/EQ      #0,R0
    000007B4 8903                   BT          L841
    000007B6 8801                   CMP/EQ      #1,R0
    000007B8 8904                   BT          L843
    000007BA A006                   BRA         L845
    000007BC 0009                   NOP
    000007BE              L841:                            ; case label 
      simplexC.c   467        {
      simplexC.c   468            case FUNC_MINIMIZE: res="MIN"; break;
    000007BE D40D                   MOV.L       L1133+36,R4; L561
    000007C0 A004                   BRA         L988
    000007C2 0009                   NOP
    000007C4              L843:                            ; case label 
      simplexC.c   469            case FUNC_MAXIMIZE: res="MAX"; break;
    000007C4 D40C                   MOV.L       L1133+40,R4; L562
    000007C6 A001                   BRA         L988
    000007C8 0009                   NOP
    000007CA              L845:                            ; default label 
      simplexC.c   470            default: res = "ERROR";break;
    000007CA D409                   MOV.L       L1133+32,R4; L555
    000007CC              L988:                             
      simplexC.c   471        }
      simplexC.c   472        return res;
      simplexC.c   473    } 
    000007CC 000B                   RTS
    000007CE 6043                   MOV         R4,R0
    000007D0              L1133:                            
    000007D0 <00000000>             .DATA.L     __lts
    000007D4 4F000000               .DATA.L     H'4F000000
    000007D8 <00000000>             .DATA.L     _malloc
    000007DC <00000000>             .DATA.L     _calloc
    000007E0 3F800000               .DATA.L     H'3F800000
    000007E4 <00000000>             .DATA.L     L552
    000007E8 <00000000>             .DATA.L     L553
    000007EC <00000000>             .DATA.L     L554
    000007F0 <00000000>             .DATA.L     L555
    000007F4 <00000000>             .DATA.L     L561
    000007F8 <00000000>             .DATA.L     L562
      simplexC.c   474    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   475    int printObjFunc(struct problemStatement* pS,int modelType)
    000007FC              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1212
                                                           ; used runtime library name:
                                                           ; __stod
    000007FC 2FE6                   MOV.L       R14,@-R15
      simplexC.c   476    {
      simplexC.c   477        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   478        char *uselessSring[128];
      simplexC.c   479        int menuChoice;
      simplexC.c   480        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   481        sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOLVE",
                         + EXIT_OPT);
    000007FE E300                   MOV         #0,R3
    00000800 9088                   MOV.W       L1134,R0   ; H'FB7C
    00000802 2FD6                   MOV.L       R13,@-R15
    00000804 2FC6                   MOV.L       R12,@-R15
    00000806 6C43                   MOV         R4,R12
    00000808 2FB6                   MOV.L       R11,@-R15
    0000080A 2FA6                   MOV.L       R10,@-R15
    0000080C 2F96                   MOV.L       R9,@-R15
    0000080E 2F86                   MOV.L       R8,@-R15
    00000810 4F22                   STS.L       PR,@-R15
    00000812 3F0C                   ADD         R0,R15
    00000814 DB45                   MOV.L       L1134+24,R11; _sprintf
    00000816 2F52                   MOV.L       R5,@R15
    00000818 2F36                   MOV.L       R3,@-R15
    0000081A 50C1                   MOV.L       @(4,R12),R0
    0000081C 8801                   CMP/EQ      #1,R0
    0000081E 8F03                   BF/S        L990
    00000820 EDFF                   MOV         #-1,R13
    00000822 D143                   MOV.L       L1134+28,R1; L575
    00000824 A002                   BRA         L991
    00000826 2F16                   MOV.L       R1,@-R15
    00000828              L990:                             
    00000828 D242                   MOV.L       L1134+32,R2; L576
    0000082A 2F26                   MOV.L       R2,@-R15
    0000082C              L991:                             
    0000082C D142                   MOV.L       L1134+36,R1; L574
    0000082E 2F16                   MOV.L       R1,@-R15
    00000830 9471                   MOV.W       L1134+2,R4 ; H'0410
    00000832 4B0B                   JSR         @R11
    00000834 34FC                   ADD         R15,R4
      simplexC.c   482        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000836 53C7                   MOV.L       @(28,R12),R3
    00000838 946E                   MOV.W       L1134+4,R4 ; H'039C
    0000083A 2F36                   MOV.L       R3,@-R15
    0000083C 52CB                   MOV.L       @(44,R12),R2
    0000083E 2F26                   MOV.L       R2,@-R15
    00000840 D33E                   MOV.L       L1134+40,R3; L577
    00000842 2F36                   MOV.L       R3,@-R15
    00000844 4B0B                   JSR         @R11
    00000846 34FC                   ADD         R15,R4
    00000848 7F18                   ADD         #24,R15
      simplexC.c   483        if(modelType==TYPE_INPUT)
    0000084A 60F2                   MOV.L       @R15,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084C 8801                   CMP/EQ      #1,R0
    0000084E 8B13                   BF          L992
      simplexC.c   484        {
      simplexC.c   485            sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    00000850 E044                   MOV         #68,R0
    00000852 BFAD                   BSR         _getFuncObjPurposeChar
    00000854 04CE                   MOV.L       @(R0,R12),R4
    00000856 2F06                   MOV.L       R0,@-R15
    00000858 D239                   MOV.L       L1134+44,R2; L579
    0000085A 2F26                   MOV.L       R2,@-R15
    0000085C 945D                   MOV.W       L1134+6,R4 ; H'030C
    0000085E 4B0B                   JSR         @R11
    00000860 34FC                   ADD         R15,R4
      simplexC.c   486            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    00000862 E348                   MOV         #72,R3
    00000864 D237                   MOV.L       L1134+48,R2; __stod
    00000866 33CC                   ADD         R12,R3
    00000868 50C7                   MOV.L       @(28,R12),R0
    0000086A 4008                   SHLL2       R0
    0000086C 6332                   MOV.L       @R3,R3
    0000086E 003E                   MOV.L       @(R0,R3),R0
    00000870 420B                   JSR         @R2
    00000872 2FF6                   MOV.L       R15,@-R15
    00000874 A00F                   BRA         L1124
    00000876 0009                   NOP
    00000878              L992:                             
      simplexC.c   487        }else
      simplexC.c   488        {
      simplexC.c   489            sprintf(stroutBasicInfo2, "OBJ MIN");
    00000878 D333                   MOV.L       L1134+52,R3; L582
    0000087A 2F36                   MOV.L       R3,@-R15
    0000087C 944E                   MOV.W       L1134+8,R4 ; H'0308
    0000087E 4B0B                   JSR         @R11
    00000880 34FC                   ADD         R15,R4
      simplexC.c   490            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]);
    00000882 E34C                   MOV         #76,R3
    00000884 D22F                   MOV.L       L1134+48,R2; __stod
    00000886 33CC                   ADD         R12,R3
    00000888 50C7                   MOV.L       @(28,R12),R0
    0000088A 4008                   SHLL2       R0
    0000088C 6332                   MOV.L       @R3,R3
    0000088E 003E                   MOV.L       @(R0,R3),R0
    00000890 7FFC                   ADD         #-4,R15
    00000892 420B                   JSR         @R2
    00000894 2FF6                   MOV.L       R15,@-R15
    00000896              L1124:                            
    00000896 D32D                   MOV.L       L1134+56,R3; L580
    00000898 9441                   MOV.W       L1134+10,R4; H'0290
    0000089A 2F36                   MOV.L       R3,@-R15
    0000089C 4B0B                   JSR         @R11
    0000089E 34FC                   ADD         R15,R4
    000008A0 D82B                   MOV.L       L1134+60,R8; _Bdisp_PutDisp_DD
    000008A2 7F0C                   ADD         #12,R15
    000008A4 9A3C                   MOV.W       L1134+12,R10; H'0204
    000008A6 DE2B                   MOV.L       L1134+64,R14; _PrintMini
      simplexC.c   491        }
      simplexC.c   492        while(menuChoice!=EXIT_OPT)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008A8 A077                   BRA         L994
    000008AA 3AFC                   ADD         R15,R10
    000008AC              L995:                             
      simplexC.c   493        {
      simplexC.c   494            Bdisp_AllClr_DDVRAM();
    000008AC D32A                   MOV.L       L1134+68,R3; _Bdisp_AllClr_DDVRAM
    000008AE 430B                   JSR         @R3
    000008B0 0009                   NOP
      simplexC.c   495            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000008B2 E710                   MOV         #16,R7
    000008B4 9635                   MOV.W       L1134+14,R6; H'0404
    000008B6 E500                   MOV         #0,R5
    000008B8 36FC                   ADD         R15,R6
    000008BA 4E0B                   JSR         @R14
    000008BC 6453                   MOV         R5,R4
      simplexC.c   496            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000008BE E710                   MOV         #16,R7
    000008C0 9630                   MOV.W       L1134+16,R6; H'0384
    000008C2 E507                   MOV         #7,R5
    000008C4 36FC                   ADD         R15,R6
    000008C6 4E0B                   JSR         @R14
    000008C8 E400                   MOV         #0,R4
      simplexC.c   497            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000008CA E710                   MOV         #16,R7
    000008CC 962B                   MOV.W       L1134+18,R6; H'0304
    000008CE E50E                   MOV         #14,R5
    000008D0 36FC                   ADD         R15,R6
    000008D2 4E0B                   JSR         @R14
    000008D4 E400                   MOV         #0,R4
      simplexC.c   498            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    000008D6 E710                   MOV         #16,R7
    000008D8 9626                   MOV.W       L1134+20,R6; H'0284
    000008DA E515                   MOV         #21,R5
    000008DC 36FC                   ADD         R15,R6
    000008DE 4E0B                   JSR         @R14
    000008E0 E400                   MOV         #0,R4
      simplexC.c   499            menuChoice = InputI(0, 35);
    000008E2 E523                   MOV         #35,R5
    000008E4 BBA3                   BSR         _InputI
    000008E6 E400                   MOV         #0,R4
      simplexC.c   500            Bdisp_PutDisp_DD();
    000008E8 480B                   JSR         @R8
    000008EA 6D03                   MOV         R0,R13
      simplexC.c   501            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    000008EC 2DD8                   TST         R13,R13
    000008EE 8954                   BT          L994
    000008F0 52C7                   MOV.L       @(28,R12),R2
    000008F2 3D27                   CMP/GT      R2,R13
    000008F4 8951                   BT          L994
    000008F6 69D3                   MOV         R13,R9
    000008F8 60F2                   MOV.L       @R15,R0
    000008FA 79FF                   ADD         #-1,R9
    000008FC 8801                   CMP/EQ      #1,R0
    000008FE 8F2D                   BF/S        L997
    00000900 4908                   SHLL2       R9
      simplexC.c   502            {
      simplexC.c   503                if(modelType==TYPE_INPUT)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   504                {
      simplexC.c   505                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    00000902 E048                   MOV         #72,R0
    00000904 D30F                   MOV.L       L1134+48,R3; __stod
    00000906 00CE                   MOV.L       @(R0,R12),R0
    00000908 009E                   MOV.L       @(R0,R9),R0
    0000090A 7FF8                   ADD         #-8,R15
    0000090C 430B                   JSR         @R3
    0000090E 2FF6                   MOV.L       R15,@-R15
    00000910 A02B                   BRA         L1125
    00000912 0009                   NOP
    00000914              L1134:                            
    00000914 FB7C                   .DATA.W     H'FB7C
    00000916 0410                   .DATA.W     H'0410
    00000918 039C                   .DATA.W     H'039C
    0000091A 030C                   .DATA.W     H'030C
    0000091C 0308                   .DATA.W     H'0308
    0000091E 0290                   .DATA.W     H'0290
    00000920 0204                   .DATA.W     H'0204
    00000922 0404                   .DATA.W     H'0404
    00000924 0384                   .DATA.W     H'0384
    00000926 0304                   .DATA.W     H'0304
    00000928 0284                   .DATA.W     H'0284
    0000092A 0000                   .DATA.W     0
    0000092C <00000000>             .DATA.L     _sprintf
    00000930 <00000000>             .DATA.L     L575
    00000934 <00000000>             .DATA.L     L576
    00000938 <00000000>             .DATA.L     L574
    0000093C <00000000>             .DATA.L     L577
    00000940 <00000000>             .DATA.L     L579
    00000944 <00000000>             .DATA.L     __stod
    00000948 <00000000>             .DATA.L     L582
    0000094C <00000000>             .DATA.L     L580
    00000950 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000954 <00000000>             .DATA.L     _PrintMini
    00000958 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000095C              L997:                             
      simplexC.c   506                }else
      simplexC.c   507                {
      simplexC.c   508                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    0000095C D352                   MOV.L       L1135+14,R3; __stod
    0000095E E04C                   MOV         #76,R0
    00000960 00CE                   MOV.L       @(R0,R12),R0
    00000962 009E                   MOV.L       @(R0,R9),R0
    00000964 7FF8                   ADD         #-8,R15
    00000966 430B                   JSR         @R3
    00000968 2FF6                   MOV.L       R15,@-R15
    0000096A              L1125:                            
    0000096A 2FD6                   MOV.L       R13,@-R15
    0000096C D24F                   MOV.L       L1135+18,R2; L586
    0000096E 2F26                   MOV.L       R2,@-R15
    00000970 4B0B                   JSR         @R11
    00000972 64A3                   MOV         R10,R4
    00000974 7F10                   ADD         #16,R15
      simplexC.c   509                }
      simplexC.c   510                




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   511                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    00000976 E710                   MOV         #16,R7
    00000978 66A3                   MOV         R10,R6
    0000097A E52A                   MOV         #42,R5
    0000097C 4E0B                   JSR         @R14
    0000097E E400                   MOV         #0,R4
      simplexC.c   512                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000980 D64B                   MOV.L       L1135+22,R6; L588
    00000982 E531                   MOV         #49,R5
    00000984 E710                   MOV         #16,R7
    00000986 4E0B                   JSR         @R14
    00000988 E400                   MOV         #0,R4
      simplexC.c   513                string_input(0, 56, uselessSring);
    0000098A 66F3                   MOV         R15,R6
    0000098C D349                   MOV.L       L1135+26,R3; _string_input
    0000098E E538                   MOV         #56,R5
    00000990 7604                   ADD         #4,R6
    00000992 430B                   JSR         @R3
    00000994 E400                   MOV         #0,R4
      simplexC.c   514                Bdisp_PutDisp_DD();
    00000996 480B                   JSR         @R8
    00000998 0009                   NOP
    0000099A              L994:                             
    0000099A 2DD8                   TST         R13,R13
    0000099C 8B86                   BF          L995
      simplexC.c   515            }
      simplexC.c   516        }
      simplexC.c   517        return 0;
    0000099E E000                   MOV         #0,R0
      simplexC.c   518    }
    000009A0 917B                   MOV.W       L1135,R1   ; H'0484
    000009A2 3F1C                   ADD         R1,R15
    000009A4 4F26                   LDS.L       @R15+,PR
    000009A6 68F6                   MOV.L       @R15+,R8
    000009A8 69F6                   MOV.L       @R15+,R9
    000009AA 6AF6                   MOV.L       @R15+,R10
    000009AC 6BF6                   MOV.L       @R15+,R11
    000009AE 6CF6                   MOV.L       @R15+,R12
    000009B0 6DF6                   MOV.L       @R15+,R13
    000009B2 000B                   RTS
    000009B4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   519    
      simplexC.c   520    int printAjVal(struct problemStatement* pS, int varId)
    000009B6              _printAjVal:                     ; function: printAjVal
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   521    {
      simplexC.c   522        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   523        char *uselessSring[128];
      simplexC.c   524        int menuChoice;
      simplexC.c   525        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   526        sprintf(stroutBasicInfo, "Ax%d. nConstraints: %d, Exit %d",varId,pS->nConstraints,EXIT_OPT);
    000009B6 E300                   MOV         #0,R3
    000009B8 2FE6                   MOV.L       R14,@-R15
    000009BA EEFF                   MOV         #-1,R14
    000009BC 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009BE 2FC6                   MOV.L       R12,@-R15
    000009C0 2FB6                   MOV.L       R11,@-R15
    000009C2 2FA6                   MOV.L       R10,@-R15
    000009C4 2F96                   MOV.L       R9,@-R15
    000009C6 6943                   MOV         R4,R9
    000009C8 2F86                   MOV.L       R8,@-R15
    000009CA 4F22                   STS.L       PR,@-R15
    000009CC 9066                   MOV.W       L1135+2,R0 ; H'FCF8
    000009CE 3F0C                   ADD         R0,R15
    000009D0 2F52                   MOV.L       R5,@R15
    000009D2 9864                   MOV.W       L1135+4,R8 ; H'0288
    000009D4 38FC                   ADD         R15,R8
    000009D6 2F36                   MOV.L       R3,@-R15
    000009D8 529B                   MOV.L       @(44,R9),R2
    000009DA 2F26                   MOV.L       R2,@-R15
    000009DC 51F2                   MOV.L       @(8,R15),R1
    000009DE 2F16                   MOV.L       R1,@-R15
    000009E0 D235                   MOV.L       L1135+30,R2; L597
    000009E2 2F26                   MOV.L       R2,@-R15
    000009E4 D135                   MOV.L       L1135+34,R1; _sprintf
    000009E6 410B                   JSR         @R1
    000009E8 6483                   MOV         R8,R4
    000009EA 7F10                   ADD         #16,R15
    000009EC DA34                   MOV.L       L1135+38,R10; _Bdisp_PutDisp_DD
    000009EE DB35                   MOV.L       L1135+42,R11; _Bdisp_AllClr_DDVRAM
    000009F0 9C56                   MOV.W       L1135+6,R12; H'0208
    000009F2 3CFC                   ADD         R15,R12
    000009F4 DD34                   MOV.L       L1135+46,R13; _PrintMini
    000009F6 63F2                   MOV.L       @R15,R3
    000009F8 73FF                   ADD         #-1,R3
    000009FA 4308                   SHLL2       R3
      simplexC.c   527        while(menuChoice!=EXIT_OPT)
    000009FC A03F                   BRA         L1000
    000009FE 1F31                   MOV.L       R3,@(4,R15)
    00000A00              L1001:                            
      simplexC.c   528        {
      simplexC.c   529            Bdisp_AllClr_DDVRAM();
    00000A00 4B0B                   JSR         @R11
    00000A02 0009                   NOP
      simplexC.c   530            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000A04 E710                   MOV         #16,R7
    00000A06 6683                   MOV         R8,R6
    00000A08 E500                   MOV         #0,R5
    00000A0A 4D0B                   JSR         @R13
    00000A0C 6453                   MOV         R5,R4
      simplexC.c   531            menuChoice=InputI(0,7);
    00000A0E E507                   MOV         #7,R5
    00000A10 BB0D                   BSR         _InputI
    00000A12 E400                   MOV         #0,R4
      simplexC.c   532            Bdisp_PutDisp_DD();
    00000A14 4A0B                   JSR         @R10
    00000A16 6E03                   MOV         R0,R14
      simplexC.c   533            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000A18 2EE8                   TST         R14,R14
    00000A1A 8930                   BT          L1000
    00000A1C 539B                   MOV.L       @(44,R9),R3
    00000A1E 3E37                   CMP/GT      R3,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A20 892D                   BT          L1000
      simplexC.c   534            {
      simplexC.c   535                Bdisp_AllClr_DDVRAM();
    00000A22 4B0B                   JSR         @R11
    00000A24 0009                   NOP
      simplexC.c   536                sprintf(stroutVariable, "Ax%d. %.2f Pos %d",varId,pS->ajVector[varId-1][menuChoice-1],menuChoi
                         +ce);
    00000A26 E050                   MOV         #80,R0
    00000A28 D11F                   MOV.L       L1135+14,R1; __stod
    00000A2A 62E3                   MOV         R14,R2
    00000A2C 2FE6                   MOV.L       R14,@-R15
    00000A2E 72FF                   ADD         #-1,R2
    00000A30 53F2                   MOV.L       @(8,R15),R3
    00000A32 4208                   SHLL2       R2
    00000A34 009E                   MOV.L       @(R0,R9),R0
    00000A36 003E                   MOV.L       @(R0,R3),R0
    00000A38 002E                   MOV.L       @(R0,R2),R0
    00000A3A 7FF8                   ADD         #-8,R15
    00000A3C 410B                   JSR         @R1
    00000A3E 2FF6                   MOV.L       R15,@-R15
    00000A40 52F3                   MOV.L       @(12,R15),R2
    00000A42 2F26                   MOV.L       R2,@-R15
    00000A44 D121                   MOV.L       L1135+50,R1; L600
    00000A46 2F16                   MOV.L       R1,@-R15
    00000A48 D21C                   MOV.L       L1135+34,R2; _sprintf
    00000A4A 420B                   JSR         @R2
    00000A4C 64C3                   MOV         R12,R4
    00000A4E 7F14                   ADD         #20,R15
      simplexC.c   537                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000A50 E710                   MOV         #16,R7
    00000A52 66C3                   MOV         R12,R6
    00000A54 E500                   MOV         #0,R5
    00000A56 4D0B                   JSR         @R13
    00000A58 6453                   MOV         R5,R4
      simplexC.c   538                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000A5A E710                   MOV         #16,R7
    00000A5C D614                   MOV.L       L1135+22,R6; L588
    00000A5E E507                   MOV         #7,R5
    00000A60 4D0B                   JSR         @R13
    00000A62 E400                   MOV         #0,R4
      simplexC.c   539                string_input(0, 14, uselessSring);
    00000A64 D313                   MOV.L       L1135+26,R3; _string_input
    00000A66 66F3                   MOV         R15,R6
    00000A68 7608                   ADD         #8,R6
    00000A6A E50E                   MOV         #14,R5
    00000A6C 430B                   JSR         @R3
    00000A6E E400                   MOV         #0,R4
      simplexC.c   540                Bdisp_PutDisp_DD();
    00000A70 4A0B                   JSR         @R10
    00000A72 0009                   NOP
      simplexC.c   541                memset(stroutVariable,0,128);
    00000A74 9615                   MOV.W       L1135+8,R6 ; H'0080
    00000A76 E500                   MOV         #0,R5
    00000A78 D215                   MOV.L       L1135+54,R2; _memset
    00000A7A 420B                   JSR         @R2
    00000A7C 64C3                   MOV         R12,R4
    00000A7E              L1000:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A7E 2EE8                   TST         R14,R14
    00000A80 8BBE                   BF          L1001
      simplexC.c   542            }
      simplexC.c   543        }
      simplexC.c   544        return 0;
    00000A82 E000                   MOV         #0,R0
      simplexC.c   545    }
    00000A84 910E                   MOV.W       L1135+10,R1; H'0308
    00000A86 3F1C                   ADD         R1,R15
    00000A88 4F26                   LDS.L       @R15+,PR
    00000A8A 68F6                   MOV.L       @R15+,R8
    00000A8C 69F6                   MOV.L       @R15+,R9
    00000A8E 6AF6                   MOV.L       @R15+,R10
    00000A90 6BF6                   MOV.L       @R15+,R11
    00000A92 6CF6                   MOV.L       @R15+,R12
    00000A94 6DF6                   MOV.L       @R15+,R13
    00000A96 000B                   RTS
    00000A98 6EF6                   MOV.L       @R15+,R14
    00000A9A              L1135:                            
    00000A9A 0484                   .DATA.W     H'0484
    00000A9C FCF8                   .DATA.W     H'FCF8
    00000A9E 0288                   .DATA.W     H'0288
    00000AA0 0208                   .DATA.W     H'0208
    00000AA2 0080                   .DATA.W     H'0080
    00000AA4 0308                   .DATA.W     H'0308
    00000AA6 0000                   .DATA.W     0
    00000AA8 <00000000>             .DATA.L     __stod
    00000AAC <00000000>             .DATA.L     L586
    00000AB0 <00000000>             .DATA.L     L588
    00000AB4 <00000000>             .DATA.L     _string_input
    00000AB8 <00000000>             .DATA.L     L597
    00000ABC <00000000>             .DATA.L     _sprintf
    00000AC0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000AC4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000AC8 <00000000>             .DATA.L     _PrintMini
    00000ACC <00000000>             .DATA.L     L600
    00000AD0 <00000000>             .DATA.L     _memset
      simplexC.c   546    
      simplexC.c   547    int printAjVec(struct problemStatement* pS)
    00000AD4              _printAjVec:                     ; function: printAjVec
                                                           ; frame size=172
    00000AD4 2FE6                   MOV.L       R14,@-R15
      simplexC.c   548    {
      simplexC.c   549        char stroutBasicInfo[128];
      simplexC.c   550        int menuChoice;
      simplexC.c   551        menuChoice=INITIALIZE_VALUE_OPT;
    00000AD6 EEFF                   MOV         #-1,R14
    00000AD8 2FD6                   MOV.L       R13,@-R15
    00000ADA 6D43                   MOV         R4,R13
    00000ADC 2FC6                   MOV.L       R12,@-R15
    00000ADE 2FB6                   MOV.L       R11,@-R15
    00000AE0 2FA6                   MOV.L       R10,@-R15
    00000AE2 2F96                   MOV.L       R9,@-R15
    00000AE4 2F86                   MOV.L       R8,@-R15
    00000AE6 4F22                   STS.L       PR,@-R15
    00000AE8 D837                   MOV.L       L1136+8,R8 ; _PrintMini
    00000AEA 7F80                   ADD         #-128,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AEC D937                   MOV.L       L1136+12,R9; _sprintf
    00000AEE DA38                   MOV.L       L1136+16,R10; L608
    00000AF0 DB38                   MOV.L       L1136+20,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   552        while(menuChoice!=EXIT_OPT)
    00000AF2 A01D                   BRA         L1004
    00000AF4 6CF3                   MOV         R15,R12
    00000AF6              L1005:                            
      simplexC.c   553        {
      simplexC.c   554            Bdisp_AllClr_DDVRAM();
    00000AF6 4B0B                   JSR         @R11
    00000AF8 0009                   NOP
      simplexC.c   555            sprintf(stroutBasicInfo, "Axj pMenu Vars %d.  %d exit",pS->nVariables,EXIT_OPT);
    00000AFA E200                   MOV         #0,R2
    00000AFC 2F26                   MOV.L       R2,@-R15
    00000AFE 53D7                   MOV.L       @(28,R13),R3
    00000B00 2F36                   MOV.L       R3,@-R15
    00000B02 2FA6                   MOV.L       R10,@-R15
    00000B04 490B                   JSR         @R9
    00000B06 64C3                   MOV         R12,R4
    00000B08 7F0C                   ADD         #12,R15
      simplexC.c   556            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000B0A E710                   MOV         #16,R7
    00000B0C 66C3                   MOV         R12,R6
    00000B0E E500                   MOV         #0,R5
    00000B10 480B                   JSR         @R8
    00000B12 6453                   MOV         R5,R4
      simplexC.c   557            menuChoice = InputI(0, 7);
    00000B14 E507                   MOV         #7,R5
    00000B16 BA8A                   BSR         _InputI
    00000B18 E400                   MOV         #0,R4
      simplexC.c   558            Bdisp_PutDisp_DD();
    00000B1A D32F                   MOV.L       L1136+24,R3; _Bdisp_PutDisp_DD
    00000B1C 430B                   JSR         @R3
    00000B1E 6E03                   MOV         R0,R14
      simplexC.c   559            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000B20 2EE8                   TST         R14,R14
    00000B22 8905                   BT          L1004
    00000B24 53D7                   MOV.L       @(28,R13),R3
    00000B26 3E37                   CMP/GT      R3,R14
    00000B28 8902                   BT          L1004
      simplexC.c   560            {
      simplexC.c   561                printAjVal(pS,menuChoice);
    00000B2A 65E3                   MOV         R14,R5
    00000B2C BF43                   BSR         _printAjVal
    00000B2E 64D3                   MOV         R13,R4
    00000B30              L1004:                            
    00000B30 2EE8                   TST         R14,R14
    00000B32 8BE0                   BF          L1005
      simplexC.c   562            }
      simplexC.c   563        }
      simplexC.c   564        return 0;
      simplexC.c   565    }
    00000B34 9144                   MOV.W       L1136,R1   ; H'0080
    00000B36 E000                   MOV         #0,R0
    00000B38 3F1C                   ADD         R1,R15
    00000B3A 4F26                   LDS.L       @R15+,PR
    00000B3C 68F6                   MOV.L       @R15+,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B3E 69F6                   MOV.L       @R15+,R9
    00000B40 6AF6                   MOV.L       @R15+,R10
    00000B42 6BF6                   MOV.L       @R15+,R11
    00000B44 6CF6                   MOV.L       @R15+,R12
    00000B46 6DF6                   MOV.L       @R15+,R13
    00000B48 000B                   RTS
    00000B4A 6EF6                   MOV.L       @R15+,R14
      simplexC.c   566    
      simplexC.c   567    int printStatementMenu(struct problemStatement* pS)
    00000B4C              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
    00000B4C 2FE6                   MOV.L       R14,@-R15
      simplexC.c   568    {
      simplexC.c   569        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   570        int menuChoice;
      simplexC.c   571        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   572        sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"S
                         +OLVE", EXIT_OPT);
    00000B4E E300                   MOV         #0,R3
    00000B50 9037                   MOV.W       L1136+2,R0 ; H'FE80
    00000B52 6E43                   MOV         R4,R14
    00000B54 2FD6                   MOV.L       R13,@-R15
    00000B56 2FC6                   MOV.L       R12,@-R15
    00000B58 2FB6                   MOV.L       R11,@-R15
    00000B5A 2FA6                   MOV.L       R10,@-R15
    00000B5C 2F96                   MOV.L       R9,@-R15
    00000B5E 2F86                   MOV.L       R8,@-R15
    00000B60 4F22                   STS.L       PR,@-R15
    00000B62 3F0C                   ADD         R0,R15
    00000B64 DD19                   MOV.L       L1136+12,R13; _sprintf
    00000B66 9A2D                   MOV.W       L1136+4,R10; H'0100
    00000B68 3AFC                   ADD         R15,R10
    00000B6A 2F36                   MOV.L       R3,@-R15
    00000B6C 50E1                   MOV.L       @(4,R14),R0
    00000B6E 8801                   CMP/EQ      #1,R0
    00000B70 8F03                   BF/S        L1008
    00000B72 ECFF                   MOV         #-1,R12
    00000B74 D119                   MOV.L       L1136+28,R1; L575
    00000B76 A002                   BRA         L1009
    00000B78 2F16                   MOV.L       R1,@-R15
    00000B7A              L1008:                            
    00000B7A D219                   MOV.L       L1136+32,R2; L576
    00000B7C 2F26                   MOV.L       R2,@-R15
    00000B7E              L1009:                            
    00000B7E D119                   MOV.L       L1136+36,R1; L617
    00000B80 2F16                   MOV.L       R1,@-R15
    00000B82 4D0B                   JSR         @R13
    00000B84 64A3                   MOV         R10,R4
      simplexC.c   573        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000B86 991E                   MOV.W       L1136+6,R9 ; H'008C
    00000B88 53E7                   MOV.L       @(28,R14),R3
    00000B8A 39FC                   ADD         R15,R9
    00000B8C 2F36                   MOV.L       R3,@-R15
    00000B8E 52EB                   MOV.L       @(44,R14),R2
    00000B90 D315                   MOV.L       L1136+40,R3; L577
    00000B92 2F26                   MOV.L       R2,@-R15
    00000B94 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B96 4D0B                   JSR         @R13
    00000B98 6493                   MOV         R9,R4
    00000B9A 7F18                   ADD         #24,R15
      simplexC.c   574    
      simplexC.c   575        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000B9C 50E1                   MOV.L       @(4,R14),R0
    00000B9E 8802                   CMP/EQ      #2,R0
    00000BA0 8F06                   BF/S        L1010
    00000BA2 6BF3                   MOV         R15,R11
    00000BA4 53E2                   MOV.L       @(8,R14),R3
    00000BA6 2338                   TST         R3,R3
    00000BA8 8902                   BT          L1010
      simplexC.c   576        {
      simplexC.c   577            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000BAA D310                   MOV.L       L1136+44,R3; L619
    00000BAC A001                   BRA         L1126
    00000BAE 0009                   NOP
    00000BB0              L1010:                            
      simplexC.c   578        }else
      simplexC.c   579        {
      simplexC.c   580            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000BB0 D30F                   MOV.L       L1136+48,R3; L621
    00000BB2              L1126:                            
    00000BB2 2F36                   MOV.L       R3,@-R15
    00000BB4 4D0B                   JSR         @R13
    00000BB6 64B3                   MOV         R11,R4
    00000BB8 D806                   MOV.L       L1136+20,R8; _Bdisp_AllClr_DDVRAM
    00000BBA DD03                   MOV.L       L1136+8,R13; _PrintMini
      simplexC.c   581        }
      simplexC.c   582        
      simplexC.c   583        while(menuChoice!=EXIT_OPT)
    00000BBC A05F                   BRA         L1012
    00000BBE 7F04                   ADD         #4,R15
    00000BC0              L1136:                            
    00000BC0 0080                   .DATA.W     H'0080
    00000BC2 FE80                   .DATA.W     H'FE80
    00000BC4 0100                   .DATA.W     H'0100
    00000BC6 008C                   .DATA.W     H'008C
    00000BC8 <00000000>             .DATA.L     _PrintMini
    00000BCC <00000000>             .DATA.L     _sprintf
    00000BD0 <00000000>             .DATA.L     L608
    00000BD4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000BD8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000BDC <00000000>             .DATA.L     L575
    00000BE0 <00000000>             .DATA.L     L576
    00000BE4 <00000000>             .DATA.L     L617
    00000BE8 <00000000>             .DATA.L     L577
    00000BEC <00000000>             .DATA.L     L619
    00000BF0 <00000000>             .DATA.L     L621
    00000BF4              L1013:                            
      simplexC.c   584        {
      simplexC.c   585            Bdisp_AllClr_DDVRAM();
    00000BF4 480B                   JSR         @R8
    00000BF6 0009                   NOP
      simplexC.c   586            
      simplexC.c   587            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00000BF8 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BFA 66A3                   MOV         R10,R6
    00000BFC E500                   MOV         #0,R5
    00000BFE 4D0B                   JSR         @R13
    00000C00 6453                   MOV         R5,R4
      simplexC.c   588            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00000C02 E710                   MOV         #16,R7
    00000C04 6693                   MOV         R9,R6
    00000C06 E507                   MOV         #7,R5
    00000C08 4D0B                   JSR         @R13
    00000C0A E400                   MOV         #0,R4
      simplexC.c   589            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    00000C0C D630                   MOV.L       L1137+8,R6 ; L623
    00000C0E E50E                   MOV         #14,R5
    00000C10 E710                   MOV         #16,R7
    00000C12 4D0B                   JSR         @R13
    00000C14 E400                   MOV         #0,R4
      simplexC.c   590            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    00000C16 E710                   MOV         #16,R7
    00000C18 66B3                   MOV         R11,R6
    00000C1A E515                   MOV         #21,R5
    00000C1C 4D0B                   JSR         @R13
    00000C1E E400                   MOV         #0,R4
      simplexC.c   591            if(pS->modelType==TYPE_SOLVE)
    00000C20 50E1                   MOV.L       @(4,R14),R0
    00000C22 8802                   CMP/EQ      #2,R0
    00000C24 8B04                   BF          L1014
      simplexC.c   592            {
      simplexC.c   593                PrintMini(0, 28, (unsigned char*)"4 Pinfo aj vec", MINI_OVER);
    00000C26 E710                   MOV         #16,R7
    00000C28 D62A                   MOV.L       L1137+12,R6; L625
    00000C2A E51C                   MOV         #28,R5
    00000C2C 4D0B                   JSR         @R13
    00000C2E E400                   MOV         #0,R4
    00000C30              L1014:                            
      simplexC.c   594            }
      simplexC.c   595            menuChoice = InputI(0, 35);
    00000C30 E523                   MOV         #35,R5
    00000C32 B9FC                   BSR         _InputI
    00000C34 E400                   MOV         #0,R4
      simplexC.c   596            Bdisp_PutDisp_DD();
    00000C36 D328                   MOV.L       L1137+16,R3; _Bdisp_PutDisp_DD
    00000C38 430B                   JSR         @R3
    00000C3A 6C03                   MOV         R0,R12
      simplexC.c   597            switch (menuChoice)
    00000C3C 60C3                   MOV         R12,R0
    00000C3E 8801                   CMP/EQ      #1,R0
    00000C40 8907                   BT          L863
    00000C42 8802                   CMP/EQ      #2,R0
    00000C44 8909                   BT          L864
    00000C46 8803                   CMP/EQ      #3,R0
    00000C48 890C                   BT          L865
    00000C4A 8804                   CMP/EQ      #4,R0
    00000C4C 8912                   BT          L866
    00000C4E A016                   BRA         L1012
    00000C50 0009                   NOP
    00000C52              L863:                            ; case label 
      simplexC.c   598            {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   599            case 1: printAllConstraintsMenu(pS);break;
    00000C52 B1C6                   BSR         _printAllConstraintsMenu
    00000C54 64E3                   MOV         R14,R4
    00000C56 A012                   BRA         L1012
    00000C58 0009                   NOP
    00000C5A              L864:                            ; case label 
      simplexC.c   600            case 2: printObjFunc(pS,TYPE_INPUT);break;
    00000C5A E501                   MOV         #1,R5
    00000C5C BDCE                   BSR         _printObjFunc
    00000C5E 64E3                   MOV         R14,R4
    00000C60 A00D                   BRA         L1012
    00000C62 0009                   NOP
    00000C64              L865:                            ; case label 
      simplexC.c   601            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    00000C64 50E1                   MOV.L       @(4,R14),R0
    00000C66 8802                   CMP/EQ      #2,R0
    00000C68 8B09                   BF          L1012
    00000C6A E502                   MOV         #2,R5
    00000C6C BDC6                   BSR         _printObjFunc
    00000C6E 64E3                   MOV         R14,R4
    00000C70 A005                   BRA         L1012
    00000C72 0009                   NOP
    00000C74              L866:                            ; case label 
      simplexC.c   602            case 4: if(pS->modelType==TYPE_SOLVE){printAjVec(pS);};break;
    00000C74 50E1                   MOV.L       @(4,R14),R0
    00000C76 8802                   CMP/EQ      #2,R0
    00000C78 8B01                   BF          L1012
    00000C7A BF2B                   BSR         _printAjVec
    00000C7C 64E3                   MOV         R14,R4
      simplexC.c   603            default: break;
    00000C7E              L1012:                            
    00000C7E 2CC8                   TST         R12,R12
    00000C80 8BB8                   BF          L1013
      simplexC.c   604            }
      simplexC.c   605        }
      simplexC.c   606        return 0;
    00000C82 E000                   MOV         #0,R0
      simplexC.c   607    }
    00000C84 9120                   MOV.W       L1137,R1   ; H'0180
    00000C86 3F1C                   ADD         R1,R15
    00000C88 4F26                   LDS.L       @R15+,PR
    00000C8A 68F6                   MOV.L       @R15+,R8
    00000C8C 69F6                   MOV.L       @R15+,R9
    00000C8E 6AF6                   MOV.L       @R15+,R10
    00000C90 6BF6                   MOV.L       @R15+,R11
    00000C92 6CF6                   MOV.L       @R15+,R12
    00000C94 6DF6                   MOV.L       @R15+,R13
    00000C96 000B                   RTS
    00000C98 6EF6                   MOV.L       @R15+,R14
      simplexC.c   608    
      simplexC.c   609    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    00000C9A              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
    00000C9A 6343                   MOV         R4,R3
    00000C9C 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C9E 73FF                   ADD         #-1,R3
    00000CA0 9013                   MOV.W       L1137+2,R0 ; H'FCF8
    00000CA2 4308                   SHLL2       R3
    00000CA4 2FD6                   MOV.L       R13,@-R15
      simplexC.c   610    {
      simplexC.c   611        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   612        char *uselessSring[128];
      simplexC.c   613        int menuChoice;
      simplexC.c   614        int lengthString;
      simplexC.c   615        lengthString=0;
    00000CA6 ED00                   MOV         #0,R13
    00000CA8 9E10                   MOV.W       L1137+4,R14; H'0208
    00000CAA 2FC6                   MOV.L       R12,@-R15
    00000CAC 2FB6                   MOV.L       R11,@-R15
      simplexC.c   616        menuChoice=INITIALIZE_VALUE_OPT;
    00000CAE EBFF                   MOV         #-1,R11
    00000CB0 DC0B                   MOV.L       L1137+24,R12; _sprintf
    00000CB2 2FA6                   MOV.L       R10,@-R15
    00000CB4 2F96                   MOV.L       R9,@-R15
    00000CB6 6A53                   MOV         R5,R10
    00000CB8 2F86                   MOV.L       R8,@-R15
    00000CBA 4F22                   STS.L       PR,@-R15
    00000CBC D907                   MOV.L       L1137+20,R9; _PrintMini
    00000CBE 3F0C                   ADD         R0,R15
    00000CC0 2F42                   MOV.L       R4,@R15
    00000CC2 3EFC                   ADD         R15,R14
      simplexC.c   617        
      simplexC.c   618        while(menuChoice!=EXIT_OPT)
    00000CC4 A087                   BRA         L1019
    00000CC6 1F31                   MOV.L       R3,@(4,R15)
    00000CC8              L1137:                            
    00000CC8 0180                   .DATA.W     H'0180
    00000CCA FCF8                   .DATA.W     H'FCF8
    00000CCC 0208                   .DATA.W     H'0208
    00000CCE 0000                   .DATA.W     0
    00000CD0 <00000000>             .DATA.L     L623
    00000CD4 <00000000>             .DATA.L     L625
    00000CD8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000CDC <00000000>             .DATA.L     _PrintMini
    00000CE0 <00000000>             .DATA.L     _sprintf
    00000CE4              L1020:                            
      simplexC.c   619        {
      simplexC.c   620            Bdisp_AllClr_DDVRAM();
    00000CE4 D145                   MOV.L       L1138+10,R1; _Bdisp_AllClr_DDVRAM
    00000CE6 410B                   JSR         @R1
    00000CE8 0009                   NOP
      simplexC.c   621            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    00000CEA E200                   MOV         #0,R2
    00000CEC 9481                   MOV.W       L1138,R4   ; H'0298
    00000CEE 2F26                   MOV.L       R2,@-R15
    00000CF0 53A7                   MOV.L       @(28,R10),R3
    00000CF2 2F36                   MOV.L       R3,@-R15
    00000CF4 51F2                   MOV.L       @(8,R15),R1
    00000CF6 2F16                   MOV.L       R1,@-R15
    00000CF8 D341                   MOV.L       L1138+14,R3; L640
    00000CFA 2F36                   MOV.L       R3,@-R15
    00000CFC 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CFE 34FC                   ADD         R15,R4
      simplexC.c   622            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000D00 9678                   MOV.W       L1138+2,R6 ; H'0288
    00000D02 E500                   MOV         #0,R5
    00000D04 7F10                   ADD         #16,R15
    00000D06 E710                   MOV         #16,R7
    00000D08 36FC                   ADD         R15,R6
    00000D0A 490B                   JSR         @R9
    00000D0C 6453                   MOV         R5,R4
      simplexC.c   623            menuChoice=InputI(0,7);
    00000D0E E507                   MOV         #7,R5
    00000D10 B98D                   BSR         _InputI
    00000D12 E400                   MOV         #0,R4
      simplexC.c   624            Bdisp_PutDisp_DD();
    00000D14 D33B                   MOV.L       L1138+18,R3; _Bdisp_PutDisp_DD
    00000D16 430B                   JSR         @R3
    00000D18 6B03                   MOV         R0,R11
      simplexC.c   625            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000D1A 2BB8                   TST         R11,R11
    00000D1C 895B                   BT          L1019
    00000D1E 53A7                   MOV.L       @(28,R10),R3
    00000D20 3B37                   CMP/GT      R3,R11
    00000D22 8958                   BT          L1019
      simplexC.c   626            {
      simplexC.c   627                Bdisp_AllClr_DDVRAM();
    00000D24 D135                   MOV.L       L1138+10,R1; _Bdisp_AllClr_DDVRAM
    00000D26 410B                   JSR         @R1
    00000D28 0009                   NOP
      simplexC.c   628                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    00000D2A 68B3                   MOV         R11,R8
    00000D2C D236                   MOV.L       L1138+22,R2; __stod
    00000D2E 78FF                   ADD         #-1,R8
    00000D30 2FB6                   MOV.L       R11,@-R15
    00000D32 4808                   SHLL2       R8
    00000D34 53F2                   MOV.L       @(8,R15),R3
    00000D36 50A4                   MOV.L       @(16,R10),R0
    00000D38 003E                   MOV.L       @(R0,R3),R0
    00000D3A 008E                   MOV.L       @(R0,R8),R0
    00000D3C 7FF8                   ADD         #-8,R15
    00000D3E 420B                   JSR         @R2
    00000D40 2FF6                   MOV.L       R15,@-R15
    00000D42 64D3                   MOV         R13,R4
    00000D44 51F3                   MOV.L       @(12,R15),R1
    00000D46 2F16                   MOV.L       R1,@-R15
    00000D48 D230                   MOV.L       L1138+26,R2; L642
    00000D4A 2F26                   MOV.L       R2,@-R15
    00000D4C 4C0B                   JSR         @R12
    00000D4E 34EC                   ADD         R14,R4
    00000D50 7F14                   ADD         #20,R15
    00000D52 BD11                   BSR         _lengthConcatenate
    00000D54 6403                   MOV         R0,R4
    00000D56 3D0C                   ADD         R0,R13
      simplexC.c   629    
      simplexC.c   630                if(pS->idSlopeVariables[menuChoice-1])
    00000D58 50AD                   MOV.L       @(52,R10),R0
    00000D5A 028E                   MOV.L       @(R0,R8),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D5C 2228                   TST         R2,R2
    00000D5E 8908                   BT          L1022
      simplexC.c   631                {
      simplexC.c   632                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    00000D60 D12B                   MOV.L       L1138+30,R1; L644
    00000D62 64D3                   MOV         R13,R4
    00000D64 2F16                   MOV.L       R1,@-R15
    00000D66 4C0B                   JSR         @R12
    00000D68 34EC                   ADD         R14,R4
    00000D6A 7F04                   ADD         #4,R15
    00000D6C BD04                   BSR         _lengthConcatenate
    00000D6E 6403                   MOV         R0,R4
    00000D70 3D0C                   ADD         R0,R13
    00000D72              L1022:                            
      simplexC.c   633                }
      simplexC.c   634                if(pS->id2fasesVariables[menuChoice-1])
    00000D72 50AE                   MOV.L       @(56,R10),R0
    00000D74 028E                   MOV.L       @(R0,R8),R2
    00000D76 2228                   TST         R2,R2
    00000D78 8908                   BT          L1023
      simplexC.c   635                {
      simplexC.c   636                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    00000D7A 64D3                   MOV         R13,R4
    00000D7C D125                   MOV.L       L1138+34,R1; L646
    00000D7E 2F16                   MOV.L       R1,@-R15
    00000D80 4C0B                   JSR         @R12
    00000D82 34EC                   ADD         R14,R4
    00000D84 7F04                   ADD         #4,R15
    00000D86 BCF7                   BSR         _lengthConcatenate
    00000D88 6403                   MOV         R0,R4
    00000D8A 3D0C                   ADD         R0,R13
    00000D8C              L1023:                            
      simplexC.c   637                }
      simplexC.c   638                if(pS->idIntegerVariables[menuChoice-1])
    00000D8C 50AC                   MOV.L       @(48,R10),R0
    00000D8E 028E                   MOV.L       @(R0,R8),R2
    00000D90 2228                   TST         R2,R2
    00000D92 8907                   BT          L1024
      simplexC.c   639                {
      simplexC.c   640                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000D94 D120                   MOV.L       L1138+38,R1; L648
    00000D96 64D3                   MOV         R13,R4
    00000D98 2F16                   MOV.L       R1,@-R15
    00000D9A 4C0B                   JSR         @R12
    00000D9C 34EC                   ADD         R14,R4
    00000D9E 7F04                   ADD         #4,R15
    00000DA0 BCEA                   BSR         _lengthConcatenate
    00000DA2 6403                   MOV         R0,R4
    00000DA4              L1024:                            
      simplexC.c   641                }
      simplexC.c   642                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000DA4 E710                   MOV         #16,R7
    00000DA6 66E3                   MOV         R14,R6
    00000DA8 E500                   MOV         #0,R5
    00000DAA 490B                   JSR         @R9
    00000DAC 6453                   MOV         R5,R4
      simplexC.c   643                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DAE E710                   MOV         #16,R7
    00000DB0 D61A                   MOV.L       L1138+42,R6; L588
    00000DB2 E507                   MOV         #7,R5
    00000DB4 490B                   JSR         @R9
    00000DB6 E400                   MOV         #0,R4
      simplexC.c   644                string_input(0, 14, uselessSring);
    00000DB8 D219                   MOV.L       L1138+46,R2; _string_input
    00000DBA 66F3                   MOV         R15,R6
    00000DBC 7608                   ADD         #8,R6
    00000DBE E50E                   MOV         #14,R5
    00000DC0 420B                   JSR         @R2
    00000DC2 E400                   MOV         #0,R4
      simplexC.c   645                Bdisp_PutDisp_DD();
    00000DC4 D30F                   MOV.L       L1138+18,R3; _Bdisp_PutDisp_DD
    00000DC6 430B                   JSR         @R3
    00000DC8 0009                   NOP
      simplexC.c   646                memset(stroutVariable,0,128);
    00000DCA E500                   MOV         #0,R5
    00000DCC D215                   MOV.L       L1138+50,R2; _memset
    00000DCE 9612                   MOV.W       L1138+4,R6 ; H'0080
    00000DD0 420B                   JSR         @R2
    00000DD2 64E3                   MOV         R14,R4
      simplexC.c   647                lengthString=0;
    00000DD4 ED00                   MOV         #0,R13
    00000DD6              L1019:                            
    00000DD6 2BB8                   TST         R11,R11
    00000DD8 8B84                   BF          L1020
      simplexC.c   648            }
      simplexC.c   649        }
      simplexC.c   650        return 0;
    00000DDA E000                   MOV         #0,R0
      simplexC.c   651    }
    00000DDC 910C                   MOV.W       L1138+6,R1 ; H'0308
    00000DDE 3F1C                   ADD         R1,R15
    00000DE0 4F26                   LDS.L       @R15+,PR
    00000DE2 68F6                   MOV.L       @R15+,R8
    00000DE4 69F6                   MOV.L       @R15+,R9
    00000DE6 6AF6                   MOV.L       @R15+,R10
    00000DE8 6BF6                   MOV.L       @R15+,R11
    00000DEA 6CF6                   MOV.L       @R15+,R12
    00000DEC 6DF6                   MOV.L       @R15+,R13
    00000DEE 000B                   RTS
    00000DF0 6EF6                   MOV.L       @R15+,R14
    00000DF2              L1138:                            
    00000DF2 0298                   .DATA.W     H'0298
    00000DF4 0288                   .DATA.W     H'0288
    00000DF6 0080                   .DATA.W     H'0080
    00000DF8 0308                   .DATA.W     H'0308
    00000DFA 0000                   .DATA.W     0
    00000DFC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000E00 <00000000>             .DATA.L     L640
    00000E04 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000E08 <00000000>             .DATA.L     __stod
    00000E0C <00000000>             .DATA.L     L642
    00000E10 <00000000>             .DATA.L     L644
    00000E14 <00000000>             .DATA.L     L646
    00000E18 <00000000>             .DATA.L     L648




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E1C <00000000>             .DATA.L     L588
    00000E20 <00000000>             .DATA.L     _string_input
    00000E24 <00000000>             .DATA.L     _memset
      simplexC.c   652    
      simplexC.c   653    int printIne(int contsId, struct problemStatement* pS)
    00000E28              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000E28 4F22                   STS.L       PR,@-R15
    00000E2A 9074                   MOV.W       L1139,R0   ; H'FD78
      simplexC.c   654    {
      simplexC.c   655        char stroutBasicInfo[128];
      simplexC.c   656        char *uselessSring[128];
      simplexC.c   657        Bdisp_AllClr_DDVRAM();
    00000E2C D33C                   MOV.L       L1139+10,R3; _Bdisp_AllClr_DDVRAM
    00000E2E 3F0C                   ADD         R0,R15
    00000E30 2F42                   MOV.L       R4,@R15
    00000E32 430B                   JSR         @R3
    00000E34 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   658        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    00000E36 50F1                   MOV.L       @(4,R15),R0
    00000E38 64F2                   MOV.L       @R15,R4
    00000E3A 74FF                   ADD         #-1,R4
    00000E3C 5006                   MOV.L       @(24,R0),R0
    00000E3E 4408                   SHLL2       R4
    00000E40 BCA1                   BSR         _getInequalityChar
    00000E42 044E                   MOV.L       @(R0,R4),R4
    00000E44 2F06                   MOV.L       R0,@-R15
    00000E46 52F1                   MOV.L       @(4,R15),R2
    00000E48 D336                   MOV.L       L1139+14,R3; L655
    00000E4A 2F26                   MOV.L       R2,@-R15
    00000E4C 2F36                   MOV.L       R3,@-R15
    00000E4E 9463                   MOV.W       L1139+2,R4 ; H'0214
    00000E50 D235                   MOV.L       L1139+18,R2; _sprintf
    00000E52 420B                   JSR         @R2
    00000E54 34FC                   ADD         R15,R4
      simplexC.c   659        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000E56 E710                   MOV         #16,R7
    00000E58 965E                   MOV.W       L1139+2,R6 ; H'0214
    00000E5A E500                   MOV         #0,R5
    00000E5C D333                   MOV.L       L1139+22,R3; _PrintMini
    00000E5E 36FC                   ADD         R15,R6
    00000E60 430B                   JSR         @R3
    00000E62 6453                   MOV         R5,R4
      simplexC.c   660        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000E64 D632                   MOV.L       L1139+26,R6; L588
    00000E66 E507                   MOV         #7,R5
    00000E68 D230                   MOV.L       L1139+22,R2; _PrintMini
    00000E6A E710                   MOV         #16,R7
    00000E6C 420B                   JSR         @R2
    00000E6E E400                   MOV         #0,R4
      simplexC.c   661        string_input(0, 14, uselessSring);
    00000E70 D330                   MOV.L       L1139+30,R3; _string_input
    00000E72 66F3                   MOV         R15,R6
    00000E74 7614                   ADD         #20,R6
    00000E76 E50E                   MOV         #14,R5
    00000E78 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E7A E400                   MOV         #0,R4
      simplexC.c   662        Bdisp_PutDisp_DD();
    00000E7C D22E                   MOV.L       L1139+34,R2; _Bdisp_PutDisp_DD
    00000E7E 420B                   JSR         @R2
    00000E80 0009                   NOP
      simplexC.c   663        return 0;
      simplexC.c   664    }
    00000E82 914A                   MOV.W       L1139+4,R1 ; H'0294
    00000E84 3F1C                   ADD         R1,R15
    00000E86 4F26                   LDS.L       @R15+,PR
    00000E88 000B                   RTS
    00000E8A E000                   MOV         #0,R0
      simplexC.c   665    
      simplexC.c   666    int printRVal(int contsId, struct problemStatement* pS)
    00000E8C              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
                                                           ; used runtime library name:
                                                           ; __stod
    00000E8C 4F22                   STS.L       PR,@-R15
    00000E8E 9042                   MOV.W       L1139,R0   ; H'FD78
      simplexC.c   667    {
      simplexC.c   668        char stroutBasicInfo[128];
      simplexC.c   669        char *uselessSring[128];
      simplexC.c   670        Bdisp_AllClr_DDVRAM();
    00000E90 D323                   MOV.L       L1139+10,R3; _Bdisp_AllClr_DDVRAM
    00000E92 3F0C                   ADD         R0,R15
    00000E94 2F42                   MOV.L       R4,@R15
    00000E96 430B                   JSR         @R3
    00000E98 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   671        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    00000E9A 50F1                   MOV.L       @(4,R15),R0
    00000E9C 63F2                   MOV.L       @R15,R3
    00000E9E 73FF                   ADD         #-1,R3
    00000EA0 5005                   MOV.L       @(20,R0),R0
    00000EA2 4308                   SHLL2       R3
    00000EA4 D225                   MOV.L       L1139+38,R2; __stod
    00000EA6 003E                   MOV.L       @(R0,R3),R0
    00000EA8 7FF8                   ADD         #-8,R15
    00000EAA 420B                   JSR         @R2
    00000EAC 2FF6                   MOV.L       R15,@-R15
    00000EAE 53F2                   MOV.L       @(8,R15),R3
    00000EB0 D223                   MOV.L       L1139+42,R2; L662
    00000EB2 2F36                   MOV.L       R3,@-R15
    00000EB4 2F26                   MOV.L       R2,@-R15
    00000EB6 9431                   MOV.W       L1139+6,R4 ; H'0218
    00000EB8 D31B                   MOV.L       L1139+18,R3; _sprintf
    00000EBA 430B                   JSR         @R3
    00000EBC 34FC                   ADD         R15,R4
      simplexC.c   672        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000EBE E710                   MOV         #16,R7
    00000EC0 962C                   MOV.W       L1139+6,R6 ; H'0218
    00000EC2 E500                   MOV         #0,R5
    00000EC4 D219                   MOV.L       L1139+22,R2; _PrintMini
    00000EC6 36FC                   ADD         R15,R6
    00000EC8 420B                   JSR         @R2
    00000ECA 6453                   MOV         R5,R4
      simplexC.c   673        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ECC D618                   MOV.L       L1139+26,R6; L588
    00000ECE E507                   MOV         #7,R5
    00000ED0 D316                   MOV.L       L1139+22,R3; _PrintMini
    00000ED2 E710                   MOV         #16,R7
    00000ED4 430B                   JSR         @R3
    00000ED6 E400                   MOV         #0,R4
      simplexC.c   674        string_input(0, 14, uselessSring);
    00000ED8 D216                   MOV.L       L1139+30,R2; _string_input
    00000EDA 66F3                   MOV         R15,R6
    00000EDC 7618                   ADD         #24,R6
    00000EDE E50E                   MOV         #14,R5
    00000EE0 420B                   JSR         @R2
    00000EE2 E400                   MOV         #0,R4
      simplexC.c   675        Bdisp_PutDisp_DD();
    00000EE4 D314                   MOV.L       L1139+34,R3; _Bdisp_PutDisp_DD
    00000EE6 430B                   JSR         @R3
    00000EE8 0009                   NOP
      simplexC.c   676        return 0;
      simplexC.c   677    }
    00000EEA 9118                   MOV.W       L1139+8,R1 ; H'0298
    00000EEC 3F1C                   ADD         R1,R15
    00000EEE 4F26                   LDS.L       @R15+,PR
    00000EF0 000B                   RTS
    00000EF2 E000                   MOV         #0,R0
      simplexC.c   678    
      simplexC.c   679    
      simplexC.c   680    int printInfoConstraint(int contsId, struct problemStatement* pS)
    00000EF4              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    00000EF4 2FE6                   MOV.L       R14,@-R15
    00000EF6 2FD6                   MOV.L       R13,@-R15
    00000EF8 2FC6                   MOV.L       R12,@-R15
      simplexC.c   681    {
      simplexC.c   682        char stroutBasicInfo[128];
      simplexC.c   683        int menuChoice;
      simplexC.c   684        menuChoice=INITIALIZE_VALUE_OPT;
    00000EFA EDFF                   MOV         #-1,R13
    00000EFC DE0B                   MOV.L       L1139+22,R14; _PrintMini
    00000EFE 6C43                   MOV         R4,R12
    00000F00 2FB6                   MOV.L       R11,@-R15
    00000F02 6B53                   MOV         R5,R11
    00000F04 2FA6                   MOV.L       R10,@-R15
    00000F06 2F96                   MOV.L       R9,@-R15
    00000F08 2F86                   MOV.L       R8,@-R15
    00000F0A 4F22                   STS.L       PR,@-R15
    00000F0C D80D                   MOV.L       L1139+46,R8; L670
    00000F0E 7F80                   ADD         #-128,R15
    00000F10 D905                   MOV.L       L1139+18,R9; _sprintf
      simplexC.c   685        while(menuChoice!=EXIT_OPT)
    00000F12 A058                   BRA         L1028
    00000F14 6AF3                   MOV         R15,R10
    00000F16              L1139:                            
    00000F16 FD78                   .DATA.W     H'FD78
    00000F18 0214                   .DATA.W     H'0214
    00000F1A 0294                   .DATA.W     H'0294
    00000F1C 0218                   .DATA.W     H'0218
    00000F1E 0298                   .DATA.W     H'0298




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F20 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000F24 <00000000>             .DATA.L     L655
    00000F28 <00000000>             .DATA.L     _sprintf
    00000F2C <00000000>             .DATA.L     _PrintMini
    00000F30 <00000000>             .DATA.L     L588
    00000F34 <00000000>             .DATA.L     _string_input
    00000F38 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000F3C <00000000>             .DATA.L     __stod
    00000F40 <00000000>             .DATA.L     L662
    00000F44 <00000000>             .DATA.L     L670
    00000F48              L1029:                            
      simplexC.c   686        {
      simplexC.c   687            Bdisp_AllClr_DDVRAM();
    00000F48 D22F                   MOV.L       L1140+4,R2 ; _Bdisp_AllClr_DDVRAM
    00000F4A 420B                   JSR         @R2
    00000F4C 0009                   NOP
      simplexC.c   688            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    00000F4E E300                   MOV         #0,R3
    00000F50 2F36                   MOV.L       R3,@-R15
    00000F52 2FC6                   MOV.L       R12,@-R15
    00000F54 2F86                   MOV.L       R8,@-R15
    00000F56 490B                   JSR         @R9
    00000F58 64A3                   MOV         R10,R4
    00000F5A 7F0C                   ADD         #12,R15
      simplexC.c   689            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000F5C E710                   MOV         #16,R7
    00000F5E 66A3                   MOV         R10,R6
    00000F60 E500                   MOV         #0,R5
    00000F62 4E0B                   JSR         @R14
    00000F64 6453                   MOV         R5,R4
      simplexC.c   690            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    00000F66 E710                   MOV         #16,R7
    00000F68 D628                   MOV.L       L1140+8,R6 ; L671
    00000F6A E507                   MOV         #7,R5
    00000F6C 4E0B                   JSR         @R14
    00000F6E E400                   MOV         #0,R4
      simplexC.c   691            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000F70 D627                   MOV.L       L1140+12,R6; L672
    00000F72 E50E                   MOV         #14,R5
    00000F74 E710                   MOV         #16,R7
    00000F76 4E0B                   JSR         @R14
    00000F78 E400                   MOV         #0,R4
      simplexC.c   692            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);
    00000F7A E710                   MOV         #16,R7
    00000F7C D625                   MOV.L       L1140+16,R6; L673
    00000F7E E515                   MOV         #21,R5
    00000F80 4E0B                   JSR         @R14
    00000F82 E400                   MOV         #0,R4
      simplexC.c   693            menuChoice = InputI(0, 28);
    00000F84 E51C                   MOV         #28,R5
    00000F86 B852                   BSR         _InputI
    00000F88 E400                   MOV         #0,R4
      simplexC.c   694            Bdisp_PutDisp_DD();
    00000F8A D323                   MOV.L       L1140+20,R3; _Bdisp_PutDisp_DD
    00000F8C 430B                   JSR         @R3
    00000F8E 6D03                   MOV         R0,R13
      simplexC.c   695            if(menuChoice!=EXIT_OPT && menuChoice<=3)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F90 2DD8                   TST         R13,R13
    00000F92 8918                   BT          L1028
    00000F94 E303                   MOV         #3,R3
    00000F96 3D37                   CMP/GT      R3,R13
    00000F98 8915                   BT          L1028
      simplexC.c   696            {
      simplexC.c   697                switch (menuChoice)
    00000F9A 60D3                   MOV         R13,R0
    00000F9C 8801                   CMP/EQ      #1,R0
    00000F9E 8905                   BT          L879
    00000FA0 8802                   CMP/EQ      #2,R0
    00000FA2 8908                   BT          L880
    00000FA4 8803                   CMP/EQ      #3,R0
    00000FA6 890B                   BT          L881
    00000FA8 A00D                   BRA         L1028
    00000FAA 0009                   NOP
    00000FAC              L879:                            ; case label 
      simplexC.c   698                {
      simplexC.c   699                case 1: printVariablesProblemStatement(contsId,pS);break;
    00000FAC 65B3                   MOV         R11,R5
    00000FAE BE74                   BSR         _printVariablesProblemStatement
    00000FB0 64C3                   MOV         R12,R4
    00000FB2 A008                   BRA         L1028
    00000FB4 0009                   NOP
    00000FB6              L880:                            ; case label 
      simplexC.c   700                case 2: printIne(contsId,pS);break;
    00000FB6 65B3                   MOV         R11,R5
    00000FB8 BF36                   BSR         _printIne
    00000FBA 64C3                   MOV         R12,R4
    00000FBC A003                   BRA         L1028
    00000FBE 0009                   NOP
    00000FC0              L881:                            ; case label 
      simplexC.c   701                case 3: printRVal(contsId,pS);break;
    00000FC0 65B3                   MOV         R11,R5
    00000FC2 BF63                   BSR         _printRVal
    00000FC4 64C3                   MOV         R12,R4
      simplexC.c   702                default: break;
    00000FC6              L1028:                            
    00000FC6 2DD8                   TST         R13,R13
    00000FC8 8BBE                   BF          L1029
      simplexC.c   703                }
      simplexC.c   704            }
      simplexC.c   705        }
      simplexC.c   706        return 0;
    00000FCA E000                   MOV         #0,R0
      simplexC.c   707    }
    00000FCC 911A                   MOV.W       L1140,R1   ; H'0080
    00000FCE 3F1C                   ADD         R1,R15
    00000FD0 4F26                   LDS.L       @R15+,PR
    00000FD2 68F6                   MOV.L       @R15+,R8
    00000FD4 69F6                   MOV.L       @R15+,R9
    00000FD6 6AF6                   MOV.L       @R15+,R10
    00000FD8 6BF6                   MOV.L       @R15+,R11
    00000FDA 6CF6                   MOV.L       @R15+,R12
    00000FDC 6DF6                   MOV.L       @R15+,R13
    00000FDE 000B                   RTS
    00000FE0 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   708    
      simplexC.c   709    int printAllConstraintsMenu(struct problemStatement* pS)
    00000FE2              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    00000FE2 2FE6                   MOV.L       R14,@-R15
    00000FE4 2FD6                   MOV.L       R13,@-R15
      simplexC.c   710    {
      simplexC.c   711        char stroutBasicInfo[128];
      simplexC.c   712        int menuChoice;
      simplexC.c   713        menuChoice=INITIALIZE_VALUE_OPT;
    00000FE6 EEFF                   MOV         #-1,R14
    00000FE8 2FC6                   MOV.L       R12,@-R15
    00000FEA 6D43                   MOV         R4,R13
    00000FEC 2FB6                   MOV.L       R11,@-R15
    00000FEE 2FA6                   MOV.L       R10,@-R15
    00000FF0 2F96                   MOV.L       R9,@-R15
    00000FF2 2F86                   MOV.L       R8,@-R15
    00000FF4 4F22                   STS.L       PR,@-R15
    00000FF6 7F80                   ADD         #-128,R15
    00000FF8 D808                   MOV.L       L1140+24,R8; _PrintMini
    00000FFA D909                   MOV.L       L1140+28,R9; _sprintf
    00000FFC DA09                   MOV.L       L1140+32,R10; L681
    00000FFE DB02                   MOV.L       L1140+4,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   714        while(menuChoice!=EXIT_OPT)
    00001000 A030                   BRA         L1033
    00001002 6CF3                   MOV         R15,R12
    00001004              L1140:                            
    00001004 0080                   .DATA.W     H'0080
    00001006 0000                   .DATA.W     0
    00001008 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000100C <00000000>             .DATA.L     L671
    00001010 <00000000>             .DATA.L     L672
    00001014 <00000000>             .DATA.L     L673
    00001018 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000101C <00000000>             .DATA.L     _PrintMini
    00001020 <00000000>             .DATA.L     _sprintf
    00001024 <00000000>             .DATA.L     L681
    00001028              L1034:                            
      simplexC.c   715        {
      simplexC.c   716            Bdisp_AllClr_DDVRAM();
    00001028 4B0B                   JSR         @R11
    0000102A 0009                   NOP
      simplexC.c   717            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);
    0000102C E200                   MOV         #0,R2
    0000102E 2F26                   MOV.L       R2,@-R15
    00001030 53DB                   MOV.L       @(44,R13),R3
    00001032 2F36                   MOV.L       R3,@-R15
    00001034 2FA6                   MOV.L       R10,@-R15
    00001036 490B                   JSR         @R9
    00001038 64C3                   MOV         R12,R4
    0000103A 7F0C                   ADD         #12,R15
      simplexC.c   718            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000103C E710                   MOV         #16,R7
    0000103E 66C3                   MOV         R12,R6
    00001040 E500                   MOV         #0,R5
    00001042 480B                   JSR         @R8
    00001044 6453                   MOV         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   719            menuChoice = InputI(0, 7);
    00001046 E507                   MOV         #7,R5
    00001048 D239                   MOV.L       L1141+8,R2 ; _InputI
    0000104A 420B                   JSR         @R2
    0000104C E400                   MOV         #0,R4
      simplexC.c   720            Bdisp_PutDisp_DD();
    0000104E D339                   MOV.L       L1141+12,R3; _Bdisp_PutDisp_DD
    00001050 430B                   JSR         @R3
    00001052 6E03                   MOV         R0,R14
      simplexC.c   721            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00001054 2EE8                   TST         R14,R14
    00001056 8905                   BT          L1033
    00001058 53DB                   MOV.L       @(44,R13),R3
    0000105A 3E37                   CMP/GT      R3,R14
    0000105C 8902                   BT          L1033
      simplexC.c   722            {
      simplexC.c   723                printInfoConstraint(menuChoice,pS);
    0000105E 65D3                   MOV         R13,R5
    00001060 BF48                   BSR         _printInfoConstraint
    00001062 64E3                   MOV         R14,R4
    00001064              L1033:                            
    00001064 2EE8                   TST         R14,R14
    00001066 8BDF                   BF          L1034
      simplexC.c   724            }
      simplexC.c   725        }
      simplexC.c   726        return 0;
      simplexC.c   727    }
    00001068 915E                   MOV.W       L1141,R1   ; H'0080
    0000106A E000                   MOV         #0,R0
    0000106C 3F1C                   ADD         R1,R15
    0000106E 4F26                   LDS.L       @R15+,PR
    00001070 68F6                   MOV.L       @R15+,R8
    00001072 69F6                   MOV.L       @R15+,R9
    00001074 6AF6                   MOV.L       @R15+,R10
    00001076 6BF6                   MOV.L       @R15+,R11
    00001078 6CF6                   MOV.L       @R15+,R12
    0000107A 6DF6                   MOV.L       @R15+,R13
    0000107C 000B                   RTS
    0000107E 6EF6                   MOV.L       @R15+,R14
      simplexC.c   728    
      simplexC.c   729    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    00001080              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    00001080 2FE6                   MOV.L       R14,@-R15
    00001082 4F22                   STS.L       PR,@-R15
    00001084 9051                   MOV.W       L1141+2,R0 ; H'FF74
    00001086 3F0C                   ADD         R0,R15
    00001088 2F42                   MOV.L       R4,@R15
    0000108A 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   730    {   
      simplexC.c   731        char strout[128];
      simplexC.c   732        int res;
      simplexC.c   733        Bdisp_AllClr_DDVRAM();
    0000108C D32A                   MOV.L       L1141+16,R3; _Bdisp_AllClr_DDVRAM
    0000108E 430B                   JSR         @R3
    00001090 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c   734        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001092 6EF3                   MOV         R15,R14
    00001094 62F2                   MOV.L       @R15,R2
    00001096 7E0C                   ADD         #12,R14
    00001098 D328                   MOV.L       L1141+20,R3; L690
    0000109A 2F26                   MOV.L       R2,@-R15
    0000109C 2F36                   MOV.L       R3,@-R15
    0000109E D228                   MOV.L       L1141+24,R2; _sprintf
    000010A0 420B                   JSR         @R2
    000010A2 64E3                   MOV         R14,R4
      simplexC.c   735        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000010A4 1FE2                   MOV.L       R14,@(8,R15)
    000010A6 66E3                   MOV         R14,R6
    000010A8 D326                   MOV.L       L1141+28,R3; _PrintMini
    000010AA E710                   MOV         #16,R7
    000010AC E500                   MOV         #0,R5
    000010AE 430B                   JSR         @R3
    000010B0 6453                   MOV         R5,R4
      simplexC.c   736        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c   737            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    000010B2 E202                   MOV         #2,R2
    000010B4 2F26                   MOV.L       R2,@-R15
    000010B6 E301                   MOV         #1,R3
    000010B8 D221                   MOV.L       L1141+24,R2; _sprintf
    000010BA E100                   MOV         #0,R1
    000010BC 2F36                   MOV.L       R3,@-R15
    000010BE 2F16                   MOV.L       R1,@-R15
    000010C0 D321                   MOV.L       L1141+32,R3; L691
    000010C2 2F36                   MOV.L       R3,@-R15
    000010C4 420B                   JSR         @R2
    000010C6 64E3                   MOV         R14,R4
      simplexC.c   738        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    000010C8 D31E                   MOV.L       L1141+28,R3; _PrintMini
    000010CA 7F18                   ADD         #24,R15
    000010CC 66F2                   MOV.L       @R15,R6
    000010CE E507                   MOV         #7,R5
    000010D0 E710                   MOV         #16,R7
    000010D2 430B                   JSR         @R3
    000010D4 E400                   MOV         #0,R4
      simplexC.c   739        res = InputI(0,14);
    000010D6 E50E                   MOV         #14,R5
    000010D8 D215                   MOV.L       L1141+8,R2 ; _InputI
    000010DA 420B                   JSR         @R2
    000010DC E400                   MOV         #0,R4
      simplexC.c   740        Bdisp_PutDisp_DD();
    000010DE D315                   MOV.L       L1141+12,R3; _Bdisp_PutDisp_DD
    000010E0 430B                   JSR         @R3
    000010E2 6E03                   MOV         R0,R14
      simplexC.c   741        switch (res)
    000010E4 60E3                   MOV         R14,R0
    000010E6 8800                   CMP/EQ      #0,R0
    000010E8 8905                   BT          L886
    000010EA 8801                   CMP/EQ      #1,R0
    000010EC 8909                   BT          L887
    000010EE 8802                   CMP/EQ      #2,R0
    000010F0 890C                   BT          L888
    000010F2 A013                   BRA         L1037
    000010F4 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010F6              L886:                            ; case label 
      simplexC.c   742        {
      simplexC.c   743            case INE_EQUAL: *nVariables2fases+=1; break;
    000010F6 52F2                   MOV.L       @(8,R15),R2
    000010F8 6322                   MOV.L       @R2,R3
    000010FA 7301                   ADD         #1,R3
    000010FC 2232                   MOV.L       R3,@R2
    000010FE A00D                   BRA         L1037
    00001100 0009                   NOP
    00001102              L887:                            ; case label 
      simplexC.c   744            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    00001102 51F1                   MOV.L       @(4,R15),R1
    00001104 6312                   MOV.L       @R1,R3
    00001106 7301                   ADD         #1,R3
    00001108 A008                   BRA         L1037
    0000110A 2132                   MOV.L       R3,@R1
    0000110C              L888:                            ; case label 
      simplexC.c   745            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    0000110C 51F1                   MOV.L       @(4,R15),R1
    0000110E 6312                   MOV.L       @R1,R3
    00001110 7301                   ADD         #1,R3
    00001112 2132                   MOV.L       R3,@R1
    00001114 52F2                   MOV.L       @(8,R15),R2
    00001116 6322                   MOV.L       @R2,R3
    00001118 7301                   ADD         #1,R3
    0000111A 2232                   MOV.L       R3,@R2
    0000111C              L1037:                            
      simplexC.c   746        }
      simplexC.c   747    
      simplexC.c   748        return res;
      simplexC.c   749    }
    0000111C 9106                   MOV.W       L1141+4,R1 ; H'008C
    0000111E 60E3                   MOV         R14,R0
    00001120 3F1C                   ADD         R1,R15
    00001122 4F26                   LDS.L       @R15+,PR
    00001124 000B                   RTS
    00001126 6EF6                   MOV.L       @R15+,R14
    00001128              L1141:                            
    00001128 0080                   .DATA.W     H'0080
    0000112A FF74                   .DATA.W     H'FF74
    0000112C 008C                   .DATA.W     H'008C
    0000112E 0000                   .DATA.W     0
    00001130 <00000000>             .DATA.L     _InputI
    00001134 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001138 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000113C <00000000>             .DATA.L     L690
    00001140 <00000000>             .DATA.L     _sprintf
    00001144 <00000000>             .DATA.L     _PrintMini
    00001148 <00000000>             .DATA.L     L691
      simplexC.c   750    
      simplexC.c   751    float getRightValue(int nConstraint)
    0000114C              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=144
    0000114C 4F22                   STS.L       PR,@-R15
    0000114E 9074                   MOV.W       L1142,R0   ; H'FF7C
      simplexC.c   752    {   
      simplexC.c   753        char strout[128];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   754        float res;
      simplexC.c   755        Bdisp_AllClr_DDVRAM();
    00001150 D33C                   MOV.L       L1142+10,R3; _Bdisp_AllClr_DDVRAM
    00001152 3F0C                   ADD         R0,R15
    00001154 430B                   JSR         @R3
    00001156 2F42                   MOV.L       R4,@R15
      simplexC.c   756        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    00001158 62F2                   MOV.L       @R15,R2
    0000115A 2F26                   MOV.L       R2,@-R15
    0000115C D33A                   MOV.L       L1142+14,R3; L698
    0000115E 2F36                   MOV.L       R3,@-R15
    00001160 D23A                   MOV.L       L1142+18,R2; _sprintf
    00001162 64F3                   MOV         R15,R4
    00001164 420B                   JSR         @R2
    00001166 740C                   ADD         #12,R4
      simplexC.c   757        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00001168 D339                   MOV.L       L1142+22,R3; _PrintMini
    0000116A E710                   MOV         #16,R7
    0000116C 66F3                   MOV         R15,R6
    0000116E 760C                   ADD         #12,R6
    00001170 E500                   MOV         #0,R5
    00001172 430B                   JSR         @R3
    00001174 6453                   MOV         R5,R4
      simplexC.c   758        Bdisp_PutDisp_DD();
    00001176 D237                   MOV.L       L1142+26,R2; _Bdisp_PutDisp_DD
    00001178 420B                   JSR         @R2
    0000117A 0009                   NOP
      simplexC.c   759        res = InputD(0,7);
    0000117C D336                   MOV.L       L1142+30,R3; _InputD
    0000117E E507                   MOV         #7,R5
    00001180 430B                   JSR         @R3
    00001182 E400                   MOV         #0,R4
      simplexC.c   760        return res;
      simplexC.c   761    }
    00001184 915A                   MOV.W       L1142+2,R1 ; H'008C
    00001186 3F1C                   ADD         R1,R15
    00001188 4F26                   LDS.L       @R15+,PR
    0000118A 000B                   RTS
    0000118C 0009                   NOP
      simplexC.c   762    
      simplexC.c   763    float *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, float *rightValue, int
                         + *nVariablesSlope, int * nVariables2fases)
    0000118E              _getInequation:                  ; function: getInequation
                                                           ; frame size=184
    0000118E 2FE6                   MOV.L       R14,@-R15
    00001190 2FD6                   MOV.L       R13,@-R15
    00001192 2FC6                   MOV.L       R12,@-R15
    00001194 2FB6                   MOV.L       R11,@-R15
    00001196 2FA6                   MOV.L       R10,@-R15
    00001198 2F96                   MOV.L       R9,@-R15
    0000119A 6A43                   MOV         R4,R10
      simplexC.c   764    {
      simplexC.c   765        char strout[128];
      simplexC.c   766        unsigned int i;
      simplexC.c   767        float *constraintValues;
      simplexC.c   768        constraintValues = (float *)malloc(sizeof(float) * nVariables);
    0000119C D32F                   MOV.L       L1142+34,R3; _malloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000119E 6953                   MOV         R5,R9
    000011A0 2F86                   MOV.L       R8,@-R15
    000011A2 64A3                   MOV         R10,R4
    000011A4 904B                   MOV.W       L1142+4,R0 ; H'FF74
    000011A6 4F22                   STS.L       PR,@-R15
    000011A8 3F0C                   ADD         R0,R15
    000011AA 1F62                   MOV.L       R6,@(8,R15)
    000011AC 1F71                   MOV.L       R7,@(4,R15)
    000011AE 430B                   JSR         @R3
    000011B0 4408                   SHLL2       R4
      simplexC.c   769        for (i = 0; i < nVariables; i++)
    000011B2 EB00                   MOV         #0,R11
    000011B4 D826                   MOV.L       L1142+22,R8; _PrintMini
    000011B6 6CF3                   MOV         R15,R12
    000011B8 2F02                   MOV.L       R0,@R15
    000011BA EE00                   MOV         #0,R14
    000011BC 3E0C                   ADD         R0,R14
    000011BE ED01                   MOV         #1,R13
    000011C0 63B3                   MOV         R11,R3
    000011C2 33A2                   CMP/HS      R10,R3
    000011C4 8D1D                   BT/S        L1040
    000011C6 7C0C                   ADD         #12,R12
    000011C8              L1041:                            
      simplexC.c   770        {
      simplexC.c   771            Bdisp_AllClr_DDVRAM();
    000011C8 D11E                   MOV.L       L1142+10,R1; _Bdisp_AllClr_DDVRAM
    000011CA 410B                   JSR         @R1
    000011CC 0009                   NOP
      simplexC.c   772            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    000011CE 2FD6                   MOV.L       R13,@-R15
    000011D0 2F96                   MOV.L       R9,@-R15
    000011D2 D323                   MOV.L       L1142+38,R3; L711
    000011D4 D21D                   MOV.L       L1142+18,R2; _sprintf
    000011D6 2F36                   MOV.L       R3,@-R15
    000011D8 420B                   JSR         @R2
    000011DA 64C3                   MOV         R12,R4
    000011DC 7F0C                   ADD         #12,R15
      simplexC.c   773            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000011DE E710                   MOV         #16,R7
    000011E0 66C3                   MOV         R12,R6
    000011E2 E500                   MOV         #0,R5
    000011E4 480B                   JSR         @R8
    000011E6 6453                   MOV         R5,R4
      simplexC.c   774            Bdisp_PutDisp_DD();
    000011E8 D31A                   MOV.L       L1142+26,R3; _Bdisp_PutDisp_DD
    000011EA 430B                   JSR         @R3
    000011EC 0009                   NOP
      simplexC.c   775            constraintValues[i] = InputD(0, 7);
    000011EE E507                   MOV         #7,R5
    000011F0 D219                   MOV.L       L1142+30,R2; _InputD
    000011F2 420B                   JSR         @R2
    000011F4 E400                   MOV         #0,R4
    000011F6 7B01                   ADD         #1,R11
    000011F8 2E02                   MOV.L       R0,@R14
    000011FA 3BA2                   CMP/HS      R10,R11
    000011FC 7E04                   ADD         #4,R14
    000011FE 8FE3                   BF/S        L1041




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001200 7D01                   ADD         #1,R13
    00001202              L1040:                            
      simplexC.c   776        }
      simplexC.c   777        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    00001202 52F2                   MOV.L       @(8,R15),R2
    00001204 901C                   MOV.W       L1142+6,R0 ; H'00B4
    00001206 2F26                   MOV.L       R2,@-R15
    00001208 06FE                   MOV.L       @(R0,R15),R6
    0000120A 901A                   MOV.W       L1142+8,R0 ; H'00B0
    0000120C 05FE                   MOV.L       @(R0,R15),R5
    0000120E BF37                   BSR         _getInequalitySign
    00001210 6493                   MOV         R9,R4
    00001212 61F6                   MOV.L       @R15+,R1
    00001214 2102                   MOV.L       R0,@R1
      simplexC.c   778        *rightValue = getRightValue(nConstraint);
    00001216 53F1                   MOV.L       @(4,R15),R3
    00001218 2F36                   MOV.L       R3,@-R15
    0000121A BF97                   BSR         _getRightValue
    0000121C 6493                   MOV         R9,R4
    0000121E 62F6                   MOV.L       @R15+,R2
      simplexC.c   779        return constraintValues;
      simplexC.c   780    }
    00001220 910C                   MOV.W       L1142+2,R1 ; H'008C
    00001222 2202                   MOV.L       R0,@R2
    00001224 60F2                   MOV.L       @R15,R0
    00001226 3F1C                   ADD         R1,R15
    00001228 4F26                   LDS.L       @R15+,PR
    0000122A 68F6                   MOV.L       @R15+,R8
    0000122C 69F6                   MOV.L       @R15+,R9
    0000122E 6AF6                   MOV.L       @R15+,R10
    00001230 6BF6                   MOV.L       @R15+,R11
    00001232 6CF6                   MOV.L       @R15+,R12
    00001234 6DF6                   MOV.L       @R15+,R13
    00001236 000B                   RTS
    00001238 6EF6                   MOV.L       @R15+,R14
    0000123A              L1142:                            
    0000123A FF7C                   .DATA.W     H'FF7C
    0000123C 008C                   .DATA.W     H'008C
    0000123E FF74                   .DATA.W     H'FF74
    00001240 00B4                   .DATA.W     H'00B4
    00001242 00B0                   .DATA.W     H'00B0
    00001244 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001248 <00000000>             .DATA.L     L698
    0000124C <00000000>             .DATA.L     _sprintf
    00001250 <00000000>             .DATA.L     _PrintMini
    00001254 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001258 <00000000>             .DATA.L     _InputD
    0000125C <00000000>             .DATA.L     _malloc
    00001260 <00000000>             .DATA.L     L711
      simplexC.c   781    
      simplexC.c   782    struct problemStatement* getProblemInputs()
    00001264              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224
    00001264 2FE6                   MOV.L       R14,@-R15
      simplexC.c   783    {
      simplexC.c   784        char strout[128];
      simplexC.c   785        unsigned int nConstraints;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   786        unsigned int nVariables;
      simplexC.c   787        unsigned int i;
      simplexC.c   788        int nVariablesInteger;
      simplexC.c   789        int problemType;
      simplexC.c   790        float **constraints;
      simplexC.c   791        float *rightValues;
      simplexC.c   792        float *funcObjtValues;
      simplexC.c   793        int *inequalitiesSigns;
      simplexC.c   794        int *idIntegerVariables;
      simplexC.c   795        int *idSlopeVariables;
      simplexC.c   796        int *id2fasesVariables;
      simplexC.c   797        struct problemStatement *pInput;
      simplexC.c   798        nVariablesInteger=0;
    00001266 E300                   MOV         #0,R3
    00001268 90AD                   MOV.W       L1143,R0   ; H'FF4C
    0000126A 2FD6                   MOV.L       R13,@-R15
    0000126C 2FC6                   MOV.L       R12,@-R15
    0000126E 2FB6                   MOV.L       R11,@-R15
    00001270 2FA6                   MOV.L       R10,@-R15
    00001272 2F96                   MOV.L       R9,@-R15
    00001274 2F86                   MOV.L       R8,@-R15
    00001276 4F22                   STS.L       PR,@-R15
      simplexC.c   799        pInput = malloc(sizeof(struct problemStatement));
    00001278 D954                   MOV.L       L1143+6,R9 ; _malloc
    0000127A 3F0C                   ADD         R0,R15
    0000127C 1F36                   MOV.L       R3,@(24,R15)
    0000127E 490B                   JSR         @R9
    00001280 E454                   MOV         #84,R4
      simplexC.c   800        Bdisp_AllClr_DDVRAM();
    00001282 D853                   MOV.L       L1143+10,R8; _Bdisp_AllClr_DDVRAM
    00001284 480B                   JSR         @R8
    00001286 6E03                   MOV         R0,R14
      simplexC.c   801        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    00001288 DB52                   MOV.L       L1143+14,R11; _PrintMini
    0000128A E710                   MOV         #16,R7
    0000128C D652                   MOV.L       L1143+18,R6; L728
    0000128E E500                   MOV         #0,R5
    00001290 4B0B                   JSR         @R11
    00001292 6453                   MOV         R5,R4
      simplexC.c   802        Bdisp_PutDisp_DD();
    00001294 DA51                   MOV.L       L1143+22,R10; _Bdisp_PutDisp_DD
    00001296 4A0B                   JSR         @R10
    00001298 0009                   NOP
      simplexC.c   803        nConstraints = InputI(0, 7);
    0000129A E507                   MOV         #7,R5
    0000129C D350                   MOV.L       L1143+26,R3; _InputI
    0000129E 430B                   JSR         @R3
    000012A0 E400                   MOV         #0,R4
      simplexC.c   804        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    000012A2 E710                   MOV         #16,R7
    000012A4 D64F                   MOV.L       L1143+30,R6; L729
    000012A6 E50E                   MOV         #14,R5
    000012A8 1F02                   MOV.L       R0,@(8,R15)
    000012AA 4B0B                   JSR         @R11
    000012AC E400                   MOV         #0,R4
      simplexC.c   805        Bdisp_PutDisp_DD();
    000012AE 4A0B                   JSR         @R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B0 0009                   NOP
      simplexC.c   806        nVariables = InputI(0, 21);
    000012B2 E515                   MOV         #21,R5
    000012B4 D34A                   MOV.L       L1143+26,R3; _InputI
    000012B6 430B                   JSR         @R3
    000012B8 E400                   MOV         #0,R4
    000012BA 6C03                   MOV         R0,R12
      simplexC.c   807        PrintMini(0, 28, (unsigned char *)"Press. 1-LP, 2-ILP, 3-Cuts", MINI_OVER);
    000012BC D64A                   MOV.L       L1143+34,R6; L730
    000012BE E51C                   MOV         #28,R5
    000012C0 E710                   MOV         #16,R7
    000012C2 4B0B                   JSR         @R11
    000012C4 E400                   MOV         #0,R4
      simplexC.c   808        Bdisp_PutDisp_DD();
    000012C6 4A0B                   JSR         @R10
    000012C8 0009                   NOP
      simplexC.c   809        problemType = InputI(0, 35);
    000012CA E523                   MOV         #35,R5
    000012CC D244                   MOV.L       L1143+26,R2; _InputI
    000012CE 420B                   JSR         @R2
    000012D0 E400                   MOV         #0,R4
    000012D2 1F09                   MOV.L       R0,@(36,R15)
      simplexC.c   810        constraints = (float **)malloc(sizeof(float) * nConstraints);
    000012D4 54F2                   MOV.L       @(8,R15),R4
    000012D6 4408                   SHLL2       R4
    000012D8 490B                   JSR         @R9
    000012DA 2F42                   MOV.L       R4,@R15
    000012DC 1F08                   MOV.L       R0,@(32,R15)
      simplexC.c   811        rightValues=calloc(nConstraints,sizeof(float));
    000012DE E504                   MOV         #4,R5
    000012E0 DD42                   MOV.L       L1143+38,R13; _calloc
    000012E2 4D0B                   JSR         @R13
    000012E4 54F2                   MOV.L       @(8,R15),R4
    000012E6 1F07                   MOV.L       R0,@(28,R15)
      simplexC.c   812        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    000012E8 490B                   JSR         @R9
    000012EA 64F2                   MOV.L       @R15,R4
    000012EC 1F03                   MOV.L       R0,@(12,R15)
      simplexC.c   813        funcObjtValues = calloc(nVariables+1,sizeof(float));
    000012EE E504                   MOV         #4,R5
    000012F0 64C3                   MOV         R12,R4
    000012F2 4D0B                   JSR         @R13
    000012F4 7401                   ADD         #1,R4
      simplexC.c   814        idIntegerVariables = calloc(nVariables,sizeof(int));
    000012F6 E504                   MOV         #4,R5
    000012F8 1F04                   MOV.L       R0,@(16,R15)
    000012FA 4D0B                   JSR         @R13
    000012FC 64C3                   MOV         R12,R4
      simplexC.c   815        idSlopeVariables = calloc(nVariables,sizeof(int));
    000012FE E504                   MOV         #4,R5
    00001300 1F0A                   MOV.L       R0,@(40,R15)
    00001302 4D0B                   JSR         @R13
    00001304 64C3                   MOV         R12,R4
      simplexC.c   816        id2fasesVariables = calloc(nVariables,sizeof(int));
    00001306 E504                   MOV         #4,R5
    00001308 1F0B                   MOV.L       R0,@(44,R15)
    0000130A 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000130C 64C3                   MOV         R12,R4
      simplexC.c   817        pInput->nVariablesSlope=0;
    0000130E E300                   MOV         #0,R3
    00001310 1F0C                   MOV.L       R0,@(48,R15)
      simplexC.c   818        pInput->nVariables2fases=0;
      simplexC.c   819        for(i=0;i<nVariables;i++)
    00001312 6DF3                   MOV         R15,R13
    00001314 1E38                   MOV.L       R3,@(32,R14)
    00001316 6233                   MOV         R3,R2
    00001318 1E39                   MOV.L       R3,@(36,R14)
    0000131A 1F31                   MOV.L       R3,@(4,R15)
    0000131C 59FA                   MOV.L       @(40,R15),R9
    0000131E E301                   MOV         #1,R3
    00001320 2F32                   MOV.L       R3,@R15
    00001322 E300                   MOV         #0,R3
    00001324 3C36                   CMP/HI      R3,R12
    00001326 8F31                   BF/S        L1043
    00001328 7D34                   ADD         #52,R13
    0000132A              L1044:                            
      simplexC.c   820        {
      simplexC.c   821            if(problemType!=TYPE_LP)
    0000132A 50F9                   MOV.L       @(36,R15),R0
    0000132C 8801                   CMP/EQ      #1,R0
    0000132E 8924                   BT          L1045
      simplexC.c   822            {
      simplexC.c   823                Bdisp_AllClr_DDVRAM();
    00001330 480B                   JSR         @R8
    00001332 0009                   NOP
      simplexC.c   824                sprintf(strout,"Variable x%d",i+1);
    00001334 62F2                   MOV.L       @R15,R2
    00001336 2F26                   MOV.L       R2,@-R15
    00001338 D32D                   MOV.L       L1143+42,R3; L733
    0000133A 2F36                   MOV.L       R3,@-R15
    0000133C D22D                   MOV.L       L1143+46,R2; _sprintf
    0000133E 420B                   JSR         @R2
    00001340 64D3                   MOV         R13,R4
    00001342 7F08                   ADD         #8,R15
      simplexC.c   825                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00001344 E710                   MOV         #16,R7
    00001346 66D3                   MOV         R13,R6
    00001348 E500                   MOV         #0,R5
    0000134A 4B0B                   JSR         @R11
    0000134C 6453                   MOV         R5,R4
      simplexC.c   826                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
    0000134E E710                   MOV         #16,R7
    00001350 D629                   MOV.L       L1143+50,R6; L734
    00001352 E507                   MOV         #7,R5
    00001354 4B0B                   JSR         @R11
    00001356 E400                   MOV         #0,R4
      simplexC.c   827                idIntegerVariables[i] = InputI(0, 14);
    00001358 D321                   MOV.L       L1143+26,R3; _InputI
    0000135A E50E                   MOV         #14,R5
    0000135C 430B                   JSR         @R3
    0000135E E400                   MOV         #0,R4
      simplexC.c   828                Bdisp_PutDisp_DD();
    00001360 4A0B                   JSR         @R10
    00001362 2902                   MOV.L       R0,@R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   829                memset(strout,0,128);
    00001364 9630                   MOV.W       L1143+2,R6 ; H'0080
    00001366 E500                   MOV         #0,R5
    00001368 D224                   MOV.L       L1143+54,R2; _memset
    0000136A 420B                   JSR         @R2
    0000136C 64D3                   MOV         R13,R4
      simplexC.c   830                if(idIntegerVariables[i]==1)
    0000136E 6092                   MOV.L       @R9,R0
    00001370 8801                   CMP/EQ      #1,R0
    00001372 8B02                   BF          L1045
      simplexC.c   831                {
      simplexC.c   832                    nVariablesInteger+=1;
    00001374 52F6                   MOV.L       @(24,R15),R2
    00001376 7201                   ADD         #1,R2
    00001378 1F26                   MOV.L       R2,@(24,R15)
    0000137A              L1045:                            
    0000137A 7904                   ADD         #4,R9
    0000137C 53F1                   MOV.L       @(4,R15),R3
    0000137E 7301                   ADD         #1,R3
    00001380 1F31                   MOV.L       R3,@(4,R15)
    00001382 33C2                   CMP/HS      R12,R3
    00001384 62F2                   MOV.L       @R15,R2
    00001386 7201                   ADD         #1,R2
    00001388 8FCF                   BF/S        L1044
    0000138A 2F22                   MOV.L       R2,@R15
    0000138C              L1043:                            
      simplexC.c   833                }
      simplexC.c   834            }
      simplexC.c   835        }
      simplexC.c   836        for (i = 0; i < nConstraints; i++)
    0000138C E300                   MOV         #0,R3
    0000138E E201                   MOV         #1,R2
    00001390 1F31                   MOV.L       R3,@(4,R15)
    00001392 2F22                   MOV.L       R2,@R15
    00001394 52F2                   MOV.L       @(8,R15),R2
    00001396 3236                   CMP/HI      R3,R2
    00001398 8F3C                   BF/S        L1047
    0000139A 6933                   MOV         R3,R9
    0000139C              L1048:                            
      simplexC.c   837        {
      simplexC.c   838            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV
                         +ariablesSlope,&pInput->nVariables2fases);
    0000139C 50F8                   MOV.L       @(32,R15),R0
    0000139E 63E3                   MOV         R14,R3
    000013A0 309C                   ADD         R9,R0
    000013A2 7324                   ADD         #36,R3
    000013A4 2F06                   MOV.L       R0,@-R15
    000013A6 2F36                   MOV.L       R3,@-R15
    000013A8 63E3                   MOV         R14,R3
    000013AA 7320                   ADD         #32,R3
    000013AC 2F36                   MOV.L       R3,@-R15
    000013AE 57FA                   MOV.L       @(40,R15),R7
    000013B0 56F6                   MOV.L       @(24,R15),R6
    000013B2 379C                   ADD         R9,R7
    000013B4 55F3                   MOV.L       @(12,R15),R5
    000013B6 369C                   ADD         R9,R6
    000013B8 BEE9                   BSR         _getInequation




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013BA 64C3                   MOV         R12,R4
    000013BC 7F08                   ADD         #8,R15
    000013BE 63F6                   MOV.L       @R15+,R3
    000013C0 2302                   MOV.L       R0,@R3
    000013C2 A01D                   BRA         L1127
    000013C4 0009                   NOP
    000013C6              L1143:                            
    000013C6 FF4C                   .DATA.W     H'FF4C
    000013C8 0080                   .DATA.W     H'0080
    000013CA 0000                   .DATA.W     0
    000013CC <00000000>             .DATA.L     _malloc
    000013D0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000013D4 <00000000>             .DATA.L     _PrintMini
    000013D8 <00000000>             .DATA.L     L728
    000013DC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000013E0 <00000000>             .DATA.L     _InputI
    000013E4 <00000000>             .DATA.L     L729
    000013E8 <00000000>             .DATA.L     L730
    000013EC <00000000>             .DATA.L     _calloc
    000013F0 <00000000>             .DATA.L     L733
    000013F4 <00000000>             .DATA.L     _sprintf
    000013F8 <00000000>             .DATA.L     L734
    000013FC <00000000>             .DATA.L     _memset
    00001400              L1127:                            
    00001400 52F1                   MOV.L       @(4,R15),R2
    00001402 7201                   ADD         #1,R2
    00001404 1F21                   MOV.L       R2,@(4,R15)
    00001406 63F2                   MOV.L       @R15,R3
    00001408 7301                   ADD         #1,R3
    0000140A 2F32                   MOV.L       R3,@R15
    0000140C 51F2                   MOV.L       @(8,R15),R1
    0000140E 3212                   CMP/HS      R1,R2
    00001410 8FC4                   BF/S        L1048
    00001412 7904                   ADD         #4,R9
    00001414              L1047:                            
      simplexC.c   839        }
      simplexC.c   840        
      simplexC.c   841        Bdisp_AllClr_DDVRAM();
    00001414 480B                   JSR         @R8
    00001416 0009                   NOP
      simplexC.c   842        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    00001418 D146                   MOV.L       L1144+6,R1 ; L737
    0000141A E301                   MOV         #1,R3
    0000141C 2F36                   MOV.L       R3,@-R15
    0000141E E200                   MOV         #0,R2
    00001420 D345                   MOV.L       L1144+10,R3; _sprintf
    00001422 2F26                   MOV.L       R2,@-R15
    00001424 2F16                   MOV.L       R1,@-R15
    00001426 430B                   JSR         @R3
    00001428 64D3                   MOV         R13,R4
    0000142A 7F0C                   ADD         #12,R15
      simplexC.c   843        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000142C 1FD5                   MOV.L       R13,@(20,R15)
    0000142E 66D3                   MOV         R13,R6
    00001430 E710                   MOV         #16,R7
    00001432 E500                   MOV         #0,R5
    00001434 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001436 6453                   MOV         R5,R4
      simplexC.c   844        pInput->funcObjectivePurpose = InputI(0, 7);
    00001438 D340                   MOV.L       L1144+14,R3; _InputI
    0000143A E507                   MOV         #7,R5
    0000143C 430B                   JSR         @R3
    0000143E E400                   MOV         #0,R4
    00001440 E144                   MOV         #68,R1
    00001442 31EC                   ADD         R14,R1
      simplexC.c   845        Bdisp_PutDisp_DD();
    00001444 4A0B                   JSR         @R10
    00001446 2102                   MOV.L       R0,@R1
      simplexC.c   846        memset(strout,0,128);
    00001448 9671                   MOV.W       L1144,R6   ; H'0080
    0000144A E500                   MOV         #0,R5
    0000144C D33C                   MOV.L       L1144+18,R3; _memset
    0000144E 430B                   JSR         @R3
    00001450 64D3                   MOV         R13,R4
      simplexC.c   847        for(i=0;i<nVariables;i++)
    00001452 E200                   MOV         #0,R2
    00001454 1F21                   MOV.L       R2,@(4,R15)
    00001456 53F4                   MOV.L       @(16,R15),R3
    00001458 2F32                   MOV.L       R3,@R15
    0000145A 6323                   MOV         R2,R3
    0000145C 3C36                   CMP/HI      R3,R12
    0000145E 8F25                   BF/S        L1049
    00001460 E901                   MOV         #1,R9
    00001462              L1050:                            
      simplexC.c   848        {
      simplexC.c   849            Bdisp_AllClr_DDVRAM();
    00001462 480B                   JSR         @R8
    00001464 0009                   NOP
      simplexC.c   850            sprintf(strout,"Obj value var x%d",i+1);
    00001466 2F96                   MOV.L       R9,@-R15
    00001468 D336                   MOV.L       L1144+22,R3; L739
    0000146A 2F36                   MOV.L       R3,@-R15
    0000146C D232                   MOV.L       L1144+10,R2; _sprintf
    0000146E 420B                   JSR         @R2
    00001470 64D3                   MOV         R13,R4
    00001472 7F08                   ADD         #8,R15
      simplexC.c   851            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00001474 56F5                   MOV.L       @(20,R15),R6
    00001476 E500                   MOV         #0,R5
    00001478 E710                   MOV         #16,R7
    0000147A 4B0B                   JSR         @R11
    0000147C 6453                   MOV         R5,R4
      simplexC.c   852            funcObjtValues[i] = InputD(0, 7);
    0000147E E507                   MOV         #7,R5
    00001480 63F2                   MOV.L       @R15,R3
    00001482 2F36                   MOV.L       R3,@-R15
    00001484 D330                   MOV.L       L1144+26,R3; _InputD
    00001486 430B                   JSR         @R3
    00001488 E400                   MOV         #0,R4
    0000148A 62F6                   MOV.L       @R15+,R2
      simplexC.c   853            Bdisp_PutDisp_DD();
    0000148C 4A0B                   JSR         @R10
    0000148E 2202                   MOV.L       R0,@R2
      simplexC.c   854            memset(strout,0,128);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001490 964D                   MOV.W       L1144,R6   ; H'0080
    00001492 E500                   MOV         #0,R5
    00001494 D32A                   MOV.L       L1144+18,R3; _memset
    00001496 430B                   JSR         @R3
    00001498 64D3                   MOV         R13,R4
    0000149A 52F1                   MOV.L       @(4,R15),R2
    0000149C 7201                   ADD         #1,R2
    0000149E 32C2                   CMP/HS      R12,R2
    000014A0 1F21                   MOV.L       R2,@(4,R15)
    000014A2 63F2                   MOV.L       @R15,R3
    000014A4 7304                   ADD         #4,R3
    000014A6 2F32                   MOV.L       R3,@R15
    000014A8 8FDB                   BF/S        L1050
    000014AA 7901                   ADD         #1,R9
    000014AC              L1049:                            
      simplexC.c   855        }
      simplexC.c   856        Bdisp_AllClr_DDVRAM();
    000014AC 480B                   JSR         @R8
    000014AE 0009                   NOP
      simplexC.c   857        sprintf(strout,"Obj value Independent");
    000014B0 D326                   MOV.L       L1144+30,R3; L740
    000014B2 2F36                   MOV.L       R3,@-R15
    000014B4 D220                   MOV.L       L1144+10,R2; _sprintf
    000014B6 420B                   JSR         @R2
    000014B8 64D3                   MOV         R13,R4
    000014BA 7F04                   ADD         #4,R15
      simplexC.c   858        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000014BC 56F5                   MOV.L       @(20,R15),R6
    000014BE E500                   MOV         #0,R5
    000014C0 E710                   MOV         #16,R7
    000014C2 4B0B                   JSR         @R11
    000014C4 6453                   MOV         R5,R4
      simplexC.c   859        funcObjtValues[nVariables] = InputD(0, 7);
    000014C6 63C3                   MOV         R12,R3
    000014C8 50F4                   MOV.L       @(16,R15),R0
    000014CA E507                   MOV         #7,R5
    000014CC 4308                   SHLL2       R3
    000014CE 303C                   ADD         R3,R0
    000014D0 2F06                   MOV.L       R0,@-R15
    000014D2 D31D                   MOV.L       L1144+26,R3; _InputD
    000014D4 430B                   JSR         @R3
    000014D6 E400                   MOV         #0,R4
    000014D8 62F6                   MOV.L       @R15+,R2
      simplexC.c   860        Bdisp_PutDisp_DD();
    000014DA 4A0B                   JSR         @R10
    000014DC 2202                   MOV.L       R0,@R2
      simplexC.c   861        pInput->constraints=constraints;
      simplexC.c   862        pInput->rightValues=rightValues;
      simplexC.c   863        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c   864        pInput->nVariables=nVariables;
      simplexC.c   865        pInput->nConstraints=nConstraints;
      simplexC.c   866        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c   867        pInput->idSlopeVariables=idSlopeVariables;
      simplexC.c   868        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c   869        pInput->funcObjtValues=funcObjtValues;
    000014DE E048                   MOV         #72,R0
    000014E0 53F8                   MOV.L       @(32,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014E2 1E34                   MOV.L       R3,@(16,R14)
    000014E4 52F7                   MOV.L       @(28,R15),R2
    000014E6 1E25                   MOV.L       R2,@(20,R14)
    000014E8 53F3                   MOV.L       @(12,R15),R3
    000014EA 1E36                   MOV.L       R3,@(24,R14)
    000014EC 1EC7                   MOV.L       R12,@(28,R14)
    000014EE 53F2                   MOV.L       @(8,R15),R3
    000014F0 1E3B                   MOV.L       R3,@(44,R14)
    000014F2 52FA                   MOV.L       @(40,R15),R2
    000014F4 1E2C                   MOV.L       R2,@(48,R14)
    000014F6 53FB                   MOV.L       @(44,R15),R3
    000014F8 1E3D                   MOV.L       R3,@(52,R14)
    000014FA 52FC                   MOV.L       @(48,R15),R2
    000014FC 1E2E                   MOV.L       R2,@(56,R14)
    000014FE 53F4                   MOV.L       @(16,R15),R3
    00001500 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c   870        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c   871        pInput->modelType=TYPE_INPUT;
    00001502 E301                   MOV         #1,R3
    00001504 52F6                   MOV.L       @(24,R15),R2
      simplexC.c   872        pInput->problemType=problemType;
      simplexC.c   873        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c   874        return pInput;
    00001506 60E3                   MOV         R14,R0
    00001508 1E2A                   MOV.L       R2,@(40,R14)
    0000150A 1E31                   MOV.L       R3,@(4,R14)
    0000150C 52F9                   MOV.L       @(36,R15),R2
    0000150E 2E22                   MOV.L       R2,@R14
    00001510 51E9                   MOV.L       @(36,R14),R1
    00001512 4115                   CMP/PL      R1
      simplexC.c   875    }
    00001514 910C                   MOV.W       L1144+2,R1 ; H'00B4
    00001516 0329                   MOVT        R3
    00001518 1E32                   MOV.L       R3,@(8,R14)
    0000151A 3F1C                   ADD         R1,R15
    0000151C 4F26                   LDS.L       @R15+,PR
    0000151E 68F6                   MOV.L       @R15+,R8
    00001520 69F6                   MOV.L       @R15+,R9
    00001522 6AF6                   MOV.L       @R15+,R10
    00001524 6BF6                   MOV.L       @R15+,R11
    00001526 6CF6                   MOV.L       @R15+,R12
    00001528 6DF6                   MOV.L       @R15+,R13
    0000152A 000B                   RTS
    0000152C 6EF6                   MOV.L       @R15+,R14
    0000152E              L1144:                            
    0000152E 0080                   .DATA.W     H'0080
    00001530 00B4                   .DATA.W     H'00B4
    00001532 0000                   .DATA.W     0
    00001534 <00000000>             .DATA.L     L737
    00001538 <00000000>             .DATA.L     _sprintf
    0000153C <00000000>             .DATA.L     _InputI
    00001540 <00000000>             .DATA.L     _memset
    00001544 <00000000>             .DATA.L     L739
    00001548 <00000000>             .DATA.L     _InputD
    0000154C <00000000>             .DATA.L     L740
      simplexC.c   876    
      simplexC.c   877    int selectExecutionMode()




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001550              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=144
    00001550 4F22                   STS.L       PR,@-R15
    00001552 7F80                   ADD         #-128,R15
      simplexC.c   878    {
      simplexC.c   879        char strout[128];
      simplexC.c   880        Bdisp_AllClr_DDVRAM();
    00001554 D350                   MOV.L       L1145+2,R3 ; _Bdisp_AllClr_DDVRAM
    00001556 430B                   JSR         @R3
    00001558 0009                   NOP
      simplexC.c   881        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    0000155A E201                   MOV         #1,R2
    0000155C D14F                   MOV.L       L1145+6,R1 ; L744
    0000155E E300                   MOV         #0,R3
    00001560 2F26                   MOV.L       R2,@-R15
    00001562 2F36                   MOV.L       R3,@-R15
    00001564 2F16                   MOV.L       R1,@-R15
    00001566 64F3                   MOV         R15,R4
    00001568 D34D                   MOV.L       L1145+10,R3; _sprintf
    0000156A 430B                   JSR         @R3
    0000156C 740C                   ADD         #12,R4
      simplexC.c   882        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000156E E710                   MOV         #16,R7
    00001570 D24C                   MOV.L       L1145+14,R2; _PrintMini
    00001572 66F3                   MOV         R15,R6
    00001574 760C                   ADD         #12,R6
    00001576 E500                   MOV         #0,R5
    00001578 420B                   JSR         @R2
    0000157A 6453                   MOV         R5,R4
      simplexC.c   883        ex.mode = InputI(0, 7);
    0000157C D34A                   MOV.L       L1145+18,R3; _InputI
    0000157E E507                   MOV         #7,R5
    00001580 430B                   JSR         @R3
    00001582 E400                   MOV         #0,R4
    00001584 D249                   MOV.L       L1145+22,R2; _ex
      simplexC.c   884        Bdisp_PutDisp_DD();
    00001586 D34A                   MOV.L       L1145+26,R3; _Bdisp_PutDisp_DD
    00001588 430B                   JSR         @R3
    0000158A 2202                   MOV.L       R0,@R2
      simplexC.c   885        ex.nNodes=0;
    0000158C D349                   MOV.L       L1145+30,R3; H'00000024+_ex
    0000158E E100                   MOV         #0,R1
    00001590 2312                   MOV.L       R1,@R3
      simplexC.c   886        return 0;
    00001592 6013                   MOV         R1,R0
      simplexC.c   887    }
    00001594 917F                   MOV.W       L1145,R1   ; H'008C
    00001596 3F1C                   ADD         R1,R15
    00001598 4F26                   LDS.L       @R15+,PR
    0000159A 000B                   RTS
    0000159C 0009                   NOP
      simplexC.c   888    
      simplexC.c   889    int convertModel()
    0000159E              _convertModel:                   ; function: convertModel
                                                           ; frame size=32
    0000159E 2FE6                   MOV.L       R14,@-R15
    000015A0 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015A2 2FC6                   MOV.L       R12,@-R15
    000015A4 2FB6                   MOV.L       R11,@-R15
      simplexC.c   890    {
      simplexC.c   891        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c   892        struct problemStatement *modelToSolve;
      simplexC.c   893        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
    000015A6 EB00                   MOV         #0,R11
      simplexC.c   894        modelToSolve = malloc(sizeof(struct problemStatement));
    000015A8 D343                   MOV.L       L1145+34,R3; _malloc
    000015AA 6CB3                   MOV         R11,R12
    000015AC 2FA6                   MOV.L       R10,@-R15
    000015AE 2F96                   MOV.L       R9,@-R15
    000015B0 2F86                   MOV.L       R8,@-R15
    000015B2 69B3                   MOV         R11,R9
    000015B4 4F22                   STS.L       PR,@-R15
    000015B6 430B                   JSR         @R3
    000015B8 E454                   MOV         #84,R4
    000015BA 6E03                   MOV         R0,R14
      simplexC.c   895        modelToSolve->problemType=ex.initialProblemStatement->problemType;
    000015BC DD3B                   MOV.L       L1145+22,R13; _ex
      simplexC.c   896        modelToSolve->nVariablesSlope=ex.initialProblemStatement->nVariablesSlope;
      simplexC.c   897        modelToSolve->nVariables2fases=ex.initialProblemStatement->nVariables2fases;
      simplexC.c   898        modelToSolve->nVariablesInteger=ex.initialProblemStatement->nVariablesInteger;
      simplexC.c   899        modelToSolve->nConstraints=ex.initialProblemStatement->nConstraints;
      simplexC.c   900        modelToSolve->funcObjectivePurpose=ex.initialProblemStatement->funcObjectivePurpose;
    000015BE E044                   MOV         #68,R0
      simplexC.c   901        modelToSolve->is2fasesNeeded=ex.initialProblemStatement->is2fasesNeeded;
      simplexC.c   902        modelToSolve->nVariables=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariables
                         +Slope+ex.initialProblemStatement->nVariables2fases;
      simplexC.c   903        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(float));
    000015C0 DA3E                   MOV.L       L1145+38,R10; _calloc
    000015C2 52D1                   MOV.L       @(4,R13),R2
    000015C4 6322                   MOV.L       @R2,R3
    000015C6 2E32                   MOV.L       R3,@R14
    000015C8 52D1                   MOV.L       @(4,R13),R2
    000015CA 5328                   MOV.L       @(32,R2),R3
    000015CC 1E38                   MOV.L       R3,@(32,R14)
    000015CE 52D1                   MOV.L       @(4,R13),R2
    000015D0 5329                   MOV.L       @(36,R2),R3
    000015D2 1E39                   MOV.L       R3,@(36,R14)
    000015D4 52D1                   MOV.L       @(4,R13),R2
    000015D6 532A                   MOV.L       @(40,R2),R3
    000015D8 1E3A                   MOV.L       R3,@(40,R14)
    000015DA 52D1                   MOV.L       @(4,R13),R2
    000015DC 532B                   MOV.L       @(44,R2),R3
    000015DE 1E3B                   MOV.L       R3,@(44,R14)
    000015E0 52D1                   MOV.L       @(4,R13),R2
    000015E2 032E                   MOV.L       @(R0,R2),R3
    000015E4 0E36                   MOV.L       R3,@(R0,R14)
    000015E6 52D1                   MOV.L       @(4,R13),R2
    000015E8 5322                   MOV.L       @(8,R2),R3
    000015EA 1E32                   MOV.L       R3,@(8,R14)
    000015EC 54D1                   MOV.L       @(4,R13),R4
    000015EE 5348                   MOV.L       @(32,R4),R3
    000015F0 5247                   MOV.L       @(28,R4),R2
    000015F2 323C                   ADD         R3,R2
    000015F4 5149                   MOV.L       @(36,R4),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015F6 321C                   ADD         R1,R2
    000015F8 1E27                   MOV.L       R2,@(28,R14)
    000015FA E504                   MOV         #4,R5
    000015FC 6423                   MOV         R2,R4
    000015FE 4A0B                   JSR         @R10
    00001600 7401                   ADD         #1,R4
    00001602 E148                   MOV         #72,R1
    00001604 31EC                   ADD         R14,R1
    00001606 2102                   MOV.L       R0,@R1
      simplexC.c   904        if(modelToSolve->is2fasesNeeded)
    00001608 53E2                   MOV.L       @(8,R14),R3
    0000160A 2338                   TST         R3,R3
    0000160C 8906                   BT          L1055
      simplexC.c   905        {
      simplexC.c   906            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(float));
    0000160E E504                   MOV         #4,R5
    00001610 54E7                   MOV.L       @(28,R14),R4
    00001612 4A0B                   JSR         @R10
    00001614 7401                   ADD         #1,R4
    00001616 E14C                   MOV         #76,R1
    00001618 31EC                   ADD         R14,R1
    0000161A 2102                   MOV.L       R0,@R1
    0000161C              L1055:                            
      simplexC.c   907        }
      simplexC.c   908        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    0000161C E504                   MOV         #4,R5
    0000161E 4A0B                   JSR         @R10
    00001620 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   909        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00001622 E504                   MOV         #4,R5
    00001624 1E0D                   MOV.L       R0,@(52,R14)
    00001626 4A0B                   JSR         @R10
    00001628 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   910        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    0000162A E504                   MOV         #4,R5
    0000162C 1E0E                   MOV.L       R0,@(56,R14)
    0000162E 4A0B                   JSR         @R10
    00001630 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   911        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00001632 E504                   MOV         #4,R5
    00001634 1E0F                   MOV.L       R0,@(60,R14)
    00001636 4A0B                   JSR         @R10
    00001638 54EB                   MOV.L       @(44,R14),R4
    0000163A E140                   MOV         #64,R1
      simplexC.c   912        memset(modelToSolve->idConstraintTo2fasesVar,-1,sizeof(modelToSolve->idConstraintTo2fasesVar));
    0000163C D320                   MOV.L       L1145+42,R3; _memset
    0000163E E604                   MOV         #4,R6
    00001640 31EC                   ADD         R14,R1
    00001642 E5FF                   MOV         #-1,R5
    00001644 2102                   MOV.L       R0,@R1
    00001646 E040                   MOV         #64,R0
    00001648 430B                   JSR         @R3
    0000164A 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   913        memset(modelToSolve->idConstraintToSlopeVar,-1,sizeof(modelToSolve->idConstraintToSlopeVar));
    0000164C D21C                   MOV.L       L1145+42,R2; _memset
    0000164E E604                   MOV         #4,R6
    00001650 E5FF                   MOV         #-1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001652 420B                   JSR         @R2
    00001654 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   914        //SET ID TYPES OF VARIABLES
      simplexC.c   915        for(i=0;i<modelToSolve->nVariables;i++)
    00001656 E501                   MOV         #1,R5
    00001658 A018                   BRA         L1056
    0000165A 64B3                   MOV         R11,R4
    0000165C              L1057:                            
      simplexC.c   916        {
      simplexC.c   917            if(i>=ex.initialProblemStatement->nVariables && i<ex.initialProblemStatement->nVariables+ex.initia
                         +lProblemStatement->nVariablesSlope)
    0000165C 57D1                   MOV.L       @(4,R13),R7
    0000165E 5677                   MOV.L       @(28,R7),R6
    00001660 3463                   CMP/GE      R6,R4
    00001662 8B08                   BF          L1058
    00001664 5378                   MOV.L       @(32,R7),R3
    00001666 336C                   ADD         R6,R3
    00001668 3433                   CMP/GE      R3,R4
    0000166A 8904                   BT          L1058
      simplexC.c   918            {
      simplexC.c   919                modelToSolve->idSlopeVariables[i]=1;
    0000166C 50ED                   MOV.L       @(52,R14),R0
    0000166E 6343                   MOV         R4,R3
    00001670 4308                   SHLL2       R3
    00001672 A00A                   BRA         L1059
    00001674 0356                   MOV.L       R5,@(R0,R3)
    00001676              L1058:                            
      simplexC.c   920            }else if(i>=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope)
    00001676 56D1                   MOV.L       @(4,R13),R6
    00001678 5368                   MOV.L       @(32,R6),R3
    0000167A 5267                   MOV.L       @(28,R6),R2
    0000167C 323C                   ADD         R3,R2
    0000167E 3423                   CMP/GE      R2,R4
    00001680 8B03                   BF          L1059
      simplexC.c   921            {
      simplexC.c   922                modelToSolve->id2fasesVariables[i]=1;
    00001682 6243                   MOV         R4,R2
    00001684 50EE                   MOV.L       @(56,R14),R0
    00001686 4208                   SHLL2       R2
    00001688 0256                   MOV.L       R5,@(R0,R2)
    0000168A              L1059:                            
    0000168A 7401                   ADD         #1,R4
    0000168C              L1056:                            
    0000168C 53E7                   MOV.L       @(28,R14),R3
    0000168E 3433                   CMP/GE      R3,R4
    00001690 8BE4                   BF          L1057
      simplexC.c   923            }
      simplexC.c   924            
      simplexC.c   925        }
      simplexC.c   926        for(i=0;i<modelToSolve->nVariables;i++)
    00001692 A054                   BRA         L1061
    00001694 64B3                   MOV         R11,R4
    00001696              L1145:                            
    00001696 008C                   .DATA.W     H'008C
    00001698 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    0000169C <00000000>             .DATA.L     L744
    000016A0 <00000000>             .DATA.L     _sprintf




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016A4 <00000000>             .DATA.L     _PrintMini
    000016A8 <00000000>             .DATA.L     _InputI
    000016AC <00000000>             .DATA.L     _ex
    000016B0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000016B4 <00000024>             .DATA.L     H'00000024+_ex
    000016B8 <00000000>             .DATA.L     _malloc
    000016BC <00000000>             .DATA.L     _calloc
    000016C0 <00000000>             .DATA.L     _memset
    000016C4              L1062:                            
      simplexC.c   927        {
      simplexC.c   928            if(modelToSolve->idSlopeVariables[i])
    000016C4 50ED                   MOV.L       @(52,R14),R0
    000016C6 6243                   MOV         R4,R2
    000016C8 4208                   SHLL2       R2
    000016CA 032E                   MOV.L       @(R0,R2),R3
    000016CC 2338                   TST         R3,R3
    000016CE 8917                   BT          L1063
      simplexC.c   929            {
      simplexC.c   930                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    000016D0 A013                   BRA         L1064
    000016D2 6593                   MOV         R9,R5
    000016D4              L1065:                            
      simplexC.c   931                {
      simplexC.c   932                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||ex.initialProb
                         +lemStatement->inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    000016D4 50D1                   MOV.L       @(4,R13),R0
    000016D6 6653                   MOV         R5,R6
    000016D8 5006                   MOV.L       @(24,R0),R0
    000016DA 4608                   SHLL2       R6
    000016DC 066E                   MOV.L       @(R0,R6),R6
    000016DE 6063                   MOV         R6,R0
    000016E0 8801                   CMP/EQ      #1,R0
    000016E2 8902                   BT          L1067
    000016E4 6063                   MOV         R6,R0
    000016E6 8802                   CMP/EQ      #2,R0
    000016E8 8B06                   BF          L1066
    000016EA              L1067:                            
      simplexC.c   933                    {
      simplexC.c   934                        modelToSolve->idConstraintToSlopeVar[j]=i;
    000016EA 6353                   MOV         R5,R3
    000016EC 50EF                   MOV.L       @(60,R14),R0
      simplexC.c   935                        nextConstraintSlopeSet=j+1;
    000016EE 6953                   MOV         R5,R9
    000016F0 4308                   SHLL2       R3
    000016F2 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c   936                        break;
    000016F4 A004                   BRA         L1063
    000016F6 7901                   ADD         #1,R9
    000016F8              L1066:                            
    000016F8 7501                   ADD         #1,R5
    000016FA              L1064:                            
    000016FA 53EB                   MOV.L       @(44,R14),R3
    000016FC 3533                   CMP/GE      R3,R5
    000016FE 8BE9                   BF          L1065
    00001700              L1063:                            
      simplexC.c   937                    }
      simplexC.c   938                }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   939            }
      simplexC.c   940            if(modelToSolve->id2fasesVariables[i])
    00001700 50EE                   MOV.L       @(56,R14),R0
    00001702 6143                   MOV         R4,R1
    00001704 4108                   SHLL2       R1
    00001706 031E                   MOV.L       @(R0,R1),R3
    00001708 2338                   TST         R3,R3
    0000170A 8917                   BT          L1069
      simplexC.c   941            {
      simplexC.c   942                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    0000170C A013                   BRA         L1070
    0000170E 65C3                   MOV         R12,R5
    00001710              L1071:                            
      simplexC.c   943                {
      simplexC.c   944                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_EQUAL ||ex.initialProblemStatement-
                         +>inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    00001710 50D1                   MOV.L       @(4,R13),R0
    00001712 6653                   MOV         R5,R6
    00001714 5006                   MOV.L       @(24,R0),R0
    00001716 4608                   SHLL2       R6
    00001718 066E                   MOV.L       @(R0,R6),R6
    0000171A 2668                   TST         R6,R6
    0000171C 8902                   BT          L1073
    0000171E 6063                   MOV         R6,R0
    00001720 8802                   CMP/EQ      #2,R0
    00001722 8B07                   BF          L1072
    00001724              L1073:                            
      simplexC.c   945                    {
      simplexC.c   946                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    00001724 6353                   MOV         R5,R3
    00001726 4308                   SHLL2       R3
    00001728 E040                   MOV         #64,R0
      simplexC.c   947                        nextConstraint2fasesSet=j+1;
    0000172A 6C53                   MOV         R5,R12
    0000172C 00EE                   MOV.L       @(R0,R14),R0
    0000172E 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c   948                        break;
    00001730 A004                   BRA         L1069
    00001732 7C01                   ADD         #1,R12
    00001734              L1072:                            
    00001734 7501                   ADD         #1,R5
    00001736              L1070:                            
    00001736 52EB                   MOV.L       @(44,R14),R2
    00001738 3523                   CMP/GE      R2,R5
    0000173A 8BE9                   BF          L1071
    0000173C              L1069:                            
    0000173C 7401                   ADD         #1,R4
    0000173E              L1061:                            
    0000173E 52E7                   MOV.L       @(28,R14),R2
    00001740 3423                   CMP/GE      R2,R4
    00001742 8BBF                   BF          L1062
      simplexC.c   949                    }
      simplexC.c   950                }
      simplexC.c   951            }
      simplexC.c   952        }
      simplexC.c   953        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c   954        modelToSolve->constraints=(float **)malloc(sizeof(float) * modelToSolve->nConstraints);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001744 54EB                   MOV.L       @(44,R14),R4
    00001746 D26C                   MOV.L       L1146+2,R2 ; _malloc
    00001748 420B                   JSR         @R2
    0000174A 4408                   SHLL2       R4
    0000174C 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c   955        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(float));
    0000174E E504                   MOV         #4,R5
    00001750 4A0B                   JSR         @R10
    00001752 54EB                   MOV.L       @(44,R14),R4
    00001754 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c   956        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    00001756 E504                   MOV         #4,R5
    00001758 4A0B                   JSR         @R10
    0000175A 54EB                   MOV.L       @(44,R14),R4
    0000175C 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c   957        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    0000175E E504                   MOV         #4,R5
    00001760 4A0B                   JSR         @R10
    00001762 54E7                   MOV.L       @(28,R14),R4
    00001764 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c   958    
      simplexC.c   959        for(i=0;i<modelToSolve->nConstraints;i++)
    00001766 A064                   BRA         L1075
    00001768 69B3                   MOV         R11,R9
    0000176A              L1076:                            
      simplexC.c   960        {
      simplexC.c   961            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(float));
    0000176A 6293                   MOV         R9,R2
    0000176C 58E4                   MOV.L       @(16,R14),R8
    0000176E E504                   MOV         #4,R5
    00001770 4208                   SHLL2       R2
    00001772 382C                   ADD         R2,R8
    00001774 4A0B                   JSR         @R10
    00001776 54E7                   MOV.L       @(28,R14),R4
    00001778 2802                   MOV.L       R0,@R8
      simplexC.c   962            for(j=0;j<modelToSolve->nVariables;j++)
    0000177A 64B3                   MOV         R11,R4
    0000177C 6C93                   MOV         R9,R12
    0000177E A04C                   BRA         L1077
    00001780 4C08                   SHLL2       R12
    00001782              L1078:                            
      simplexC.c   963            {
      simplexC.c   964                if(j<ex.initialProblemStatement->nVariables)//Copiar variables de entrada
    00001782 52D1                   MOV.L       @(4,R13),R2
    00001784 5327                   MOV.L       @(28,R2),R3
    00001786 3433                   CMP/GE      R3,R4
    00001788 8910                   BT          L1079
      simplexC.c   965                {
      simplexC.c   966                    modelToSolve->constraints[i][j]=ex.initialProblemStatement->constraints[i][j];
    0000178A 6543                   MOV         R4,R5
    0000178C 50E4                   MOV.L       @(16,R14),R0
    0000178E 4508                   SHLL2       R5
    00001790 03CE                   MOV.L       @(R0,R12),R3
    00001792 335C                   ADD         R5,R3
    00001794 50D1                   MOV.L       @(4,R13),R0
    00001796 5004                   MOV.L       @(16,R0),R0
    00001798 00CE                   MOV.L       @(R0,R12),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000179A 025E                   MOV.L       @(R0,R5),R2
    0000179C 2322                   MOV.L       R2,@R3
      simplexC.c   967                    modelToSolve->idIntegerVariables[i]=ex.initialProblemStatement->idIntegerVariables[i];
    0000179E 51EC                   MOV.L       @(48,R14),R1
    000017A0 53D1                   MOV.L       @(4,R13),R3
    000017A2 31CC                   ADD         R12,R1
    000017A4 503C                   MOV.L       @(48,R3),R0
    000017A6 02CE                   MOV.L       @(R0,R12),R2
    000017A8 A036                   BRA         L1080
    000017AA 2122                   MOV.L       R2,@R1
    000017AC              L1079:                            
      simplexC.c   968                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToS
                         +olve->idConstraintToSlopeVar[i])
    000017AC 50D1                   MOV.L       @(4,R13),R0
    000017AE 5006                   MOV.L       @(24,R0),R0
    000017B0 00CE                   MOV.L       @(R0,R12),R0
    000017B2 8801                   CMP/EQ      #1,R0
    000017B4 8B0B                   BF          L1081
    000017B6 50EF                   MOV.L       @(60,R14),R0
    000017B8 02CE                   MOV.L       @(R0,R12),R2
    000017BA 3420                   CMP/EQ      R2,R4
    000017BC 8B07                   BF          L1081
      simplexC.c   969                {
      simplexC.c   970                    modelToSolve->constraints[i][j]=1;
    000017BE 6343                   MOV         R4,R3
    000017C0 D14E                   MOV.L       L1146+6,R1 ; H'3F800000
    000017C2 4308                   SHLL2       R3
    000017C4 50E4                   MOV.L       @(16,R14),R0
    000017C6 02CE                   MOV.L       @(R0,R12),R2
    000017C8 323C                   ADD         R3,R2
    000017CA A00F                   BRA         L1128
    000017CC 0009                   NOP
    000017CE              L1081:                            
      simplexC.c   971                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==model
                         +ToSolve->idConstraintToSlopeVar[i])
    000017CE 50D1                   MOV.L       @(4,R13),R0
    000017D0 5006                   MOV.L       @(24,R0),R0
    000017D2 00CE                   MOV.L       @(R0,R12),R0
    000017D4 8802                   CMP/EQ      #2,R0
    000017D6 8B0B                   BF          L1083
    000017D8 50EF                   MOV.L       @(60,R14),R0
    000017DA 02CE                   MOV.L       @(R0,R12),R2
    000017DC 3420                   CMP/EQ      R2,R4
    000017DE 8B07                   BF          L1083
      simplexC.c   972                {
      simplexC.c   973                    modelToSolve->constraints[i][j]=-1;
    000017E0 50E4                   MOV.L       @(16,R14),R0
    000017E2 6343                   MOV         R4,R3
    000017E4 D146                   MOV.L       L1146+10,R1; H'BF800000
    000017E6 4308                   SHLL2       R3
    000017E8 02CE                   MOV.L       @(R0,R12),R2
    000017EA 323C                   ADD         R3,R2
    000017EC              L1128:                            
    000017EC A014                   BRA         L1080
    000017EE 2212                   MOV.L       R1,@R2
    000017F0              L1083:                            
      simplexC.c   974                }else if((ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || ex.init




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +ialProblemStatement->inequalitySigns[i]==INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    000017F0 50D1                   MOV.L       @(4,R13),R0
    000017F2 5006                   MOV.L       @(24,R0),R0
    000017F4 00CE                   MOV.L       @(R0,R12),R0
    000017F6 8802                   CMP/EQ      #2,R0
    000017F8 8D02                   BT/S        L1086
    000017FA 6503                   MOV         R0,R5
    000017FC 2558                   TST         R5,R5
    000017FE 8B0B                   BF          L1080
    00001800              L1086:                            
    00001800 E040                   MOV         #64,R0
    00001802 00EE                   MOV.L       @(R0,R14),R0
    00001804 03CE                   MOV.L       @(R0,R12),R3
    00001806 3430                   CMP/EQ      R3,R4
    00001808 8B06                   BF          L1080
      simplexC.c   975                {
      simplexC.c   976                    modelToSolve->constraints[i][j]=1;
    0000180A 6243                   MOV         R4,R2
    0000180C D13B                   MOV.L       L1146+6,R1 ; H'3F800000
    0000180E 4208                   SHLL2       R2
    00001810 50E4                   MOV.L       @(16,R14),R0
    00001812 03CE                   MOV.L       @(R0,R12),R3
    00001814 332C                   ADD         R2,R3
    00001816 2312                   MOV.L       R1,@R3
    00001818              L1080:                            
    00001818 7401                   ADD         #1,R4
    0000181A              L1077:                            
    0000181A 53E7                   MOV.L       @(28,R14),R3
    0000181C 3433                   CMP/GE      R3,R4
    0000181E 8BB0                   BF          L1078
      simplexC.c   977                }
      simplexC.c   978                //Cualquier otro caso tiene un 0 por calloc
      simplexC.c   979            }
      simplexC.c   980            modelToSolve->rightValues[i]=ex.initialProblemStatement->rightValues[i];
    00001820 51E5                   MOV.L       @(20,R14),R1
    00001822 6493                   MOV         R9,R4
    00001824 53D1                   MOV.L       @(4,R13),R3
    00001826 4408                   SHLL2       R4
    00001828 5035                   MOV.L       @(20,R3),R0
    0000182A 7901                   ADD         #1,R9
    0000182C 024E                   MOV.L       @(R0,R4),R2
    0000182E 314C                   ADD         R4,R1
    00001830 2122                   MOV.L       R2,@R1
    00001832              L1075:                            
    00001832 53EB                   MOV.L       @(44,R14),R3
    00001834 3933                   CMP/GE      R3,R9
    00001836 8B98                   BF          L1076
      simplexC.c   981        }
      simplexC.c   982    
      simplexC.c   983        //Create new obj funct
      simplexC.c   984        for(i=0;i<modelToSolve->nVariables;i++)
    00001838 A01B                   BRA         L1087
    0000183A 64B3                   MOV         R11,R4
    0000183C              L1088:                            
    0000183C 5CD1                   MOV.L       @(4,R13),R12
    0000183E 52C7                   MOV.L       @(28,R12),R2
    00001840 3423                   CMP/GE      R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001842 890A                   BT          L1089
      simplexC.c   985        {
      simplexC.c   986            if(i<ex.initialProblemStatement->nVariables)
      simplexC.c   987            {
      simplexC.c   988                modelToSolve->funcObjtValues[i]=ex.initialProblemStatement->funcObjtValues[i];
    00001844 6543                   MOV         R4,R5
    00001846 4508                   SHLL2       R5
    00001848 E048                   MOV         #72,R0
    0000184A 00EE                   MOV.L       @(R0,R14),R0
    0000184C 6203                   MOV         R0,R2
    0000184E 325C                   ADD         R5,R2
    00001850 E048                   MOV         #72,R0
    00001852 00CE                   MOV.L       @(R0,R12),R0
    00001854 035E                   MOV.L       @(R0,R5),R3
    00001856 A00B                   BRA         L1090
    00001858 2232                   MOV.L       R3,@R2
    0000185A              L1089:                            
      simplexC.c   989            }else if(i>=(ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope))
    0000185A 53C8                   MOV.L       @(32,R12),R3
    0000185C 52C7                   MOV.L       @(28,R12),R2
    0000185E 323C                   ADD         R3,R2
    00001860 3423                   CMP/GE      R2,R4
    00001862 8B05                   BF          L1090
      simplexC.c   990            {
      simplexC.c   991                modelToSolve->funcObjtValues2Fases[i]=1;
    00001864 D325                   MOV.L       L1146+6,R3 ; H'3F800000
    00001866 6243                   MOV         R4,R2
    00001868 4208                   SHLL2       R2
    0000186A E04C                   MOV         #76,R0
    0000186C 00EE                   MOV.L       @(R0,R14),R0
    0000186E 0236                   MOV.L       R3,@(R0,R2)
    00001870              L1090:                            
    00001870 7401                   ADD         #1,R4
    00001872              L1087:                            
    00001872 52E7                   MOV.L       @(28,R14),R2
    00001874 3423                   CMP/GE      R2,R4
    00001876 8BE1                   BF          L1088
      simplexC.c   992            }
      simplexC.c   993        }
      simplexC.c   994    
      simplexC.c   995        //Create aj vectors
      simplexC.c   996        ex.ajVector=calloc(modelToSolve->nVariables,sizeof(float*));
    00001878 E504                   MOV         #4,R5
    0000187A 4A0B                   JSR         @R10
    0000187C 54E7                   MOV.L       @(28,R14),R4
    0000187E 1D0C                   MOV.L       R0,@(48,R13)
      simplexC.c   997        for(i=0;i<modelToSolve->nVariables;i++)
    00001880 A018                   BRA         L1092
    00001882 69B3                   MOV         R11,R9
    00001884              L1093:                            
      simplexC.c   998        {
      simplexC.c   999            ex.ajVector[i]=calloc(modelToSolve->nConstraints,sizeof(float));
    00001884 58DC                   MOV.L       @(48,R13),R8
    00001886 E504                   MOV         #4,R5
    00001888 6C93                   MOV         R9,R12
    0000188A 4C08                   SHLL2       R12
    0000188C 38CC                   ADD         R12,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000188E 4A0B                   JSR         @R10
    00001890 54EB                   MOV.L       @(44,R14),R4
    00001892 2802                   MOV.L       R0,@R8
      simplexC.c  1000            for(j=0;j<modelToSolve->nConstraints;j++)
    00001894 A00A                   BRA         L1094
    00001896 64B3                   MOV         R11,R4
    00001898              L1095:                            
      simplexC.c  1001            {
      simplexC.c  1002                ex.ajVector[i][j]=modelToSolve->constraints[j][i];
    00001898 50DC                   MOV.L       @(48,R13),R0
    0000189A 6543                   MOV         R4,R5
    0000189C 02CE                   MOV.L       @(R0,R12),R2
    0000189E 4508                   SHLL2       R5
    000018A0 50E4                   MOV.L       @(16,R14),R0
    000018A2 7401                   ADD         #1,R4
    000018A4 005E                   MOV.L       @(R0,R5),R0
    000018A6 325C                   ADD         R5,R2
    000018A8 03CE                   MOV.L       @(R0,R12),R3
    000018AA 2232                   MOV.L       R3,@R2
    000018AC              L1094:                            
    000018AC 52EB                   MOV.L       @(44,R14),R2
    000018AE 3423                   CMP/GE      R2,R4
    000018B0 8BF2                   BF          L1095
    000018B2 7901                   ADD         #1,R9
    000018B4              L1092:                            
    000018B4 52E7                   MOV.L       @(28,R14),R2
    000018B6 3923                   CMP/GE      R2,R9
    000018B8 8BE4                   BF          L1093
      simplexC.c  1003            }
      simplexC.c  1004        }
      simplexC.c  1005        modelToSolve->ajVector=ex.ajVector;
    000018BA E050                   MOV         #80,R0
    000018BC 51DC                   MOV.L       @(48,R13),R1
    000018BE 0E16                   MOV.L       R1,@(R0,R14)
      simplexC.c  1006        modelToSolve->funcObjtValues[modelToSolve->nVariables]=ex.initialProblemStatement->funcObjtValues[ex.i
                         +nitialProblemStatement->nVariables];
    000018C0 53E7                   MOV.L       @(28,R14),R3
    000018C2 E048                   MOV         #72,R0
    000018C4 54D1                   MOV.L       @(4,R13),R4
    000018C6 4308                   SHLL2       R3
    000018C8 00EE                   MOV.L       @(R0,R14),R0
    000018CA 330C                   ADD         R0,R3
    000018CC 5247                   MOV.L       @(28,R4),R2
    000018CE E048                   MOV         #72,R0
    000018D0 004E                   MOV.L       @(R0,R4),R0
    000018D2 4208                   SHLL2       R2
    000018D4 012E                   MOV.L       @(R0,R2),R1
      simplexC.c  1007        modelToSolve->modelType=TYPE_SOLVE;
    000018D6 E202                   MOV         #2,R2
    000018D8 2312                   MOV.L       R1,@R3
      simplexC.c  1008        ex.canonicalStatement=modelToSolve;
      simplexC.c  1009        ex.nVariables=modelToSolve->nVariables;
      simplexC.c  1010        return 0;
    000018DA E000                   MOV         #0,R0
    000018DC 1E21                   MOV.L       R2,@(4,R14)
    000018DE 1DE2                   MOV.L       R14,@(8,R13)
    000018E0 53E7                   MOV.L       @(28,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018E2 1D3B                   MOV.L       R3,@(44,R13)
      simplexC.c  1011    }
    000018E4 4F26                   LDS.L       @R15+,PR
    000018E6 68F6                   MOV.L       @R15+,R8
    000018E8 69F6                   MOV.L       @R15+,R9
    000018EA 6AF6                   MOV.L       @R15+,R10
    000018EC 6BF6                   MOV.L       @R15+,R11
    000018EE 6CF6                   MOV.L       @R15+,R12
    000018F0 6DF6                   MOV.L       @R15+,R13
    000018F2 000B                   RTS
    000018F4 6EF6                   MOV.L       @R15+,R14
    000018F6              L1146:                            
    000018F6 0000                   .DATA.W     0
    000018F8 <00000000>             .DATA.L     _malloc
    000018FC 3F800000               .DATA.L     H'3F800000
    00001900 BF800000               .DATA.L     H'BF800000
      simplexC.c  1012    
      simplexC.c  1013    struct problemStatement* createProblemStatementToDebug2Fases()
    00001904              _createProblemStatementToDebug2Fases:
                                                           ; function: createProblemStatementToDebug2Fases
                                                           ; frame size=28
    00001904 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1014    {
      simplexC.c  1015        struct problemStatement *res;
      simplexC.c  1016        int nConstraints;
      simplexC.c  1017        int nVariables;
      simplexC.c  1018        nConstraints=3;
    00001906 E303                   MOV         #3,R3
    00001908 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1019        nVariables=2;
    0000190A E202                   MOV         #2,R2
    0000190C 2FC6                   MOV.L       R12,@-R15
    0000190E 2F86                   MOV.L       R8,@-R15
    00001910 4F22                   STS.L       PR,@-R15
    00001912 7FF8                   ADD         #-8,R15
    00001914 1F31                   MOV.L       R3,@(4,R15)
    00001916 2F22                   MOV.L       R2,@R15
      simplexC.c  1020        res= malloc(sizeof(struct problemStatement));
    00001918 D3B8                   MOV.L       L1147,R3   ; _malloc
    0000191A 430B                   JSR         @R3
    0000191C E454                   MOV         #84,R4
    0000191E 6E03                   MOV         R0,R14
      simplexC.c  1021        res->modelType=TYPE_INPUT;
      simplexC.c  1022        res->nConstraints=nConstraints;
      simplexC.c  1023        res->nVariables=nVariables;
      simplexC.c  1024        res->nVariables2fases=1;
      simplexC.c  1025        res ->nVariablesSlope=2;
      simplexC.c  1026        res->problemType=TYPE_LP;
      simplexC.c  1027        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00001920 DCB7                   MOV.L       L1147+4,R12; _calloc
    00001922 E504                   MOV         #4,R5
    00001924 ED01                   MOV         #1,R13
    00001926 1ED1                   MOV.L       R13,@(4,R14)
    00001928 52F1                   MOV.L       @(4,R15),R2
    0000192A 1E2B                   MOV.L       R2,@(44,R14)
    0000192C 63F2                   MOV.L       @R15,R3
    0000192E 1E37                   MOV.L       R3,@(28,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001930 1ED9                   MOV.L       R13,@(36,R14)
    00001932 E302                   MOV         #2,R3
    00001934 1E38                   MOV.L       R3,@(32,R14)
    00001936 2ED2                   MOV.L       R13,@R14
    00001938 4C0B                   JSR         @R12
    0000193A E403                   MOV         #3,R4
    0000193C E148                   MOV         #72,R1
    0000193E 31EC                   ADD         R14,R1
    00001940 2102                   MOV.L       R0,@R1
      simplexC.c  1028        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00001942 E504                   MOV         #4,R5
    00001944 4C0B                   JSR         @R12
    00001946 E402                   MOV         #2,R4
    00001948 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1029        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    0000194A E504                   MOV         #4,R5
    0000194C 4C0B                   JSR         @R12
    0000194E E402                   MOV         #2,R4
    00001950 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1030        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00001952 E504                   MOV         #4,R5
    00001954 4C0B                   JSR         @R12
    00001956 E402                   MOV         #2,R4
    00001958 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1031        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    0000195A E504                   MOV         #4,R5
    0000195C 4C0B                   JSR         @R12
    0000195E E403                   MOV         #3,R4
    00001960 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1032        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
    00001962 6303                   MOV         R0,R3
    00001964 23D2                   MOV.L       R13,@R3
      simplexC.c  1033        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1034        res->inequalitySigns[2]=INE_EQUAL;
      simplexC.c  1035        res->funcObjectivePurpose=FUNC_MAXIMIZE;
    00001966 E044                   MOV         #68,R0
    00001968 52E6                   MOV.L       @(24,R14),R2
      simplexC.c  1036        res->funcObjtValues[0]=3;
      simplexC.c  1037        res->funcObjtValues[1]=5;
      simplexC.c  1038        res->funcObjtValues[2]=0;
      simplexC.c  1039        res->constraints=calloc(nConstraints,sizeof(float));
    0000196A E504                   MOV         #4,R5
    0000196C 12D1                   MOV.L       R13,@(4,R2)
    0000196E E200                   MOV         #0,R2
    00001970 53E6                   MOV.L       @(24,R14),R3
    00001972 1322                   MOV.L       R2,@(8,R3)
    00001974 0ED6                   MOV.L       R13,@(R0,R14)
    00001976 E048                   MOV         #72,R0
    00001978 D2A2                   MOV.L       L1147+8,R2 ; H'40400000
    0000197A 03EE                   MOV.L       @(R0,R14),R3
    0000197C 2322                   MOV.L       R2,@R3
    0000197E 03EE                   MOV.L       @(R0,R14),R3
    00001980 D2A1                   MOV.L       L1147+12,R2; H'40A00000
    00001982 1321                   MOV.L       R2,@(4,R3)
    00001984 03EE                   MOV.L       @(R0,R14),R3
    00001986 E200                   MOV         #0,R2
    00001988 1322                   MOV.L       R2,@(8,R3)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000198A 4C0B                   JSR         @R12
    0000198C E403                   MOV         #3,R4
      simplexC.c  1040        res->constraints[0]=calloc(nVariables,sizeof(float));
    0000198E 6803                   MOV         R0,R8
    00001990 1E04                   MOV.L       R0,@(16,R14)
    00001992 E504                   MOV         #4,R5
    00001994 4C0B                   JSR         @R12
    00001996 E402                   MOV         #2,R4
    00001998 2802                   MOV.L       R0,@R8
      simplexC.c  1041        res->constraints[1]=calloc(nVariables,sizeof(float));
    0000199A E504                   MOV         #4,R5
    0000199C 58E4                   MOV.L       @(16,R14),R8
    0000199E 7804                   ADD         #4,R8
    000019A0 4C0B                   JSR         @R12
    000019A2 E402                   MOV         #2,R4
    000019A4 2802                   MOV.L       R0,@R8
      simplexC.c  1042        res->constraints[2]=calloc(nVariables,sizeof(float));
    000019A6 E504                   MOV         #4,R5
    000019A8 58E4                   MOV.L       @(16,R14),R8
    000019AA 7808                   ADD         #8,R8
    000019AC 4C0B                   JSR         @R12
    000019AE E402                   MOV         #2,R4
    000019B0 2802                   MOV.L       R0,@R8
      simplexC.c  1043        res->constraints[0][0]=1;
      simplexC.c  1044        res->constraints[0][1]=0;
      simplexC.c  1045        res->constraints[1][0]=0;
      simplexC.c  1046        res->constraints[1][1]=2;
      simplexC.c  1047        res->constraints[2][0]=3;
      simplexC.c  1048        res->constraints[2][1]=2;
      simplexC.c  1049        res->rightValues=calloc(nConstraints,sizeof(float));
    000019B2 E504                   MOV         #4,R5
    000019B4 D195                   MOV.L       L1147+16,R1; H'3F800000
    000019B6 53E4                   MOV.L       @(16,R14),R3
    000019B8 6232                   MOV.L       @R3,R2
    000019BA 2212                   MOV.L       R1,@R2
    000019BC 53E4                   MOV.L       @(16,R14),R3
    000019BE E100                   MOV         #0,R1
    000019C0 6232                   MOV.L       @R3,R2
    000019C2 1211                   MOV.L       R1,@(4,R2)
    000019C4 53E4                   MOV.L       @(16,R14),R3
    000019C6 5231                   MOV.L       @(4,R3),R2
    000019C8 2212                   MOV.L       R1,@R2
    000019CA 53E4                   MOV.L       @(16,R14),R3
    000019CC D190                   MOV.L       L1147+20,R1; H'40000000
    000019CE 5231                   MOV.L       @(4,R3),R2
    000019D0 1211                   MOV.L       R1,@(4,R2)
    000019D2 53E4                   MOV.L       @(16,R14),R3
    000019D4 D18B                   MOV.L       L1147+8,R1 ; H'40400000
    000019D6 5232                   MOV.L       @(8,R3),R2
    000019D8 2212                   MOV.L       R1,@R2
    000019DA 4118                   SHLL8       R1
    000019DC 53E4                   MOV.L       @(16,R14),R3
    000019DE 5232                   MOV.L       @(8,R3),R2
    000019E0 1211                   MOV.L       R1,@(4,R2)
    000019E2 4C0B                   JSR         @R12
    000019E4 E403                   MOV         #3,R4
      simplexC.c  1050        res->rightValues[0]=4;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019E6 6303                   MOV         R0,R3
    000019E8 D28A                   MOV.L       L1147+24,R2; H'40800000
    000019EA 1E05                   MOV.L       R0,@(20,R14)
    000019EC 2322                   MOV.L       R2,@R3
      simplexC.c  1051        res->rightValues[1]=12;
      simplexC.c  1052        res->rightValues[2]=18;
      simplexC.c  1053        res->nVariables2fases=1;
      simplexC.c  1054        res->is2fasesNeeded=1;
      simplexC.c  1055    
      simplexC.c  1056        return res;
    000019EE 60E3                   MOV         R14,R0
    000019F0 53E5                   MOV.L       @(20,R14),R3
    000019F2 D289                   MOV.L       L1147+28,R2; H'41400000
    000019F4 1321                   MOV.L       R2,@(4,R3)
    000019F6 53E5                   MOV.L       @(20,R14),R3
    000019F8 D288                   MOV.L       L1147+32,R2; H'41900000
    000019FA 1322                   MOV.L       R2,@(8,R3)
    000019FC 1ED9                   MOV.L       R13,@(36,R14)
    000019FE 1ED2                   MOV.L       R13,@(8,R14)
      simplexC.c  1057    }
    00001A00 7F08                   ADD         #8,R15
    00001A02 4F26                   LDS.L       @R15+,PR
    00001A04 68F6                   MOV.L       @R15+,R8
    00001A06 6CF6                   MOV.L       @R15+,R12
    00001A08 6DF6                   MOV.L       @R15+,R13
    00001A0A 000B                   RTS
    00001A0C 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1058    
      simplexC.c  1059    struct problemStatement* createProblemStatementToDebug()
    00001A0E              _createProblemStatementToDebug:  ; function: createProblemStatementToDebug
                                                           ; frame size=32
      simplexC.c  1060    {
      simplexC.c  1061        struct problemStatement *res;
      simplexC.c  1062        int nConstraints;
      simplexC.c  1063        int nVariables;
      simplexC.c  1064        nConstraints=3;
    00001A0E E303                   MOV         #3,R3
    00001A10 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1065        nVariables=2;
    00001A12 E202                   MOV         #2,R2
    00001A14 2FD6                   MOV.L       R13,@-R15
    00001A16 2FC6                   MOV.L       R12,@-R15
    00001A18 2FB6                   MOV.L       R11,@-R15
    00001A1A 2F86                   MOV.L       R8,@-R15
    00001A1C 4F22                   STS.L       PR,@-R15
    00001A1E 7FF8                   ADD         #-8,R15
    00001A20 1F31                   MOV.L       R3,@(4,R15)
    00001A22 2F22                   MOV.L       R2,@R15
      simplexC.c  1066        res= malloc(sizeof(struct problemStatement));
    00001A24 D375                   MOV.L       L1147,R3   ; _malloc
    00001A26 430B                   JSR         @R3
    00001A28 E454                   MOV         #84,R4
    00001A2A 6E03                   MOV         R0,R14
      simplexC.c  1067        res->modelType=TYPE_INPUT;
      simplexC.c  1068        res->nConstraints=nConstraints;
      simplexC.c  1069        res->nVariables=nVariables;
      simplexC.c  1070        res->nVariables2fases=0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1071        res ->nVariablesSlope=3;
      simplexC.c  1072        res->problemType=TYPE_LP;
      simplexC.c  1073        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00001A2C DC74                   MOV.L       L1147+4,R12; _calloc
    00001A2E E504                   MOV         #4,R5
    00001A30 ED01                   MOV         #1,R13
    00001A32 EB00                   MOV         #0,R11
    00001A34 1ED1                   MOV.L       R13,@(4,R14)
    00001A36 52F1                   MOV.L       @(4,R15),R2
    00001A38 1E2B                   MOV.L       R2,@(44,R14)
    00001A3A 63F2                   MOV.L       @R15,R3
    00001A3C 1E37                   MOV.L       R3,@(28,R14)
    00001A3E E303                   MOV         #3,R3
    00001A40 1EB9                   MOV.L       R11,@(36,R14)
    00001A42 1E38                   MOV.L       R3,@(32,R14)
    00001A44 2ED2                   MOV.L       R13,@R14
    00001A46 4C0B                   JSR         @R12
    00001A48 6433                   MOV         R3,R4
    00001A4A E148                   MOV         #72,R1
    00001A4C 31EC                   ADD         R14,R1
      simplexC.c  1074        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00001A4E E504                   MOV         #4,R5
    00001A50 2102                   MOV.L       R0,@R1
    00001A52 4C0B                   JSR         @R12
    00001A54 E402                   MOV         #2,R4
      simplexC.c  1075        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    00001A56 E504                   MOV         #4,R5
    00001A58 1E0C                   MOV.L       R0,@(48,R14)
    00001A5A 4C0B                   JSR         @R12
    00001A5C E402                   MOV         #2,R4
      simplexC.c  1076        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00001A5E E504                   MOV         #4,R5
    00001A60 1E0D                   MOV.L       R0,@(52,R14)
    00001A62 4C0B                   JSR         @R12
    00001A64 E402                   MOV         #2,R4
      simplexC.c  1077        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    00001A66 E504                   MOV         #4,R5
    00001A68 1E0E                   MOV.L       R0,@(56,R14)
    00001A6A 4C0B                   JSR         @R12
    00001A6C E403                   MOV         #3,R4
      simplexC.c  1078        res->funcObjectivePurpose=FUNC_MINIMIZE;
      simplexC.c  1079        res->funcObjtValues[0]=-4;
      simplexC.c  1080        res->funcObjtValues[1]=-6;
      simplexC.c  1081        res->funcObjtValues[2]=0;
      simplexC.c  1082        res->constraints=calloc(nConstraints,sizeof(float));
    00001A6E E504                   MOV         #4,R5
    00001A70 1E06                   MOV.L       R0,@(24,R14)
    00001A72 E044                   MOV         #68,R0
    00001A74 D26A                   MOV.L       L1147+36,R2; H'C0800000
    00001A76 0EB6                   MOV.L       R11,@(R0,R14)
    00001A78 E048                   MOV         #72,R0
    00001A7A 03EE                   MOV.L       @(R0,R14),R3
    00001A7C 2322                   MOV.L       R2,@R3
    00001A7E 03EE                   MOV.L       @(R0,R14),R3
    00001A80 D268                   MOV.L       L1147+40,R2; H'C0C00000
    00001A82 1321                   MOV.L       R2,@(4,R3)
    00001A84 03EE                   MOV.L       @(R0,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A86 62B3                   MOV         R11,R2
    00001A88 13B2                   MOV.L       R11,@(8,R3)
    00001A8A 4C0B                   JSR         @R12
    00001A8C E403                   MOV         #3,R4
      simplexC.c  1083        res->constraints[0]=calloc(nVariables,sizeof(float));
    00001A8E 6803                   MOV         R0,R8
    00001A90 1E04                   MOV.L       R0,@(16,R14)
    00001A92 E504                   MOV         #4,R5
    00001A94 4C0B                   JSR         @R12
    00001A96 E402                   MOV         #2,R4
    00001A98 2802                   MOV.L       R0,@R8
      simplexC.c  1084        res->constraints[1]=calloc(nVariables,sizeof(float));
    00001A9A E504                   MOV         #4,R5
    00001A9C 58E4                   MOV.L       @(16,R14),R8
    00001A9E 7804                   ADD         #4,R8
    00001AA0 4C0B                   JSR         @R12
    00001AA2 E402                   MOV         #2,R4
    00001AA4 2802                   MOV.L       R0,@R8
      simplexC.c  1085        res->constraints[2]=calloc(nVariables,sizeof(float));
    00001AA6 E504                   MOV         #4,R5
    00001AA8 58E4                   MOV.L       @(16,R14),R8
    00001AAA 7808                   ADD         #8,R8
    00001AAC 4C0B                   JSR         @R12
    00001AAE E402                   MOV         #2,R4
    00001AB0 2802                   MOV.L       R0,@R8
      simplexC.c  1086        res->constraints[0][0]=-1;
      simplexC.c  1087        res->constraints[0][1]=1;
      simplexC.c  1088        res->constraints[1][0]=1;
      simplexC.c  1089        res->constraints[1][1]=1;
      simplexC.c  1090        res->constraints[2][0]=2;
      simplexC.c  1091        res->constraints[2][1]=5;
      simplexC.c  1092        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1093        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1094        res->inequalitySigns[2]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1095        res->rightValues=calloc(nConstraints,sizeof(float));
    00001AB2 E504                   MOV         #4,R5
    00001AB4 D15C                   MOV.L       L1147+44,R1; H'BF800000
    00001AB6 53E4                   MOV.L       @(16,R14),R3
    00001AB8 6232                   MOV.L       @R3,R2
    00001ABA 2212                   MOV.L       R1,@R2
    00001ABC 53E4                   MOV.L       @(16,R14),R3
    00001ABE 6232                   MOV.L       @R3,R2
    00001AC0 D152                   MOV.L       L1147+16,R1; H'3F800000
    00001AC2 1211                   MOV.L       R1,@(4,R2)
    00001AC4 53E4                   MOV.L       @(16,R14),R3
    00001AC6 5231                   MOV.L       @(4,R3),R2
    00001AC8 2212                   MOV.L       R1,@R2
    00001ACA 53E4                   MOV.L       @(16,R14),R3
    00001ACC 5231                   MOV.L       @(4,R3),R2
    00001ACE 1211                   MOV.L       R1,@(4,R2)
    00001AD0 53E4                   MOV.L       @(16,R14),R3
    00001AD2 5232                   MOV.L       @(8,R3),R2
    00001AD4 D14E                   MOV.L       L1147+20,R1; H'40000000
    00001AD6 2212                   MOV.L       R1,@R2
    00001AD8 53E4                   MOV.L       @(16,R14),R3
    00001ADA 5232                   MOV.L       @(8,R3),R2
    00001ADC D14A                   MOV.L       L1147+12,R1; H'40A00000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001ADE 1211                   MOV.L       R1,@(4,R2)
    00001AE0 53E6                   MOV.L       @(24,R14),R3
    00001AE2 23D2                   MOV.L       R13,@R3
    00001AE4 52E6                   MOV.L       @(24,R14),R2
    00001AE6 12D1                   MOV.L       R13,@(4,R2)
    00001AE8 53E6                   MOV.L       @(24,R14),R3
    00001AEA 13D2                   MOV.L       R13,@(8,R3)
    00001AEC 4C0B                   JSR         @R12
    00001AEE E403                   MOV         #3,R4
    00001AF0 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1096        res->rightValues[0]=11;
    00001AF2 6203                   MOV         R0,R2
    00001AF4 D34D                   MOV.L       L1147+48,R3; H'41300000
      simplexC.c  1097        res->rightValues[1]=27;
      simplexC.c  1098        res->rightValues[2]=90;
      simplexC.c  1099        res->nVariables2fases=0;
      simplexC.c  1100        res->is2fasesNeeded=0;
      simplexC.c  1101    
      simplexC.c  1102        return res;
    00001AF6 60E3                   MOV         R14,R0
    00001AF8 2232                   MOV.L       R3,@R2
    00001AFA 52E5                   MOV.L       @(20,R14),R2
    00001AFC D34C                   MOV.L       L1147+52,R3; H'41D80000
    00001AFE 1231                   MOV.L       R3,@(4,R2)
    00001B00 52E5                   MOV.L       @(20,R14),R2
    00001B02 D34C                   MOV.L       L1147+56,R3; H'42B40000
    00001B04 1232                   MOV.L       R3,@(8,R2)
    00001B06 1EB9                   MOV.L       R11,@(36,R14)
    00001B08 1EB2                   MOV.L       R11,@(8,R14)
      simplexC.c  1103    }
    00001B0A 7F08                   ADD         #8,R15
    00001B0C 4F26                   LDS.L       @R15+,PR
    00001B0E 68F6                   MOV.L       @R15+,R8
    00001B10 6BF6                   MOV.L       @R15+,R11
    00001B12 6CF6                   MOV.L       @R15+,R12
    00001B14 6DF6                   MOV.L       @R15+,R13
    00001B16 000B                   RTS
    00001B18 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1104    
      simplexC.c  1105    struct iteration *convertToSecondPhase(int nodeId, int firsItId)
    00001B1A              _convertToSecondPhase:           ; function: convertToSecondPhase
                                                           ; frame size=32
    00001B1A 2FE6                   MOV.L       R14,@-R15
    00001B1C 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1106    {
      simplexC.c  1107        int i,j;
      simplexC.c  1108        struct iteration *it,*originalIt;
      simplexC.c  1109        originalIt=ex.nodes.its[firsItId];
    00001B1E 6D53                   MOV         R5,R13
      simplexC.c  1110        it = malloc(sizeof(struct iteration));
    00001B20 D336                   MOV.L       L1147,R3   ; _malloc
    00001B22 4D08                   SHLL2       R13
    00001B24 2FC6                   MOV.L       R12,@-R15
    00001B26 2FA6                   MOV.L       R10,@-R15
    00001B28 2F96                   MOV.L       R9,@-R15
    00001B2A 2F86                   MOV.L       R8,@-R15
    00001B2C 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B2E D942                   MOV.L       L1147+60,R9; _ex
    00001B30 5095                   MOV.L       @(20,R9),R0
    00001B32 0DDE                   MOV.L       @(R0,R13),R13
    00001B34 430B                   JSR         @R3
    00001B36 E444                   MOV         #68,R4
      simplexC.c  1111        it->BinvSize=originalIt->BinvSize;
    00001B38 52D8                   MOV.L       @(32,R13),R2
      simplexC.c  1112        it->Binv=calloc(it->BinvSize,sizeof(float));
    00001B3A E504                   MOV         #4,R5
    00001B3C D830                   MOV.L       L1147+4,R8 ; _calloc
    00001B3E 6E03                   MOV         R0,R14
    00001B40 1E28                   MOV.L       R2,@(32,R14)
    00001B42 480B                   JSR         @R8
    00001B44 6423                   MOV         R2,R4
      simplexC.c  1113        for(i=0;i<it->BinvSize;i++)
    00001B46 EA00                   MOV         #0,R10
    00001B48 1E07                   MOV.L       R0,@(28,R14)
    00001B4A A01C                   BRA         L1099
    00001B4C 6CA3                   MOV         R10,R12
    00001B4E              L1100:                            
      simplexC.c  1114        {
      simplexC.c  1115            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    00001B4E 62C3                   MOV         R12,R2
    00001B50 50E7                   MOV.L       @(28,R14),R0
    00001B52 E504                   MOV         #4,R5
    00001B54 4208                   SHLL2       R2
    00001B56 302C                   ADD         R2,R0
    00001B58 2F06                   MOV.L       R0,@-R15
    00001B5A 480B                   JSR         @R8
    00001B5C 54E8                   MOV.L       @(32,R14),R4
      simplexC.c  1116            for(j=0;j<it->BinvSize;j++)
    00001B5E 64A3                   MOV         R10,R4
    00001B60 63F6                   MOV.L       @R15+,R3
    00001B62 61C3                   MOV         R12,R1
    00001B64 2302                   MOV.L       R0,@R3
    00001B66 A00A                   BRA         L1101
    00001B68 4108                   SHLL2       R1
    00001B6A              L1102:                            
      simplexC.c  1117            {
      simplexC.c  1118                it->Binv[i][j]=originalIt->Binv[i][j];
    00001B6A 6543                   MOV         R4,R5
    00001B6C 50E7                   MOV.L       @(28,R14),R0
    00001B6E 4508                   SHLL2       R5
    00001B70 031E                   MOV.L       @(R0,R1),R3
    00001B72 7401                   ADD         #1,R4
    00001B74 50D7                   MOV.L       @(28,R13),R0
    00001B76 335C                   ADD         R5,R3
    00001B78 001E                   MOV.L       @(R0,R1),R0
    00001B7A 025E                   MOV.L       @(R0,R5),R2
    00001B7C 2322                   MOV.L       R2,@R3
    00001B7E              L1101:                            
    00001B7E 53E8                   MOV.L       @(32,R14),R3
    00001B80 3433                   CMP/GE      R3,R4
    00001B82 8BF2                   BF          L1102
    00001B84 7C01                   ADD         #1,R12
    00001B86              L1099:                            
    00001B86 53E8                   MOV.L       @(32,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B88 3C33                   CMP/GE      R3,R12
    00001B8A 8BE0                   BF          L1100
      simplexC.c  1119            }
      simplexC.c  1120            
      simplexC.c  1121        }
      simplexC.c  1122        it->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    00001B8C E504                   MOV         #4,R5
    00001B8E 480B                   JSR         @R8
    00001B90 549B                   MOV.L       @(44,R9),R4
      simplexC.c  1123        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    00001B92 E504                   MOV         #4,R5
    00001B94 1E01                   MOV.L       R0,@(4,R14)
    00001B96 480B                   JSR         @R8
    00001B98 54E8                   MOV.L       @(32,R14),R4
    00001B9A 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c  1124        for(i=0;i<it->BinvSize;i++)
    00001B9C A008                   BRA         L1103
    00001B9E 64A3                   MOV         R10,R4
    00001BA0              L1104:                            
      simplexC.c  1125        {
      simplexC.c  1126            it->idByRowOfBasicVarsInBInv[i]=originalIt->idByRowOfBasicVarsInBInv[i];
    00001BA0 53E2                   MOV.L       @(8,R14),R3
    00001BA2 6543                   MOV         R4,R5
    00001BA4 50D2                   MOV.L       @(8,R13),R0
    00001BA6 4508                   SHLL2       R5
    00001BA8 025E                   MOV.L       @(R0,R5),R2
    00001BAA 7401                   ADD         #1,R4
    00001BAC 335C                   ADD         R5,R3
    00001BAE 2322                   MOV.L       R2,@R3
    00001BB0              L1103:                            
    00001BB0 52E8                   MOV.L       @(32,R14),R2
    00001BB2 3423                   CMP/GE      R2,R4
    00001BB4 8BF4                   BF          L1104
      simplexC.c  1127        }
      simplexC.c  1128        for(i=0;i<ex.nVariables;i++)
    00001BB6 A008                   BRA         L1105
    00001BB8 64A3                   MOV         R10,R4
    00001BBA              L1106:                            
      simplexC.c  1129        {
      simplexC.c  1130            it->idBasicVariables[i]=originalIt->idBasicVariables[i];
    00001BBA 6543                   MOV         R4,R5
    00001BBC 52E1                   MOV.L       @(4,R14),R2
    00001BBE 4508                   SHLL2       R5
    00001BC0 50D1                   MOV.L       @(4,R13),R0
    00001BC2 7401                   ADD         #1,R4
    00001BC4 035E                   MOV.L       @(R0,R5),R3
    00001BC6 325C                   ADD         R5,R2
    00001BC8 2232                   MOV.L       R3,@R2
    00001BCA              L1105:                            
    00001BCA 539B                   MOV.L       @(44,R9),R3
    00001BCC 3433                   CMP/GE      R3,R4
    00001BCE 8BF4                   BF          L1106
      simplexC.c  1131        }
      simplexC.c  1132        return it;
      simplexC.c  1133    }
    00001BD0 4F26                   LDS.L       @R15+,PR
    00001BD2 60E3                   MOV         R14,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BD4 68F6                   MOV.L       @R15+,R8
    00001BD6 69F6                   MOV.L       @R15+,R9
    00001BD8 6AF6                   MOV.L       @R15+,R10
    00001BDA 6CF6                   MOV.L       @R15+,R12
    00001BDC 6DF6                   MOV.L       @R15+,R13
    00001BDE 000B                   RTS
    00001BE0 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1134    
      simplexC.c  1135    int solveSimplexLPOneFase(int nodeId, int firsItId)
    00001BE2              _solveSimplexLPOneFase:          ; function: solveSimplexLPOneFase
                                                           ; frame size=20
      simplexC.c  1136    {
      simplexC.c  1137        int itId, nId;
      simplexC.c  1138        float zSol;
      simplexC.c  1139        itId=firsItId;
      simplexC.c  1140        ex.nodes.its[itId]->numIteration=itId;
    00001BE2 6353                   MOV         R5,R3
    00001BE4 2FE6                   MOV.L       R14,@-R15
    00001BE6 4308                   SHLL2       R3
    00001BE8 2FD6                   MOV.L       R13,@-R15
    00001BEA 6D53                   MOV         R5,R13
    00001BEC DE12                   MOV.L       L1147+60,R14; _ex
    00001BEE 2FC6                   MOV.L       R12,@-R15
    00001BF0 2FB6                   MOV.L       R11,@-R15
    00001BF2 4F22                   STS.L       PR,@-R15
    00001BF4 50E5                   MOV.L       @(20,R14),R0
    00001BF6 023E                   MOV.L       @(R0,R3),R2
      simplexC.c  1141        while(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1)
    00001BF8 A035                   BRA         L1108
    00001BFA 2252                   MOV.L       R5,@R2
    00001BFC              L1147:                            
    00001BFC <00000000>             .DATA.L     _malloc
    00001C00 <00000000>             .DATA.L     _calloc
    00001C04 40400000               .DATA.L     H'40400000
    00001C08 40A00000               .DATA.L     H'40A00000
    00001C0C 3F800000               .DATA.L     H'3F800000
    00001C10 40000000               .DATA.L     H'40000000
    00001C14 40800000               .DATA.L     H'40800000
    00001C18 41400000               .DATA.L     H'41400000
    00001C1C 41900000               .DATA.L     H'41900000
    00001C20 C0800000               .DATA.L     H'C0800000
    00001C24 C0C00000               .DATA.L     H'C0C00000
    00001C28 BF800000               .DATA.L     H'BF800000
    00001C2C 41300000               .DATA.L     H'41300000
    00001C30 41D80000               .DATA.L     H'41D80000
    00001C34 42B40000               .DATA.L     H'42B40000
    00001C38 <00000000>             .DATA.L     _ex
    00001C3C              L1109:                            
      simplexC.c  1142        {
      simplexC.c  1143            calculateIteration(ex.nodes.its[itId]);
    00001C3C 50E5                   MOV.L       @(20,R14),R0
    00001C3E 6CD3                   MOV         R13,R12
    00001C40 D247                   MOV.L       L1148+4,R2 ; _calculateIteration
    00001C42 4C08                   SHLL2       R12
    00001C44 420B                   JSR         @R2
    00001C46 04CE                   MOV.L       @(R0,R12),R4
      simplexC.c  1144            if(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1){




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C48 50E5                   MOV.L       @(20,R14),R0
    00001C4A 04CE                   MOV.L       @(R0,R12),R4
    00001C4C 5044                   MOV.L       @(16,R4),R0
    00001C4E 88FF                   CMP/EQ      #-1,R0
    00001C50 8909                   BT          L1108
    00001C52 5045                   MOV.L       @(20,R4),R0
    00001C54 88FF                   CMP/EQ      #-1,R0
    00001C56 8906                   BT          L1108
      simplexC.c  1145                ex.nodes.its[itId+1]=createNewIteration(ex.nodes.its[itId]);
    00001C58 5BE5                   MOV.L       @(20,R14),R11
    00001C5A 3BCC                   ADD         R12,R11
    00001C5C D341                   MOV.L       L1148+8,R3 ; _createNewIteration
    00001C5E 430B                   JSR         @R3
    00001C60 64B2                   MOV.L       @R11,R4
      simplexC.c  1146                zSol= ex.nodes.its[itId]->zSol;
      simplexC.c  1147                    itId++;
    00001C62 7D01                   ADD         #1,R13
    00001C64 1B01                   MOV.L       R0,@(4,R11)
    00001C66              L1108:                            
    00001C66 64D3                   MOV         R13,R4
    00001C68 50E5                   MOV.L       @(20,R14),R0
    00001C6A 4408                   SHLL2       R4
    00001C6C 044E                   MOV.L       @(R0,R4),R4
    00001C6E 5044                   MOV.L       @(16,R4),R0
    00001C70 88FF                   CMP/EQ      #-1,R0
    00001C72 8902                   BT          L1111
    00001C74 5045                   MOV.L       @(20,R4),R0
    00001C76 88FF                   CMP/EQ      #-1,R0
    00001C78 8BE0                   BF          L1109
    00001C7A              L1111:                            
      simplexC.c  1148            }
      simplexC.c  1149                
      simplexC.c  1150        }
      simplexC.c  1151        return itId;
    00001C7A 60D3                   MOV         R13,R0
      simplexC.c  1152    }
    00001C7C 4F26                   LDS.L       @R15+,PR
    00001C7E 6BF6                   MOV.L       @R15+,R11
    00001C80 6CF6                   MOV.L       @R15+,R12
    00001C82 6DF6                   MOV.L       @R15+,R13
    00001C84 000B                   RTS
    00001C86 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1153    
      simplexC.c  1154    int solveSimplexLP(int nodeId)
    00001C88              _solveSimplexLP:                 ; function: solveSimplexLP
                                                           ; frame size=164
                                                           ; used runtime library name:
                                                           ; __stod
    00001C88 2FE6                   MOV.L       R14,@-R15
    00001C8A 2FD6                   MOV.L       R13,@-R15
    00001C8C 2FC6                   MOV.L       R12,@-R15
    00001C8E 6D43                   MOV         R4,R13
      simplexC.c  1155    {
      simplexC.c  1156        int itId,lastItId;
      simplexC.c  1157        char strSol[128];
      simplexC.c  1158        itId=0;
      simplexC.c  1159        ex.nodes.id=nodeId;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C90 DE35                   MOV.L       L1148+12,R14; _ex
    00001C92 2FB6                   MOV.L       R11,@-R15
    00001C94 2F86                   MOV.L       R8,@-R15
    00001C96 4F22                   STS.L       PR,@-R15
      simplexC.c  1160        ex.nodes.its=malloc(10*sizeof(struct iteration*));
    00001C98 D334                   MOV.L       L1148+16,R3; _malloc
    00001C9A 7F80                   ADD         #-128,R15
    00001C9C 1E43                   MOV.L       R4,@(12,R14)
    00001C9E 430B                   JSR         @R3
    00001CA0 E428                   MOV         #40,R4
      simplexC.c  1161        ex.nodes.its[0]=modelToIteration(ex.canonicalStatement);
    00001CA2 6803                   MOV         R0,R8
    00001CA4 D332                   MOV.L       L1148+20,R3; _modelToIteration
    00001CA6 1E05                   MOV.L       R0,@(20,R14)
    00001CA8 430B                   JSR         @R3
    00001CAA 54E2                   MOV.L       @(8,R14),R4
    00001CAC 2802                   MOV.L       R0,@R8
      simplexC.c  1162        if(ex.canonicalStatement->is2fasesActive)
    00001CAE 53E2                   MOV.L       @(8,R14),R3
    00001CB0 5233                   MOV.L       @(12,R3),R2
    00001CB2 2228                   TST         R2,R2
    00001CB4 8917                   BT          L1113
      simplexC.c  1163        {
      simplexC.c  1164            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00001CB6 E500                   MOV         #0,R5
    00001CB8 BF93                   BSR         _solveSimplexLPOneFase
    00001CBA 64D3                   MOV         R13,R4
      simplexC.c  1165            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;//CAMBIAR
    00001CBC 52E2                   MOV.L       @(8,R14),R2
    00001CBE 6B03                   MOV         R0,R11
    00001CC0 E044                   MOV         #68,R0
      simplexC.c  1166            //NO SE SI HACE FALTA MAS
      simplexC.c  1167            ex.canonicalStatement->is2fasesActive=0;
      simplexC.c  1168            ex.nodes.its[lastItId+1]=convertToSecondPhase(nodeId, lastItId);
    00001CC2 65B3                   MOV         R11,R5
    00001CC4 032E                   MOV.L       @(R0,R2),R3
    00001CC6 1E3A                   MOV.L       R3,@(40,R14)
    00001CC8 52E2                   MOV.L       @(8,R14),R2
    00001CCA E300                   MOV         #0,R3
    00001CCC 1233                   MOV.L       R3,@(12,R2)
    00001CCE 62B3                   MOV         R11,R2
    00001CD0 53E5                   MOV.L       @(20,R14),R3
    00001CD2 4208                   SHLL2       R2
    00001CD4 323C                   ADD         R3,R2
    00001CD6 6823                   MOV         R2,R8
    00001CD8 7804                   ADD         #4,R8
    00001CDA BF1E                   BSR         _convertToSecondPhase
    00001CDC 64D3                   MOV         R13,R4
      simplexC.c  1169            lastItId=solveSimplexLPOneFase(nodeId, lastItId+1);
    00001CDE 65B3                   MOV         R11,R5
    00001CE0 2802                   MOV.L       R0,@R8
    00001CE2 A001                   BRA         L1129
    00001CE4 7501                   ADD         #1,R5
    00001CE6              L1113:                            
      simplexC.c  1170        }else
      simplexC.c  1171        {
      simplexC.c  1172            lastItId=solveSimplexLPOneFase(nodeId, 0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CE6 E500                   MOV         #0,R5
    00001CE8              L1129:                            
    00001CE8 BF7B                   BSR         _solveSimplexLPOneFase
    00001CEA 64D3                   MOV         R13,R4
      simplexC.c  1173        }
      simplexC.c  1174        sprintf(strSol,"ZSol: %.2f",ex.nodes.its[lastItId]->zSol);
    00001CEC 53E5                   MOV.L       @(20,R14),R3
    00001CEE E140                   MOV         #64,R1
    00001CF0 D220                   MOV.L       L1148+24,R2; __stod
    00001CF2 4008                   SHLL2       R0
    00001CF4 003E                   MOV.L       @(R0,R3),R0
    00001CF6 001E                   MOV.L       @(R0,R1),R0
    00001CF8 7FF8                   ADD         #-8,R15
    00001CFA 420B                   JSR         @R2
    00001CFC 2FF6                   MOV.L       R15,@-R15
    00001CFE D31E                   MOV.L       L1148+28,R3; L813
    00001D00 D21E                   MOV.L       L1148+32,R2; _sprintf
    00001D02 2F36                   MOV.L       R3,@-R15
    00001D04 64F3                   MOV         R15,R4
    00001D06 420B                   JSR         @R2
    00001D08 740C                   ADD         #12,R4
      simplexC.c  1175        Bdisp_AllClr_DDVRAM();
    00001D0A D31D                   MOV.L       L1148+36,R3; _Bdisp_AllClr_DDVRAM
    00001D0C 430B                   JSR         @R3
    00001D0E 0009                   NOP
      simplexC.c  1176        PrintMini(0,0,(unsigned char*)strSol,MINI_OVER);
    00001D10 D21C                   MOV.L       L1148+40,R2; _PrintMini
    00001D12 E710                   MOV         #16,R7
    00001D14 66F3                   MOV         R15,R6
    00001D16 760C                   ADD         #12,R6
    00001D18 E500                   MOV         #0,R5
    00001D1A 420B                   JSR         @R2
    00001D1C 6453                   MOV         R5,R4
      simplexC.c  1177        Bdisp_PutDisp_DD();
    00001D1E D31A                   MOV.L       L1148+44,R3; _Bdisp_PutDisp_DD
    00001D20 430B                   JSR         @R3
    00001D22 0009                   NOP
      simplexC.c  1178        Sleep(3000);
    00001D24 941A                   MOV.W       L1148,R4   ; H'0BB8
    00001D26 D219                   MOV.L       L1148+48,R2; _Sleep
    00001D28 420B                   JSR         @R2
    00001D2A 0009                   NOP
      simplexC.c  1179    
      simplexC.c  1180        return 0;
      simplexC.c  1181    }
    00001D2C 9117                   MOV.W       L1148+2,R1 ; H'008C
    00001D2E E000                   MOV         #0,R0
    00001D30 3F1C                   ADD         R1,R15
    00001D32 4F26                   LDS.L       @R15+,PR
    00001D34 68F6                   MOV.L       @R15+,R8
    00001D36 6BF6                   MOV.L       @R15+,R11
    00001D38 6CF6                   MOV.L       @R15+,R12
    00001D3A 6DF6                   MOV.L       @R15+,R13
    00001D3C 000B                   RTS
    00001D3E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1182    
      simplexC.c  1183    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1184    int initializeExecution()
    00001D40              _initializeExecution:            ; function: initializeExecution
                                                           ; frame size=0
      simplexC.c  1185    {
      simplexC.c  1186        ex.bVectorValues=ex.canonicalStatement->rightValues;
    00001D40 D409                   MOV.L       L1148+12,R4; _ex
    00001D42 5342                   MOV.L       @(8,R4),R3
    00001D44 5235                   MOV.L       @(20,R3),R2
    00001D46 1426                   MOV.L       R2,@(24,R4)
    00001D48 5542                   MOV.L       @(8,R4),R5
    00001D4A 6353                   MOV         R5,R3
    00001D4C 5232                   MOV.L       @(8,R3),R2
    00001D4E 2228                   TST         R2,R2
    00001D50 891E                   BT          L1116
      simplexC.c  1187        if(ex.canonicalStatement->is2fasesNeeded)
      simplexC.c  1188        {
      simplexC.c  1189            ex.canonicalStatement->is2fasesActive=1;
    00001D52 E201                   MOV         #1,R2
    00001D54 1523                   MOV.L       R2,@(12,R5)
      simplexC.c  1190            ex.currentFuncObjectivePurpose=FUNC_MINIMIZE;
    00001D56 E300                   MOV         #0,R3
    00001D58 A01D                   BRA         L1117
    00001D5A 143A                   MOV.L       R3,@(40,R4)
    00001D5C              L1148:                            
    00001D5C 0BB8                   .DATA.W     H'0BB8
    00001D5E 008C                   .DATA.W     H'008C
    00001D60 <00000000>             .DATA.L     _calculateIteration
    00001D64 <00000000>             .DATA.L     _createNewIteration
    00001D68 <00000000>             .DATA.L     _ex
    00001D6C <00000000>             .DATA.L     _malloc
    00001D70 <00000000>             .DATA.L     _modelToIteration
    00001D74 <00000000>             .DATA.L     __stod
    00001D78 <00000000>             .DATA.L     L813
    00001D7C <00000000>             .DATA.L     _sprintf
    00001D80 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001D84 <00000000>             .DATA.L     _PrintMini
    00001D88 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001D8C <00000000>             .DATA.L     _Sleep
    00001D90              L1116:                            
      simplexC.c  1191        }else
      simplexC.c  1192        {
      simplexC.c  1193            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;
    00001D90 E044                   MOV         #68,R0
    00001D92 015E                   MOV.L       @(R0,R5),R1
    00001D94 141A                   MOV.L       R1,@(40,R4)
    00001D96              L1117:                            
      simplexC.c  1194        }
      simplexC.c  1195        ex.inputCvectorValues=ex.canonicalStatement->funcObjtValues;
    00001D96 E048                   MOV         #72,R0
    00001D98 5342                   MOV.L       @(8,R4),R3
    00001D9A 023E                   MOV.L       @(R0,R3),R2
    00001D9C 1427                   MOV.L       R2,@(28,R4)
      simplexC.c  1196        ex.fases2CvectorValues=ex.canonicalStatement->funcObjtValues2Fases;
    00001D9E E04C                   MOV         #76,R0
    00001DA0 5342                   MOV.L       @(8,R4),R3
    00001DA2 023E                   MOV.L       @(R0,R3),R2
    00001DA4 1428                   MOV.L       R2,@(32,R4)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1197        return 0;
      simplexC.c  1198    }
    00001DA6 000B                   RTS
    00001DA8 E000                   MOV         #0,R0
      simplexC.c  1199    
      simplexC.c  1200    int AddIn_main(int isAppli, unsigned short OptionNum)
    00001DAA              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=188
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    00001DAA 2FE6                   MOV.L       R14,@-R15
    00001DAC 4F22                   STS.L       PR,@-R15
    00001DAE 7F80                   ADD         #-128,R15
      simplexC.c  1201    {
      simplexC.c  1202        char str[128];
      simplexC.c  1203        selectExecutionMode();
    00001DB0 BBCE                   BSR         _selectExecutionMode
    00001DB2 0009                   NOP
    00001DB4 DE1F                   MOV.L       L1149+6,R14; _ex
    00001DB6 64E2                   MOV.L       @R14,R4
    00001DB8 2448                   TST         R4,R4
    00001DBA 8B17                   BF          L1119
      simplexC.c  1204        if(ex.mode==MODE_FULL_EXECUTION)
      simplexC.c  1205        {
      simplexC.c  1206            // ex.initialProblemStatement=createProblemStatementToDebug2Fases();
      simplexC.c  1207            ex.initialProblemStatement=getProblemInputs();
    00001DBC BA52                   BSR         _getProblemInputs
    00001DBE 0009                   NOP
    00001DC0 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c  1208            // Bdisp_AllClr_DDVRAM();
      simplexC.c  1209            // sprintf(str,"nSlope %d, N2F %d",ex.initialProblemStatement->nVariablesSlope,ex.initialProblemSt
                         +atement->nVariables2fases);
      simplexC.c  1210            // PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
      simplexC.c  1211            // Bdisp_PutDisp_DD();
      simplexC.c  1212            // Sleep(3000);
      simplexC.c  1213            printStatementMenu(ex.initialProblemStatement);
    00001DC2 D21D                   MOV.L       L1149+10,R2; _printStatementMenu
    00001DC4 420B                   JSR         @R2
    00001DC6 6403                   MOV         R0,R4
      simplexC.c  1214            convertModel(ex);
    00001DC8 D31C                   MOV.L       L1149+14,R3; __quick_odd_mvn
    00001DCA 62E3                   MOV         R14,R2
    00001DCC E034                   MOV         #52,R0
    00001DCE 3F08                   SUB         R0,R15
    00001DD0 430B                   JSR         @R3
    00001DD2 61F3                   MOV         R15,R1
    00001DD4 BBE3                   BSR         _convertModel
    00001DD6 0009                   NOP
      simplexC.c  1215            printStatementMenu(ex.canonicalStatement);
    00001DD8 D317                   MOV.L       L1149+10,R3; _printStatementMenu
    00001DDA 7F34                   ADD         #52,R15
    00001DDC 430B                   JSR         @R3
    00001DDE 54E2                   MOV.L       @(8,R14),R4
      simplexC.c  1216            initializeExecution();
    00001DE0 BFAE                   BSR         _initializeExecution
    00001DE2 0009                   NOP
      simplexC.c  1217            solveSimplexLP(0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DE4 BF50                   BSR         _solveSimplexLP
    00001DE6 E400                   MOV         #0,R4
    00001DE8 A013                   BRA         L1120
    00001DEA 0009                   NOP
    00001DEC              L1119:                            
      simplexC.c  1218    
      simplexC.c  1219        }else if(ex.mode==MODE_INPUT_TABLE)
    00001DEC 6043                   MOV         R4,R0
    00001DEE 8801                   CMP/EQ      #1,R0
    00001DF0 890F                   BT          L1120
      simplexC.c  1220        {
      simplexC.c  1221            //TODO
      simplexC.c  1222        }else
      simplexC.c  1223        {
      simplexC.c  1224            Bdisp_AllClr_DDVRAM();
    00001DF2 D313                   MOV.L       L1149+18,R3; _Bdisp_AllClr_DDVRAM
    00001DF4 430B                   JSR         @R3
    00001DF6 0009                   NOP
      simplexC.c  1225            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    00001DF8 D612                   MOV.L       L1149+22,R6; L555
    00001DFA E500                   MOV         #0,R5
    00001DFC D212                   MOV.L       L1149+26,R2; _PrintMini
    00001DFE E710                   MOV         #16,R7
    00001E00 420B                   JSR         @R2
    00001E02 6453                   MOV         R5,R4
      simplexC.c  1226            Bdisp_PutDisp_DD();
    00001E04 D311                   MOV.L       L1149+30,R3; _Bdisp_PutDisp_DD
    00001E06 430B                   JSR         @R3
    00001E08 0009                   NOP
      simplexC.c  1227            Sleep(3000);
    00001E0A 9410                   MOV.W       L1149,R4   ; H'0BB8
    00001E0C D210                   MOV.L       L1149+34,R2; _Sleep
    00001E0E 420B                   JSR         @R2
    00001E10 0009                   NOP
    00001E12              L1120:                            
      simplexC.c  1228        }
      simplexC.c  1229        freeMemoryExecution(ex);
    00001E12 62E3                   MOV         R14,R2
    00001E14 D309                   MOV.L       L1149+14,R3; __quick_odd_mvn
    00001E16 E034                   MOV         #52,R0
    00001E18 3F08                   SUB         R0,R15
    00001E1A 430B                   JSR         @R3
    00001E1C 61F3                   MOV         R15,R1
    00001E1E D20D                   MOV.L       L1149+38,R2; _freeMemoryExecution
    00001E20 420B                   JSR         @R2
    00001E22 0009                   NOP
      simplexC.c  1230        
      simplexC.c  1231    }
    00001E24 9104                   MOV.W       L1149+2,R1 ; H'00B4
    00001E26 3F1C                   ADD         R1,R15
    00001E28 4F26                   LDS.L       @R15+,PR
    00001E2A 000B                   RTS
    00001E2C 6EF6                   MOV.L       @R15+,R14
    00001E2E              L1149:                            
    00001E2E 0BB8                   .DATA.W     H'0BB8
    00001E30 00B4                   .DATA.W     H'00B4
    00001E32 0000                   .DATA.W     0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E34 <00000000>             .DATA.L     _ex
    00001E38 <00000000>             .DATA.L     _printStatementMenu
    00001E3C <00000000>             .DATA.L     __quick_odd_mvn
    00001E40 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001E44 <00000000>             .DATA.L     L555
    00001E48 <00000000>             .DATA.L     _PrintMini
    00001E4C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001E50 <00000000>             .DATA.L     _Sleep
    00001E54 <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c  1232    
      simplexC.c  1233    #pragma section _BR_Size
      simplexC.c  1234    unsigned long BR_Size;
      simplexC.c  1235    #pragma section
      simplexC.c  1236    
      simplexC.c  1237    #pragma section _TOP
      simplexC.c  1238    
      simplexC.c  1239    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
      simplexC.c  1240    {
      simplexC.c  1241        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L1150+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1150:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c  1242    }
      simplexC.c  1243    
      simplexC.c  1244    #pragma section
C   00000000              L552:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1
    00000004              L553:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L554:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L555:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L561:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L562:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L574:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2C204F424A   
             2E20457869   
             74202564     
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L575:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L576:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L577:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"
             747261696E   
             74733A2025   
             642C204E56   
             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L579:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L580:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   
             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L582:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L586:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L588:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L597:
    000000CC 417825642E             .SDATA      "Ax%d. nConstraints: %d, Exit %d"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             206E436F6E   
             7374726169   
             6E74733A20   
             25642C2045   
             7869742025   
             64           
    000000EB 00                     .DATA.B     H'00
    000000EC              L600:
    000000EC 417825642E             .SDATA      "Ax%d. %.2f Pos %d"
             20252E3266   
             20506F7320   
             2564         
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L608:
    00000100 41786A2070             .SDATA      "Axj pMenu Vars %d.  %d exit"
             4D656E7520   
             5661727320   
             25642E2020   
             2564206578   
             6974         
    0000011B 00                     .DATA.B     H'00
    0000011C              L617:
    0000011C 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    00000144 00                     .DATA.B     H'00
    00000145 00000001               .RES.B      1
    00000146 00000002               .RES.W      1
    00000148              L619:
    00000148 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    00000168 00                     .DATA.B     H'00
    00000169 00000001               .RES.B      1
    0000016A 00000002               .RES.W      1
    0000016C              L621:
    0000016C 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   
             6A2066756E   
             632E         
    0000017D 00                     .DATA.B     H'00
    0000017E 00000002               .RES.W      1
    00000180              L623:
    00000180 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000192 00                     .DATA.B     H'00
    00000193 00000001               .RES.B      1
    00000194              L625:
    00000194 342050696E             .SDATA      "4 Pinfo aj vec"
             666F20616A   
             20766563     
    000001A2 00                     .DATA.B     H'00
    000001A3 00000001               .RES.B      1
    000001A4              L640:
    000001A4 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   
             2564         
    000001C4 00                     .DATA.B     H'00
    000001C5 00000001               .RES.B      1
    000001C6 00000002               .RES.W      1
    000001C8              L642:
    000001C8 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    000001DA 00                     .DATA.B     H'00
    000001DB 00000001               .RES.B      1
    000001DC              L644:
    000001DC 20536C6F70             .SDATA      " Slope"
             65           
    000001E2 00                     .DATA.B     H'00
    000001E3 00000001               .RES.B      1
    000001E4              L646:
    000001E4 204475616C             .SDATA      " Dual"
    000001E9 00                     .DATA.B     H'00
    000001EA 00000002               .RES.W      1
    000001EC              L648:
    000001EC 20496E74               .SDATA      " Int"
    000001F0 00                     .DATA.B     H'00
    000001F1 00000001               .RES.B      1
    000001F2 00000002               .RES.W      1
    000001F4              L655:
    000001F4 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         
    0000020A 00                     .DATA.B     H'00
    0000020B 00000001               .RES.B      1
    0000020C              L662:
    0000020C 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    00000225 00                     .DATA.B     H'00
    00000226 00000002               .RES.W      1
    00000228              L670:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000228 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   
             656E752E20   
             2564206578   
             6974         
    00000248 00                     .DATA.B     H'00
    00000249 00000001               .RES.B      1
    0000024A 00000002               .RES.W      1
    0000024C              L671:
    0000024C 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    00000257 00                     .DATA.B     H'00
    00000258              L672:
    00000258 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    00000263 00                     .DATA.B     H'00
    00000264              L673:
    00000264 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    00000270 00                     .DATA.B     H'00
    00000271 00000001               .RES.B      1
    00000272 00000002               .RES.W      1
    00000274              L681:
    00000274 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    0000028D 00                     .DATA.B     H'00
    0000028E 00000002               .RES.W      1
    00000290              L690:
    00000290 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    000002B1 00                     .DATA.B     H'00
    000002B2 00000002               .RES.W      1
    000002B4              L691:
    000002B4 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    000002D0 00                     .DATA.B     H'00
    000002D1 00000001               .RES.B      1
    000002D2 00000002               .RES.W      1
    000002D4              L698:
    000002D4 436F6E7374             .SDATA      "Constraint: %d, Right Value"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             7261696E74   
             3A2025642C   
             2052696768   
             742056616C   
             7565         
    000002EF 00                     .DATA.B     H'00
    000002F0              L711:
    000002F0 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   
             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    0000030C 00                     .DATA.B     H'00
    0000030D 00000001               .RES.B      1
    0000030E 00000002               .RES.W      1
    00000310              L728:
    00000310 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    0000031D 00                     .DATA.B     H'00
    0000031E 00000002               .RES.W      1
    00000320              L729:
    00000320 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    0000032B 00                     .DATA.B     H'00
    0000032C              L730:
    0000032C 5072657373             .SDATA      "Press. 1-LP, 2-ILP, 3-Cuts"
             2E20312D4C   
             502C20322D   
             494C502C20   
             332D437574   
             73           
    00000346 00                     .DATA.B     H'00
    00000347 00000001               .RES.B      1
    00000348              L733:
    00000348 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    00000354 00                     .DATA.B     H'00
    00000355 00000001               .RES.B      1
    00000356 00000002               .RES.W      1
    00000358              L734:
    00000358 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   
             20496E7420   
             7661722C20   
             30206E6F     
    00000370 00                     .DATA.B     H'00
    00000371 00000001               .RES.B      1
    00000372 00000002               .RES.W      1
    00000374              L737:
    00000374 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   
             25642C204D   
             6178202564   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000388 00                     .DATA.B     H'00
    00000389 00000001               .RES.B      1
    0000038A 00000002               .RES.W      1
    0000038C              L739:
    0000038C 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    0000039D 00                     .DATA.B     H'00
    0000039E 00000002               .RES.W      1
    000003A0              L740:
    000003A0 4F626A2076             .SDATA      "Obj value Independent"
             616C756520   
             496E646570   
             656E64656E   
             74           
    000003B5 00                     .DATA.B     H'00
    000003B6 00000002               .RES.W      1
    000003B8              L744:
    000003B8 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    000003CF 00                     .DATA.B     H'00
    000003D0              L813:
    000003D0 5A536F6C3A             .SDATA      "ZSol: %.2f"
             20252E3266   
    000003DA 00                     .DATA.B     H'00
B   00000000              _ex:                             ; static: ex
    00000000 00000034               .RES.L      13
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1




























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 13:49:21  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        58




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1244



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001E58 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000003DB Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000034 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00002277 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          43
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           308






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmkDCFC.tmp 

