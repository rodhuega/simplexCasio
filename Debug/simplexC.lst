SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\casioPr\simplexCasio\simplexC.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c     1    #include "fxlib.h"
      simplexC.c     2    #include "revolution.h"
      simplexC.c     3    #include "limits.h"
      simplexC.c     4    #include <stdlib.h>
      simplexC.c     5    #include "stdio.h"
      simplexC.c     6    #include "SH4_compatibility.h"
      simplexC.c     7    
      simplexC.c     8    #define NO_EVAL_VALUE INT_MAX
      simplexC.c     9    
      simplexC.c    10    #define TYPE_LP 1
      simplexC.c    11    #define TYPE_ILP 2
      simplexC.c    12    #define TYPE_CUT 3
      simplexC.c    13    
      simplexC.c    14    #define TYPE_INPUT 1
      simplexC.c    15    #define TYPE_SOLVE 2
      simplexC.c    16    
      simplexC.c    17    #define INITIALIZE_VALUE_OPT -1
      simplexC.c    18    #define INITIALIZE_VALUE_OPT_ITS_MENU -2
      simplexC.c    19    #define EXIT_OPT 0
      simplexC.c    20    #define EXIT_OPT_ITS_MENU -1
      simplexC.c    21    
      simplexC.c    22    #define INE_EQUAL 0
      simplexC.c    23    #define INE_LESS_OR_EQUAL_THAN 1
      simplexC.c    24    #define INE_GREATER_OR_EQUAL_THAN 2
      simplexC.c    25    
      simplexC.c    26    
      simplexC.c    27    #define FUNC_MINIMIZE 0
      simplexC.c    28    #define FUNC_MAXIMIZE 1
      simplexC.c    29    
      simplexC.c    30    
      simplexC.c    31    #define MODE_FULL_EXECUTION 0
      simplexC.c    32    #define MODE_INPUT_TABLE 1
      simplexC.c    33    
      simplexC.c    34    
      simplexC.c    35    struct iteration
      simplexC.c    36    {
      simplexC.c    37        int numIteration;
      simplexC.c    38        int is2FasesActive; //1 si esta activado. 0 en caso contrario
      simplexC.c    39        int* idBasicVariables;//1 si esa variable es Basica. 0 sera NoBasica
      simplexC.c    40        int *idByRowOfBasicVarsInBInv;//ejemplo [0]->2. la row 0 tiene asociala la variable 3
      simplexC.c    41        int isUnbounded;//1 en caso de si, 0 en caso de no
      simplexC.c    42    
      simplexC.c    43        int idVarIn;
      simplexC.c    44        int idVarOut;
      simplexC.c    45        int indexVarOutInBInvMatrix;
      simplexC.c    46    
      simplexC.c    47        float **Binv;
      simplexC.c    48        int BinvSize;
      simplexC.c    49    
      simplexC.c    50        float *ct;
      simplexC.c    51        float *xb;
      simplexC.c    52        float *ctBinv;
      simplexC.c    53        float *zj;
      simplexC.c    54        float *cjMinusZj;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c    55        float *yj;
      simplexC.c    56        float *xbDivYj;
      simplexC.c    57    
      simplexC.c    58        float zSol ;
      simplexC.c    59    };
      simplexC.c    60    
      simplexC.c    61    struct problemStatement
      simplexC.c    62    {
      simplexC.c    63        int problemType;
      simplexC.c    64        int modelType;
      simplexC.c    65        int is2fasesNeeded;//1 en caso de si. 0 en caso que no
      simplexC.c    66        int is2fasesActive;//1 en caso de si. 0 en caso que no
      simplexC.c    67        
      simplexC.c    68        //1 array de variables por cada constraint
      simplexC.c    69        //Cada constraint tiene primero todas las variables input, luego todas las slope y finalmente las 2fas
                         +es
      simplexC.c    70        float **constraints;
      simplexC.c    71        float *rightValues;
      simplexC.c    72        int *inequalitySigns;
      simplexC.c    73        int nVariables;
      simplexC.c    74        int nVariablesSlope;
      simplexC.c    75        int nVariables2fases;
      simplexC.c    76        int nVariablesInteger;
      simplexC.c    77        int nConstraints;
      simplexC.c    78        int *idIntegerVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    79        int *idSlopeVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    80        int *id2fasesVariables;//1 en caso de que sea. 0 en caso que no
      simplexC.c    81        int *idConstraintToSlopeVar;//Guarda la id de la variable que es slope perteneciante a esa contraint. 
                         +-1 en caso de no tener
      simplexC.c    82        int *idConstraintTo2fasesVar;//Guarda la id de la variable que es 2fases perteneciante a esa contraint
                         +. -1 en caso de no tener
      simplexC.c    83    
      simplexC.c    84        int funcObjectivePurpose;
      simplexC.c    85        float *funcObjtValues;//Ultima posicion, termino independiente sin variables
      simplexC.c    86        float *funcObjtValues2Fases;
      simplexC.c    87    
      simplexC.c    88        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c    89        
      simplexC.c    90    };
      simplexC.c    91    
      simplexC.c    92    struct node
      simplexC.c    93    {
      simplexC.c    94        int id;
      simplexC.c    95        int nIterations;
      simplexC.c    96        struct iteration **its;
      simplexC.c    97    };
      simplexC.c    98    
      simplexC.c    99    struct execution
      simplexC.c   100    {
      simplexC.c   101        int mode;
      simplexC.c   102        struct problemStatement *initialProblemStatement;
      simplexC.c   103        struct problemStatement *canonicalStatement;
      simplexC.c   104        struct node nodes;
      simplexC.c   105        float *bVectorValues;//Right values;
      simplexC.c   106        float *inputCvectorValues;//Values of cost variable
      simplexC.c   107        float *fases2CvectorValues;
      simplexC.c   108        int nNodes;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   109        int currentFuncObjectivePurpose;
      simplexC.c   110        int nVariables;
      simplexC.c   111        int nConstraints;
      simplexC.c   112    
      simplexC.c   113        float** ajVector; // guarda un vector por cada variable y contiene su valor en todas las constraints.
      simplexC.c   114    };
      simplexC.c   115    
      simplexC.c   116    struct execution ex;
      simplexC.c   117    
      simplexC.c   118    float InputD(int, int);
      simplexC.c   119    
      simplexC.c   120    int InputI(int, int);
      simplexC.c   121    
      simplexC.c   122    float InputD(int x, int y)
P   00000000              _InputD:                         ; function: InputD
                                                           ; frame size=532
                                                           ; used runtime library name:
                                                           ; __dtos
    00000000 4F22                   STS.L       PR,@-R15
    00000002 908F                   MOV.W       L1395,R0   ; H'FDFC
      simplexC.c   123    {
      simplexC.c   124        char *string[128], *stopstring;
      simplexC.c   125        string_input(x, y, string);
    00000004 D349                   MOV.L       L1395+8,R3 ; _string_input
    00000006 3F0C                   ADD         R0,R15
    00000008 66F3                   MOV         R15,R6
    0000000A 430B                   JSR         @R3
    0000000C 7604                   ADD         #4,R6
      simplexC.c   126        return strtod(string, &stopstring);
    0000000E 7FF8                   ADD         #-8,R15
    00000010 D247                   MOV.L       L1395+12,R2; _strtod
    00000012 65F3                   MOV         R15,R5
    00000014 7508                   ADD         #8,R5
    00000016 64F3                   MOV         R15,R4
    00000018 740C                   ADD         #12,R4
    0000001A 420B                   JSR         @R2
    0000001C 2FF6                   MOV.L       R15,@-R15
    0000001E D345                   MOV.L       L1395+16,R3; __dtos
    00000020 430B                   JSR         @R3
    00000022 7F04                   ADD         #4,R15
      simplexC.c   127    }
    00000024 917F                   MOV.W       L1395+2,R1 ; H'0204
    00000026 3F1C                   ADD         R1,R15
    00000028 4F26                   LDS.L       @R15+,PR
    0000002A 000B                   RTS
    0000002C 0009                   NOP
      simplexC.c   128    
      simplexC.c   129    int InputI(int x, int y)
    0000002E              _InputI:                         ; function: InputI
                                                           ; frame size=516
    0000002E 4F22                   STS.L       PR,@-R15
    00000030 907A                   MOV.W       L1395+4,R0 ; H'FE00
    00000032 3F0C                   ADD         R0,R15
      simplexC.c   130    {
      simplexC.c   131        char *string[128], *stopstring;
      simplexC.c   132        string_input(x, y, string);
    00000034 D33D                   MOV.L       L1395+8,R3 ; _string_input




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000036 430B                   JSR         @R3
    00000038 66F3                   MOV         R15,R6
      simplexC.c   133        return atoi(&string);
    0000003A D23F                   MOV.L       L1395+20,R2; _atoi
    0000003C 420B                   JSR         @R2
    0000003E 64F3                   MOV         R15,R4
      simplexC.c   134    }
    00000040 9173                   MOV.W       L1395+6,R1 ; H'0200
    00000042 3F1C                   ADD         R1,R15
    00000044 4F26                   LDS.L       @R15+,PR
    00000046 000B                   RTS
    00000048 0009                   NOP
      simplexC.c   135    
      simplexC.c   136    int freeMemoryStatement(struct problemStatement *pS)
    0000004A              _freeMemoryStatement:            ; function: freeMemoryStatement
                                                           ; frame size=16
    0000004A 2FE6                   MOV.L       R14,@-R15
    0000004C 2FD6                   MOV.L       R13,@-R15
    0000004E 6E43                   MOV         R4,R14
    00000050 2FC6                   MOV.L       R12,@-R15
    00000052 4F22                   STS.L       PR,@-R15
      simplexC.c   137    {
      simplexC.c   138        int i;
      simplexC.c   139        for(i=0;i<pS->nConstraints;i++)
    00000054 DD39                   MOV.L       L1395+24,R13; _free
    00000056 A006                   BRA         L1108
    00000058 EC00                   MOV         #0,R12
    0000005A              L1109:                            
      simplexC.c   140        {
      simplexC.c   141            free(pS->constraints[i]);
    0000005A 64C3                   MOV         R12,R4
    0000005C 50E4                   MOV.L       @(16,R14),R0
    0000005E 4408                   SHLL2       R4
    00000060 4D0B                   JSR         @R13
    00000062 044E                   MOV.L       @(R0,R4),R4
    00000064 7C01                   ADD         #1,R12
    00000066              L1108:                            
    00000066 53EB                   MOV.L       @(44,R14),R3
    00000068 3C33                   CMP/GE      R3,R12
    0000006A 8BF6                   BF          L1109
      simplexC.c   142        }
      simplexC.c   143        free(pS->constraints);
    0000006C 4D0B                   JSR         @R13
    0000006E 54E4                   MOV.L       @(16,R14),R4
      simplexC.c   144        free(pS->rightValues);
    00000070 4D0B                   JSR         @R13
    00000072 54E5                   MOV.L       @(20,R14),R4
      simplexC.c   145        free(pS->inequalitySigns);
    00000074 4D0B                   JSR         @R13
    00000076 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   146        free(pS->idIntegerVariables);
    00000078 4D0B                   JSR         @R13
    0000007A 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   147        free(pS->idSlopeVariables);
    0000007C 4D0B                   JSR         @R13
    0000007E 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   148        free(pS->id2fasesVariables);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000080 4D0B                   JSR         @R13
    00000082 54EE                   MOV.L       @(56,R14),R4
      simplexC.c   149        free(pS->funcObjtValues);
    00000084 E048                   MOV         #72,R0
    00000086 4D0B                   JSR         @R13
    00000088 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   150        if(pS->modelType==TYPE_SOLVE)
    0000008A 50E1                   MOV.L       @(4,R14),R0
    0000008C 8802                   CMP/EQ      #2,R0
    0000008E 8B04                   BF          L1110
      simplexC.c   151        {
      simplexC.c   152            free(pS->idConstraintTo2fasesVar);
    00000090 E040                   MOV         #64,R0
    00000092 4D0B                   JSR         @R13
    00000094 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   153            free(pS->idConstraintToSlopeVar);
    00000096 4D0B                   JSR         @R13
    00000098 54EF                   MOV.L       @(60,R14),R4
    0000009A              L1110:                            
      simplexC.c   154        }
      simplexC.c   155        return 0;
    0000009A E000                   MOV         #0,R0
      simplexC.c   156    }
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6CF6                   MOV.L       @R15+,R12
    000000A0 6DF6                   MOV.L       @R15+,R13
    000000A2 000B                   RTS
    000000A4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   157    
      simplexC.c   158    int freeMemoryIteration(struct iteration *it)
    000000A6              _freeMemoryIteration:            ; function: freeMemoryIteration
                                                           ; frame size=12
    000000A6 2FE6                   MOV.L       R14,@-R15
    000000A8 2FD6                   MOV.L       R13,@-R15
    000000AA 6E43                   MOV         R4,R14
    000000AC 4F22                   STS.L       PR,@-R15
      simplexC.c   159    {
      simplexC.c   160        //TODO
      simplexC.c   161        free(it->idBasicVariables);
    000000AE DD23                   MOV.L       L1395+24,R13; _free
    000000B0 4D0B                   JSR         @R13
    000000B2 54E2                   MOV.L       @(8,R14),R4
      simplexC.c   162        free(it->idByRowOfBasicVarsInBInv);
    000000B4 4D0B                   JSR         @R13
    000000B6 54E3                   MOV.L       @(12,R14),R4
      simplexC.c   163        free(it->xb);
    000000B8 4D0B                   JSR         @R13
    000000BA 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   164        free(it->ctBinv);
    000000BC 4D0B                   JSR         @R13
    000000BE 54EC                   MOV.L       @(48,R14),R4
      simplexC.c   165        free(it->zj);
    000000C0 4D0B                   JSR         @R13
    000000C2 54ED                   MOV.L       @(52,R14),R4
      simplexC.c   166        free(it->cjMinusZj);
    000000C4 4D0B                   JSR         @R13
    000000C6 54EE                   MOV.L       @(56,R14),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   167        free(it->yj);
    000000C8 4D0B                   JSR         @R13
    000000CA 54EF                   MOV.L       @(60,R14),R4
      simplexC.c   168        free(it->xbDivYj);
    000000CC E040                   MOV         #64,R0
    000000CE 4D0B                   JSR         @R13
    000000D0 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c   169        return 0;
    000000D2 E000                   MOV         #0,R0
      simplexC.c   170    }
    000000D4 4F26                   LDS.L       @R15+,PR
    000000D6 6DF6                   MOV.L       @R15+,R13
    000000D8 000B                   RTS
    000000DA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   171    int freeMemoryNode(struct node *n)
    000000DC              _freeMemoryNode:                 ; function: freeMemoryNode
                                                           ; frame size=12
    000000DC 2FE6                   MOV.L       R14,@-R15
    000000DE 2FD6                   MOV.L       R13,@-R15
    000000E0 4F22                   STS.L       PR,@-R15
    000000E2 6D43                   MOV         R4,R13
      simplexC.c   172    {
      simplexC.c   173        int i;
      simplexC.c   174        for(i=0; i<n->nIterations;i++)
    000000E4 A006                   BRA         L1113
    000000E6 EE00                   MOV         #0,R14
    000000E8              L1114:                            
      simplexC.c   175        {
      simplexC.c   176            freeMemoryIteration(n->its[i]);
    000000E8 50D2                   MOV.L       @(8,R13),R0
    000000EA 64E3                   MOV         R14,R4
    000000EC 4408                   SHLL2       R4
    000000EE BFDA                   BSR         _freeMemoryIteration
    000000F0 044E                   MOV.L       @(R0,R4),R4
    000000F2 7E01                   ADD         #1,R14
    000000F4              L1113:                            
    000000F4 52D1                   MOV.L       @(4,R13),R2
    000000F6 3E23                   CMP/GE      R2,R14
    000000F8 8BF6                   BF          L1114
      simplexC.c   177        }
      simplexC.c   178        free(n->its);
    000000FA D210                   MOV.L       L1395+24,R2; _free
    000000FC 420B                   JSR         @R2
    000000FE 54D2                   MOV.L       @(8,R13),R4
      simplexC.c   179        return 0;
      simplexC.c   180    }
    00000100 4F26                   LDS.L       @R15+,PR
    00000102 E000                   MOV         #0,R0
    00000104 6DF6                   MOV.L       @R15+,R13
    00000106 000B                   RTS
    00000108 6EF6                   MOV.L       @R15+,R14
      simplexC.c   181    
      simplexC.c   182    int freeMemoryExecution()
    0000010A              _freeMemoryExecution:            ; function: freeMemoryExecution
                                                           ; frame size=12
    0000010A 2FE6                   MOV.L       R14,@-R15
    0000010C 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010E 4F22                   STS.L       PR,@-R15
      simplexC.c   183    {
      simplexC.c   184        int i;
      simplexC.c   185        if(ex.mode == MODE_FULL_EXECUTION)
    00000110 DE0B                   MOV.L       L1395+28,R14; _ex
    00000112 63E2                   MOV.L       @R14,R3
    00000114 2338                   TST         R3,R3
    00000116 8B03                   BF          L1116
      simplexC.c   186        {
      simplexC.c   187            freeMemoryStatement(ex.initialProblemStatement);
    00000118 BF97                   BSR         _freeMemoryStatement
    0000011A 54E1                   MOV.L       @(4,R14),R4
      simplexC.c   188            freeMemoryStatement(ex.canonicalStatement);
    0000011C BF95                   BSR         _freeMemoryStatement
    0000011E 54E2                   MOV.L       @(8,R14),R4
    00000120              L1116:                            
      simplexC.c   189        }
      simplexC.c   190        for(i=0;i<ex.nVariables;i++)
    00000120 A011                   BRA         L1117
    00000122 E400                   MOV         #0,R4
    00000124              L1395:                            
    00000124 FDFC                   .DATA.W     H'FDFC
    00000126 0204                   .DATA.W     H'0204
    00000128 FE00                   .DATA.W     H'FE00
    0000012A 0200                   .DATA.W     H'0200
    0000012C <00000000>             .DATA.L     _string_input
    00000130 <00000000>             .DATA.L     _strtod
    00000134 <00000000>             .DATA.L     __dtos
    00000138 <00000000>             .DATA.L     _atoi
    0000013C <00000000>             .DATA.L     _free
    00000140 <00000000>             .DATA.L     _ex
    00000144              L1118:                            
    00000144 7401                   ADD         #1,R4
    00000146              L1117:                            
    00000146 52EB                   MOV.L       @(44,R14),R2
    00000148 3423                   CMP/GE      R2,R4
    0000014A 8BFB                   BF          L1118
      simplexC.c   191        {
      simplexC.c   192            // free(ex.ajVector[i]);
      simplexC.c   193        }
      simplexC.c   194        // free(ex.ajVector);
      simplexC.c   195        free(ex.bVectorValues);
    0000014C DD8C                   MOV.L       L1396,R13  ; _free
    0000014E 4D0B                   JSR         @R13
    00000150 54E6                   MOV.L       @(24,R14),R4
      simplexC.c   196        free(ex.inputCvectorValues);
    00000152 4D0B                   JSR         @R13
    00000154 54E7                   MOV.L       @(28,R14),R4
      simplexC.c   197        free(ex.fases2CvectorValues);
    00000156 4D0B                   JSR         @R13
    00000158 54E8                   MOV.L       @(32,R14),R4
      simplexC.c   198        return 0;
    0000015A E000                   MOV         #0,R0
      simplexC.c   199    }
    0000015C 4F26                   LDS.L       @R15+,PR
    0000015E 6DF6                   MOV.L       @R15+,R13
    00000160 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000162 6EF6                   MOV.L       @R15+,R14
      simplexC.c   200    
      simplexC.c   201    float* calculateVectorMatrixrMul(int size, float **M, float *V)
    00000164              _calculateVectorMatrixrMul:      ; function: calculateVectorMatrixrMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    00000164 2FE6                   MOV.L       R14,@-R15
    00000166 2FD6                   MOV.L       R13,@-R15
    00000168 2FC6                   MOV.L       R12,@-R15
    0000016A 6D43                   MOV         R4,R13
      simplexC.c   202    {
      simplexC.c   203        float *res;
      simplexC.c   204        int i,j;
      simplexC.c   205        res = calloc(size,sizeof(float));
    0000016C D385                   MOV.L       L1396+4,R3 ; _calloc
    0000016E 2FB6                   MOV.L       R11,@-R15
    00000170 2FA6                   MOV.L       R10,@-R15
    00000172 6B53                   MOV         R5,R11
    00000174 4F22                   STS.L       PR,@-R15
    00000176 6A63                   MOV         R6,R10
    00000178 430B                   JSR         @R3
    0000017A E504                   MOV         #4,R5
    0000017C 6C03                   MOV         R0,R12
      simplexC.c   206        for(i=0;i<size;i++)
    0000017E E500                   MOV         #0,R5
    00000180 A018                   BRA         L1120
    00000182 6753                   MOV         R5,R7
    00000184              L1121:                            
      simplexC.c   207        {
      simplexC.c   208            for(j=0;j<size;j++)
    00000184 6653                   MOV         R5,R6
    00000186 6453                   MOV         R5,R4
    00000188 6E73                   MOV         R7,R14
    0000018A 4D15                   CMP/PL      R13
    0000018C 8F11                   BF/S        L1122
    0000018E 4E08                   SHLL2       R14
    00000190              L1123:                            
      simplexC.c   209            {
      simplexC.c   210                res[i]+=V[j]*M[j][i];
    00000190 D27D                   MOV.L       L1396+8,R2 ; __muls
    00000192 63E3                   MOV         R14,R3
    00000194 33CC                   ADD         R12,R3
    00000196 6043                   MOV         R4,R0
    00000198 01BE                   MOV.L       @(R0,R11),R1
    0000019A 31EC                   ADD         R14,R1
    0000019C 00AE                   MOV.L       @(R0,R10),R0
    0000019E 420B                   JSR         @R2
    000001A0 6112                   MOV.L       @R1,R1
    000001A2 D27A                   MOV.L       L1396+12,R2; __adds
    000001A4 420B                   JSR         @R2
    000001A6 6132                   MOV.L       @R3,R1
    000001A8 2302                   MOV.L       R0,@R3
    000001AA 7601                   ADD         #1,R6
    000001AC 36D3                   CMP/GE      R13,R6
    000001AE 8FEF                   BF/S        L1123
    000001B0 7404                   ADD         #4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B2              L1122:                            
    000001B2 7701                   ADD         #1,R7
    000001B4              L1120:                            
    000001B4 37D3                   CMP/GE      R13,R7
    000001B6 8BE5                   BF          L1121
      simplexC.c   211            }
      simplexC.c   212        }
      simplexC.c   213        return res;
      simplexC.c   214    }
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 60C3                   MOV         R12,R0
    000001BC 6AF6                   MOV.L       @R15+,R10
    000001BE 6BF6                   MOV.L       @R15+,R11
    000001C0 6CF6                   MOV.L       @R15+,R12
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
      simplexC.c   215    
      simplexC.c   216    float* calculateMatrixVectorMul(int size, float **M, float *V)
    000001C8              _calculateMatrixVectorMul:       ; function: calculateMatrixVectorMul
                                                           ; frame size=24
                                                           ; used runtime library name:
                                                           ; __adds, __muls
    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 6D43                   MOV         R4,R13
      simplexC.c   217    {
      simplexC.c   218        float *res;
      simplexC.c   219        int i,j;
      simplexC.c   220        res = calloc(size,sizeof(float*));
    000001D0 D36C                   MOV.L       L1396+4,R3 ; _calloc
    000001D2 2FB6                   MOV.L       R11,@-R15
    000001D4 2FA6                   MOV.L       R10,@-R15
    000001D6 6B53                   MOV         R5,R11
    000001D8 4F22                   STS.L       PR,@-R15
    000001DA 6A63                   MOV         R6,R10
    000001DC 430B                   JSR         @R3
    000001DE E504                   MOV         #4,R5
    000001E0 6C03                   MOV         R0,R12
      simplexC.c   221        for(i=0;i<size;i++)
    000001E2 E500                   MOV         #0,R5
    000001E4 A019                   BRA         L1125
    000001E6 6753                   MOV         R5,R7
    000001E8              L1126:                            
      simplexC.c   222        {
      simplexC.c   223            for(j=0;j<size;j++)
    000001E8 6653                   MOV         R5,R6
    000001EA 6453                   MOV         R5,R4
    000001EC 6E73                   MOV         R7,R14
    000001EE 4D15                   CMP/PL      R13
    000001F0 8F12                   BF/S        L1127
    000001F2 4E08                   SHLL2       R14
    000001F4              L1128:                            
      simplexC.c   224            {
      simplexC.c   225                res[i]+=M[i][j]*V[j];
    000001F4 D264                   MOV.L       L1396+8,R2 ; __muls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F6 63E3                   MOV         R14,R3
    000001F8 33CC                   ADD         R12,R3
    000001FA 60E3                   MOV         R14,R0
    000001FC 01BE                   MOV.L       @(R0,R11),R1
    000001FE 60A3                   MOV         R10,R0
    00000200 004E                   MOV.L       @(R0,R4),R0
    00000202 314C                   ADD         R4,R1
    00000204 420B                   JSR         @R2
    00000206 6112                   MOV.L       @R1,R1
    00000208 D260                   MOV.L       L1396+12,R2; __adds
    0000020A 420B                   JSR         @R2
    0000020C 6132                   MOV.L       @R3,R1
    0000020E 7601                   ADD         #1,R6
    00000210 2302                   MOV.L       R0,@R3
    00000212 36D3                   CMP/GE      R13,R6
    00000214 8FEE                   BF/S        L1128
    00000216 7404                   ADD         #4,R4
    00000218              L1127:                            
    00000218 7701                   ADD         #1,R7
    0000021A              L1125:                            
    0000021A 37D3                   CMP/GE      R13,R7
    0000021C 8BE4                   BF          L1126
      simplexC.c   226            }
      simplexC.c   227        }
      simplexC.c   228        return res;
    0000021E 60C3                   MOV         R12,R0
      simplexC.c   229    }
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 6AF6                   MOV.L       @R15+,R10
    00000224 6BF6                   MOV.L       @R15+,R11
    00000226 6CF6                   MOV.L       @R15+,R12
    00000228 6DF6                   MOV.L       @R15+,R13
    0000022A 000B                   RTS
    0000022C 6EF6                   MOV.L       @R15+,R14
      simplexC.c   230    
      simplexC.c   231    float calculateVectorDotProduct(int size, float* A, float *B)
    0000022E              _calculateVectorDotProduct:      ; function: calculateVectorDotProduct
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __adds, __muls
      simplexC.c   232    {
      simplexC.c   233        float res;
      simplexC.c   234        int i;
      simplexC.c   235        res=0;
      simplexC.c   236        for(i=0;i<size;i++)
    0000022E 4415                   CMP/PL      R4
    00000230 2FE6                   MOV.L       R14,@-R15
    00000232 2FD6                   MOV.L       R13,@-R15
    00000234 4F22                   STS.L       PR,@-R15
    00000236 ED00                   MOV         #0,R13
    00000238 6ED3                   MOV         R13,R14
    0000023A 8F0D                   BF/S        L1130
    0000023C 67D3                   MOV         R13,R7
    0000023E              L1131:                            
      simplexC.c   237        {
      simplexC.c   238            res+=A[i]*B[i];
    0000023E 6073                   MOV         R7,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000240 D351                   MOV.L       L1396+8,R3 ; __muls
    00000242 015E                   MOV.L       @(R0,R5),R1
    00000244 430B                   JSR         @R3
    00000246 006E                   MOV.L       @(R0,R6),R0
    00000248 D350                   MOV.L       L1396+12,R3; __adds
    0000024A 430B                   JSR         @R3
    0000024C 61D3                   MOV         R13,R1
    0000024E 6D03                   MOV         R0,R13
    00000250 7E01                   ADD         #1,R14
    00000252 3E43                   CMP/GE      R4,R14
    00000254 8FF3                   BF/S        L1131
    00000256 7704                   ADD         #4,R7
    00000258              L1130:                            
      simplexC.c   239        }
      simplexC.c   240        return res;
      simplexC.c   241    }
    00000258 4F26                   LDS.L       @R15+,PR
    0000025A 60D3                   MOV         R13,R0
    0000025C 6DF6                   MOV.L       @R15+,R13
    0000025E 000B                   RTS
    00000260 6EF6                   MOV.L       @R15+,R14
      simplexC.c   242    
      simplexC.c   243    float* getCurrentCvectorValues(struct iteration *it)
    00000262              _getCurrentCvectorValues:        ; function: getCurrentCvectorValues
                                                           ; frame size=8
      simplexC.c   244    {
      simplexC.c   245        float* res;
      simplexC.c   246        res = calloc(ex.nVariables,sizeof(float));
    00000262 E504                   MOV         #4,R5
    00000264 D347                   MOV.L       L1396+4,R3 ; _calloc
    00000266 2FE6                   MOV.L       R14,@-R15
    00000268 4F22                   STS.L       PR,@-R15
    0000026A DE49                   MOV.L       L1396+16,R14; _ex
    0000026C 430B                   JSR         @R3
    0000026E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c   247        if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement->is2
                         +fasesActive)
    00000270 62E2                   MOV.L       @R14,R2
    00000272 2228                   TST         R2,R2
    00000274 8B09                   BF          L1133
    00000276 53E2                   MOV.L       @(8,R14),R3
    00000278 5232                   MOV.L       @(8,R3),R2
    0000027A 2228                   TST         R2,R2
    0000027C 8905                   BT          L1133
    0000027E 52E2                   MOV.L       @(8,R14),R2
    00000280 5323                   MOV.L       @(12,R2),R3
    00000282 2338                   TST         R3,R3
    00000284 8901                   BT          L1133
      simplexC.c   248        {
      simplexC.c   249            res= ex.fases2CvectorValues;
    00000286 A001                   BRA         L1134
    00000288 54E8                   MOV.L       @(32,R14),R4
    0000028A              L1133:                            
      simplexC.c   250        }else
      simplexC.c   251        {
      simplexC.c   252            res=ex.inputCvectorValues;
    0000028A 54E7                   MOV.L       @(28,R14),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028C              L1134:                            
      simplexC.c   253        }
      simplexC.c   254        return res;
      simplexC.c   255    }
    0000028C 4F26                   LDS.L       @R15+,PR
    0000028E 6043                   MOV         R4,R0
    00000290 000B                   RTS
    00000292 6EF6                   MOV.L       @R15+,R14
      simplexC.c   256    
      simplexC.c   257    float* getCurrentCt(struct iteration *it)
    00000294              _getCurrentCt:                   ; function: getCurrentCt
                                                           ; frame size=8
    00000294 2FD6                   MOV.L       R13,@-R15
      simplexC.c   258    {
      simplexC.c   259        float* res;
      simplexC.c   260        int i;
      simplexC.c   261        res = calloc(it->BinvSize,sizeof(float));
    00000296 E504                   MOV         #4,R5
    00000298 D33A                   MOV.L       L1396+4,R3 ; _calloc
    0000029A 6D43                   MOV         R4,R13
    0000029C 4F22                   STS.L       PR,@-R15
    0000029E 430B                   JSR         @R3
    000002A0 54D9                   MOV.L       @(36,R13),R4
    000002A2 6603                   MOV         R0,R6
      simplexC.c   262        
      simplexC.c   263        for(i=0;i<it->BinvSize;i++)
    000002A4 D43A                   MOV.L       L1396+16,R4; _ex
    000002A6 A020                   BRA         L1136
    000002A8 E500                   MOV         #0,R5
    000002AA              L1137:                            
    000002AA 6153                   MOV         R5,R1
    000002AC 6342                   MOV.L       @R4,R3
    000002AE 2338                   TST         R3,R3
    000002B0 8F12                   BF/S        L1138
    000002B2 4108                   SHLL2       R1
    000002B4 5342                   MOV.L       @(8,R4),R3
    000002B6 5232                   MOV.L       @(8,R3),R2
    000002B8 2228                   TST         R2,R2
    000002BA 890D                   BT          L1138
    000002BC 5242                   MOV.L       @(8,R4),R2
    000002BE 5323                   MOV.L       @(12,R2),R3
    000002C0 2338                   TST         R3,R3
    000002C2 8909                   BT          L1138
      simplexC.c   264        {
      simplexC.c   265            if(ex.mode==MODE_FULL_EXECUTION && ex.canonicalStatement->is2fasesNeeded && ex.canonicalStatement-
                         +>is2fasesActive)
      simplexC.c   266            {
      simplexC.c   267                res[i]= ex.fases2CvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002C4 50D3                   MOV.L       @(12,R13),R0
    000002C6 6313                   MOV         R1,R3
    000002C8 021E                   MOV.L       @(R0,R1),R2
    000002CA 336C                   ADD         R6,R3
    000002CC 5048                   MOV.L       @(32,R4),R0
    000002CE 4208                   SHLL2       R2
    000002D0 022E                   MOV.L       @(R0,R2),R2
    000002D2 2322                   MOV.L       R2,@R3
    000002D4 A008                   BRA         L1139




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002D6 0009                   NOP
    000002D8              L1138:                            
      simplexC.c   268            }else
      simplexC.c   269            {
      simplexC.c   270                res[i]=ex.inputCvectorValues[it->idByRowOfBasicVarsInBInv[i]];
    000002D8 50D3                   MOV.L       @(12,R13),R0
    000002DA 6313                   MOV         R1,R3
    000002DC 021E                   MOV.L       @(R0,R1),R2
    000002DE 336C                   ADD         R6,R3
    000002E0 5047                   MOV.L       @(28,R4),R0
    000002E2 4208                   SHLL2       R2
    000002E4 022E                   MOV.L       @(R0,R2),R2
    000002E6 2322                   MOV.L       R2,@R3
    000002E8              L1139:                            
    000002E8 7501                   ADD         #1,R5
    000002EA              L1136:                            
    000002EA 53D9                   MOV.L       @(36,R13),R3
    000002EC 3533                   CMP/GE      R3,R5
    000002EE 8BDC                   BF          L1137
      simplexC.c   271            }
      simplexC.c   272        }
      simplexC.c   273        
      simplexC.c   274        return res;
      simplexC.c   275    }
    000002F0 4F26                   LDS.L       @R15+,PR
    000002F2 6063                   MOV         R6,R0
    000002F4 000B                   RTS
    000002F6 6DF6                   MOV.L       @R15+,R13
      simplexC.c   276    
      simplexC.c   277    float** calculateNewBinv(struct iteration *oldIt)
    000002F8              _calculateNewBinv:               ; function: calculateNewBinv
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __subs, __muls, __divs
    000002F8 2FE6                   MOV.L       R14,@-R15
      simplexC.c   278    {
      simplexC.c   279        float **res;
      simplexC.c   280        int i,j,indexPivot;
      simplexC.c   281        indexPivot=-1;
      simplexC.c   282        res=calloc(oldIt->BinvSize,sizeof(float*));
    000002FA E504                   MOV         #4,R5
    000002FC 2FD6                   MOV.L       R13,@-R15
    000002FE 6E43                   MOV         R4,R14
    00000300 2FC6                   MOV.L       R12,@-R15
    00000302 2FB6                   MOV.L       R11,@-R15
    00000304 2FA6                   MOV.L       R10,@-R15
    00000306 EBFF                   MOV         #-1,R11
    00000308 2F96                   MOV.L       R9,@-R15
    0000030A 2F86                   MOV.L       R8,@-R15
    0000030C 4F22                   STS.L       PR,@-R15
    0000030E D91D                   MOV.L       L1396+4,R9 ; _calloc
    00000310 490B                   JSR         @R9
    00000312 54E9                   MOV.L       @(36,R14),R4
    00000314 6D03                   MOV         R0,R13
      simplexC.c   283        for(i=0;i<oldIt->BinvSize;i++)
    00000316 EA00                   MOV         #0,R10
    00000318 A011                   BRA         L1141




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000031A 6CA3                   MOV         R10,R12
    0000031C              L1142:                            
      simplexC.c   284        {
      simplexC.c   285            res[i]=calloc(oldIt->BinvSize,sizeof(float));
    0000031C 68C3                   MOV         R12,R8
    0000031E 4808                   SHLL2       R8
    00000320 6383                   MOV         R8,R3
    00000322 33DC                   ADD         R13,R3
    00000324 2F36                   MOV.L       R3,@-R15
    00000326 E504                   MOV         #4,R5
    00000328 490B                   JSR         @R9
    0000032A 54E9                   MOV.L       @(36,R14),R4
    0000032C 63F6                   MOV.L       @R15+,R3
    0000032E 2302                   MOV.L       R0,@R3
      simplexC.c   286            if(oldIt->idVarOut==oldIt->idByRowOfBasicVarsInBInv[i])
    00000330 50E3                   MOV.L       @(12,R14),R0
    00000332 028E                   MOV.L       @(R0,R8),R2
    00000334 53E6                   MOV.L       @(24,R14),R3
    00000336 3320                   CMP/EQ      R2,R3
    00000338 8B00                   BF          L1143
      simplexC.c   287            {
      simplexC.c   288                indexPivot=i;
    0000033A 6BC3                   MOV         R12,R11
    0000033C              L1143:                            
    0000033C 7C01                   ADD         #1,R12
    0000033E              L1141:                            
    0000033E 53E9                   MOV.L       @(36,R14),R3
    00000340 3C33                   CMP/GE      R3,R12
    00000342 8BEB                   BF          L1142
      simplexC.c   289            }
      simplexC.c   290        }
      simplexC.c   291        //Calculo de la fila pivote
      simplexC.c   292        for(i=0;i<oldIt->BinvSize;i++)
    00000344 64A3                   MOV         R10,R4
    00000346 6CB3                   MOV         R11,R12
    00000348 A00F                   BRA         L1144
    0000034A 4C08                   SHLL2       R12
    0000034C              L1145:                            
      simplexC.c   293        {
      simplexC.c   294            res[indexPivot][i]=oldIt->Binv[indexPivot][i]/oldIt->yj[indexPivot];
    0000034C D211                   MOV.L       L1396+20,R2; __divs
    0000034E 60C3                   MOV         R12,R0
    00000350 03DE                   MOV.L       @(R0,R13),R3
    00000352 6543                   MOV         R4,R5
    00000354 50E8                   MOV.L       @(32,R14),R0
    00000356 4508                   SHLL2       R5
    00000358 01CE                   MOV.L       @(R0,R12),R1
    0000035A 335C                   ADD         R5,R3
    0000035C 50EF                   MOV.L       @(60,R14),R0
    0000035E 315C                   ADD         R5,R1
    00000360 00CE                   MOV.L       @(R0,R12),R0
    00000362 420B                   JSR         @R2
    00000364 6112                   MOV.L       @R1,R1
    00000366 7401                   ADD         #1,R4
    00000368 2302                   MOV.L       R0,@R3
    0000036A              L1144:                            
    0000036A 53E9                   MOV.L       @(36,R14),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000036C 3433                   CMP/GE      R3,R4
    0000036E 8BED                   BF          L1145
      simplexC.c   295        }
      simplexC.c   296    
      simplexC.c   297        //Calculo del resto de filas
      simplexC.c   298        for(i=0;i<oldIt->BinvSize;i++)
    00000370 65A3                   MOV         R10,R5
    00000372 67C3                   MOV         R12,R7
    00000374 A02D                   BRA         L1146
    00000376 37DC                   ADD         R13,R7
    00000378              L1147:                            
      simplexC.c   299        {
      simplexC.c   300            for(j=0;j<oldIt->BinvSize && i!=indexPivot;j++)
    00000378 64A3                   MOV         R10,R4
    0000037A 6C53                   MOV         R5,R12
    0000037C A023                   BRA         L1148
    0000037E 4C08                   SHLL2       R12
    00000380              L1396:                            
    00000380 <00000000>             .DATA.L     _free
    00000384 <00000000>             .DATA.L     _calloc
    00000388 <00000000>             .DATA.L     __muls
    0000038C <00000000>             .DATA.L     __adds
    00000390 <00000000>             .DATA.L     _ex
    00000394 <00000000>             .DATA.L     __divs
    00000398              L1149:                            
      simplexC.c   301            {
      simplexC.c   302                res[i][j]=oldIt->Binv[i][j]-(oldIt->yj[i]*res[indexPivot][j]);
    00000398 D297                   MOV.L       L1397+2,R2 ; __muls
    0000039A 60C3                   MOV         R12,R0
    0000039C 03DE                   MOV.L       @(R0,R13),R3
    0000039E 6643                   MOV         R4,R6
    000003A0 4608                   SHLL2       R6
    000003A2 336C                   ADD         R6,R3
    000003A4 2F36                   MOV.L       R3,@-R15
    000003A6 50E8                   MOV.L       @(32,R14),R0
    000003A8 01CE                   MOV.L       @(R0,R12),R1
    000003AA 316C                   ADD         R6,R1
    000003AC 6312                   MOV.L       @R1,R3
    000003AE 50EF                   MOV.L       @(60,R14),R0
    000003B0 01CE                   MOV.L       @(R0,R12),R1
    000003B2 6072                   MOV.L       @R7,R0
    000003B4 420B                   JSR         @R2
    000003B6 006E                   MOV.L       @(R0,R6),R0
    000003B8 6133                   MOV         R3,R1
    000003BA D390                   MOV.L       L1397+6,R3 ; __subs
    000003BC 430B                   JSR         @R3
    000003BE 0009                   NOP
    000003C0 63F6                   MOV.L       @R15+,R3
    000003C2 7401                   ADD         #1,R4
    000003C4 2302                   MOV.L       R0,@R3
    000003C6              L1148:                            
    000003C6 52E9                   MOV.L       @(36,R14),R2
    000003C8 3423                   CMP/GE      R2,R4
    000003CA 8901                   BT          L1150
    000003CC 35B0                   CMP/EQ      R11,R5
    000003CE 8BE3                   BF          L1149
    000003D0              L1150:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D0 7501                   ADD         #1,R5
    000003D2              L1146:                            
    000003D2 53E9                   MOV.L       @(36,R14),R3
    000003D4 3533                   CMP/GE      R3,R5
    000003D6 8BCF                   BF          L1147
      simplexC.c   303            }
      simplexC.c   304        }
      simplexC.c   305        return res;
      simplexC.c   306    }
    000003D8 4F26                   LDS.L       @R15+,PR
    000003DA 60D3                   MOV         R13,R0
    000003DC 68F6                   MOV.L       @R15+,R8
    000003DE 69F6                   MOV.L       @R15+,R9
    000003E0 6AF6                   MOV.L       @R15+,R10
    000003E2 6BF6                   MOV.L       @R15+,R11
    000003E4 6CF6                   MOV.L       @R15+,R12
    000003E6 6DF6                   MOV.L       @R15+,R13
    000003E8 000B                   RTS
    000003EA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   307    
      simplexC.c   308    struct iteration* createNewIteration(struct iteration *oldIt)
    000003EC              _createNewIteration:             ; function: createNewIteration
                                                           ; frame size=16
    000003EC 2FE6                   MOV.L       R14,@-R15
    000003EE 6E43                   MOV         R4,R14
      simplexC.c   309    {
      simplexC.c   310        struct iteration *newIt;
      simplexC.c   311        int i;
      simplexC.c   312        newIt = malloc(sizeof(struct iteration));
    000003F0 D383                   MOV.L       L1397+10,R3; _malloc
    000003F2 2FD6                   MOV.L       R13,@-R15
    000003F4 2FC6                   MOV.L       R12,@-R15
    000003F6 4F22                   STS.L       PR,@-R15
    000003F8 430B                   JSR         @R3
    000003FA E448                   MOV         #72,R4
      simplexC.c   313        newIt->numIteration=oldIt->numIteration+1;
    000003FC 62E2                   MOV.L       @R14,R2
    000003FE 6D03                   MOV         R0,R13
    00000400 7201                   ADD         #1,R2
    00000402 2D22                   MOV.L       R2,@R13
      simplexC.c   314        newIt->BinvSize=oldIt->BinvSize;
    00000404 53E9                   MOV.L       @(36,R14),R3
    00000406 1D39                   MOV.L       R3,@(36,R13)
      simplexC.c   315        newIt->Binv=calculateNewBinv(oldIt);
    00000408 BF76                   BSR         _calculateNewBinv
    0000040A 64E3                   MOV         R14,R4
    0000040C 1D08                   MOV.L       R0,@(32,R13)
      simplexC.c   316        newIt->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    0000040E E504                   MOV         #4,R5
    00000410 D37D                   MOV.L       L1397+18,R3; _calloc
    00000412 DC7C                   MOV.L       L1397+14,R12; _ex
    00000414 430B                   JSR         @R3
    00000416 54CB                   MOV.L       @(44,R12),R4
    00000418 1D02                   MOV.L       R0,@(8,R13)
      simplexC.c   317        newIt->idByRowOfBasicVarsInBInv=calloc(newIt->BinvSize,sizeof(int));
    0000041A E504                   MOV         #4,R5
    0000041C D27A                   MOV.L       L1397+18,R2; _calloc




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000041E 420B                   JSR         @R2
    00000420 54D9                   MOV.L       @(36,R13),R4
      simplexC.c   318        for(i=0;i<ex.nVariables;i++)
    00000422 E600                   MOV         #0,R6
    00000424 1D03                   MOV.L       R0,@(12,R13)
    00000426 A008                   BRA         L1152
    00000428 6463                   MOV         R6,R4
    0000042A              L1153:                            
      simplexC.c   319        {
      simplexC.c   320            newIt->idBasicVariables[i]=oldIt->idBasicVariables[i];
    0000042A 6543                   MOV         R4,R5
    0000042C 53D2                   MOV.L       @(8,R13),R3
    0000042E 4508                   SHLL2       R5
    00000430 50E2                   MOV.L       @(8,R14),R0
    00000432 7401                   ADD         #1,R4
    00000434 025E                   MOV.L       @(R0,R5),R2
    00000436 335C                   ADD         R5,R3
    00000438 2322                   MOV.L       R2,@R3
    0000043A              L1152:                            
    0000043A 52CB                   MOV.L       @(44,R12),R2
    0000043C 3423                   CMP/GE      R2,R4
    0000043E 8BF4                   BF          L1153
      simplexC.c   321        }
      simplexC.c   322        for(i=0;i<oldIt->BinvSize;i++)
    00000440 A011                   BRA         L1154
    00000442 6463                   MOV         R6,R4
    00000444              L1155:                            
    00000444 50E3                   MOV.L       @(12,R14),R0
    00000446 6C43                   MOV         R4,R12
    00000448 52E6                   MOV.L       @(24,R14),R2
    0000044A 4C08                   SHLL2       R12
    0000044C 03CE                   MOV.L       @(R0,R12),R3
    0000044E 3320                   CMP/EQ      R2,R3
    00000450 8D06                   BT/S        L1156
    00000452 7401                   ADD         #1,R4
      simplexC.c   323        {
      simplexC.c   324            if(oldIt->idByRowOfBasicVarsInBInv[i]!=oldIt->idVarOut)
      simplexC.c   325            {
      simplexC.c   326                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idByRowOfBasicVarsInBInv[i];
    00000454 53D3                   MOV.L       @(12,R13),R3
    00000456 33CC                   ADD         R12,R3
    00000458 50E3                   MOV.L       @(12,R14),R0
    0000045A 02CE                   MOV.L       @(R0,R12),R2
    0000045C A003                   BRA         L1157
    0000045E 2322                   MOV.L       R2,@R3
    00000460              L1156:                            
      simplexC.c   327            }else
      simplexC.c   328            {
      simplexC.c   329                newIt->idByRowOfBasicVarsInBInv[i]=oldIt->idVarIn;
    00000460 50D3                   MOV.L       @(12,R13),R0
    00000462 53E5                   MOV.L       @(20,R14),R3
    00000464 0C36                   MOV.L       R3,@(R0,R12)
    00000466              L1157:                            
    00000466              L1154:                            
    00000466 52E9                   MOV.L       @(36,R14),R2
    00000468 3423                   CMP/GE      R2,R4
    0000046A 8BEB                   BF          L1155




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   330            }
      simplexC.c   331        }
      simplexC.c   332        newIt->idBasicVariables[oldIt->idVarOut]=0;
    0000046C 51E6                   MOV.L       @(24,R14),R1
      simplexC.c   333        newIt->idBasicVariables[oldIt->idVarIn]=1;
    0000046E E201                   MOV         #1,R2
    00000470 50D2                   MOV.L       @(8,R13),R0
    00000472 4108                   SHLL2       R1
    00000474 0166                   MOV.L       R6,@(R0,R1)
    00000476 53E5                   MOV.L       @(20,R14),R3
    00000478 50D2                   MOV.L       @(8,R13),R0
    0000047A 4308                   SHLL2       R3
    0000047C 0326                   MOV.L       R2,@(R0,R3)
      simplexC.c   334        return newIt;
    0000047E 60D3                   MOV         R13,R0
      simplexC.c   335    }
    00000480 4F26                   LDS.L       @R15+,PR
    00000482 6CF6                   MOV.L       @R15+,R12
    00000484 6DF6                   MOV.L       @R15+,R13
    00000486 000B                   RTS
    00000488 6EF6                   MOV.L       @R15+,R14
      simplexC.c   336    
      simplexC.c   337    int calculateIteration(struct iteration *it)
    0000048A              _calculateIteration:             ; function: calculateIteration
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __subs, __divs, __eqs, __gts, __lts
    0000048A 2FE6                   MOV.L       R14,@-R15
    0000048C 2FD6                   MOV.L       R13,@-R15
    0000048E 6E43                   MOV         R4,R14
    00000490 2FC6                   MOV.L       R12,@-R15
    00000492 2FB6                   MOV.L       R11,@-R15
    00000494 2FA6                   MOV.L       R10,@-R15
    00000496 EA00                   MOV         #0,R10
    00000498 DD5A                   MOV.L       L1397+14,R13; _ex
    0000049A 2F96                   MOV.L       R9,@-R15
    0000049C 2F86                   MOV.L       R8,@-R15
    0000049E E8FF                   MOV         #-1,R8
    000004A0 4F22                   STS.L       PR,@-R15
    000004A2 7FF8                   ADD         #-8,R15
      simplexC.c   338    {
      simplexC.c   339        int i;
      simplexC.c   340        float * cVectorValues,*ct;
      simplexC.c   341        float bestEntryVarValue,bestExitVarValue;
      simplexC.c   342        it->is2FasesActive=ex.canonicalStatement->is2fasesActive;
    000004A4 53D2                   MOV.L       @(8,R13),R3
    000004A6 5233                   MOV.L       @(12,R3),R2
    000004A8 1E21                   MOV.L       R2,@(4,R14)
      simplexC.c   343        cVectorValues=getCurrentCvectorValues(it);
    000004AA BEDA                   BSR         _getCurrentCvectorValues
    000004AC 64E3                   MOV         R14,R4
    000004AE 1F01                   MOV.L       R0,@(4,R15)
      simplexC.c   344        ct=getCurrentCt(it);
    000004B0 BEF0                   BSR         _getCurrentCt
    000004B2 64E3                   MOV         R14,R4
      simplexC.c   345        it->ct=ct;
    000004B4 1E0A                   MOV.L       R0,@(40,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004B6 6C03                   MOV         R0,R12
      simplexC.c   346        it->xb=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.bVectorValues);
    000004B8 56D6                   MOV.L       @(24,R13),R6
    000004BA 55E8                   MOV.L       @(32,R14),R5
    000004BC BE84                   BSR         _calculateMatrixVectorMul
    000004BE 54E9                   MOV.L       @(36,R14),R4
    000004C0 1E0B                   MOV.L       R0,@(44,R14)
      simplexC.c   347        it->ctBinv=calculateVectorMatrixrMul(it->BinvSize,it->Binv,ct);
    000004C2 66C3                   MOV         R12,R6
    000004C4 55E8                   MOV.L       @(32,R14),R5
    000004C6 BE4D                   BSR         _calculateVectorMatrixrMul
    000004C8 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   348        it->zSol=calculateVectorDotProduct(it->BinvSize,ct,it->xb);
    000004CA 65C3                   MOV         R12,R5
    000004CC 1E0C                   MOV.L       R0,@(48,R14)
    000004CE 56EB                   MOV.L       @(44,R14),R6
    000004D0 BEAD                   BSR         _calculateVectorDotProduct
    000004D2 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   349        //Calculate values for zj and cj-zj and idVarIn
      simplexC.c   350        it->zj=calloc(ex.nVariables,sizeof(float));
    000004D4 D34C                   MOV.L       L1397+18,R3; _calloc
    000004D6 E144                   MOV         #68,R1
    000004D8 31EC                   ADD         R14,R1
    000004DA E504                   MOV         #4,R5
    000004DC 2102                   MOV.L       R0,@R1
    000004DE 430B                   JSR         @R3
    000004E0 54DB                   MOV.L       @(44,R13),R4
      simplexC.c   351        it->cjMinusZj=calloc(ex.nVariables,sizeof(float));
    000004E2 E504                   MOV         #4,R5
    000004E4 D248                   MOV.L       L1397+18,R2; _calloc
    000004E6 1E0D                   MOV.L       R0,@(52,R14)
    000004E8 420B                   JSR         @R2
    000004EA 54DB                   MOV.L       @(44,R13),R4
    000004EC 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c   352        it->idVarIn=-1;
    000004EE 1E85                   MOV.L       R8,@(20,R14)
      simplexC.c   353        if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE)
    000004F0 50DA                   MOV.L       @(40,R13),R0
    000004F2 8801                   CMP/EQ      #1,R0
    000004F4 8F03                   BF/S        L1159
      simplexC.c   354        {
      simplexC.c   355            bestEntryVarValue=INT_MIN;
      simplexC.c   356        }else
      simplexC.c   357        {
      simplexC.c   358            bestEntryVarValue=INT_MAX;
      simplexC.c   359        }
      simplexC.c   360        
      simplexC.c   361        
      simplexC.c   362        for(i=0;i<ex.nVariables;i++)
    000004F6 6CA3                   MOV         R10,R12
    000004F8 D944                   MOV.L       L1397+22,R9; H'CF000000
    000004FA A001                   BRA         L1160
    000004FC 0009                   NOP
    000004FE              L1159:                            
    000004FE D944                   MOV.L       L1397+26,R9; H'4F000000
    00000500              L1160:                            
    00000500 A05C                   BRA         L1161




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000502 0009                   NOP
    00000504              L1162:                            
      simplexC.c   363        {
      simplexC.c   364            if((!it->idBasicVariables[i] && ex.canonicalStatement->is2fasesActive) ||
      simplexC.c   365                (!it->idBasicVariables[i] && !ex.canonicalStatement->is2fasesActive && !ex.canonicalStatement-
                         +>id2fasesVariables[i]) )
    00000504 50E2                   MOV.L       @(8,R14),R0
    00000506 64C3                   MOV         R12,R4
    00000508 4408                   SHLL2       R4
    0000050A 024E                   MOV.L       @(R0,R4),R2
    0000050C 2228                   TST         R2,R2
    0000050E 8B04                   BF          L1165
    00000510 D340                   MOV.L       L1397+30,R3; H'00000008+_ex
    00000512 6132                   MOV.L       @R3,R1
    00000514 5213                   MOV.L       @(12,R1),R2
    00000516 2228                   TST         R2,R2
    00000518 8B0E                   BF          L1164
    0000051A              L1165:                            
    0000051A 50E2                   MOV.L       @(8,R14),R0
    0000051C 034E                   MOV.L       @(R0,R4),R3
    0000051E 2338                   TST         R3,R3
    00000520 8B4B                   BF          L1163
    00000522 D23C                   MOV.L       L1397+30,R2; H'00000008+_ex
    00000524 6122                   MOV.L       @R2,R1
    00000526 5313                   MOV.L       @(12,R1),R3
    00000528 2338                   TST         R3,R3
    0000052A 8B46                   BF          L1163
    0000052C D339                   MOV.L       L1397+30,R3; H'00000008+_ex
    0000052E 6032                   MOV.L       @R3,R0
    00000530 500E                   MOV.L       @(56,R0),R0
    00000532 014E                   MOV.L       @(R0,R4),R1
    00000534 2118                   TST         R1,R1
    00000536 8B40                   BF          L1163
    00000538              L1164:                            
      simplexC.c   366            {
      simplexC.c   367                it->zj[i]=calculateVectorDotProduct(it->BinvSize,it->ctBinv,ex.ajVector[i]);
    00000538 50ED                   MOV.L       @(52,R14),R0
    0000053A 6BC3                   MOV         R12,R11
    0000053C 4B08                   SHLL2       R11
    0000053E 30BC                   ADD         R11,R0
    00000540 2F06                   MOV.L       R0,@-R15
    00000542 50F1                   MOV.L       @(4,R15),R0
    00000544 55EC                   MOV.L       @(48,R14),R5
    00000546 06BE                   MOV.L       @(R0,R11),R6
    00000548 BE71                   BSR         _calculateVectorDotProduct
    0000054A 54E9                   MOV.L       @(36,R14),R4
    0000054C 62F6                   MOV.L       @R15+,R2
    0000054E 2202                   MOV.L       R0,@R2
      simplexC.c   368                it->cjMinusZj[i]=cVectorValues[i]-it->zj[i];
    00000550 50EE                   MOV.L       @(56,R14),R0
    00000552 6203                   MOV         R0,R2
    00000554 50F1                   MOV.L       @(4,R15),R0
    00000556 32BC                   ADD         R11,R2
    00000558 D328                   MOV.L       L1397+6,R3 ; __subs
    0000055A 01BE                   MOV.L       @(R0,R11),R1
    0000055C 50ED                   MOV.L       @(52,R14),R0
    0000055E 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000560 00BE                   MOV.L       @(R0,R11),R0
    00000562 2202                   MOV.L       R0,@R2
      simplexC.c   369    
      simplexC.c   370                if(ex.currentFuncObjectivePurpose==FUNC_MINIMIZE && it->cjMinusZj[i]<0 && it->cjMinusZj[i]<bes
                         +tEntryVarValue )
    00000564 53DA                   MOV.L       @(40,R13),R3
    00000566 2338                   TST         R3,R3
    00000568 8B0D                   BF          L1166
    0000056A 50EE                   MOV.L       @(56,R14),R0
    0000056C D32A                   MOV.L       L1397+34,R3; __lts
    0000056E 01BE                   MOV.L       @(R0,R11),R1
    00000570 430B                   JSR         @R3
    00000572 E000                   MOV         #0,R0
    00000574 8800                   CMP/EQ      #0,R0
    00000576 8906                   BT          L1166
    00000578 50EE                   MOV.L       @(56,R14),R0
    0000057A 01BE                   MOV.L       @(R0,R11),R1
    0000057C D326                   MOV.L       L1397+34,R3; __lts
    0000057E 430B                   JSR         @R3
    00000580 6093                   MOV         R9,R0
    00000582 8800                   CMP/EQ      #0,R0
    00000584 8B14                   BF          L986
    00000586              L1166:                            
      simplexC.c   371                {
      simplexC.c   372                    bestEntryVarValue=it->cjMinusZj[i];
      simplexC.c   373                    it->idVarIn=i;
      simplexC.c   374                }else if(ex.currentFuncObjectivePurpose==FUNC_MAXIMIZE && it->cjMinusZj[i]>0 && it->cjMinusZj[
                         +i]>bestEntryVarValue )
    00000586 50DA                   MOV.L       @(40,R13),R0
    00000588 8801                   CMP/EQ      #1,R0
    0000058A 8B16                   BF          L1163
    0000058C 50EE                   MOV.L       @(56,R14),R0
    0000058E 61C3                   MOV         R12,R1
    00000590 D322                   MOV.L       L1397+38,R3; __gts
    00000592 4108                   SHLL2       R1
    00000594 011E                   MOV.L       @(R0,R1),R1
    00000596 430B                   JSR         @R3
    00000598 E000                   MOV         #0,R0
    0000059A 8800                   CMP/EQ      #0,R0
    0000059C 890D                   BT          L1163
    0000059E 61C3                   MOV         R12,R1
    000005A0 50EE                   MOV.L       @(56,R14),R0
    000005A2 4108                   SHLL2       R1
    000005A4 D31D                   MOV.L       L1397+38,R3; __gts
    000005A6 011E                   MOV.L       @(R0,R1),R1
    000005A8 430B                   JSR         @R3
    000005AA 6093                   MOV         R9,R0
    000005AC 8800                   CMP/EQ      #0,R0
    000005AE 8904                   BT          L1163
    000005B0              L986:
      simplexC.c   375                {
      simplexC.c   376                    bestEntryVarValue=it->cjMinusZj[i];
    000005B0 50EE                   MOV.L       @(56,R14),R0
    000005B2 69C3                   MOV         R12,R9
    000005B4 4908                   SHLL2       R9
    000005B6 099E                   MOV.L       @(R0,R9),R9
      simplexC.c   377                    it->idVarIn=i;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005B8 1EC5                   MOV.L       R12,@(20,R14)
    000005BA              L1163:                            
    000005BA 7C01                   ADD         #1,R12
    000005BC              L1161:                            
    000005BC 53DD                   MOV.L       @(52,R13),R3
    000005BE 2F32                   MOV.L       R3,@R15
    000005C0 52DB                   MOV.L       @(44,R13),R2
    000005C2 3C23                   CMP/GE      R2,R12
    000005C4 8B9E                   BF          L1162
      simplexC.c   378                }
      simplexC.c   379            }
      simplexC.c   380        }
      simplexC.c   381        if(it->idVarIn!=-1)//Check optimum criteria
    000005C6 50E5                   MOV.L       @(20,R14),R0
    000005C8 88FF                   CMP/EQ      #-1,R0
    000005CA 8973                   BT          L987
      simplexC.c   382        {
      simplexC.c   383            //Calculate yj
      simplexC.c   384            it->yj=calculateMatrixVectorMul(it->BinvSize,it->Binv,ex.ajVector[it->idVarIn]);
    000005CC 56E5                   MOV.L       @(20,R14),R6
    000005CE 4608                   SHLL2       R6
    000005D0 60F2                   MOV.L       @R15,R0
    000005D2 066E                   MOV.L       @(R0,R6),R6
    000005D4 55E8                   MOV.L       @(32,R14),R5
    000005D6 BDF7                   BSR         _calculateMatrixVectorMul
    000005D8 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   385            it->xbDivYj= calloc(it->BinvSize,sizeof(float));
    000005DA E504                   MOV         #4,R5
    000005DC D20A                   MOV.L       L1397+18,R2; _calloc
    000005DE 1E0F                   MOV.L       R0,@(60,R14)
    000005E0 420B                   JSR         @R2
    000005E2 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   386            bestExitVarValue=INT_MAX;
    000005E4 D60A                   MOV.L       L1397+26,R6; H'4F000000
      simplexC.c   387            it->indexVarOutInBInvMatrix=-1;
      simplexC.c   388            it->isUnbounded=1;
    000005E6 E301                   MOV         #1,R3
    000005E8 E140                   MOV         #64,R1
    000005EA 31EC                   ADD         R14,R1
    000005EC 2102                   MOV.L       R0,@R1
    000005EE 1E87                   MOV.L       R8,@(28,R14)
    000005F0 1E34                   MOV.L       R3,@(16,R14)
      simplexC.c   389            for(i=0;i<it->BinvSize;i++)
    000005F2 A053                   BRA         L1170
    000005F4 64A3                   MOV         R10,R4
    000005F6              L1397:                            
    000005F6 0000                   .DATA.W     0
    000005F8 <00000000>             .DATA.L     __muls
    000005FC <00000000>             .DATA.L     __subs
    00000600 <00000000>             .DATA.L     _malloc
    00000604 <00000000>             .DATA.L     _ex
    00000608 <00000000>             .DATA.L     _calloc
    0000060C CF000000               .DATA.L     H'CF000000
    00000610 4F000000               .DATA.L     H'4F000000
    00000614 <00000008>             .DATA.L     H'00000008+_ex
    00000618 <00000000>             .DATA.L     __lts
    0000061C <00000000>             .DATA.L     __gts




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000620              L1171:                            
      simplexC.c   390            {
      simplexC.c   391                if(it->yj[i]!=0)
    00000620 50EF                   MOV.L       @(60,R14),R0
    00000622 6143                   MOV         R4,R1
    00000624 D371                   MOV.L       L1398+2,R3 ; __eqs
    00000626 4108                   SHLL2       R1
    00000628 011E                   MOV.L       @(R0,R1),R1
    0000062A 430B                   JSR         @R3
    0000062C E000                   MOV         #0,R0
    0000062E 8800                   CMP/EQ      #0,R0
    00000630 8B2D                   BF          L985
      simplexC.c   392                {
      simplexC.c   393                    it->xbDivYj[i]=it->xb[i]/it->yj[i];
    00000632 6543                   MOV         R4,R5
    00000634 D36E                   MOV.L       L1398+6,R3 ; __divs
    00000636 E040                   MOV         #64,R0
    00000638 00EE                   MOV.L       @(R0,R14),R0
    0000063A 4508                   SHLL2       R5
    0000063C 6203                   MOV         R0,R2
    0000063E 325C                   ADD         R5,R2
    00000640 50EB                   MOV.L       @(44,R14),R0
    00000642 015E                   MOV.L       @(R0,R5),R1
    00000644 50EF                   MOV.L       @(60,R14),R0
    00000646 430B                   JSR         @R3
    00000648 005E                   MOV.L       @(R0,R5),R0
    0000064A 2202                   MOV.L       R0,@R2
      simplexC.c   394                    if(it->xbDivYj[i]>0 && it->xbDivYj[i]<bestExitVarValue)
    0000064C D369                   MOV.L       L1398+10,R3; __gts
    0000064E E040                   MOV         #64,R0
    00000650 00EE                   MOV.L       @(R0,R14),R0
    00000652 075E                   MOV.L       @(R0,R5),R7
    00000654 6173                   MOV         R7,R1
    00000656 430B                   JSR         @R3
    00000658 E000                   MOV         #0,R0
    0000065A 8800                   CMP/EQ      #0,R0
    0000065C 890D                   BT          L1173
    0000065E 6173                   MOV         R7,R1
    00000660 D265                   MOV.L       L1398+14,R2; __lts
    00000662 420B                   JSR         @R2
    00000664 6063                   MOV         R6,R0
    00000666 8800                   CMP/EQ      #0,R0
    00000668 8907                   BT          L1173
      simplexC.c   395                    {
      simplexC.c   396                        it->indexVarOutInBInvMatrix=i;
      simplexC.c   397                        bestExitVarValue=it->xbDivYj[i];
    0000066A 6643                   MOV         R4,R6
    0000066C 1E47                   MOV.L       R4,@(28,R14)
    0000066E E040                   MOV         #64,R0
    00000670 00EE                   MOV.L       @(R0,R14),R0
    00000672 4608                   SHLL2       R6
    00000674 066E                   MOV.L       @(R0,R6),R6
      simplexC.c   398                        it->isUnbounded=0;
    00000676 A010                   BRA         L1176
    00000678 1EA4                   MOV.L       R10,@(16,R14)
    0000067A              L1173:                            
      simplexC.c   399                    }else if(it->xbDivYj[i]<0)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000067A 6143                   MOV         R4,R1
    0000067C D35E                   MOV.L       L1398+14,R3; __lts
    0000067E E040                   MOV         #64,R0
    00000680 00EE                   MOV.L       @(R0,R14),R0
    00000682 4108                   SHLL2       R1
    00000684 011E                   MOV.L       @(R0,R1),R1
    00000686 430B                   JSR         @R3
    00000688 E000                   MOV         #0,R0
    0000068A 8800                   CMP/EQ      #0,R0
    0000068C 8905                   BT          L1176
    0000068E              L985:
      simplexC.c   400                    {
      simplexC.c   401                        it->xbDivYj[i]=NO_EVAL_VALUE;
      simplexC.c   402                    }
      simplexC.c   403                    
      simplexC.c   404                }else
      simplexC.c   405                {
      simplexC.c   406                    it->xbDivYj[i]=NO_EVAL_VALUE;
    0000068E 6243                   MOV         R4,R2
    00000690 D35A                   MOV.L       L1398+18,R3; H'4F000000
    00000692 E040                   MOV         #64,R0
    00000694 00EE                   MOV.L       @(R0,R14),R0
    00000696 4208                   SHLL2       R2
    00000698 0236                   MOV.L       R3,@(R0,R2)
    0000069A              L1176:                            
    0000069A 7401                   ADD         #1,R4
    0000069C              L1170:                            
    0000069C 52E9                   MOV.L       @(36,R14),R2
    0000069E 3423                   CMP/GE      R2,R4
    000006A0 8BBE                   BF          L1171
      simplexC.c   407                }
      simplexC.c   408                
      simplexC.c   409            }
      simplexC.c   410            if(!it->isUnbounded)
    000006A2 51E4                   MOV.L       @(16,R14),R1
    000006A4 2118                   TST         R1,R1
    000006A6 8B05                   BF          L987
      simplexC.c   411            {
      simplexC.c   412                it->idVarOut=it->idByRowOfBasicVarsInBInv[it->indexVarOutInBInvMatrix];
    000006A8 53E7                   MOV.L       @(28,R14),R3
    000006AA 4308                   SHLL2       R3
    000006AC 50E3                   MOV.L       @(12,R14),R0
    000006AE 023E                   MOV.L       @(R0,R3),R2
    000006B0 A001                   BRA         L1179
    000006B2 1E26                   MOV.L       R2,@(24,R14)
    000006B4              L987:
      simplexC.c   413            }else
      simplexC.c   414            {
      simplexC.c   415                it->idVarOut=-1;
      simplexC.c   416            }
      simplexC.c   417        }else
      simplexC.c   418        {
      simplexC.c   419            it->idVarOut=-1;
    000006B4 1E86                   MOV.L       R8,@(24,R14)
    000006B6              L1179:                            
      simplexC.c   420        }
      simplexC.c   421        




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   422        
      simplexC.c   423    }
    000006B6 7F08                   ADD         #8,R15
    000006B8 4F26                   LDS.L       @R15+,PR
    000006BA 68F6                   MOV.L       @R15+,R8
    000006BC 69F6                   MOV.L       @R15+,R9
    000006BE 6AF6                   MOV.L       @R15+,R10
    000006C0 6BF6                   MOV.L       @R15+,R11
    000006C2 6CF6                   MOV.L       @R15+,R12
    000006C4 6DF6                   MOV.L       @R15+,R13
    000006C6 000B                   RTS
    000006C8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   424    
      simplexC.c   425    struct iteration* modelToIteration(struct problemStatement *pS)
    000006CA              _modelToIteration:               ; function: modelToIteration
                                                           ; frame size=32
    000006CA 2FE6                   MOV.L       R14,@-R15
    000006CC 2FD6                   MOV.L       R13,@-R15
    000006CE 6D43                   MOV         R4,R13
      simplexC.c   426    {
      simplexC.c   427        struct iteration *it;
      simplexC.c   428        int i;
      simplexC.c   429        it = malloc(sizeof(struct iteration));
    000006D0 D34B                   MOV.L       L1398+22,R3; _malloc
    000006D2 2FC6                   MOV.L       R12,@-R15
    000006D4 2FB6                   MOV.L       R11,@-R15
    000006D6 2FA6                   MOV.L       R10,@-R15
    000006D8 2F96                   MOV.L       R9,@-R15
    000006DA 2F86                   MOV.L       R8,@-R15
    000006DC 4F22                   STS.L       PR,@-R15
    000006DE 430B                   JSR         @R3
    000006E0 E448                   MOV         #72,R4
    000006E2 6E03                   MOV         R0,R14
      simplexC.c   430        it->numIteration=0;
      simplexC.c   431        //Matriz B-1
      simplexC.c   432        it->BinvSize=pS->nConstraints;
      simplexC.c   433        it->Binv=calloc(it->BinvSize,sizeof(float));
    000006E4 DA47                   MOV.L       L1398+26,R10; _calloc
    000006E6 E504                   MOV         #4,R5
    000006E8 E900                   MOV         #0,R9
    000006EA 2E92                   MOV.L       R9,@R14
    000006EC 52DB                   MOV.L       @(44,R13),R2
    000006EE 1E29                   MOV.L       R2,@(36,R14)
    000006F0 4A0B                   JSR         @R10
    000006F2 6423                   MOV         R2,R4
    000006F4 1E08                   MOV.L       R0,@(32,R14)
      simplexC.c   434        for(i=0;i<it->BinvSize;i++)
    000006F6 A00E                   BRA         L1180
    000006F8 6C93                   MOV         R9,R12
    000006FA              L1181:                            
      simplexC.c   435        {
      simplexC.c   436            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    000006FA 6BC3                   MOV         R12,R11
    000006FC 58E8                   MOV.L       @(32,R14),R8
    000006FE E504                   MOV         #4,R5
    00000700 4B08                   SHLL2       R11
    00000702 38BC                   ADD         R11,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000704 4A0B                   JSR         @R10
    00000706 54E9                   MOV.L       @(36,R14),R4
    00000708 2802                   MOV.L       R0,@R8
    0000070A 7C01                   ADD         #1,R12
      simplexC.c   437            it->Binv[i][i]=1;
    0000070C D23E                   MOV.L       L1398+30,R2; H'3F800000
    0000070E 50E8                   MOV.L       @(32,R14),R0
    00000710 03BE                   MOV.L       @(R0,R11),R3
    00000712 33BC                   ADD         R11,R3
    00000714 2322                   MOV.L       R2,@R3
    00000716              L1180:                            
    00000716 53E9                   MOV.L       @(36,R14),R3
    00000718 3C33                   CMP/GE      R3,R12
    0000071A 8BEE                   BF          L1181
      simplexC.c   438        }
      simplexC.c   439        it->idBasicVariables=calloc(pS->nVariables,sizeof(int));
    0000071C E504                   MOV         #4,R5
    0000071E 4A0B                   JSR         @R10
    00000720 54D7                   MOV.L       @(28,R13),R4
      simplexC.c   440        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    00000722 E504                   MOV         #4,R5
    00000724 1E02                   MOV.L       R0,@(8,R14)
    00000726 4A0B                   JSR         @R10
    00000728 54E9                   MOV.L       @(36,R14),R4
      simplexC.c   441        for(i=0;i<it->BinvSize;i++)
    0000072A E401                   MOV         #1,R4
    0000072C 1E03                   MOV.L       R0,@(12,R14)
    0000072E A023                   BRA         L1182
    00000730 6593                   MOV         R9,R5
    00000732              L1183:                            
    00000732 6C53                   MOV         R5,R12
    00000734 4C08                   SHLL2       R12
    00000736 E040                   MOV         #64,R0
    00000738 00DE                   MOV.L       @(R0,R13),R0
    0000073A 03CE                   MOV.L       @(R0,R12),R3
    0000073C 4315                   CMP/PL      R3
    0000073E 8B0C                   BF          L1184
      simplexC.c   442        {
      simplexC.c   443            if(pS->idConstraintTo2fasesVar[i]>0)
      simplexC.c   444            {
      simplexC.c   445                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintTo2fasesVar[i];
    00000740 52E3                   MOV.L       @(12,R14),R2
    00000742 E040                   MOV         #64,R0
    00000744 00DE                   MOV.L       @(R0,R13),R0
    00000746 32CC                   ADD         R12,R2
    00000748 03CE                   MOV.L       @(R0,R12),R3
      simplexC.c   446                it->idBasicVariables[pS->idConstraintTo2fasesVar[i]]=1;
    0000074A E040                   MOV         #64,R0
    0000074C 2232                   MOV.L       R3,@R2
    0000074E 00DE                   MOV.L       @(R0,R13),R0
    00000750 03CE                   MOV.L       @(R0,R12),R3
    00000752 4308                   SHLL2       R3
    00000754 50E2                   MOV.L       @(8,R14),R0
    00000756 A00E                   BRA         L1185
    00000758 0346                   MOV.L       R4,@(R0,R3)
    0000075A              L1184:                            
      simplexC.c   447            }else if(pS->idConstraintToSlopeVar[i]>0)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000075A 50DF                   MOV.L       @(60,R13),R0
    0000075C 03CE                   MOV.L       @(R0,R12),R3
    0000075E 4315                   CMP/PL      R3
    00000760 8B09                   BF          L1185
      simplexC.c   448            {
      simplexC.c   449                it->idByRowOfBasicVarsInBInv[i]=pS->idConstraintToSlopeVar[i];
    00000762 52E3                   MOV.L       @(12,R14),R2
    00000764 50DF                   MOV.L       @(60,R13),R0
    00000766 32CC                   ADD         R12,R2
    00000768 03CE                   MOV.L       @(R0,R12),R3
    0000076A 2232                   MOV.L       R3,@R2
      simplexC.c   450                it->idBasicVariables[pS->idConstraintToSlopeVar[i]]=1;
    0000076C 50DF                   MOV.L       @(60,R13),R0
    0000076E 03CE                   MOV.L       @(R0,R12),R3
    00000770 50E2                   MOV.L       @(8,R14),R0
    00000772 4308                   SHLL2       R3
    00000774 0346                   MOV.L       R4,@(R0,R3)
    00000776              L1185:                            
    00000776 7501                   ADD         #1,R5
    00000778              L1182:                            
    00000778 52E9                   MOV.L       @(36,R14),R2
    0000077A 3523                   CMP/GE      R2,R5
    0000077C 8BD9                   BF          L1183
      simplexC.c   451            }
      simplexC.c   452        }
      simplexC.c   453        return it;
    0000077E 60E3                   MOV         R14,R0
      simplexC.c   454    }
    00000780 4F26                   LDS.L       @R15+,PR
    00000782 68F6                   MOV.L       @R15+,R8
    00000784 69F6                   MOV.L       @R15+,R9
    00000786 6AF6                   MOV.L       @R15+,R10
    00000788 6BF6                   MOV.L       @R15+,R11
    0000078A 6CF6                   MOV.L       @R15+,R12
    0000078C 6DF6                   MOV.L       @R15+,R13
    0000078E 000B                   RTS
    00000790 6EF6                   MOV.L       @R15+,R14
      simplexC.c   455    
      simplexC.c   456    int lengthConcatenate(int sprintLength)
    00000792              _lengthConcatenate:              ; function: lengthConcatenate
                                                           ; frame size=0
      simplexC.c   457    {
      simplexC.c   458        return (sprintLength > 0) ? sprintLength : 0;
    00000792 4415                   CMP/PL      R4
    00000794 8B01                   BF          L1188
    00000796 000B                   RTS
    00000798 6043                   MOV         R4,R0
    0000079A              L1188:                            
    0000079A E000                   MOV         #0,R0
      simplexC.c   459    }
    0000079C              L1190:                            
    0000079C 000B                   RTS
    0000079E 0009                   NOP
      simplexC.c   460    
      simplexC.c   461    char* getInequalityChar(int inequalitySign)
    000007A0              _getInequalityChar:              ; function: getInequalityChar
                                                           ; frame size=0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   462    {
      simplexC.c   463        char * res;
      simplexC.c   464        switch (inequalitySign)
    000007A0 6043                   MOV         R4,R0
    000007A2 8800                   CMP/EQ      #0,R0
    000007A4 8905                   BT          L988
    000007A6 8801                   CMP/EQ      #1,R0
    000007A8 8906                   BT          L990
    000007AA 8802                   CMP/EQ      #2,R0
    000007AC 8907                   BT          L992
    000007AE A009                   BRA         L994
    000007B0 0009                   NOP
    000007B2              L988:                            ; case label 
      simplexC.c   465        {
      simplexC.c   466            case INE_EQUAL: res="="; break;
    000007B2 D416                   MOV.L       L1398+34,R4; L554
    000007B4 A007                   BRA         L1191
    000007B6 0009                   NOP
    000007B8              L990:                            ; case label 
      simplexC.c   467            case INE_LESS_OR_EQUAL_THAN: res="<="; break;
    000007B8 D415                   MOV.L       L1398+38,R4; L555
    000007BA A004                   BRA         L1191
    000007BC 0009                   NOP
    000007BE              L992:                            ; case label 
      simplexC.c   468            case INE_GREATER_OR_EQUAL_THAN: res=">="; break;
    000007BE D415                   MOV.L       L1398+42,R4; L556
    000007C0 A001                   BRA         L1191
    000007C2 0009                   NOP
    000007C4              L994:                            ; default label 
      simplexC.c   469            default: res = "ERROR"; break;
    000007C4 D414                   MOV.L       L1398+46,R4; L557
    000007C6              L1191:                            
      simplexC.c   470        }
      simplexC.c   471        return res;
      simplexC.c   472    }
    000007C6 000B                   RTS
    000007C8 6043                   MOV         R4,R0
      simplexC.c   473    
      simplexC.c   474    char * getFuncObjPurposeChar(int purpose)
    000007CA              _getFuncObjPurposeChar:          ; function: getFuncObjPurposeChar
                                                           ; frame size=0
      simplexC.c   475    {
      simplexC.c   476        char * res;
      simplexC.c   477        switch (purpose)
    000007CA 6043                   MOV         R4,R0
    000007CC 8800                   CMP/EQ      #0,R0
    000007CE 8903                   BT          L996
    000007D0 8801                   CMP/EQ      #1,R0
    000007D2 8904                   BT          L998
    000007D4 A006                   BRA         L1000
    000007D6 0009                   NOP
    000007D8              L996:                            ; case label 
      simplexC.c   478        {
      simplexC.c   479            case FUNC_MINIMIZE: res="MIN"; break;
    000007D8 D410                   MOV.L       L1398+50,R4; L563
    000007DA A004                   BRA         L1193
    000007DC 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007DE              L998:                            ; case label 
      simplexC.c   480            case FUNC_MAXIMIZE: res="MAX"; break;
    000007DE D410                   MOV.L       L1398+54,R4; L564
    000007E0 A001                   BRA         L1193
    000007E2 0009                   NOP
    000007E4              L1000:                           ; default label 
      simplexC.c   481            default: res = "ERROR";break;
    000007E4 D40C                   MOV.L       L1398+46,R4; L557
    000007E6              L1193:                            
      simplexC.c   482        }
      simplexC.c   483        return res;
      simplexC.c   484    } 
    000007E6 000B                   RTS
    000007E8 6043                   MOV         R4,R0
    000007EA              L1398:                            
    000007EA 0000                   .DATA.W     0
    000007EC <00000000>             .DATA.L     __eqs
    000007F0 <00000000>             .DATA.L     __divs
    000007F4 <00000000>             .DATA.L     __gts
    000007F8 <00000000>             .DATA.L     __lts
    000007FC 4F000000               .DATA.L     H'4F000000
    00000800 <00000000>             .DATA.L     _malloc
    00000804 <00000000>             .DATA.L     _calloc
    00000808 3F800000               .DATA.L     H'3F800000
    0000080C <00000000>             .DATA.L     L554
    00000810 <00000000>             .DATA.L     L555
    00000814 <00000000>             .DATA.L     L556
    00000818 <00000000>             .DATA.L     L557
    0000081C <00000000>             .DATA.L     L563
    00000820 <00000000>             .DATA.L     L564
      simplexC.c   485    
      simplexC.c   486    int printObjFunc(struct problemStatement* pS,int modelType)
    00000824              _printObjFunc:                   ; function: printObjFunc
                                                           ; frame size=1212
                                                           ; used runtime library name:
                                                           ; __stod
    00000824 2FE6                   MOV.L       R14,@-R15
      simplexC.c   487    {
      simplexC.c   488        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutBasicInfo3[128],stroutInfoVar[128
                         +];
      simplexC.c   489        char *uselessSring[128];
      simplexC.c   490        int menuChoice;
      simplexC.c   491        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   492        sprintf(stroutTop,"Problem statement %s, OBJ. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"SOLVE",
                         + EXIT_OPT);
    00000826 E300                   MOV         #0,R3
    00000828 9088                   MOV.W       L1399,R0   ; H'FB7C
    0000082A 2FD6                   MOV.L       R13,@-R15
    0000082C 2FC6                   MOV.L       R12,@-R15
    0000082E 6C43                   MOV         R4,R12
    00000830 2FB6                   MOV.L       R11,@-R15
    00000832 2FA6                   MOV.L       R10,@-R15
    00000834 2F96                   MOV.L       R9,@-R15
    00000836 2F86                   MOV.L       R8,@-R15
    00000838 4F22                   STS.L       PR,@-R15
    0000083A 3F0C                   ADD         R0,R15
    0000083C DB45                   MOV.L       L1399+24,R11; _sprintf




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000083E 2F52                   MOV.L       R5,@R15
    00000840 2F36                   MOV.L       R3,@-R15
    00000842 50C1                   MOV.L       @(4,R12),R0
    00000844 8801                   CMP/EQ      #1,R0
    00000846 8F03                   BF/S        L1195
    00000848 EDFF                   MOV         #-1,R13
    0000084A D143                   MOV.L       L1399+28,R1; L577
    0000084C A002                   BRA         L1196
    0000084E 2F16                   MOV.L       R1,@-R15
    00000850              L1195:                            
    00000850 D242                   MOV.L       L1399+32,R2; L578
    00000852 2F26                   MOV.L       R2,@-R15
    00000854              L1196:                            
    00000854 D142                   MOV.L       L1399+36,R1; L576
    00000856 2F16                   MOV.L       R1,@-R15
    00000858 9471                   MOV.W       L1399+2,R4 ; H'0410
    0000085A 4B0B                   JSR         @R11
    0000085C 34FC                   ADD         R15,R4
      simplexC.c   493        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    0000085E 53C7                   MOV.L       @(28,R12),R3
    00000860 946E                   MOV.W       L1399+4,R4 ; H'039C
    00000862 2F36                   MOV.L       R3,@-R15
    00000864 52CB                   MOV.L       @(44,R12),R2
    00000866 2F26                   MOV.L       R2,@-R15
    00000868 D33E                   MOV.L       L1399+40,R3; L579
    0000086A 2F36                   MOV.L       R3,@-R15
    0000086C 4B0B                   JSR         @R11
    0000086E 34FC                   ADD         R15,R4
    00000870 7F18                   ADD         #24,R15
      simplexC.c   494        if(modelType==TYPE_INPUT)
    00000872 60F2                   MOV.L       @R15,R0
    00000874 8801                   CMP/EQ      #1,R0
    00000876 8B13                   BF          L1197
      simplexC.c   495        {
      simplexC.c   496            sprintf(stroutBasicInfo2, "OBJ %s", getFuncObjPurposeChar(pS->funcObjectivePurpose));
    00000878 E044                   MOV         #68,R0
    0000087A BFA6                   BSR         _getFuncObjPurposeChar
    0000087C 04CE                   MOV.L       @(R0,R12),R4
    0000087E 2F06                   MOV.L       R0,@-R15
    00000880 D239                   MOV.L       L1399+44,R2; L581
    00000882 2F26                   MOV.L       R2,@-R15
    00000884 945D                   MOV.W       L1399+6,R4 ; H'030C
    00000886 4B0B                   JSR         @R11
    00000888 34FC                   ADD         R15,R4
      simplexC.c   497            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues[pS->nVariables]);
    0000088A E348                   MOV         #72,R3
    0000088C D237                   MOV.L       L1399+48,R2; __stod
    0000088E 33CC                   ADD         R12,R3
    00000890 50C7                   MOV.L       @(28,R12),R0
    00000892 4008                   SHLL2       R0
    00000894 6332                   MOV.L       @R3,R3
    00000896 003E                   MOV.L       @(R0,R3),R0
    00000898 420B                   JSR         @R2
    0000089A 2FF6                   MOV.L       R15,@-R15
    0000089C A00F                   BRA         L1388
    0000089E 0009                   NOP
    000008A0              L1197:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   498        }else
      simplexC.c   499        {
      simplexC.c   500            sprintf(stroutBasicInfo2, "OBJ MIN");
    000008A0 D333                   MOV.L       L1399+52,R3; L584
    000008A2 2F36                   MOV.L       R3,@-R15
    000008A4 944E                   MOV.W       L1399+8,R4 ; H'0308
    000008A6 4B0B                   JSR         @R11
    000008A8 34FC                   ADD         R15,R4
      simplexC.c   501            sprintf(stroutBasicInfo3, "Ind term: %.2f. Sel var", pS->funcObjtValues2Fases[pS->nVariables]);
    000008AA E34C                   MOV         #76,R3
    000008AC D22F                   MOV.L       L1399+48,R2; __stod
    000008AE 33CC                   ADD         R12,R3
    000008B0 50C7                   MOV.L       @(28,R12),R0
    000008B2 4008                   SHLL2       R0
    000008B4 6332                   MOV.L       @R3,R3
    000008B6 003E                   MOV.L       @(R0,R3),R0
    000008B8 7FFC                   ADD         #-4,R15
    000008BA 420B                   JSR         @R2
    000008BC 2FF6                   MOV.L       R15,@-R15
    000008BE              L1388:                            
    000008BE D32D                   MOV.L       L1399+56,R3; L582
    000008C0 9441                   MOV.W       L1399+10,R4; H'0290
    000008C2 2F36                   MOV.L       R3,@-R15
    000008C4 4B0B                   JSR         @R11
    000008C6 34FC                   ADD         R15,R4
    000008C8 D82B                   MOV.L       L1399+60,R8; _Bdisp_PutDisp_DD
    000008CA 7F0C                   ADD         #12,R15
    000008CC 9A3C                   MOV.W       L1399+12,R10; H'0204
    000008CE DE2B                   MOV.L       L1399+64,R14; _PrintMini
      simplexC.c   502        }
      simplexC.c   503        while(menuChoice!=EXIT_OPT)
    000008D0 A077                   BRA         L1199
    000008D2 3AFC                   ADD         R15,R10
    000008D4              L1200:                            
      simplexC.c   504        {
      simplexC.c   505            Bdisp_AllClr_DDVRAM();
    000008D4 D32A                   MOV.L       L1399+68,R3; _Bdisp_AllClr_DDVRAM
    000008D6 430B                   JSR         @R3
    000008D8 0009                   NOP
      simplexC.c   506            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000008DA E710                   MOV         #16,R7
    000008DC 9635                   MOV.W       L1399+14,R6; H'0404
    000008DE E500                   MOV         #0,R5
    000008E0 36FC                   ADD         R15,R6
    000008E2 4E0B                   JSR         @R14
    000008E4 6453                   MOV         R5,R4
      simplexC.c   507            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000008E6 E710                   MOV         #16,R7
    000008E8 9630                   MOV.W       L1399+16,R6; H'0384
    000008EA E507                   MOV         #7,R5
    000008EC 36FC                   ADD         R15,R6
    000008EE 4E0B                   JSR         @R14
    000008F0 E400                   MOV         #0,R4
      simplexC.c   508            PrintMini(0, 14, (unsigned char*)stroutBasicInfo2, MINI_OVER);
    000008F2 E710                   MOV         #16,R7
    000008F4 962B                   MOV.W       L1399+18,R6; H'0304
    000008F6 E50E                   MOV         #14,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008F8 36FC                   ADD         R15,R6
    000008FA 4E0B                   JSR         @R14
    000008FC E400                   MOV         #0,R4
      simplexC.c   509            PrintMini(0, 21, (unsigned char*)stroutBasicInfo3, MINI_OVER);
    000008FE E710                   MOV         #16,R7
    00000900 9626                   MOV.W       L1399+20,R6; H'0284
    00000902 E515                   MOV         #21,R5
    00000904 36FC                   ADD         R15,R6
    00000906 4E0B                   JSR         @R14
    00000908 E400                   MOV         #0,R4
      simplexC.c   510            menuChoice = InputI(0, 35);
    0000090A E523                   MOV         #35,R5
    0000090C BB8F                   BSR         _InputI
    0000090E E400                   MOV         #0,R4
      simplexC.c   511            Bdisp_PutDisp_DD();
    00000910 480B                   JSR         @R8
    00000912 6D03                   MOV         R0,R13
      simplexC.c   512            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000914 2DD8                   TST         R13,R13
    00000916 8954                   BT          L1199
    00000918 52C7                   MOV.L       @(28,R12),R2
    0000091A 3D27                   CMP/GT      R2,R13
    0000091C 8951                   BT          L1199
    0000091E 69D3                   MOV         R13,R9
    00000920 60F2                   MOV.L       @R15,R0
    00000922 79FF                   ADD         #-1,R9
    00000924 8801                   CMP/EQ      #1,R0
    00000926 8F2D                   BF/S        L1202
    00000928 4908                   SHLL2       R9
      simplexC.c   513            {
      simplexC.c   514                if(modelType==TYPE_INPUT)
      simplexC.c   515                {
      simplexC.c   516                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues[menuChoice-1]);
    0000092A E048                   MOV         #72,R0
    0000092C D30F                   MOV.L       L1399+48,R3; __stod
    0000092E 00CE                   MOV.L       @(R0,R12),R0
    00000930 009E                   MOV.L       @(R0,R9),R0
    00000932 7FF8                   ADD         #-8,R15
    00000934 430B                   JSR         @R3
    00000936 2FF6                   MOV.L       R15,@-R15
    00000938 A02B                   BRA         L1389
    0000093A 0009                   NOP
    0000093C              L1399:                            
    0000093C FB7C                   .DATA.W     H'FB7C
    0000093E 0410                   .DATA.W     H'0410
    00000940 039C                   .DATA.W     H'039C
    00000942 030C                   .DATA.W     H'030C
    00000944 0308                   .DATA.W     H'0308
    00000946 0290                   .DATA.W     H'0290
    00000948 0204                   .DATA.W     H'0204
    0000094A 0404                   .DATA.W     H'0404
    0000094C 0384                   .DATA.W     H'0384
    0000094E 0304                   .DATA.W     H'0304
    00000950 0284                   .DATA.W     H'0284
    00000952 0000                   .DATA.W     0
    00000954 <00000000>             .DATA.L     _sprintf
    00000958 <00000000>             .DATA.L     L577




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000095C <00000000>             .DATA.L     L578
    00000960 <00000000>             .DATA.L     L576
    00000964 <00000000>             .DATA.L     L579
    00000968 <00000000>             .DATA.L     L581
    0000096C <00000000>             .DATA.L     __stod
    00000970 <00000000>             .DATA.L     L584
    00000974 <00000000>             .DATA.L     L582
    00000978 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000097C <00000000>             .DATA.L     _PrintMini
    00000980 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000984              L1202:                            
      simplexC.c   517                }else
      simplexC.c   518                {
      simplexC.c   519                    sprintf(stroutInfoVar,"Obj val x%d: %.2f", menuChoice,pS->funcObjtValues2Fases[menuChoice-
                         +1]);
    00000984 D351                   MOV.L       L1400+12,R3; __stod
    00000986 E04C                   MOV         #76,R0
    00000988 00CE                   MOV.L       @(R0,R12),R0
    0000098A 009E                   MOV.L       @(R0,R9),R0
    0000098C 7FF8                   ADD         #-8,R15
    0000098E 430B                   JSR         @R3
    00000990 2FF6                   MOV.L       R15,@-R15
    00000992              L1389:                            
    00000992 2FD6                   MOV.L       R13,@-R15
    00000994 D24E                   MOV.L       L1400+16,R2; L588
    00000996 2F26                   MOV.L       R2,@-R15
    00000998 4B0B                   JSR         @R11
    0000099A 64A3                   MOV         R10,R4
    0000099C 7F10                   ADD         #16,R15
      simplexC.c   520                }
      simplexC.c   521                
      simplexC.c   522                PrintMini(0, 42, (unsigned char*)stroutInfoVar, MINI_OVER);
    0000099E E710                   MOV         #16,R7
    000009A0 66A3                   MOV         R10,R6
    000009A2 E52A                   MOV         #42,R5
    000009A4 4E0B                   JSR         @R14
    000009A6 E400                   MOV         #0,R4
      simplexC.c   523                PrintMini(0, 49, (unsigned char*)"Press any key to continue", MINI_OVER);
    000009A8 D64A                   MOV.L       L1400+20,R6; L590
    000009AA E531                   MOV         #49,R5
    000009AC E710                   MOV         #16,R7
    000009AE 4E0B                   JSR         @R14
    000009B0 E400                   MOV         #0,R4
      simplexC.c   524                string_input(0, 56, uselessSring);
    000009B2 66F3                   MOV         R15,R6
    000009B4 D348                   MOV.L       L1400+24,R3; _string_input
    000009B6 E538                   MOV         #56,R5
    000009B8 7604                   ADD         #4,R6
    000009BA 430B                   JSR         @R3
    000009BC E400                   MOV         #0,R4
      simplexC.c   525                Bdisp_PutDisp_DD();
    000009BE 480B                   JSR         @R8
    000009C0 0009                   NOP
    000009C2              L1199:                            
    000009C2 2DD8                   TST         R13,R13
    000009C4 8B86                   BF          L1200
      simplexC.c   526            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   527        }
      simplexC.c   528        return 0;
    000009C6 E000                   MOV         #0,R0
      simplexC.c   529    }
    000009C8 917A                   MOV.W       L1400,R1   ; H'0484
    000009CA 3F1C                   ADD         R1,R15
    000009CC 4F26                   LDS.L       @R15+,PR
    000009CE 68F6                   MOV.L       @R15+,R8
    000009D0 69F6                   MOV.L       @R15+,R9
    000009D2 6AF6                   MOV.L       @R15+,R10
    000009D4 6BF6                   MOV.L       @R15+,R11
    000009D6 6CF6                   MOV.L       @R15+,R12
    000009D8 6DF6                   MOV.L       @R15+,R13
    000009DA 000B                   RTS
    000009DC 6EF6                   MOV.L       @R15+,R14
      simplexC.c   530    
      simplexC.c   531    int printAjVal(int varId)
    000009DE              _printAjVal:                     ; function: printAjVal
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   532    {
      simplexC.c   533        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   534        char *uselessSring[128];
      simplexC.c   535        int menuChoice;
      simplexC.c   536        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   537        sprintf(stroutBasicInfo, "Ax%d. nConstraints: %d, Exit %d",varId,ex.nConstraints,EXIT_OPT);
    000009DE E300                   MOV         #0,R3
    000009E0 D13E                   MOV.L       L1400+28,R1; H'00000030+_ex
    000009E2 2FE6                   MOV.L       R14,@-R15
    000009E4 2FD6                   MOV.L       R13,@-R15
    000009E6 EEFF                   MOV         #-1,R14
    000009E8 906B                   MOV.W       L1400+2,R0 ; H'FCFC
    000009EA 2FC6                   MOV.L       R12,@-R15
    000009EC 2FB6                   MOV.L       R11,@-R15
    000009EE 2FA6                   MOV.L       R10,@-R15
    000009F0 2F96                   MOV.L       R9,@-R15
    000009F2 6943                   MOV         R4,R9
    000009F4 2F86                   MOV.L       R8,@-R15
    000009F6 4F22                   STS.L       PR,@-R15
    000009F8 9864                   MOV.W       L1400+4,R8 ; H'0284
    000009FA 3F0C                   ADD         R0,R15
    000009FC 38FC                   ADD         R15,R8
    000009FE 2F36                   MOV.L       R3,@-R15
    00000A00 6212                   MOV.L       @R1,R2
    00000A02 2F26                   MOV.L       R2,@-R15
    00000A04 2F96                   MOV.L       R9,@-R15
    00000A06 D236                   MOV.L       L1400+32,R2; L598
    00000A08 D336                   MOV.L       L1400+36,R3; _sprintf
    00000A0A 2F26                   MOV.L       R2,@-R15
    00000A0C 430B                   JSR         @R3
    00000A0E 6483                   MOV         R8,R4
    00000A10 DA35                   MOV.L       L1400+40,R10; _Bdisp_PutDisp_DD
    00000A12 6293                   MOV         R9,R2
    00000A14 DB35                   MOV.L       L1400+44,R11; _Bdisp_AllClr_DDVRAM
    00000A16 7F10                   ADD         #16,R15
    00000A18 9C55                   MOV.W       L1400+6,R12; H'0204




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A1A 72FF                   ADD         #-1,R2
    00000A1C DD34                   MOV.L       L1400+48,R13; _PrintMini
    00000A1E 3CFC                   ADD         R15,R12
    00000A20 4208                   SHLL2       R2
      simplexC.c   538        while(menuChoice!=EXIT_OPT)
    00000A22 A03F                   BRA         L1205
    00000A24 2F22                   MOV.L       R2,@R15
    00000A26              L1206:                            
      simplexC.c   539        {
      simplexC.c   540            Bdisp_AllClr_DDVRAM();
    00000A26 4B0B                   JSR         @R11
    00000A28 0009                   NOP
      simplexC.c   541            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000A2A E710                   MOV         #16,R7
    00000A2C 6683                   MOV         R8,R6
    00000A2E E500                   MOV         #0,R5
    00000A30 4D0B                   JSR         @R13
    00000A32 6453                   MOV         R5,R4
      simplexC.c   542            menuChoice=InputI(0,7);
    00000A34 E507                   MOV         #7,R5
    00000A36 BAFA                   BSR         _InputI
    00000A38 E400                   MOV         #0,R4
      simplexC.c   543            Bdisp_PutDisp_DD();
    00000A3A 4A0B                   JSR         @R10
    00000A3C 6E03                   MOV         R0,R14
      simplexC.c   544            if(menuChoice!=EXIT_OPT && menuChoice<=ex.nConstraints)
    00000A3E 2EE8                   TST         R14,R14
    00000A40 8930                   BT          L1205
    00000A42 D326                   MOV.L       L1400+28,R3; H'00000030+_ex
    00000A44 6232                   MOV.L       @R3,R2
    00000A46 3E27                   CMP/GT      R2,R14
    00000A48 892C                   BT          L1205
      simplexC.c   545            {
      simplexC.c   546                Bdisp_AllClr_DDVRAM();
    00000A4A 4B0B                   JSR         @R11
    00000A4C 0009                   NOP
      simplexC.c   547                sprintf(stroutVariable, "Ax%d. %.2f Pos %d",varId,ex.ajVector[varId-1][menuChoice-1],menuChoic
                         +e);
    00000A4E 61E3                   MOV         R14,R1
    00000A50 2FE6                   MOV.L       R14,@-R15
    00000A52 71FF                   ADD         #-1,R1
    00000A54 D227                   MOV.L       L1400+52,R2; H'00000034+_ex
    00000A56 4108                   SHLL2       R1
    00000A58 53F1                   MOV.L       @(4,R15),R3
    00000A5A 6022                   MOV.L       @R2,R0
    00000A5C 003E                   MOV.L       @(R0,R3),R0
    00000A5E 001E                   MOV.L       @(R0,R1),R0
    00000A60 D11A                   MOV.L       L1400+12,R1; __stod
    00000A62 7FF8                   ADD         #-8,R15
    00000A64 410B                   JSR         @R1
    00000A66 2FF6                   MOV.L       R15,@-R15
    00000A68 2F96                   MOV.L       R9,@-R15
    00000A6A D023                   MOV.L       L1400+56,R0; L601
    00000A6C D31D                   MOV.L       L1400+36,R3; _sprintf
    00000A6E 2F06                   MOV.L       R0,@-R15
    00000A70 430B                   JSR         @R3
    00000A72 64C3                   MOV         R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A74 7F14                   ADD         #20,R15
      simplexC.c   548                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000A76 E710                   MOV         #16,R7
    00000A78 66C3                   MOV         R12,R6
    00000A7A E500                   MOV         #0,R5
    00000A7C 4D0B                   JSR         @R13
    00000A7E 6453                   MOV         R5,R4
      simplexC.c   549                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000A80 D614                   MOV.L       L1400+20,R6; L590
    00000A82 E507                   MOV         #7,R5
    00000A84 E710                   MOV         #16,R7
    00000A86 4D0B                   JSR         @R13
    00000A88 E400                   MOV         #0,R4
      simplexC.c   550                string_input(0, 14, uselessSring);
    00000A8A 66F3                   MOV         R15,R6
    00000A8C D212                   MOV.L       L1400+24,R2; _string_input
    00000A8E E50E                   MOV         #14,R5
    00000A90 7604                   ADD         #4,R6
    00000A92 420B                   JSR         @R2
    00000A94 E400                   MOV         #0,R4
      simplexC.c   551                Bdisp_PutDisp_DD();
    00000A96 4A0B                   JSR         @R10
    00000A98 0009                   NOP
      simplexC.c   552                memset(stroutVariable,0,128);
    00000A9A E500                   MOV         #0,R5
    00000A9C D317                   MOV.L       L1400+60,R3; _memset
    00000A9E 9613                   MOV.W       L1400+8,R6 ; H'0080
    00000AA0 430B                   JSR         @R3
    00000AA2 64C3                   MOV         R12,R4
    00000AA4              L1205:                            
    00000AA4 2EE8                   TST         R14,R14
    00000AA6 8BBE                   BF          L1206
      simplexC.c   553            }
      simplexC.c   554        }
      simplexC.c   555        return 0;
      simplexC.c   556    }
    00000AA8 910F                   MOV.W       L1400+10,R1; H'0304
    00000AAA E000                   MOV         #0,R0
    00000AAC 3F1C                   ADD         R1,R15
    00000AAE 4F26                   LDS.L       @R15+,PR
    00000AB0 68F6                   MOV.L       @R15+,R8
    00000AB2 69F6                   MOV.L       @R15+,R9
    00000AB4 6AF6                   MOV.L       @R15+,R10
    00000AB6 6BF6                   MOV.L       @R15+,R11
    00000AB8 6CF6                   MOV.L       @R15+,R12
    00000ABA 6DF6                   MOV.L       @R15+,R13
    00000ABC 000B                   RTS
    00000ABE 6EF6                   MOV.L       @R15+,R14
    00000AC0              L1400:                            
    00000AC0 0484                   .DATA.W     H'0484
    00000AC2 FCFC                   .DATA.W     H'FCFC
    00000AC4 0284                   .DATA.W     H'0284
    00000AC6 0204                   .DATA.W     H'0204
    00000AC8 0080                   .DATA.W     H'0080
    00000ACA 0304                   .DATA.W     H'0304
    00000ACC <00000000>             .DATA.L     __stod
    00000AD0 <00000000>             .DATA.L     L588




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AD4 <00000000>             .DATA.L     L590
    00000AD8 <00000000>             .DATA.L     _string_input
    00000ADC <00000030>             .DATA.L     H'00000030+_ex
    00000AE0 <00000000>             .DATA.L     L598
    00000AE4 <00000000>             .DATA.L     _sprintf
    00000AE8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000AEC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000AF0 <00000000>             .DATA.L     _PrintMini
    00000AF4 <00000034>             .DATA.L     H'00000034+_ex
    00000AF8 <00000000>             .DATA.L     L601
    00000AFC <00000000>             .DATA.L     _memset
      simplexC.c   557    
      simplexC.c   558    int printAjVec()
    00000B00              _printAjVec:                     ; function: printAjVec
                                                           ; frame size=172
    00000B00 2FE6                   MOV.L       R14,@-R15
      simplexC.c   559    {
      simplexC.c   560        char stroutBasicInfo[128];
      simplexC.c   561        int menuChoice;
      simplexC.c   562        menuChoice=INITIALIZE_VALUE_OPT;
    00000B02 EEFF                   MOV         #-1,R14
    00000B04 2FD6                   MOV.L       R13,@-R15
    00000B06 2FC6                   MOV.L       R12,@-R15
    00000B08 2FB6                   MOV.L       R11,@-R15
    00000B0A 2FA6                   MOV.L       R10,@-R15
    00000B0C 2F96                   MOV.L       R9,@-R15
    00000B0E 2F86                   MOV.L       R8,@-R15
    00000B10 4F22                   STS.L       PR,@-R15
    00000B12 7F80                   ADD         #-128,R15
    00000B14 D825                   MOV.L       L1401+6,R8 ; _PrintMini
    00000B16 D926                   MOV.L       L1401+10,R9; _sprintf
    00000B18 DA26                   MOV.L       L1401+14,R10; L608
    00000B1A DB27                   MOV.L       L1401+18,R11; _ex
    00000B1C DC27                   MOV.L       L1401+22,R12; _Bdisp_AllClr_DDVRAM
      simplexC.c   563        while(menuChoice!=EXIT_OPT)
    00000B1E A01D                   BRA         L1209
    00000B20 6DF3                   MOV         R15,R13
    00000B22              L1210:                            
      simplexC.c   564        {
      simplexC.c   565            Bdisp_AllClr_DDVRAM();
    00000B22 4C0B                   JSR         @R12
    00000B24 0009                   NOP
      simplexC.c   566            sprintf(stroutBasicInfo, "Axj pMenu Vars %d.  %d exit",ex.nVariables,EXIT_OPT);
    00000B26 E200                   MOV         #0,R2
    00000B28 2F26                   MOV.L       R2,@-R15
    00000B2A 53BB                   MOV.L       @(44,R11),R3
    00000B2C 2F36                   MOV.L       R3,@-R15
    00000B2E 2FA6                   MOV.L       R10,@-R15
    00000B30 490B                   JSR         @R9
    00000B32 64D3                   MOV         R13,R4
    00000B34 7F0C                   ADD         #12,R15
      simplexC.c   567            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000B36 E710                   MOV         #16,R7
    00000B38 66D3                   MOV         R13,R6
    00000B3A E500                   MOV         #0,R5
    00000B3C 480B                   JSR         @R8
    00000B3E 6453                   MOV         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   568            menuChoice = InputI(0, 7);
    00000B40 E507                   MOV         #7,R5
    00000B42 BA74                   BSR         _InputI
    00000B44 E400                   MOV         #0,R4
      simplexC.c   569            Bdisp_PutDisp_DD();
    00000B46 D31E                   MOV.L       L1401+26,R3; _Bdisp_PutDisp_DD
    00000B48 430B                   JSR         @R3
    00000B4A 6E03                   MOV         R0,R14
      simplexC.c   570            if(menuChoice!=EXIT_OPT && menuChoice<=ex.nVariables)
    00000B4C 2EE8                   TST         R14,R14
    00000B4E 8905                   BT          L1209
    00000B50 D21C                   MOV.L       L1401+30,R2; H'0000002C+_ex
    00000B52 6322                   MOV.L       @R2,R3
    00000B54 3E37                   CMP/GT      R3,R14
    00000B56 8901                   BT          L1209
      simplexC.c   571            {
      simplexC.c   572                printAjVal(menuChoice);
    00000B58 BF41                   BSR         _printAjVal
    00000B5A 64E3                   MOV         R14,R4
    00000B5C              L1209:                            
    00000B5C 2EE8                   TST         R14,R14
    00000B5E 8BE0                   BF          L1210
      simplexC.c   573            }
      simplexC.c   574        }
      simplexC.c   575        return 0;
      simplexC.c   576    }
    00000B60 9121                   MOV.W       L1401,R1   ; H'0080
    00000B62 E000                   MOV         #0,R0
    00000B64 3F1C                   ADD         R1,R15
    00000B66 4F26                   LDS.L       @R15+,PR
    00000B68 68F6                   MOV.L       @R15+,R8
    00000B6A 69F6                   MOV.L       @R15+,R9
    00000B6C 6AF6                   MOV.L       @R15+,R10
    00000B6E 6BF6                   MOV.L       @R15+,R11
    00000B70 6CF6                   MOV.L       @R15+,R12
    00000B72 6DF6                   MOV.L       @R15+,R13
    00000B74 000B                   RTS
    00000B76 6EF6                   MOV.L       @R15+,R14
      simplexC.c   577    
      simplexC.c   578    int printVariablesProblemStatement(int contsId, struct problemStatement* pS)
    00000B78              _printVariablesProblemStatement: ; function: printVariablesProblemStatement
                                                           ; frame size=828
                                                           ; used runtime library name:
                                                           ; __stod
    00000B78 2FE6                   MOV.L       R14,@-R15
    00000B7A 6343                   MOV         R4,R3
    00000B7C 9014                   MOV.W       L1401+2,R0 ; H'FCF8
    00000B7E 73FF                   ADD         #-1,R3
    00000B80 2FD6                   MOV.L       R13,@-R15
    00000B82 4308                   SHLL2       R3
    00000B84 9E11                   MOV.W       L1401+4,R14; H'0208
      simplexC.c   579    {
      simplexC.c   580        char stroutBasicInfo[128],stroutVariable[128];
      simplexC.c   581        char *uselessSring[128];
      simplexC.c   582        int menuChoice;
      simplexC.c   583        int lengthString;
      simplexC.c   584        lengthString=0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B86 ED00                   MOV         #0,R13
    00000B88 2FC6                   MOV.L       R12,@-R15
    00000B8A 2FB6                   MOV.L       R11,@-R15
    00000B8C 2FA6                   MOV.L       R10,@-R15
      simplexC.c   585        menuChoice=INITIALIZE_VALUE_OPT;
    00000B8E EBFF                   MOV         #-1,R11
    00000B90 DC07                   MOV.L       L1401+10,R12; _sprintf
    00000B92 6A53                   MOV         R5,R10
    00000B94 2F96                   MOV.L       R9,@-R15
    00000B96 2F86                   MOV.L       R8,@-R15
    00000B98 4F22                   STS.L       PR,@-R15
    00000B9A 3F0C                   ADD         R0,R15
    00000B9C D903                   MOV.L       L1401+6,R9 ; _PrintMini
    00000B9E 3EFC                   ADD         R15,R14
    00000BA0 2F42                   MOV.L       R4,@R15
      simplexC.c   586        
      simplexC.c   587        while(menuChoice!=EXIT_OPT)
    00000BA2 A08A                   BRA         L1213
    00000BA4 1F31                   MOV.L       R3,@(4,R15)
    00000BA6              L1401:                            
    00000BA6 0080                   .DATA.W     H'0080
    00000BA8 FCF8                   .DATA.W     H'FCF8
    00000BAA 0208                   .DATA.W     H'0208
    00000BAC <00000000>             .DATA.L     _PrintMini
    00000BB0 <00000000>             .DATA.L     _sprintf
    00000BB4 <00000000>             .DATA.L     L608
    00000BB8 <00000000>             .DATA.L     _ex
    00000BBC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000BC0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000BC4 <0000002C>             .DATA.L     H'0000002C+_ex
    00000BC8              L1214:                            
      simplexC.c   588        {
      simplexC.c   589            Bdisp_AllClr_DDVRAM();
    00000BC8 D145                   MOV.L       L1402+10,R1; _Bdisp_AllClr_DDVRAM
    00000BCA 410B                   JSR         @R1
    00000BCC 0009                   NOP
      simplexC.c   590            sprintf(stroutBasicInfo, "Constraint %d. Vars: %d, Exit %d",contsId,pS->nVariables,EXIT_OPT);
    00000BCE E200                   MOV         #0,R2
    00000BD0 9481                   MOV.W       L1402,R4   ; H'0298
    00000BD2 2F26                   MOV.L       R2,@-R15
    00000BD4 53A7                   MOV.L       @(28,R10),R3
    00000BD6 2F36                   MOV.L       R3,@-R15
    00000BD8 51F2                   MOV.L       @(8,R15),R1
    00000BDA 2F16                   MOV.L       R1,@-R15
    00000BDC D341                   MOV.L       L1402+14,R3; L620
    00000BDE 2F36                   MOV.L       R3,@-R15
    00000BE0 4C0B                   JSR         @R12
    00000BE2 34FC                   ADD         R15,R4
      simplexC.c   591            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000BE4 9678                   MOV.W       L1402+2,R6 ; H'0288
    00000BE6 E500                   MOV         #0,R5
    00000BE8 7F10                   ADD         #16,R15
    00000BEA E710                   MOV         #16,R7
    00000BEC 36FC                   ADD         R15,R6
    00000BEE 490B                   JSR         @R9
    00000BF0 6453                   MOV         R5,R4
      simplexC.c   592            menuChoice=InputI(0,7);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BF2 E507                   MOV         #7,R5
    00000BF4 BA1B                   BSR         _InputI
    00000BF6 E400                   MOV         #0,R4
      simplexC.c   593            Bdisp_PutDisp_DD();
    00000BF8 D33B                   MOV.L       L1402+18,R3; _Bdisp_PutDisp_DD
    00000BFA 430B                   JSR         @R3
    00000BFC 6B03                   MOV         R0,R11
      simplexC.c   594            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nVariables)
    00000BFE 2BB8                   TST         R11,R11
    00000C00 895B                   BT          L1213
    00000C02 53A7                   MOV.L       @(28,R10),R3
    00000C04 3B37                   CMP/GT      R3,R11
    00000C06 8958                   BT          L1213
      simplexC.c   595            {
      simplexC.c   596                Bdisp_AllClr_DDVRAM();
    00000C08 D135                   MOV.L       L1402+10,R1; _Bdisp_AllClr_DDVRAM
    00000C0A 410B                   JSR         @R1
    00000C0C 0009                   NOP
      simplexC.c   597                lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, "Const %d. %.2f x%d",co
                         +ntsId,pS->constraints[contsId-1][menuChoice-1],menuChoice));
    00000C0E 68B3                   MOV         R11,R8
    00000C10 D236                   MOV.L       L1402+22,R2; __stod
    00000C12 78FF                   ADD         #-1,R8
    00000C14 2FB6                   MOV.L       R11,@-R15
    00000C16 4808                   SHLL2       R8
    00000C18 53F2                   MOV.L       @(8,R15),R3
    00000C1A 50A4                   MOV.L       @(16,R10),R0
    00000C1C 003E                   MOV.L       @(R0,R3),R0
    00000C1E 008E                   MOV.L       @(R0,R8),R0
    00000C20 7FF8                   ADD         #-8,R15
    00000C22 420B                   JSR         @R2
    00000C24 2FF6                   MOV.L       R15,@-R15
    00000C26 64D3                   MOV         R13,R4
    00000C28 51F3                   MOV.L       @(12,R15),R1
    00000C2A 2F16                   MOV.L       R1,@-R15
    00000C2C D230                   MOV.L       L1402+26,R2; L622
    00000C2E 2F26                   MOV.L       R2,@-R15
    00000C30 4C0B                   JSR         @R12
    00000C32 34EC                   ADD         R14,R4
    00000C34 7F14                   ADD         #20,R15
    00000C36 BDAC                   BSR         _lengthConcatenate
    00000C38 6403                   MOV         R0,R4
    00000C3A 3D0C                   ADD         R0,R13
      simplexC.c   598    
      simplexC.c   599                if(pS->idSlopeVariables[menuChoice-1])
    00000C3C 50AD                   MOV.L       @(52,R10),R0
    00000C3E 028E                   MOV.L       @(R0,R8),R2
    00000C40 2228                   TST         R2,R2
    00000C42 8908                   BT          L1216
      simplexC.c   600                {
      simplexC.c   601                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Slope"));
    00000C44 D12B                   MOV.L       L1402+30,R1; L624
    00000C46 64D3                   MOV         R13,R4
    00000C48 2F16                   MOV.L       R1,@-R15
    00000C4A 4C0B                   JSR         @R12
    00000C4C 34EC                   ADD         R14,R4
    00000C4E 7F04                   ADD         #4,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C50 BD9F                   BSR         _lengthConcatenate
    00000C52 6403                   MOV         R0,R4
    00000C54 3D0C                   ADD         R0,R13
    00000C56              L1216:                            
      simplexC.c   602                }
      simplexC.c   603                if(pS->id2fasesVariables[menuChoice-1])
    00000C56 50AE                   MOV.L       @(56,R10),R0
    00000C58 028E                   MOV.L       @(R0,R8),R2
    00000C5A 2228                   TST         R2,R2
    00000C5C 8908                   BT          L1217
      simplexC.c   604                {
      simplexC.c   605                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Dual"));
    00000C5E 64D3                   MOV         R13,R4
    00000C60 D125                   MOV.L       L1402+34,R1; L626
    00000C62 2F16                   MOV.L       R1,@-R15
    00000C64 4C0B                   JSR         @R12
    00000C66 34EC                   ADD         R14,R4
    00000C68 7F04                   ADD         #4,R15
    00000C6A BD92                   BSR         _lengthConcatenate
    00000C6C 6403                   MOV         R0,R4
    00000C6E 3D0C                   ADD         R0,R13
    00000C70              L1217:                            
      simplexC.c   606                }
      simplexC.c   607                if(pS->idIntegerVariables[menuChoice-1])
    00000C70 50AC                   MOV.L       @(48,R10),R0
    00000C72 028E                   MOV.L       @(R0,R8),R2
    00000C74 2228                   TST         R2,R2
    00000C76 8907                   BT          L1218
      simplexC.c   608                {
      simplexC.c   609                    lengthString += lengthConcatenate(sprintf(stroutVariable+lengthString, " Int"));
    00000C78 D120                   MOV.L       L1402+38,R1; L628
    00000C7A 64D3                   MOV         R13,R4
    00000C7C 2F16                   MOV.L       R1,@-R15
    00000C7E 4C0B                   JSR         @R12
    00000C80 34EC                   ADD         R14,R4
    00000C82 7F04                   ADD         #4,R15
    00000C84 BD85                   BSR         _lengthConcatenate
    00000C86 6403                   MOV         R0,R4
    00000C88              L1218:                            
      simplexC.c   610                }
      simplexC.c   611                PrintMini(0,0,(unsigned char*) stroutVariable,MINI_OVER);
    00000C88 E710                   MOV         #16,R7
    00000C8A 66E3                   MOV         R14,R6
    00000C8C E500                   MOV         #0,R5
    00000C8E 490B                   JSR         @R9
    00000C90 6453                   MOV         R5,R4
      simplexC.c   612                PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000C92 E710                   MOV         #16,R7
    00000C94 D61A                   MOV.L       L1402+42,R6; L590
    00000C96 E507                   MOV         #7,R5
    00000C98 490B                   JSR         @R9
    00000C9A E400                   MOV         #0,R4
      simplexC.c   613                string_input(0, 14, uselessSring);
    00000C9C D219                   MOV.L       L1402+46,R2; _string_input
    00000C9E 66F3                   MOV         R15,R6
    00000CA0 7608                   ADD         #8,R6
    00000CA2 E50E                   MOV         #14,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CA4 420B                   JSR         @R2
    00000CA6 E400                   MOV         #0,R4
      simplexC.c   614                Bdisp_PutDisp_DD();
    00000CA8 D30F                   MOV.L       L1402+18,R3; _Bdisp_PutDisp_DD
    00000CAA 430B                   JSR         @R3
    00000CAC 0009                   NOP
      simplexC.c   615                memset(stroutVariable,0,128);
    00000CAE E500                   MOV         #0,R5
    00000CB0 D215                   MOV.L       L1402+50,R2; _memset
    00000CB2 9612                   MOV.W       L1402+4,R6 ; H'0080
    00000CB4 420B                   JSR         @R2
    00000CB6 64E3                   MOV         R14,R4
      simplexC.c   616                lengthString=0;
    00000CB8 ED00                   MOV         #0,R13
    00000CBA              L1213:                            
    00000CBA 2BB8                   TST         R11,R11
    00000CBC 8B84                   BF          L1214
      simplexC.c   617            }
      simplexC.c   618        }
      simplexC.c   619        return 0;
    00000CBE E000                   MOV         #0,R0
      simplexC.c   620    }
    00000CC0 910C                   MOV.W       L1402+6,R1 ; H'0308
    00000CC2 3F1C                   ADD         R1,R15
    00000CC4 4F26                   LDS.L       @R15+,PR
    00000CC6 68F6                   MOV.L       @R15+,R8
    00000CC8 69F6                   MOV.L       @R15+,R9
    00000CCA 6AF6                   MOV.L       @R15+,R10
    00000CCC 6BF6                   MOV.L       @R15+,R11
    00000CCE 6CF6                   MOV.L       @R15+,R12
    00000CD0 6DF6                   MOV.L       @R15+,R13
    00000CD2 000B                   RTS
    00000CD4 6EF6                   MOV.L       @R15+,R14
    00000CD6              L1402:                            
    00000CD6 0298                   .DATA.W     H'0298
    00000CD8 0288                   .DATA.W     H'0288
    00000CDA 0080                   .DATA.W     H'0080
    00000CDC 0308                   .DATA.W     H'0308
    00000CDE 0000                   .DATA.W     0
    00000CE0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000CE4 <00000000>             .DATA.L     L620
    00000CE8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000CEC <00000000>             .DATA.L     __stod
    00000CF0 <00000000>             .DATA.L     L622
    00000CF4 <00000000>             .DATA.L     L624
    00000CF8 <00000000>             .DATA.L     L626
    00000CFC <00000000>             .DATA.L     L628
    00000D00 <00000000>             .DATA.L     L590
    00000D04 <00000000>             .DATA.L     _string_input
    00000D08 <00000000>             .DATA.L     _memset
      simplexC.c   621    
      simplexC.c   622    int printIne(int contsId, struct problemStatement* pS)
    00000D0C              _printIne:                       ; function: printIne
                                                           ; frame size=664
    00000D0C 4F22                   STS.L       PR,@-R15
    00000D0E 9074                   MOV.W       L1403,R0   ; H'FD78
      simplexC.c   623    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   624        char stroutBasicInfo[128];
      simplexC.c   625        char *uselessSring[128];
      simplexC.c   626        Bdisp_AllClr_DDVRAM();
    00000D10 D33C                   MOV.L       L1403+10,R3; _Bdisp_AllClr_DDVRAM
    00000D12 3F0C                   ADD         R0,R15
    00000D14 2F42                   MOV.L       R4,@R15
    00000D16 430B                   JSR         @R3
    00000D18 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   627        sprintf(stroutBasicInfo, "Constraint %d. Ine: %s",contsId,getInequalityChar( pS->inequalitySigns[conts
                         +Id-1]));
    00000D1A 50F1                   MOV.L       @(4,R15),R0
    00000D1C 64F2                   MOV.L       @R15,R4
    00000D1E 74FF                   ADD         #-1,R4
    00000D20 5006                   MOV.L       @(24,R0),R0
    00000D22 4408                   SHLL2       R4
    00000D24 BD3C                   BSR         _getInequalityChar
    00000D26 044E                   MOV.L       @(R0,R4),R4
    00000D28 2F06                   MOV.L       R0,@-R15
    00000D2A 52F1                   MOV.L       @(4,R15),R2
    00000D2C D336                   MOV.L       L1403+14,R3; L635
    00000D2E 2F26                   MOV.L       R2,@-R15
    00000D30 2F36                   MOV.L       R3,@-R15
    00000D32 9463                   MOV.W       L1403+2,R4 ; H'0214
    00000D34 D235                   MOV.L       L1403+18,R2; _sprintf
    00000D36 420B                   JSR         @R2
    00000D38 34FC                   ADD         R15,R4
      simplexC.c   628        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000D3A E710                   MOV         #16,R7
    00000D3C 965E                   MOV.W       L1403+2,R6 ; H'0214
    00000D3E E500                   MOV         #0,R5
    00000D40 D333                   MOV.L       L1403+22,R3; _PrintMini
    00000D42 36FC                   ADD         R15,R6
    00000D44 430B                   JSR         @R3
    00000D46 6453                   MOV         R5,R4
      simplexC.c   629        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000D48 D632                   MOV.L       L1403+26,R6; L590
    00000D4A E507                   MOV         #7,R5
    00000D4C D230                   MOV.L       L1403+22,R2; _PrintMini
    00000D4E E710                   MOV         #16,R7
    00000D50 420B                   JSR         @R2
    00000D52 E400                   MOV         #0,R4
      simplexC.c   630        string_input(0, 14, uselessSring);
    00000D54 D330                   MOV.L       L1403+30,R3; _string_input
    00000D56 66F3                   MOV         R15,R6
    00000D58 7614                   ADD         #20,R6
    00000D5A E50E                   MOV         #14,R5
    00000D5C 430B                   JSR         @R3
    00000D5E E400                   MOV         #0,R4
      simplexC.c   631        Bdisp_PutDisp_DD();
    00000D60 D22E                   MOV.L       L1403+34,R2; _Bdisp_PutDisp_DD
    00000D62 420B                   JSR         @R2
    00000D64 0009                   NOP
      simplexC.c   632        return 0;
      simplexC.c   633    }
    00000D66 914A                   MOV.W       L1403+4,R1 ; H'0294
    00000D68 3F1C                   ADD         R1,R15
    00000D6A 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D6C 000B                   RTS
    00000D6E E000                   MOV         #0,R0
      simplexC.c   634    
      simplexC.c   635    int printRVal(int contsId, struct problemStatement* pS)
    00000D70              _printRVal:                      ; function: printRVal
                                                           ; frame size=668
                                                           ; used runtime library name:
                                                           ; __stod
    00000D70 4F22                   STS.L       PR,@-R15
    00000D72 9042                   MOV.W       L1403,R0   ; H'FD78
      simplexC.c   636    {
      simplexC.c   637        char stroutBasicInfo[128];
      simplexC.c   638        char *uselessSring[128];
      simplexC.c   639        Bdisp_AllClr_DDVRAM();
    00000D74 D323                   MOV.L       L1403+10,R3; _Bdisp_AllClr_DDVRAM
    00000D76 3F0C                   ADD         R0,R15
    00000D78 2F42                   MOV.L       R4,@R15
    00000D7A 430B                   JSR         @R3
    00000D7C 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c   640        sprintf(stroutBasicInfo, "Constraint %d. Rval: %.2f",contsId,pS->rightValues[contsId-1]);
    00000D7E 50F1                   MOV.L       @(4,R15),R0
    00000D80 63F2                   MOV.L       @R15,R3
    00000D82 73FF                   ADD         #-1,R3
    00000D84 5005                   MOV.L       @(20,R0),R0
    00000D86 4308                   SHLL2       R3
    00000D88 D225                   MOV.L       L1403+38,R2; __stod
    00000D8A 003E                   MOV.L       @(R0,R3),R0
    00000D8C 7FF8                   ADD         #-8,R15
    00000D8E 420B                   JSR         @R2
    00000D90 2FF6                   MOV.L       R15,@-R15
    00000D92 53F2                   MOV.L       @(8,R15),R3
    00000D94 D223                   MOV.L       L1403+42,R2; L642
    00000D96 2F36                   MOV.L       R3,@-R15
    00000D98 2F26                   MOV.L       R2,@-R15
    00000D9A 9431                   MOV.W       L1403+6,R4 ; H'0218
    00000D9C D31B                   MOV.L       L1403+18,R3; _sprintf
    00000D9E 430B                   JSR         @R3
    00000DA0 34FC                   ADD         R15,R4
      simplexC.c   641        PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000DA2 E710                   MOV         #16,R7
    00000DA4 962C                   MOV.W       L1403+6,R6 ; H'0218
    00000DA6 E500                   MOV         #0,R5
    00000DA8 D219                   MOV.L       L1403+22,R2; _PrintMini
    00000DAA 36FC                   ADD         R15,R6
    00000DAC 420B                   JSR         @R2
    00000DAE 6453                   MOV         R5,R4
      simplexC.c   642        PrintMini(0, 7, (unsigned char*)"Press any key to continue", MINI_OVER);
    00000DB0 D618                   MOV.L       L1403+26,R6; L590
    00000DB2 E507                   MOV         #7,R5
    00000DB4 D316                   MOV.L       L1403+22,R3; _PrintMini
    00000DB6 E710                   MOV         #16,R7
    00000DB8 430B                   JSR         @R3
    00000DBA E400                   MOV         #0,R4
      simplexC.c   643        string_input(0, 14, uselessSring);
    00000DBC D216                   MOV.L       L1403+30,R2; _string_input
    00000DBE 66F3                   MOV         R15,R6
    00000DC0 7618                   ADD         #24,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DC2 E50E                   MOV         #14,R5
    00000DC4 420B                   JSR         @R2
    00000DC6 E400                   MOV         #0,R4
      simplexC.c   644        Bdisp_PutDisp_DD();
    00000DC8 D314                   MOV.L       L1403+34,R3; _Bdisp_PutDisp_DD
    00000DCA 430B                   JSR         @R3
    00000DCC 0009                   NOP
      simplexC.c   645        return 0;
      simplexC.c   646    }
    00000DCE 9118                   MOV.W       L1403+8,R1 ; H'0298
    00000DD0 3F1C                   ADD         R1,R15
    00000DD2 4F26                   LDS.L       @R15+,PR
    00000DD4 000B                   RTS
    00000DD6 E000                   MOV         #0,R0
      simplexC.c   647    
      simplexC.c   648    
      simplexC.c   649    int printInfoConstraint(int contsId, struct problemStatement* pS)
    00000DD8              _printInfoConstraint:            ; function: printInfoConstraint
                                                           ; frame size=172
    00000DD8 2FE6                   MOV.L       R14,@-R15
    00000DDA 2FD6                   MOV.L       R13,@-R15
    00000DDC 2FC6                   MOV.L       R12,@-R15
      simplexC.c   650    {
      simplexC.c   651        char stroutBasicInfo[128];
      simplexC.c   652        int menuChoice;
      simplexC.c   653        menuChoice=INITIALIZE_VALUE_OPT;
    00000DDE EDFF                   MOV         #-1,R13
    00000DE0 DE0B                   MOV.L       L1403+22,R14; _PrintMini
    00000DE2 6C43                   MOV         R4,R12
    00000DE4 2FB6                   MOV.L       R11,@-R15
    00000DE6 6B53                   MOV         R5,R11
    00000DE8 2FA6                   MOV.L       R10,@-R15
    00000DEA 2F96                   MOV.L       R9,@-R15
    00000DEC 2F86                   MOV.L       R8,@-R15
    00000DEE 4F22                   STS.L       PR,@-R15
    00000DF0 D80D                   MOV.L       L1403+46,R8; L650
    00000DF2 7F80                   ADD         #-128,R15
    00000DF4 D905                   MOV.L       L1403+18,R9; _sprintf
      simplexC.c   654        while(menuChoice!=EXIT_OPT)
    00000DF6 A058                   BRA         L1222
    00000DF8 6AF3                   MOV         R15,R10
    00000DFA              L1403:                            
    00000DFA FD78                   .DATA.W     H'FD78
    00000DFC 0214                   .DATA.W     H'0214
    00000DFE 0294                   .DATA.W     H'0294
    00000E00 0218                   .DATA.W     H'0218
    00000E02 0298                   .DATA.W     H'0298
    00000E04 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000E08 <00000000>             .DATA.L     L635
    00000E0C <00000000>             .DATA.L     _sprintf
    00000E10 <00000000>             .DATA.L     _PrintMini
    00000E14 <00000000>             .DATA.L     L590
    00000E18 <00000000>             .DATA.L     _string_input
    00000E1C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000E20 <00000000>             .DATA.L     __stod
    00000E24 <00000000>             .DATA.L     L642
    00000E28 <00000000>             .DATA.L     L650




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E2C              L1223:                            
      simplexC.c   655        {
      simplexC.c   656            Bdisp_AllClr_DDVRAM();
    00000E2C D22F                   MOV.L       L1404+4,R2 ; _Bdisp_AllClr_DDVRAM
    00000E2E 420B                   JSR         @R2
    00000E30 0009                   NOP
      simplexC.c   657            sprintf(stroutBasicInfo, "Constraint %d printMenu. %d exit",contsId,EXIT_OPT);
    00000E32 E300                   MOV         #0,R3
    00000E34 2F36                   MOV.L       R3,@-R15
    00000E36 2FC6                   MOV.L       R12,@-R15
    00000E38 2F86                   MOV.L       R8,@-R15
    00000E3A 490B                   JSR         @R9
    00000E3C 64A3                   MOV         R10,R4
    00000E3E 7F0C                   ADD         #12,R15
      simplexC.c   658            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000E40 E710                   MOV         #16,R7
    00000E42 66A3                   MOV         R10,R6
    00000E44 E500                   MOV         #0,R5
    00000E46 4E0B                   JSR         @R14
    00000E48 6453                   MOV         R5,R4
      simplexC.c   659            PrintMini(0, 7, (unsigned char*)"1 Pinfo var", MINI_OVER);
    00000E4A E710                   MOV         #16,R7
    00000E4C D628                   MOV.L       L1404+8,R6 ; L651
    00000E4E E507                   MOV         #7,R5
    00000E50 4E0B                   JSR         @R14
    00000E52 E400                   MOV         #0,R4
      simplexC.c   660            PrintMini(0, 14, (unsigned char*)"2 Pinfo ine", MINI_OVER);
    00000E54 D627                   MOV.L       L1404+12,R6; L652
    00000E56 E50E                   MOV         #14,R5
    00000E58 E710                   MOV         #16,R7
    00000E5A 4E0B                   JSR         @R14
    00000E5C E400                   MOV         #0,R4
      simplexC.c   661            PrintMini(0, 21, (unsigned char*)"3 Pinfo RVal", MINI_OVER);
    00000E5E E710                   MOV         #16,R7
    00000E60 D625                   MOV.L       L1404+16,R6; L653
    00000E62 E515                   MOV         #21,R5
    00000E64 4E0B                   JSR         @R14
    00000E66 E400                   MOV         #0,R4
      simplexC.c   662            menuChoice = InputI(0, 28);
    00000E68 E51C                   MOV         #28,R5
    00000E6A B8E0                   BSR         _InputI
    00000E6C E400                   MOV         #0,R4
      simplexC.c   663            Bdisp_PutDisp_DD();
    00000E6E D323                   MOV.L       L1404+20,R3; _Bdisp_PutDisp_DD
    00000E70 430B                   JSR         @R3
    00000E72 6D03                   MOV         R0,R13
      simplexC.c   664            if(menuChoice!=EXIT_OPT && menuChoice<=3)
    00000E74 2DD8                   TST         R13,R13
    00000E76 8918                   BT          L1222
    00000E78 E303                   MOV         #3,R3
    00000E7A 3D37                   CMP/GT      R3,R13
    00000E7C 8915                   BT          L1222
      simplexC.c   665            {
      simplexC.c   666                switch (menuChoice)
    00000E7E 60D3                   MOV         R13,R0
    00000E80 8801                   CMP/EQ      #1,R0
    00000E82 8905                   BT          L1024




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E84 8802                   CMP/EQ      #2,R0
    00000E86 8908                   BT          L1025
    00000E88 8803                   CMP/EQ      #3,R0
    00000E8A 890B                   BT          L1026
    00000E8C A00D                   BRA         L1222
    00000E8E 0009                   NOP
    00000E90              L1024:                           ; case label 
      simplexC.c   667                {
      simplexC.c   668                case 1: printVariablesProblemStatement(contsId,pS);break;
    00000E90 65B3                   MOV         R11,R5
    00000E92 BE71                   BSR         _printVariablesProblemStatement
    00000E94 64C3                   MOV         R12,R4
    00000E96 A008                   BRA         L1222
    00000E98 0009                   NOP
    00000E9A              L1025:                           ; case label 
      simplexC.c   669                case 2: printIne(contsId,pS);break;
    00000E9A 65B3                   MOV         R11,R5
    00000E9C BF36                   BSR         _printIne
    00000E9E 64C3                   MOV         R12,R4
    00000EA0 A003                   BRA         L1222
    00000EA2 0009                   NOP
    00000EA4              L1026:                           ; case label 
      simplexC.c   670                case 3: printRVal(contsId,pS);break;
    00000EA4 65B3                   MOV         R11,R5
    00000EA6 BF63                   BSR         _printRVal
    00000EA8 64C3                   MOV         R12,R4
      simplexC.c   671                default: break;
    00000EAA              L1222:                            
    00000EAA 2DD8                   TST         R13,R13
    00000EAC 8BBE                   BF          L1223
      simplexC.c   672                }
      simplexC.c   673            }
      simplexC.c   674        }
      simplexC.c   675        return 0;
    00000EAE E000                   MOV         #0,R0
      simplexC.c   676    }
    00000EB0 911A                   MOV.W       L1404,R1   ; H'0080
    00000EB2 3F1C                   ADD         R1,R15
    00000EB4 4F26                   LDS.L       @R15+,PR
    00000EB6 68F6                   MOV.L       @R15+,R8
    00000EB8 69F6                   MOV.L       @R15+,R9
    00000EBA 6AF6                   MOV.L       @R15+,R10
    00000EBC 6BF6                   MOV.L       @R15+,R11
    00000EBE 6CF6                   MOV.L       @R15+,R12
    00000EC0 6DF6                   MOV.L       @R15+,R13
    00000EC2 000B                   RTS
    00000EC4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   677    
      simplexC.c   678    int printAllConstraintsMenu(struct problemStatement* pS)
    00000EC6              _printAllConstraintsMenu:        ; function: printAllConstraintsMenu
                                                           ; frame size=172
    00000EC6 2FE6                   MOV.L       R14,@-R15
    00000EC8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   679    {
      simplexC.c   680        char stroutBasicInfo[128];
      simplexC.c   681        int menuChoice;
      simplexC.c   682        menuChoice=INITIALIZE_VALUE_OPT;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000ECA EEFF                   MOV         #-1,R14
    00000ECC 2FC6                   MOV.L       R12,@-R15
    00000ECE 6D43                   MOV         R4,R13
    00000ED0 2FB6                   MOV.L       R11,@-R15
    00000ED2 2FA6                   MOV.L       R10,@-R15
    00000ED4 2F96                   MOV.L       R9,@-R15
    00000ED6 2F86                   MOV.L       R8,@-R15
    00000ED8 4F22                   STS.L       PR,@-R15
    00000EDA 7F80                   ADD         #-128,R15
    00000EDC D808                   MOV.L       L1404+24,R8; _PrintMini
    00000EDE D909                   MOV.L       L1404+28,R9; _sprintf
    00000EE0 DA09                   MOV.L       L1404+32,R10; L662
    00000EE2 DB02                   MOV.L       L1404+4,R11; _Bdisp_AllClr_DDVRAM
      simplexC.c   683        while(menuChoice!=EXIT_OPT)
    00000EE4 A02F                   BRA         L1227
    00000EE6 6CF3                   MOV         R15,R12
    00000EE8              L1404:                            
    00000EE8 0080                   .DATA.W     H'0080
    00000EEA 0000                   .DATA.W     0
    00000EEC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000EF0 <00000000>             .DATA.L     L651
    00000EF4 <00000000>             .DATA.L     L652
    00000EF8 <00000000>             .DATA.L     L653
    00000EFC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000F00 <00000000>             .DATA.L     _PrintMini
    00000F04 <00000000>             .DATA.L     _sprintf
    00000F08 <00000000>             .DATA.L     L662
    00000F0C              L1228:                            
      simplexC.c   684        {
      simplexC.c   685            Bdisp_AllClr_DDVRAM();
    00000F0C 4B0B                   JSR         @R11
    00000F0E 0009                   NOP
      simplexC.c   686            sprintf(stroutBasicInfo, "pMenu Consts %d.  %d exit",pS->nConstraints,EXIT_OPT);
    00000F10 E200                   MOV         #0,R2
    00000F12 2F26                   MOV.L       R2,@-R15
    00000F14 53DB                   MOV.L       @(44,R13),R3
    00000F16 2F36                   MOV.L       R3,@-R15
    00000F18 2FA6                   MOV.L       R10,@-R15
    00000F1A 490B                   JSR         @R9
    00000F1C 64C3                   MOV         R12,R4
    00000F1E 7F0C                   ADD         #12,R15
      simplexC.c   687            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00000F20 E710                   MOV         #16,R7
    00000F22 66C3                   MOV         R12,R6
    00000F24 E500                   MOV         #0,R5
    00000F26 480B                   JSR         @R8
    00000F28 6453                   MOV         R5,R4
      simplexC.c   688            menuChoice = InputI(0, 7);
    00000F2A E507                   MOV         #7,R5
    00000F2C B87F                   BSR         _InputI
    00000F2E E400                   MOV         #0,R4
      simplexC.c   689            Bdisp_PutDisp_DD();
    00000F30 D32B                   MOV.L       L1405+10,R3; _Bdisp_PutDisp_DD
    00000F32 430B                   JSR         @R3
    00000F34 6E03                   MOV         R0,R14
      simplexC.c   690            if(menuChoice!=EXIT_OPT && menuChoice<=pS->nConstraints)
    00000F36 2EE8                   TST         R14,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F38 8905                   BT          L1227
    00000F3A 53DB                   MOV.L       @(44,R13),R3
    00000F3C 3E37                   CMP/GT      R3,R14
    00000F3E 8902                   BT          L1227
      simplexC.c   691            {
      simplexC.c   692                printInfoConstraint(menuChoice,pS);
    00000F40 65D3                   MOV         R13,R5
    00000F42 BF49                   BSR         _printInfoConstraint
    00000F44 64E3                   MOV         R14,R4
    00000F46              L1227:                            
    00000F46 2EE8                   TST         R14,R14
    00000F48 8BE0                   BF          L1228
      simplexC.c   693            }
      simplexC.c   694        }
      simplexC.c   695        return 0;
    00000F4A E000                   MOV         #0,R0
      simplexC.c   696    }
    00000F4C 9143                   MOV.W       L1405,R1   ; H'0080
    00000F4E 3F1C                   ADD         R1,R15
    00000F50 4F26                   LDS.L       @R15+,PR
    00000F52 68F6                   MOV.L       @R15+,R8
    00000F54 69F6                   MOV.L       @R15+,R9
    00000F56 6AF6                   MOV.L       @R15+,R10
    00000F58 6BF6                   MOV.L       @R15+,R11
    00000F5A 6CF6                   MOV.L       @R15+,R12
    00000F5C 6DF6                   MOV.L       @R15+,R13
    00000F5E 000B                   RTS
    00000F60 6EF6                   MOV.L       @R15+,R14
      simplexC.c   697    
      simplexC.c   698    int printStatementMenu(struct problemStatement* pS)
    00000F62              _printStatementMenu:             ; function: printStatementMenu
                                                           ; frame size=440
      simplexC.c   699    {
      simplexC.c   700        char stroutTop[128],stroutBasicInfo[128],stroutObjInfo[128];
      simplexC.c   701        int menuChoice;
      simplexC.c   702        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   703        sprintf(stroutTop,"Problem statement %s, printMenu. Exit %d",(pS->modelType==TYPE_INPUT) ? "INPUT" :"S
                         +OLVE", EXIT_OPT);
    00000F62 E300                   MOV         #0,R3
    00000F64 2FE6                   MOV.L       R14,@-R15
    00000F66 6E43                   MOV         R4,R14
    00000F68 2FD6                   MOV.L       R13,@-R15
    00000F6A 2FC6                   MOV.L       R12,@-R15
    00000F6C 2FB6                   MOV.L       R11,@-R15
    00000F6E 2FA6                   MOV.L       R10,@-R15
    00000F70 2F96                   MOV.L       R9,@-R15
    00000F72 2F86                   MOV.L       R8,@-R15
    00000F74 4F22                   STS.L       PR,@-R15
    00000F76 902F                   MOV.W       L1405+2,R0 ; H'FE80
    00000F78 DD1A                   MOV.L       L1405+14,R13; _sprintf
    00000F7A 3F0C                   ADD         R0,R15
    00000F7C 9A2D                   MOV.W       L1405+4,R10; H'0100
    00000F7E 3AFC                   ADD         R15,R10
    00000F80 2F36                   MOV.L       R3,@-R15
    00000F82 50E1                   MOV.L       @(4,R14),R0
    00000F84 8801                   CMP/EQ      #1,R0
    00000F86 8F03                   BF/S        L1231




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F88 ECFF                   MOV         #-1,R12
    00000F8A D117                   MOV.L       L1405+18,R1; L577
    00000F8C A002                   BRA         L1232
    00000F8E 2F16                   MOV.L       R1,@-R15
    00000F90              L1231:                            
    00000F90 D216                   MOV.L       L1405+22,R2; L578
    00000F92 2F26                   MOV.L       R2,@-R15
    00000F94              L1232:                            
    00000F94 D116                   MOV.L       L1405+26,R1; L671
    00000F96 2F16                   MOV.L       R1,@-R15
    00000F98 4D0B                   JSR         @R13
    00000F9A 64A3                   MOV         R10,R4
      simplexC.c   704        sprintf(stroutBasicInfo, "NConstraints: %d, NVariables: %d", pS->nConstraints, pS->nVariables);
    00000F9C 991E                   MOV.W       L1405+6,R9 ; H'008C
    00000F9E 39FC                   ADD         R15,R9
    00000FA0 53E7                   MOV.L       @(28,R14),R3
    00000FA2 2F36                   MOV.L       R3,@-R15
    00000FA4 52EB                   MOV.L       @(44,R14),R2
    00000FA6 2F26                   MOV.L       R2,@-R15
    00000FA8 D312                   MOV.L       L1405+30,R3; L579
    00000FAA 2F36                   MOV.L       R3,@-R15
    00000FAC 4D0B                   JSR         @R13
    00000FAE 6493                   MOV         R9,R4
    00000FB0 7F18                   ADD         #24,R15
      simplexC.c   705    
      simplexC.c   706        if(pS->modelType==TYPE_SOLVE && pS->is2fasesNeeded)
    00000FB2 50E1                   MOV.L       @(4,R14),R0
    00000FB4 8802                   CMP/EQ      #2,R0
    00000FB6 8F06                   BF/S        L1233
    00000FB8 6BF3                   MOV         R15,R11
    00000FBA 53E2                   MOV.L       @(8,R14),R3
    00000FBC 2338                   TST         R3,R3
    00000FBE 8902                   BT          L1233
      simplexC.c   707        {
      simplexC.c   708            sprintf(stroutObjInfo,"2 Pinfo obj func. 3 Pinfo 2fases");
    00000FC0 D30D                   MOV.L       L1405+34,R3; L673
    00000FC2 A001                   BRA         L1390
    00000FC4 0009                   NOP
    00000FC6              L1233:                            
      simplexC.c   709        }else
      simplexC.c   710        {
      simplexC.c   711            sprintf(stroutObjInfo,"2 Pinfo obj func.");
    00000FC6 D30D                   MOV.L       L1405+38,R3; L675
    00000FC8              L1390:                            
    00000FC8 2F36                   MOV.L       R3,@-R15
    00000FCA 4D0B                   JSR         @R13
    00000FCC 64B3                   MOV         R11,R4
    00000FCE D80C                   MOV.L       L1405+42,R8; _Bdisp_AllClr_DDVRAM
    00000FD0 DD0C                   MOV.L       L1405+46,R13; _PrintMini
      simplexC.c   712        }
      simplexC.c   713        
      simplexC.c   714        while(menuChoice!=EXIT_OPT)
    00000FD2 A05F                   BRA         L1235
    00000FD4 7F04                   ADD         #4,R15
    00000FD6              L1405:                            
    00000FD6 0080                   .DATA.W     H'0080
    00000FD8 FE80                   .DATA.W     H'FE80




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FDA 0100                   .DATA.W     H'0100
    00000FDC 008C                   .DATA.W     H'008C
    00000FDE 0000                   .DATA.W     0
    00000FE0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000FE4 <00000000>             .DATA.L     _sprintf
    00000FE8 <00000000>             .DATA.L     L577
    00000FEC <00000000>             .DATA.L     L578
    00000FF0 <00000000>             .DATA.L     L671
    00000FF4 <00000000>             .DATA.L     L579
    00000FF8 <00000000>             .DATA.L     L673
    00000FFC <00000000>             .DATA.L     L675
    00001000 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001004 <00000000>             .DATA.L     _PrintMini
    00001008              L1236:                            
      simplexC.c   715        {
      simplexC.c   716            Bdisp_AllClr_DDVRAM();
    00001008 480B                   JSR         @R8
    0000100A 0009                   NOP
      simplexC.c   717            
      simplexC.c   718            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    0000100C E710                   MOV         #16,R7
    0000100E 66A3                   MOV         R10,R6
    00001010 E500                   MOV         #0,R5
    00001012 4D0B                   JSR         @R13
    00001014 6453                   MOV         R5,R4
      simplexC.c   719            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001016 E710                   MOV         #16,R7
    00001018 6693                   MOV         R9,R6
    0000101A E507                   MOV         #7,R5
    0000101C 4D0B                   JSR         @R13
    0000101E E400                   MOV         #0,R4
      simplexC.c   720            PrintMini(0, 14, (unsigned char*)"1 Pinfo constraint", MINI_OVER);
    00001020 D630                   MOV.L       L1406+8,R6 ; L677
    00001022 E50E                   MOV         #14,R5
    00001024 E710                   MOV         #16,R7
    00001026 4D0B                   JSR         @R13
    00001028 E400                   MOV         #0,R4
      simplexC.c   721            PrintMini(0, 21, (unsigned char*)stroutObjInfo, MINI_OVER);
    0000102A E710                   MOV         #16,R7
    0000102C 66B3                   MOV         R11,R6
    0000102E E515                   MOV         #21,R5
    00001030 4D0B                   JSR         @R13
    00001032 E400                   MOV         #0,R4
      simplexC.c   722            if(pS->modelType==TYPE_SOLVE)
    00001034 50E1                   MOV.L       @(4,R14),R0
    00001036 8802                   CMP/EQ      #2,R0
    00001038 8B04                   BF          L1237
      simplexC.c   723            {
      simplexC.c   724                PrintMini(0, 28, (unsigned char*)"4 Pinfo aj vec", MINI_OVER);
    0000103A E710                   MOV         #16,R7
    0000103C D62A                   MOV.L       L1406+12,R6; L679
    0000103E E51C                   MOV         #28,R5
    00001040 4D0B                   JSR         @R13
    00001042 E400                   MOV         #0,R4
    00001044              L1237:                            
      simplexC.c   725            }
      simplexC.c   726            menuChoice = InputI(0, 35);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001044 D229                   MOV.L       L1406+16,R2; _InputI
    00001046 E523                   MOV         #35,R5
    00001048 420B                   JSR         @R2
    0000104A E400                   MOV         #0,R4
      simplexC.c   727            Bdisp_PutDisp_DD();
    0000104C D328                   MOV.L       L1406+20,R3; _Bdisp_PutDisp_DD
    0000104E 430B                   JSR         @R3
    00001050 6C03                   MOV         R0,R12
      simplexC.c   728            switch (menuChoice)
    00001052 60C3                   MOV         R12,R0
    00001054 8801                   CMP/EQ      #1,R0
    00001056 8907                   BT          L1034
    00001058 8802                   CMP/EQ      #2,R0
    0000105A 8909                   BT          L1035
    0000105C 8803                   CMP/EQ      #3,R0
    0000105E 890C                   BT          L1036
    00001060 8804                   CMP/EQ      #4,R0
    00001062 8912                   BT          L1037
    00001064 A016                   BRA         L1235
    00001066 0009                   NOP
    00001068              L1034:                           ; case label 
      simplexC.c   729            {
      simplexC.c   730            case 1: printAllConstraintsMenu(pS);break;
    00001068 BF2D                   BSR         _printAllConstraintsMenu
    0000106A 64E3                   MOV         R14,R4
    0000106C A012                   BRA         L1235
    0000106E 0009                   NOP
    00001070              L1035:                           ; case label 
      simplexC.c   731            case 2: printObjFunc(pS,TYPE_INPUT);break;
    00001070 E501                   MOV         #1,R5
    00001072 BBD7                   BSR         _printObjFunc
    00001074 64E3                   MOV         R14,R4
    00001076 A00D                   BRA         L1235
    00001078 0009                   NOP
    0000107A              L1036:                           ; case label 
      simplexC.c   732            case 3: if(pS->modelType==TYPE_SOLVE){printObjFunc(pS,TYPE_SOLVE);};break;
    0000107A 50E1                   MOV.L       @(4,R14),R0
    0000107C 8802                   CMP/EQ      #2,R0
    0000107E 8B09                   BF          L1235
    00001080 E502                   MOV         #2,R5
    00001082 BBCF                   BSR         _printObjFunc
    00001084 64E3                   MOV         R14,R4
    00001086 A005                   BRA         L1235
    00001088 0009                   NOP
    0000108A              L1037:                           ; case label 
      simplexC.c   733            case 4: if(pS->modelType==TYPE_SOLVE){printAjVec();};break;
    0000108A 50E1                   MOV.L       @(4,R14),R0
    0000108C 8802                   CMP/EQ      #2,R0
    0000108E 8B01                   BF          L1235
    00001090 BD36                   BSR         _printAjVec
    00001092 0009                   NOP
      simplexC.c   734            default: break;
    00001094              L1235:                            
    00001094 2CC8                   TST         R12,R12
    00001096 8BB7                   BF          L1236
      simplexC.c   735            }
      simplexC.c   736        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   737        return 0;
      simplexC.c   738    }
    00001098 9120                   MOV.W       L1406,R1   ; H'0180
    0000109A E000                   MOV         #0,R0
    0000109C 3F1C                   ADD         R1,R15
    0000109E 4F26                   LDS.L       @R15+,PR
    000010A0 68F6                   MOV.L       @R15+,R8
    000010A2 69F6                   MOV.L       @R15+,R9
    000010A4 6AF6                   MOV.L       @R15+,R10
    000010A6 6BF6                   MOV.L       @R15+,R11
    000010A8 6CF6                   MOV.L       @R15+,R12
    000010AA 6DF6                   MOV.L       @R15+,R13
    000010AC 000B                   RTS
    000010AE 6EF6                   MOV.L       @R15+,R14
      simplexC.c   739    
      simplexC.c   740    int printCtVecByIt(int itId)
    000010B0              _printCtVecByIt:                 ; function: printCtVecByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    000010B0 2FE6                   MOV.L       R14,@-R15
      simplexC.c   741    {
      simplexC.c   742        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   743        int menuChoice;
      simplexC.c   744        char *uselessSring[128];
      simplexC.c   745        menuChoice=INITIALIZE_VALUE_OPT;
    000010B2 EEFF                   MOV         #-1,R14
    000010B4 2FD6                   MOV.L       R13,@-R15
    000010B6 2FC6                   MOV.L       R12,@-R15
    000010B8 2FB6                   MOV.L       R11,@-R15
    000010BA 6B43                   MOV         R4,R11
    000010BC 9C11                   MOV.W       L1406+6,R12; H'0204
    000010BE 4B08                   SHLL2       R11
    000010C0 DD0E                   MOV.L       L1406+32,R13; _PrintMini
    000010C2 2FA6                   MOV.L       R10,@-R15
    000010C4 2F96                   MOV.L       R9,@-R15
    000010C6 2F86                   MOV.L       R8,@-R15
    000010C8 4F22                   STS.L       PR,@-R15
    000010CA 9008                   MOV.W       L1406+2,R0 ; H'FCFC
    000010CC D809                   MOV.L       L1406+24,R8; _ex
    000010CE 3F0C                   ADD         R0,R15
    000010D0 D909                   MOV.L       L1406+28,R9; _sprintf
    000010D2 2F42                   MOV.L       R4,@R15
    000010D4 9A04                   MOV.W       L1406+4,R10; H'0284
    000010D6 3AFC                   ADD         R15,R10
      simplexC.c   746        while(menuChoice!=EXIT_OPT)
    000010D8 A05F                   BRA         L1242
    000010DA 3CFC                   ADD         R15,R12
    000010DC              L1406:                            
    000010DC 0180                   .DATA.W     H'0180
    000010DE FCFC                   .DATA.W     H'FCFC
    000010E0 0284                   .DATA.W     H'0284
    000010E2 0204                   .DATA.W     H'0204
    000010E4 <00000000>             .DATA.L     L677
    000010E8 <00000000>             .DATA.L     L679
    000010EC <00000000>             .DATA.L     _InputI
    000010F0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010F4 <00000000>             .DATA.L     _ex
    000010F8 <00000000>             .DATA.L     _sprintf
    000010FC <00000000>             .DATA.L     _PrintMini
    00001100              L1243:                            
      simplexC.c   747        {
      simplexC.c   748            Bdisp_AllClr_DDVRAM();
    00001100 D23A                   MOV.L       L1407+10,R2; _Bdisp_AllClr_DDVRAM
    00001102 420B                   JSR         @R2
    00001104 0009                   NOP
      simplexC.c   749            sprintf(stroutBasicInfo, "Ct itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT
                         +);
    00001106 E300                   MOV         #0,R3
    00001108 2F36                   MOV.L       R3,@-R15
    0000110A 5085                   MOV.L       @(20,R8),R0
    0000110C 02BE                   MOV.L       @(R0,R11),R2
    0000110E 5129                   MOV.L       @(36,R2),R1
    00001110 D237                   MOV.L       L1407+14,R2; L691
    00001112 2F16                   MOV.L       R1,@-R15
    00001114 50F2                   MOV.L       @(8,R15),R0
    00001116 2F06                   MOV.L       R0,@-R15
    00001118 2F26                   MOV.L       R2,@-R15
    0000111A 490B                   JSR         @R9
    0000111C 64A3                   MOV         R10,R4
    0000111E 7F10                   ADD         #16,R15
      simplexC.c   750            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001120 E710                   MOV         #16,R7
    00001122 66A3                   MOV         R10,R6
    00001124 E500                   MOV         #0,R5
    00001126 4D0B                   JSR         @R13
    00001128 6453                   MOV         R5,R4
      simplexC.c   751            menuChoice = InputI(0, 7);
    0000112A E507                   MOV         #7,R5
    0000112C D331                   MOV.L       L1407+18,R3; _InputI
    0000112E 430B                   JSR         @R3
    00001130 E400                   MOV         #0,R4
      simplexC.c   752            Bdisp_PutDisp_DD();
    00001132 D231                   MOV.L       L1407+22,R2; _Bdisp_PutDisp_DD
    00001134 420B                   JSR         @R2
    00001136 6E03                   MOV         R0,R14
      simplexC.c   753            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001138 2EE8                   TST         R14,R14
    0000113A 8929                   BT          L1244
    0000113C D22F                   MOV.L       L1407+26,R2; H'00000014+_ex
    0000113E 6022                   MOV.L       @R2,R0
    00001140 03BE                   MOV.L       @(R0,R11),R3
    00001142 5139                   MOV.L       @(36,R3),R1
    00001144 3E17                   CMP/GT      R1,R14
    00001146 8923                   BT          L1244
      simplexC.c   754            {
      simplexC.c   755                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->ct[menuChoice-1]);
    00001148 5085                   MOV.L       @(20,R8),R0
    0000114A 63E3                   MOV         R14,R3
    0000114C D22C                   MOV.L       L1407+30,R2; __stod
    0000114E 73FF                   ADD         #-1,R3
    00001150 00BE                   MOV.L       @(R0,R11),R0
    00001152 4308                   SHLL2       R3
    00001154 500A                   MOV.L       @(40,R0),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001156 003E                   MOV.L       @(R0,R3),R0
    00001158 7FF8                   ADD         #-8,R15
    0000115A 420B                   JSR         @R2
    0000115C 2FF6                   MOV.L       R15,@-R15
    0000115E 2FE6                   MOV.L       R14,@-R15
    00001160 D328                   MOV.L       L1407+34,R3; L693
    00001162 2F36                   MOV.L       R3,@-R15
    00001164 490B                   JSR         @R9
    00001166 64C3                   MOV         R12,R4
    00001168 7F10                   ADD         #16,R15
      simplexC.c   756                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    0000116A E710                   MOV         #16,R7
    0000116C 66C3                   MOV         R12,R6
    0000116E E50E                   MOV         #14,R5
    00001170 4D0B                   JSR         @R13
    00001172 E400                   MOV         #0,R4
      simplexC.c   757                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001174 D624                   MOV.L       L1407+38,R6; L590
    00001176 E515                   MOV         #21,R5
    00001178 E710                   MOV         #16,R7
    0000117A 4D0B                   JSR         @R13
    0000117C E400                   MOV         #0,R4
      simplexC.c   758                string_input(0, 28, uselessSring);
    0000117E 66F3                   MOV         R15,R6
    00001180 D222                   MOV.L       L1407+42,R2; _string_input
    00001182 E51C                   MOV         #28,R5
    00001184 7604                   ADD         #4,R6
    00001186 420B                   JSR         @R2
    00001188 E400                   MOV         #0,R4
      simplexC.c   759                Bdisp_PutDisp_DD();
    0000118A D31B                   MOV.L       L1407+22,R3; _Bdisp_PutDisp_DD
    0000118C 430B                   JSR         @R3
    0000118E 0009                   NOP
    00001190              L1244:                            
      simplexC.c   760            }
      simplexC.c   761            memset(stroutBasicInfo2,0,128);
    00001190 9627                   MOV.W       L1407,R6   ; H'0080
    00001192 E500                   MOV         #0,R5
    00001194 D21E                   MOV.L       L1407+46,R2; _memset
    00001196 420B                   JSR         @R2
    00001198 64C3                   MOV         R12,R4
    0000119A              L1242:                            
    0000119A 2EE8                   TST         R14,R14
    0000119C 8BB0                   BF          L1243
      simplexC.c   762        }
      simplexC.c   763        return 0;
    0000119E E000                   MOV         #0,R0
      simplexC.c   764    }
    000011A0 9120                   MOV.W       L1407+2,R1 ; H'0304
    000011A2 3F1C                   ADD         R1,R15
    000011A4 4F26                   LDS.L       @R15+,PR
    000011A6 68F6                   MOV.L       @R15+,R8
    000011A8 69F6                   MOV.L       @R15+,R9
    000011AA 6AF6                   MOV.L       @R15+,R10
    000011AC 6BF6                   MOV.L       @R15+,R11
    000011AE 6CF6                   MOV.L       @R15+,R12
    000011B0 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011B2 000B                   RTS
    000011B4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   765    
      simplexC.c   766    
      simplexC.c   767    int printXbByIt(int itId)
    000011B6              _printXbByIt:                    ; function: printXbByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    000011B6 2FE6                   MOV.L       R14,@-R15
    000011B8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   768    {
      simplexC.c   769        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   770        int menuChoice;
      simplexC.c   771        char *uselessSring[128];
      simplexC.c   772        menuChoice=INITIALIZE_VALUE_OPT;
    000011BA EEFF                   MOV         #-1,R14
    000011BC 9013                   MOV.W       L1407+4,R0 ; H'FCFC
    000011BE 2FC6                   MOV.L       R12,@-R15
    000011C0 2FB6                   MOV.L       R11,@-R15
    000011C2 6B43                   MOV         R4,R11
    000011C4 9C11                   MOV.W       L1407+8,R12; H'0204
    000011C6 4B08                   SHLL2       R11
    000011C8 DD14                   MOV.L       L1407+58,R13; _PrintMini
    000011CA 2FA6                   MOV.L       R10,@-R15
    000011CC 2F96                   MOV.L       R9,@-R15
    000011CE 2F86                   MOV.L       R8,@-R15
    000011D0 4F22                   STS.L       PR,@-R15
    000011D2 3F0C                   ADD         R0,R15
    000011D4 D80F                   MOV.L       L1407+50,R8; _ex
    000011D6 2F42                   MOV.L       R4,@R15
    000011D8 D90F                   MOV.L       L1407+54,R9; _sprintf
    000011DA 9A05                   MOV.W       L1407+6,R10; H'0284
    000011DC 3AFC                   ADD         R15,R10
      simplexC.c   773        while(menuChoice!=EXIT_OPT)
    000011DE A06C                   BRA         L1246
    000011E0 3CFC                   ADD         R15,R12
    000011E2              L1407:                            
    000011E2 0080                   .DATA.W     H'0080
    000011E4 0304                   .DATA.W     H'0304
    000011E6 FCFC                   .DATA.W     H'FCFC
    000011E8 0284                   .DATA.W     H'0284
    000011EA 0204                   .DATA.W     H'0204
    000011EC <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000011F0 <00000000>             .DATA.L     L691
    000011F4 <00000000>             .DATA.L     _InputI
    000011F8 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000011FC <00000014>             .DATA.L     H'00000014+_ex
    00001200 <00000000>             .DATA.L     __stod
    00001204 <00000000>             .DATA.L     L693
    00001208 <00000000>             .DATA.L     L590
    0000120C <00000000>             .DATA.L     _string_input
    00001210 <00000000>             .DATA.L     _memset
    00001214 <00000000>             .DATA.L     _ex
    00001218 <00000000>             .DATA.L     _sprintf
    0000121C <00000000>             .DATA.L     _PrintMini
    00001220              L1247:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   774        {
      simplexC.c   775            Bdisp_AllClr_DDVRAM();
    00001220 D23A                   MOV.L       L1408+10,R2; _Bdisp_AllClr_DDVRAM
    00001222 420B                   JSR         @R2
    00001224 0009                   NOP
      simplexC.c   776            sprintf(stroutBasicInfo, "Xb itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT
                         +);
    00001226 E300                   MOV         #0,R3
    00001228 2F36                   MOV.L       R3,@-R15
    0000122A 5085                   MOV.L       @(20,R8),R0
    0000122C 02BE                   MOV.L       @(R0,R11),R2
    0000122E 5129                   MOV.L       @(36,R2),R1
    00001230 D237                   MOV.L       L1408+14,R2; L702
    00001232 2F16                   MOV.L       R1,@-R15
    00001234 50F2                   MOV.L       @(8,R15),R0
    00001236 2F06                   MOV.L       R0,@-R15
    00001238 2F26                   MOV.L       R2,@-R15
    0000123A 490B                   JSR         @R9
    0000123C 64A3                   MOV         R10,R4
    0000123E 7F10                   ADD         #16,R15
      simplexC.c   777            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001240 E710                   MOV         #16,R7
    00001242 66A3                   MOV         R10,R6
    00001244 E500                   MOV         #0,R5
    00001246 4D0B                   JSR         @R13
    00001248 6453                   MOV         R5,R4
      simplexC.c   778            menuChoice = InputI(0, 7);
    0000124A E507                   MOV         #7,R5
    0000124C D331                   MOV.L       L1408+18,R3; _InputI
    0000124E 430B                   JSR         @R3
    00001250 E400                   MOV         #0,R4
      simplexC.c   779            Bdisp_PutDisp_DD();
    00001252 D231                   MOV.L       L1408+22,R2; _Bdisp_PutDisp_DD
    00001254 420B                   JSR         @R2
    00001256 6E03                   MOV         R0,R14
      simplexC.c   780            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001258 2EE8                   TST         R14,R14
    0000125A 8929                   BT          L1248
    0000125C D22F                   MOV.L       L1408+26,R2; H'00000014+_ex
    0000125E 6022                   MOV.L       @R2,R0
    00001260 03BE                   MOV.L       @(R0,R11),R3
    00001262 5139                   MOV.L       @(36,R3),R1
    00001264 3E17                   CMP/GT      R1,R14
    00001266 8923                   BT          L1248
      simplexC.c   781            {
      simplexC.c   782                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->xb[menuChoice-1]);
    00001268 5085                   MOV.L       @(20,R8),R0
    0000126A 63E3                   MOV         R14,R3
    0000126C D22C                   MOV.L       L1408+30,R2; __stod
    0000126E 73FF                   ADD         #-1,R3
    00001270 00BE                   MOV.L       @(R0,R11),R0
    00001272 4308                   SHLL2       R3
    00001274 500B                   MOV.L       @(44,R0),R0
    00001276 003E                   MOV.L       @(R0,R3),R0
    00001278 7FF8                   ADD         #-8,R15
    0000127A 420B                   JSR         @R2
    0000127C 2FF6                   MOV.L       R15,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000127E 2FE6                   MOV.L       R14,@-R15
    00001280 D328                   MOV.L       L1408+34,R3; L693
    00001282 2F36                   MOV.L       R3,@-R15
    00001284 490B                   JSR         @R9
    00001286 64C3                   MOV         R12,R4
    00001288 7F10                   ADD         #16,R15
      simplexC.c   783                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    0000128A E710                   MOV         #16,R7
    0000128C 66C3                   MOV         R12,R6
    0000128E E50E                   MOV         #14,R5
    00001290 4D0B                   JSR         @R13
    00001292 E400                   MOV         #0,R4
      simplexC.c   784                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001294 D624                   MOV.L       L1408+38,R6; L590
    00001296 E515                   MOV         #21,R5
    00001298 E710                   MOV         #16,R7
    0000129A 4D0B                   JSR         @R13
    0000129C E400                   MOV         #0,R4
      simplexC.c   785                string_input(0, 28, uselessSring);
    0000129E 66F3                   MOV         R15,R6
    000012A0 D222                   MOV.L       L1408+42,R2; _string_input
    000012A2 E51C                   MOV         #28,R5
    000012A4 7604                   ADD         #4,R6
    000012A6 420B                   JSR         @R2
    000012A8 E400                   MOV         #0,R4
      simplexC.c   786                Bdisp_PutDisp_DD();
    000012AA D31B                   MOV.L       L1408+22,R3; _Bdisp_PutDisp_DD
    000012AC 430B                   JSR         @R3
    000012AE 0009                   NOP
    000012B0              L1248:                            
      simplexC.c   787            }
      simplexC.c   788            memset(stroutBasicInfo2,0,128);
    000012B0 9627                   MOV.W       L1408,R6   ; H'0080
    000012B2 E500                   MOV         #0,R5
    000012B4 D21E                   MOV.L       L1408+46,R2; _memset
    000012B6 420B                   JSR         @R2
    000012B8 64C3                   MOV         R12,R4
    000012BA              L1246:                            
    000012BA 2EE8                   TST         R14,R14
    000012BC 8BB0                   BF          L1247
      simplexC.c   789        }
      simplexC.c   790        return 0;
    000012BE E000                   MOV         #0,R0
      simplexC.c   791    }
    000012C0 9120                   MOV.W       L1408+2,R1 ; H'0304
    000012C2 3F1C                   ADD         R1,R15
    000012C4 4F26                   LDS.L       @R15+,PR
    000012C6 68F6                   MOV.L       @R15+,R8
    000012C8 69F6                   MOV.L       @R15+,R9
    000012CA 6AF6                   MOV.L       @R15+,R10
    000012CC 6BF6                   MOV.L       @R15+,R11
    000012CE 6CF6                   MOV.L       @R15+,R12
    000012D0 6DF6                   MOV.L       @R15+,R13
    000012D2 000B                   RTS
    000012D4 6EF6                   MOV.L       @R15+,R14
      simplexC.c   792    
      simplexC.c   793    int printYandXbDivYByIt(int itId)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012D6              _printYandXbDivYByIt:            ; function: printYandXbDivYByIt
                                                           ; frame size=836
                                                           ; used runtime library name:
                                                           ; __stod
    000012D6 2FE6                   MOV.L       R14,@-R15
    000012D8 2FD6                   MOV.L       R13,@-R15
      simplexC.c   794    {
      simplexC.c   795        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   796        int menuChoice;
      simplexC.c   797        char *uselessSring[128];
      simplexC.c   798        menuChoice=INITIALIZE_VALUE_OPT;
    000012DA EEFF                   MOV         #-1,R14
    000012DC 9013                   MOV.W       L1408+4,R0 ; H'FCF4
    000012DE 2FC6                   MOV.L       R12,@-R15
    000012E0 2FB6                   MOV.L       R11,@-R15
    000012E2 6B43                   MOV         R4,R11
    000012E4 9C11                   MOV.W       L1408+8,R12; H'020C
    000012E6 4B08                   SHLL2       R11
    000012E8 DD13                   MOV.L       L1408+54,R13; _PrintMini
    000012EA 2FA6                   MOV.L       R10,@-R15
    000012EC 2F96                   MOV.L       R9,@-R15
    000012EE 2F86                   MOV.L       R8,@-R15
    000012F0 4F22                   STS.L       PR,@-R15
    000012F2 3F0C                   ADD         R0,R15
    000012F4 D808                   MOV.L       L1408+22,R8; _Bdisp_PutDisp_DD
    000012F6 2F42                   MOV.L       R4,@R15
    000012F8 9906                   MOV.W       L1408+6,R9 ; H'028C
    000012FA 39FC                   ADD         R15,R9
    000012FC DA0D                   MOV.L       L1408+50,R10; _ex
      simplexC.c   799        while(menuChoice!=EXIT_OPT)
    000012FE A075                   BRA         L1250
    00001300 3CFC                   ADD         R15,R12
    00001302              L1408:                            
    00001302 0080                   .DATA.W     H'0080
    00001304 0304                   .DATA.W     H'0304
    00001306 FCF4                   .DATA.W     H'FCF4
    00001308 028C                   .DATA.W     H'028C
    0000130A 020C                   .DATA.W     H'020C
    0000130C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001310 <00000000>             .DATA.L     L702
    00001314 <00000000>             .DATA.L     _InputI
    00001318 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000131C <00000014>             .DATA.L     H'00000014+_ex
    00001320 <00000000>             .DATA.L     __stod
    00001324 <00000000>             .DATA.L     L693
    00001328 <00000000>             .DATA.L     L590
    0000132C <00000000>             .DATA.L     _string_input
    00001330 <00000000>             .DATA.L     _memset
    00001334 <00000000>             .DATA.L     _ex
    00001338 <00000000>             .DATA.L     _PrintMini
    0000133C              L1251:                            
      simplexC.c   800        {
      simplexC.c   801            Bdisp_AllClr_DDVRAM();
    0000133C D240                   MOV.L       L1409+12,R2; _Bdisp_AllClr_DDVRAM
    0000133E 420B                   JSR         @R2
    00001340 0009                   NOP
      simplexC.c   802            sprintf(stroutBasicInfo, "Y & xb/y itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EX




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                         +IT_OPT);
    00001342 E300                   MOV         #0,R3
    00001344 2F36                   MOV.L       R3,@-R15
    00001346 50A5                   MOV.L       @(20,R10),R0
    00001348 02BE                   MOV.L       @(R0,R11),R2
    0000134A 5129                   MOV.L       @(36,R2),R1
    0000134C D23D                   MOV.L       L1409+16,R2; L712
    0000134E 2F16                   MOV.L       R1,@-R15
    00001350 50F2                   MOV.L       @(8,R15),R0
    00001352 2F06                   MOV.L       R0,@-R15
    00001354 2F26                   MOV.L       R2,@-R15
    00001356 D13C                   MOV.L       L1409+20,R1; _sprintf
    00001358 410B                   JSR         @R1
    0000135A 6493                   MOV         R9,R4
    0000135C 7F10                   ADD         #16,R15
      simplexC.c   803            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    0000135E E710                   MOV         #16,R7
    00001360 6693                   MOV         R9,R6
    00001362 E500                   MOV         #0,R5
    00001364 4D0B                   JSR         @R13
    00001366 6453                   MOV         R5,R4
      simplexC.c   804            menuChoice = InputI(0, 7);
    00001368 D338                   MOV.L       L1409+24,R3; _InputI
    0000136A E507                   MOV         #7,R5
    0000136C 430B                   JSR         @R3
    0000136E E400                   MOV         #0,R4
      simplexC.c   805            Bdisp_PutDisp_DD();
    00001370 480B                   JSR         @R8
    00001372 6E03                   MOV         R0,R14
      simplexC.c   806            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    00001374 2EE8                   TST         R14,R14
    00001376 8934                   BT          L1252
    00001378 D335                   MOV.L       L1409+28,R3; H'00000014+_ex
    0000137A 6032                   MOV.L       @R3,R0
    0000137C 02BE                   MOV.L       @(R0,R11),R2
    0000137E 5129                   MOV.L       @(36,R2),R1
    00001380 3E17                   CMP/GT      R1,R14
    00001382 892E                   BT          L1252
      simplexC.c   807            {
      simplexC.c   808                sprintf(stroutBasicInfo2, "Pos %d: Y: %.2f xb/y: %.2f",menuChoice,ex.nodes.its[itId]->yj[menuC
                         +hoice-1],ex.nodes.its[itId]->xbDivYj[menuChoice-1]);
    00001384 50A5                   MOV.L       @(20,R10),R0
    00001386 63E3                   MOV         R14,R3
    00001388 D132                   MOV.L       L1409+32,R1; __stod
    0000138A E240                   MOV         #64,R2
    0000138C 00BE                   MOV.L       @(R0,R11),R0
    0000138E 73FF                   ADD         #-1,R3
    00001390 1F01                   MOV.L       R0,@(4,R15)
    00001392 4308                   SHLL2       R3
    00001394 1F32                   MOV.L       R3,@(8,R15)
    00001396 002E                   MOV.L       @(R0,R2),R0
    00001398 003E                   MOV.L       @(R0,R3),R0
    0000139A 7FF8                   ADD         #-8,R15
    0000139C 410B                   JSR         @R1
    0000139E 2FF6                   MOV.L       R15,@-R15
    000013A0 50F3                   MOV.L       @(12,R15),R0
    000013A2 53F4                   MOV.L       @(16,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013A4 500F                   MOV.L       @(60,R0),R0
    000013A6 003E                   MOV.L       @(R0,R3),R0
    000013A8 D12A                   MOV.L       L1409+32,R1; __stod
    000013AA 7FF8                   ADD         #-8,R15
    000013AC 410B                   JSR         @R1
    000013AE 2FF6                   MOV.L       R15,@-R15
    000013B0 2FE6                   MOV.L       R14,@-R15
    000013B2 D029                   MOV.L       L1409+36,R0; L714
    000013B4 D324                   MOV.L       L1409+20,R3; _sprintf
    000013B6 2F06                   MOV.L       R0,@-R15
    000013B8 430B                   JSR         @R3
    000013BA 64C3                   MOV         R12,R4
    000013BC 7F18                   ADD         #24,R15
      simplexC.c   809                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000013BE E710                   MOV         #16,R7
    000013C0 66C3                   MOV         R12,R6
    000013C2 E50E                   MOV         #14,R5
    000013C4 4D0B                   JSR         @R13
    000013C6 E400                   MOV         #0,R4
      simplexC.c   810                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000013C8 D624                   MOV.L       L1409+40,R6; L590
    000013CA E515                   MOV         #21,R5
    000013CC E710                   MOV         #16,R7
    000013CE 4D0B                   JSR         @R13
    000013D0 E400                   MOV         #0,R4
      simplexC.c   811                string_input(0, 28, uselessSring);
    000013D2 66F3                   MOV         R15,R6
    000013D4 D222                   MOV.L       L1409+44,R2; _string_input
    000013D6 E51C                   MOV         #28,R5
    000013D8 760C                   ADD         #12,R6
    000013DA 420B                   JSR         @R2
    000013DC E400                   MOV         #0,R4
      simplexC.c   812                Bdisp_PutDisp_DD();
    000013DE 480B                   JSR         @R8
    000013E0 0009                   NOP
    000013E2              L1252:                            
      simplexC.c   813            }
      simplexC.c   814            memset(stroutBasicInfo2,0,128);
    000013E2 E500                   MOV         #0,R5
    000013E4 D31F                   MOV.L       L1409+48,R3; _memset
    000013E6 9625                   MOV.W       L1409,R6   ; H'0080
    000013E8 430B                   JSR         @R3
    000013EA 64C3                   MOV         R12,R4
    000013EC              L1250:                            
    000013EC 2EE8                   TST         R14,R14
    000013EE 8BA5                   BF          L1251
      simplexC.c   815        }
      simplexC.c   816        return 0;
      simplexC.c   817    }
    000013F0 9121                   MOV.W       L1409+2,R1 ; H'030C
    000013F2 E000                   MOV         #0,R0
    000013F4 3F1C                   ADD         R1,R15
    000013F6 4F26                   LDS.L       @R15+,PR
    000013F8 68F6                   MOV.L       @R15+,R8
    000013FA 69F6                   MOV.L       @R15+,R9
    000013FC 6AF6                   MOV.L       @R15+,R10
    000013FE 6BF6                   MOV.L       @R15+,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001400 6CF6                   MOV.L       @R15+,R12
    00001402 6DF6                   MOV.L       @R15+,R13
    00001404 000B                   RTS
    00001406 6EF6                   MOV.L       @R15+,R14
      simplexC.c   818    
      simplexC.c   819    
      simplexC.c   820    int printCtBinvByIt(int itId)
    00001408              _printCtBinvByIt:                ; function: printCtBinvByIt
                                                           ; frame size=820
                                                           ; used runtime library name:
                                                           ; __stod
    00001408 2FE6                   MOV.L       R14,@-R15
      simplexC.c   821    {
      simplexC.c   822        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   823        int menuChoice;
      simplexC.c   824        char *uselessSring[128];
      simplexC.c   825        menuChoice=INITIALIZE_VALUE_OPT;
    0000140A EEFF                   MOV         #-1,R14
    0000140C 2FD6                   MOV.L       R13,@-R15
    0000140E 2FC6                   MOV.L       R12,@-R15
    00001410 2FB6                   MOV.L       R11,@-R15
    00001412 6B43                   MOV         R4,R11
    00001414 9C12                   MOV.W       L1409+8,R12; H'0204
    00001416 4B08                   SHLL2       R11
    00001418 DD14                   MOV.L       L1409+56,R13; _PrintMini
    0000141A 2FA6                   MOV.L       R10,@-R15
    0000141C 2F96                   MOV.L       R9,@-R15
    0000141E 2F86                   MOV.L       R8,@-R15
    00001420 4F22                   STS.L       PR,@-R15
    00001422 9009                   MOV.W       L1409+4,R0 ; H'FCFC
    00001424 D810                   MOV.L       L1409+52,R8; _ex
    00001426 3F0C                   ADD         R0,R15
    00001428 D907                   MOV.L       L1409+20,R9; _sprintf
    0000142A 2F42                   MOV.L       R4,@R15
    0000142C 9A05                   MOV.W       L1409+6,R10; H'0284
    0000142E 3AFC                   ADD         R15,R10
      simplexC.c   826        while(menuChoice!=EXIT_OPT)
    00001430 A06B                   BRA         L1254
    00001432 3CFC                   ADD         R15,R12
    00001434              L1409:                            
    00001434 0080                   .DATA.W     H'0080
    00001436 030C                   .DATA.W     H'030C
    00001438 FCFC                   .DATA.W     H'FCFC
    0000143A 0284                   .DATA.W     H'0284
    0000143C 0204                   .DATA.W     H'0204
    0000143E 0000                   .DATA.W     0
    00001440 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001444 <00000000>             .DATA.L     L712
    00001448 <00000000>             .DATA.L     _sprintf
    0000144C <00000000>             .DATA.L     _InputI
    00001450 <00000014>             .DATA.L     H'00000014+_ex
    00001454 <00000000>             .DATA.L     __stod
    00001458 <00000000>             .DATA.L     L714
    0000145C <00000000>             .DATA.L     L590
    00001460 <00000000>             .DATA.L     _string_input
    00001464 <00000000>             .DATA.L     _memset
    00001468 <00000000>             .DATA.L     _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000146C <00000000>             .DATA.L     _PrintMini
    00001470              L1255:                            
      simplexC.c   827        {
      simplexC.c   828            Bdisp_AllClr_DDVRAM();
    00001470 D23A                   MOV.L       L1410+10,R2; _Bdisp_AllClr_DDVRAM
    00001472 420B                   JSR         @R2
    00001474 0009                   NOP
      simplexC.c   829            sprintf(stroutBasicInfo, "CtBinv itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT
                         +_OPT);
    00001476 E300                   MOV         #0,R3
    00001478 2F36                   MOV.L       R3,@-R15
    0000147A 5085                   MOV.L       @(20,R8),R0
    0000147C 02BE                   MOV.L       @(R0,R11),R2
    0000147E 5129                   MOV.L       @(36,R2),R1
    00001480 D237                   MOV.L       L1410+14,R2; L723
    00001482 2F16                   MOV.L       R1,@-R15
    00001484 50F2                   MOV.L       @(8,R15),R0
    00001486 2F06                   MOV.L       R0,@-R15
    00001488 2F26                   MOV.L       R2,@-R15
    0000148A 490B                   JSR         @R9
    0000148C 64A3                   MOV         R10,R4
    0000148E 7F10                   ADD         #16,R15
      simplexC.c   830            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001490 E710                   MOV         #16,R7
    00001492 66A3                   MOV         R10,R6
    00001494 E500                   MOV         #0,R5
    00001496 4D0B                   JSR         @R13
    00001498 6453                   MOV         R5,R4
      simplexC.c   831            menuChoice = InputI(0, 7);
    0000149A E507                   MOV         #7,R5
    0000149C D331                   MOV.L       L1410+18,R3; _InputI
    0000149E 430B                   JSR         @R3
    000014A0 E400                   MOV         #0,R4
      simplexC.c   832            Bdisp_PutDisp_DD();
    000014A2 D231                   MOV.L       L1410+22,R2; _Bdisp_PutDisp_DD
    000014A4 420B                   JSR         @R2
    000014A6 6E03                   MOV         R0,R14
      simplexC.c   833            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    000014A8 2EE8                   TST         R14,R14
    000014AA 8929                   BT          L1256
    000014AC D22F                   MOV.L       L1410+26,R2; H'00000014+_ex
    000014AE 6022                   MOV.L       @R2,R0
    000014B0 03BE                   MOV.L       @(R0,R11),R3
    000014B2 5139                   MOV.L       @(36,R3),R1
    000014B4 3E17                   CMP/GT      R1,R14
    000014B6 8923                   BT          L1256
      simplexC.c   834            {
      simplexC.c   835                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,ex.nodes.its[itId]->ctBinv[menuChoice-1]);
    000014B8 5085                   MOV.L       @(20,R8),R0
    000014BA 63E3                   MOV         R14,R3
    000014BC D22C                   MOV.L       L1410+30,R2; __stod
    000014BE 73FF                   ADD         #-1,R3
    000014C0 00BE                   MOV.L       @(R0,R11),R0
    000014C2 4308                   SHLL2       R3
    000014C4 500C                   MOV.L       @(48,R0),R0
    000014C6 003E                   MOV.L       @(R0,R3),R0
    000014C8 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014CA 420B                   JSR         @R2
    000014CC 2FF6                   MOV.L       R15,@-R15
    000014CE 2FE6                   MOV.L       R14,@-R15
    000014D0 D328                   MOV.L       L1410+34,R3; L693
    000014D2 2F36                   MOV.L       R3,@-R15
    000014D4 490B                   JSR         @R9
    000014D6 64C3                   MOV         R12,R4
    000014D8 7F10                   ADD         #16,R15
      simplexC.c   836                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000014DA E710                   MOV         #16,R7
    000014DC 66C3                   MOV         R12,R6
    000014DE E50E                   MOV         #14,R5
    000014E0 4D0B                   JSR         @R13
    000014E2 E400                   MOV         #0,R4
      simplexC.c   837                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000014E4 D624                   MOV.L       L1410+38,R6; L590
    000014E6 E515                   MOV         #21,R5
    000014E8 E710                   MOV         #16,R7
    000014EA 4D0B                   JSR         @R13
    000014EC E400                   MOV         #0,R4
      simplexC.c   838                string_input(0, 28, uselessSring);
    000014EE 66F3                   MOV         R15,R6
    000014F0 D222                   MOV.L       L1410+42,R2; _string_input
    000014F2 E51C                   MOV         #28,R5
    000014F4 7604                   ADD         #4,R6
    000014F6 420B                   JSR         @R2
    000014F8 E400                   MOV         #0,R4
      simplexC.c   839                Bdisp_PutDisp_DD();
    000014FA D31B                   MOV.L       L1410+22,R3; _Bdisp_PutDisp_DD
    000014FC 430B                   JSR         @R3
    000014FE 0009                   NOP
    00001500              L1256:                            
      simplexC.c   840            }
      simplexC.c   841            memset(stroutBasicInfo2,0,128);
    00001500 9627                   MOV.W       L1410,R6   ; H'0080
    00001502 E500                   MOV         #0,R5
    00001504 D21E                   MOV.L       L1410+46,R2; _memset
    00001506 420B                   JSR         @R2
    00001508 64C3                   MOV         R12,R4
    0000150A              L1254:                            
    0000150A 2EE8                   TST         R14,R14
    0000150C 8BB0                   BF          L1255
      simplexC.c   842        }
      simplexC.c   843        return 0;
    0000150E E000                   MOV         #0,R0
      simplexC.c   844    }
    00001510 9120                   MOV.W       L1410+2,R1 ; H'0304
    00001512 3F1C                   ADD         R1,R15
    00001514 4F26                   LDS.L       @R15+,PR
    00001516 68F6                   MOV.L       @R15+,R8
    00001518 69F6                   MOV.L       @R15+,R9
    0000151A 6AF6                   MOV.L       @R15+,R10
    0000151C 6BF6                   MOV.L       @R15+,R11
    0000151E 6CF6                   MOV.L       @R15+,R12
    00001520 6DF6                   MOV.L       @R15+,R13
    00001522 000B                   RTS
    00001524 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   845    
      simplexC.c   846    int printBasicVarsBbyIt(int itId)
    00001526              _printBasicVarsBbyIt:            ; function: printBasicVarsBbyIt
                                                           ; frame size=820
    00001526 2FE6                   MOV.L       R14,@-R15
    00001528 2FD6                   MOV.L       R13,@-R15
      simplexC.c   847    {
      simplexC.c   848        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   849        int menuChoice;
      simplexC.c   850        char *uselessSring[128];
      simplexC.c   851        menuChoice=INITIALIZE_VALUE_OPT;
    0000152A EEFF                   MOV         #-1,R14
    0000152C 9013                   MOV.W       L1410+4,R0 ; H'FCFC
    0000152E 2FC6                   MOV.L       R12,@-R15
    00001530 2FB6                   MOV.L       R11,@-R15
    00001532 6B43                   MOV         R4,R11
    00001534 9C11                   MOV.W       L1410+8,R12; H'0204
    00001536 4B08                   SHLL2       R11
    00001538 DD14                   MOV.L       L1410+58,R13; _PrintMini
    0000153A 2FA6                   MOV.L       R10,@-R15
    0000153C 2F96                   MOV.L       R9,@-R15
    0000153E 2F86                   MOV.L       R8,@-R15
    00001540 4F22                   STS.L       PR,@-R15
    00001542 3F0C                   ADD         R0,R15
    00001544 D80F                   MOV.L       L1410+50,R8; _ex
    00001546 2F42                   MOV.L       R4,@R15
    00001548 D90F                   MOV.L       L1410+54,R9; _sprintf
    0000154A 9A05                   MOV.W       L1410+6,R10; H'0284
    0000154C 3AFC                   ADD         R15,R10
      simplexC.c   852        while(menuChoice!=EXIT_OPT)
    0000154E A06A                   BRA         L1258
    00001550 3CFC                   ADD         R15,R12
    00001552              L1410:                            
    00001552 0080                   .DATA.W     H'0080
    00001554 0304                   .DATA.W     H'0304
    00001556 FCFC                   .DATA.W     H'FCFC
    00001558 0284                   .DATA.W     H'0284
    0000155A 0204                   .DATA.W     H'0204
    0000155C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001560 <00000000>             .DATA.L     L723
    00001564 <00000000>             .DATA.L     _InputI
    00001568 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000156C <00000014>             .DATA.L     H'00000014+_ex
    00001570 <00000000>             .DATA.L     __stod
    00001574 <00000000>             .DATA.L     L693
    00001578 <00000000>             .DATA.L     L590
    0000157C <00000000>             .DATA.L     _string_input
    00001580 <00000000>             .DATA.L     _memset
    00001584 <00000000>             .DATA.L     _ex
    00001588 <00000000>             .DATA.L     _sprintf
    0000158C <00000000>             .DATA.L     _PrintMini
    00001590              L1259:                            
      simplexC.c   853        {
      simplexC.c   854            Bdisp_AllClr_DDVRAM();
    00001590 D245                   MOV.L       L1411+16,R2; _Bdisp_AllClr_DDVRAM
    00001592 420B                   JSR         @R2
    00001594 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   855            sprintf(stroutBasicInfo, "BVars itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_
                         +OPT);
    00001596 E300                   MOV         #0,R3
    00001598 2F36                   MOV.L       R3,@-R15
    0000159A 5085                   MOV.L       @(20,R8),R0
    0000159C 02BE                   MOV.L       @(R0,R11),R2
    0000159E 5129                   MOV.L       @(36,R2),R1
    000015A0 D242                   MOV.L       L1411+20,R2; L733
    000015A2 2F16                   MOV.L       R1,@-R15
    000015A4 50F2                   MOV.L       @(8,R15),R0
    000015A6 2F06                   MOV.L       R0,@-R15
    000015A8 2F26                   MOV.L       R2,@-R15
    000015AA 490B                   JSR         @R9
    000015AC 64A3                   MOV         R10,R4
    000015AE 7F10                   ADD         #16,R15
      simplexC.c   856            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    000015B0 E710                   MOV         #16,R7
    000015B2 66A3                   MOV         R10,R6
    000015B4 E500                   MOV         #0,R5
    000015B6 4D0B                   JSR         @R13
    000015B8 6453                   MOV         R5,R4
      simplexC.c   857            menuChoice = InputI(0, 7);
    000015BA E507                   MOV         #7,R5
    000015BC D33C                   MOV.L       L1411+24,R3; _InputI
    000015BE 430B                   JSR         @R3
    000015C0 E400                   MOV         #0,R4
      simplexC.c   858            Bdisp_PutDisp_DD();
    000015C2 D23C                   MOV.L       L1411+28,R2; _Bdisp_PutDisp_DD
    000015C4 420B                   JSR         @R2
    000015C6 6E03                   MOV         R0,R14
      simplexC.c   859            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nodes.its[itId]->BinvSize)
    000015C8 2EE8                   TST         R14,R14
    000015CA 8927                   BT          L1260
    000015CC D23A                   MOV.L       L1411+32,R2; H'00000014+_ex
    000015CE 6022                   MOV.L       @R2,R0
    000015D0 03BE                   MOV.L       @(R0,R11),R3
    000015D2 5139                   MOV.L       @(36,R3),R1
    000015D4 3E17                   CMP/GT      R1,R14
    000015D6 8921                   BT          L1260
      simplexC.c   860            {
      simplexC.c   861                sprintf(stroutBasicInfo2, "Pos %d: %d",menuChoice,ex.nodes.its[itId]->idByRowOfBasicVarsInBInv
                         +[menuChoice-1]+1);
    000015D8 5085                   MOV.L       @(20,R8),R0
    000015DA 63E3                   MOV         R14,R3
    000015DC 00BE                   MOV.L       @(R0,R11),R0
    000015DE 73FF                   ADD         #-1,R3
    000015E0 5003                   MOV.L       @(12,R0),R0
    000015E2 4308                   SHLL2       R3
    000015E4 023E                   MOV.L       @(R0,R3),R2
    000015E6 7201                   ADD         #1,R2
    000015E8 2F26                   MOV.L       R2,@-R15
    000015EA 2FE6                   MOV.L       R14,@-R15
    000015EC D333                   MOV.L       L1411+36,R3; L735
    000015EE 2F36                   MOV.L       R3,@-R15
    000015F0 490B                   JSR         @R9
    000015F2 64C3                   MOV         R12,R4
    000015F4 7F0C                   ADD         #12,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   862                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000015F6 E710                   MOV         #16,R7
    000015F8 66C3                   MOV         R12,R6
    000015FA E50E                   MOV         #14,R5
    000015FC 4D0B                   JSR         @R13
    000015FE E400                   MOV         #0,R4
      simplexC.c   863                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001600 D62F                   MOV.L       L1411+40,R6; L590
    00001602 E515                   MOV         #21,R5
    00001604 E710                   MOV         #16,R7
    00001606 4D0B                   JSR         @R13
    00001608 E400                   MOV         #0,R4
      simplexC.c   864                string_input(0, 28, uselessSring);
    0000160A 66F3                   MOV         R15,R6
    0000160C D22D                   MOV.L       L1411+44,R2; _string_input
    0000160E E51C                   MOV         #28,R5
    00001610 7604                   ADD         #4,R6
    00001612 420B                   JSR         @R2
    00001614 E400                   MOV         #0,R4
      simplexC.c   865                Bdisp_PutDisp_DD();
    00001616 D327                   MOV.L       L1411+28,R3; _Bdisp_PutDisp_DD
    00001618 430B                   JSR         @R3
    0000161A 0009                   NOP
    0000161C              L1260:                            
      simplexC.c   866            }
      simplexC.c   867            memset(stroutBasicInfo2,0,128);
    0000161C 963C                   MOV.W       L1411,R6   ; H'0080
    0000161E E500                   MOV         #0,R5
    00001620 D229                   MOV.L       L1411+48,R2; _memset
    00001622 420B                   JSR         @R2
    00001624 64C3                   MOV         R12,R4
    00001626              L1258:                            
    00001626 2EE8                   TST         R14,R14
    00001628 8BB2                   BF          L1259
      simplexC.c   868        }
      simplexC.c   869        return 0;
    0000162A E000                   MOV         #0,R0
      simplexC.c   870    }
    0000162C 9135                   MOV.W       L1411+2,R1 ; H'0304
    0000162E 3F1C                   ADD         R1,R15
    00001630 4F26                   LDS.L       @R15+,PR
    00001632 68F6                   MOV.L       @R15+,R8
    00001634 69F6                   MOV.L       @R15+,R9
    00001636 6AF6                   MOV.L       @R15+,R10
    00001638 6BF6                   MOV.L       @R15+,R11
    0000163A 6CF6                   MOV.L       @R15+,R12
    0000163C 6DF6                   MOV.L       @R15+,R13
    0000163E 000B                   RTS
    00001640 6EF6                   MOV.L       @R15+,R14
      simplexC.c   871    
      simplexC.c   872    int printResVariables()
    00001642              _printResVariables:              ; function: printResVariables
                                                           ; frame size=1084
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   873    {
      simplexC.c   874        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutVariable[128];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   875        char *uselessSring[128];
      simplexC.c   876        int menuChoice,i,idBasicVar;
      simplexC.c   877        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   878        sprintf(stroutTop,"Var res, printMenu. Exit %d", EXIT_OPT);
    00001642 E300                   MOV         #0,R3
    00001644 D222                   MOV.L       L1411+56,R2; L746
    00001646 2FE6                   MOV.L       R14,@-R15
    00001648 2FD6                   MOV.L       R13,@-R15
    0000164A EDFF                   MOV         #-1,R13
    0000164C 9427                   MOV.W       L1411+6,R4 ; H'038C
    0000164E 2FC6                   MOV.L       R12,@-R15
    00001650 2FB6                   MOV.L       R11,@-R15
    00001652 2FA6                   MOV.L       R10,@-R15
    00001654 2F96                   MOV.L       R9,@-R15
    00001656 2F86                   MOV.L       R8,@-R15
    00001658 4F22                   STS.L       PR,@-R15
    0000165A 901F                   MOV.W       L1411+4,R0 ; H'FBFC
    0000165C D81B                   MOV.L       L1411+52,R8; _sprintf
    0000165E 3F0C                   ADD         R0,R15
    00001660 2F36                   MOV.L       R3,@-R15
    00001662 2F26                   MOV.L       R2,@-R15
    00001664 480B                   JSR         @R8
    00001666 34FC                   ADD         R15,R4
      simplexC.c   879        sprintf(stroutBasicInfo, "Nvars: %d, NVB: %d",ex.nVariables,ex.nodes.its[ex.nodes.nIterations]->BinvSi
                         +ze);
    00001668 DC1A                   MOV.L       L1411+60,R12; _ex
    0000166A 53C4                   MOV.L       @(16,R12),R3
    0000166C 50C5                   MOV.L       @(20,R12),R0
    0000166E 4308                   SHLL2       R3
    00001670 9416                   MOV.W       L1411+8,R4 ; H'0318
    00001672 023E                   MOV.L       @(R0,R3),R2
    00001674 5129                   MOV.L       @(36,R2),R1
    00001676 2F16                   MOV.L       R1,@-R15
    00001678 53CB                   MOV.L       @(44,R12),R3
    0000167A 2F36                   MOV.L       R3,@-R15
    0000167C D216                   MOV.L       L1411+64,R2; L747
    0000167E 2F26                   MOV.L       R2,@-R15
    00001680 480B                   JSR         @R8
    00001682 34FC                   ADD         R15,R4
      simplexC.c   880        sprintf(stroutBasicInfo2, "Select a var:");
    00001684 D315                   MOV.L       L1411+68,R3; L748
    00001686 2F36                   MOV.L       R3,@-R15
    00001688 940B                   MOV.W       L1411+10,R4; H'029C
    0000168A 480B                   JSR         @R8
    0000168C 34FC                   ADD         R15,R4
    0000168E 7F18                   ADD         #24,R15
    00001690 9A08                   MOV.W       L1411+12,R10; H'0204
    00001692 DE13                   MOV.L       L1411+72,R14; _PrintMini
      simplexC.c   881    
      simplexC.c   882        while(menuChoice!=EXIT_OPT)
    00001694 A094                   BRA         L1262
    00001696 3AFC                   ADD         R15,R10
    00001698              L1411:                            
    00001698 0080                   .DATA.W     H'0080
    0000169A 0304                   .DATA.W     H'0304
    0000169C FBFC                   .DATA.W     H'FBFC
    0000169E 038C                   .DATA.W     H'038C




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016A0 0318                   .DATA.W     H'0318
    000016A2 029C                   .DATA.W     H'029C
    000016A4 0204                   .DATA.W     H'0204
    000016A6 0000                   .DATA.W     0
    000016A8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000016AC <00000000>             .DATA.L     L733
    000016B0 <00000000>             .DATA.L     _InputI
    000016B4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000016B8 <00000014>             .DATA.L     H'00000014+_ex
    000016BC <00000000>             .DATA.L     L735
    000016C0 <00000000>             .DATA.L     L590
    000016C4 <00000000>             .DATA.L     _string_input
    000016C8 <00000000>             .DATA.L     _memset
    000016CC <00000000>             .DATA.L     _sprintf
    000016D0 <00000000>             .DATA.L     L746
    000016D4 <00000000>             .DATA.L     _ex
    000016D8 <00000000>             .DATA.L     L747
    000016DC <00000000>             .DATA.L     L748
    000016E0 <00000000>             .DATA.L     _PrintMini
    000016E4              L1263:                            
      simplexC.c   883        {
      simplexC.c   884            Bdisp_AllClr_DDVRAM();
    000016E4 D34D                   MOV.L       L1412+16,R3; _Bdisp_AllClr_DDVRAM
    000016E6 430B                   JSR         @R3
    000016E8 0009                   NOP
      simplexC.c   885            
      simplexC.c   886            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    000016EA E710                   MOV         #16,R7
    000016EC 968E                   MOV.W       L1412,R6   ; H'0384
    000016EE E500                   MOV         #0,R5
    000016F0 36FC                   ADD         R15,R6
    000016F2 4E0B                   JSR         @R14
    000016F4 6453                   MOV         R5,R4
      simplexC.c   887            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    000016F6 E710                   MOV         #16,R7
    000016F8 9689                   MOV.W       L1412+2,R6 ; H'0304
    000016FA E507                   MOV         #7,R5
    000016FC 36FC                   ADD         R15,R6
    000016FE 4E0B                   JSR         @R14
    00001700 E400                   MOV         #0,R4
      simplexC.c   888            PrintMini(0,14,  (unsigned char *)stroutBasicInfo2, MINI_OVER);
    00001702 E710                   MOV         #16,R7
    00001704 9684                   MOV.W       L1412+4,R6 ; H'0284
    00001706 E50E                   MOV         #14,R5
    00001708 36FC                   ADD         R15,R6
    0000170A 4E0B                   JSR         @R14
    0000170C E400                   MOV         #0,R4
      simplexC.c   889            menuChoice = InputI(0, 21);
    0000170E E515                   MOV         #21,R5
    00001710 D243                   MOV.L       L1412+20,R2; _InputI
    00001712 420B                   JSR         @R2
    00001714 E400                   MOV         #0,R4
      simplexC.c   890            Bdisp_PutDisp_DD();
    00001716 D343                   MOV.L       L1412+24,R3; _Bdisp_PutDisp_DD
    00001718 430B                   JSR         @R3
    0000171A 6D03                   MOV         R0,R13
      simplexC.c   891            if(menuChoice<=ex.nVariables)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000171C 52CB                   MOV.L       @(44,R12),R2
    0000171E 3D27                   CMP/GT      R2,R13
    00001720 8936                   BT          L1264
    00001722 69D3                   MOV         R13,R9
    00001724 5BC4                   MOV.L       @(16,R12),R11
    00001726 79FF                   ADD         #-1,R9
    00001728 53C5                   MOV.L       @(20,R12),R3
    0000172A 4B08                   SHLL2       R11
    0000172C 3B3C                   ADD         R3,R11
    0000172E 6393                   MOV         R9,R3
    00001730 60B2                   MOV.L       @R11,R0
    00001732 4308                   SHLL2       R3
    00001734 5002                   MOV.L       @(8,R0),R0
    00001736 023E                   MOV.L       @(R0,R3),R2
    00001738 2228                   TST         R2,R2
    0000173A 891E                   BT          L1265
      simplexC.c   892            {
      simplexC.c   893                if(ex.nodes.its[ex.nodes.nIterations]->idBasicVariables[menuChoice-1])
      simplexC.c   894                {
      simplexC.c   895                    for(i=0;i<ex.nodes.its[ex.nodes.nIterations]->BinvSize;i++)
    0000173C A009                   BRA         L1266
    0000173E E400                   MOV         #0,R4
    00001740              L1267:                            
      simplexC.c   896                    {
      simplexC.c   897                        if(ex.nodes.its[ex.nodes.nIterations]->idByRowOfBasicVarsInBInv[i]==menuChoice-1)
    00001740 60B2                   MOV.L       @R11,R0
    00001742 6343                   MOV         R4,R3
    00001744 5003                   MOV.L       @(12,R0),R0
    00001746 4308                   SHLL2       R3
    00001748 023E                   MOV.L       @(R0,R3),R2
    0000174A 3290                   CMP/EQ      R9,R2
    0000174C 8B00                   BF          L1268
      simplexC.c   898                        {
      simplexC.c   899                            idBasicVar=i;
    0000174E 2F42                   MOV.L       R4,@R15
    00001750              L1268:                            
    00001750 7401                   ADD         #1,R4
    00001752              L1266:                            
    00001752 63B2                   MOV.L       @R11,R3
    00001754 5239                   MOV.L       @(36,R3),R2
    00001756 3423                   CMP/GE      R2,R4
    00001758 8BF2                   BF          L1267
      simplexC.c   900                        }
      simplexC.c   901                    }
      simplexC.c   902                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,ex.nodes.its[ex.nodes.nIterations]->xb[idBa
                         +sicVar]);
    0000175A 60B2                   MOV.L       @R11,R0
    0000175C 63F2                   MOV.L       @R15,R3
    0000175E 4308                   SHLL2       R3
    00001760 500B                   MOV.L       @(44,R0),R0
    00001762 003E                   MOV.L       @(R0,R3),R0
    00001764 D230                   MOV.L       L1412+28,R2; __stod
    00001766 7FF8                   ADD         #-8,R15
    00001768 420B                   JSR         @R2
    0000176A 2FF6                   MOV.L       R15,@-R15
    0000176C 2FD6                   MOV.L       R13,@-R15
    0000176E D32F                   MOV.L       L1412+32,R3; L754




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001770 2F36                   MOV.L       R3,@-R15
    00001772 480B                   JSR         @R8
    00001774 64A3                   MOV         R10,R4
    00001776 A008                   BRA         L1269
    00001778 7F10                   ADD         #16,R15
    0000177A              L1265:                            
      simplexC.c   903                }else
      simplexC.c   904                {
      simplexC.c   905                    sprintf(stroutVariable, "x%d: %.2f",menuChoice,0);
    0000177A E300                   MOV         #0,R3
    0000177C D22B                   MOV.L       L1412+32,R2; L754
    0000177E 2F36                   MOV.L       R3,@-R15
    00001780 2FD6                   MOV.L       R13,@-R15
    00001782 2F26                   MOV.L       R2,@-R15
    00001784 480B                   JSR         @R8
    00001786 64A3                   MOV         R10,R4
    00001788 7F0C                   ADD         #12,R15
    0000178A              L1269:                            
      simplexC.c   906                }
      simplexC.c   907                PrintMini(0,28,(unsigned char*) stroutVariable,MINI_OVER);
    0000178A E710                   MOV         #16,R7
    0000178C A002                   BRA         L1391
    0000178E 66A3                   MOV         R10,R6
    00001790              L1264:                            
      simplexC.c   908            }else
      simplexC.c   909            {
      simplexC.c   910                PrintMini(0,28,  (unsigned char *)"No var found", MINI_OVER);
    00001790 D627                   MOV.L       L1412+36,R6; L757
    00001792 E710                   MOV         #16,R7
    00001794              L1391:                            
    00001794 E51C                   MOV         #28,R5
    00001796 4E0B                   JSR         @R14
    00001798 E400                   MOV         #0,R4
      simplexC.c   911            }
      simplexC.c   912            PrintMini(0, 35, (unsigned char*)"Press any key to continue", MINI_OVER);
    0000179A E710                   MOV         #16,R7
    0000179C D625                   MOV.L       L1412+40,R6; L590
    0000179E E523                   MOV         #35,R5
    000017A0 4E0B                   JSR         @R14
    000017A2 E400                   MOV         #0,R4
      simplexC.c   913            string_input(0, 42, uselessSring);
    000017A4 D224                   MOV.L       L1412+44,R2; _string_input
    000017A6 66F3                   MOV         R15,R6
    000017A8 7604                   ADD         #4,R6
    000017AA E52A                   MOV         #42,R5
    000017AC 420B                   JSR         @R2
    000017AE E400                   MOV         #0,R4
      simplexC.c   914            Bdisp_PutDisp_DD();
    000017B0 D31C                   MOV.L       L1412+24,R3; _Bdisp_PutDisp_DD
    000017B2 430B                   JSR         @R3
    000017B4 0009                   NOP
      simplexC.c   915            memset(stroutVariable,0,128);
    000017B6 E500                   MOV         #0,R5
    000017B8 D220                   MOV.L       L1412+48,R2; _memset
    000017BA 962A                   MOV.W       L1412+6,R6 ; H'0080
    000017BC 420B                   JSR         @R2
    000017BE 64A3                   MOV         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017C0              L1262:                            
    000017C0 2DD8                   TST         R13,R13
    000017C2 8B8F                   BF          L1263
      simplexC.c   916            
      simplexC.c   917        }
      simplexC.c   918        return 0;
      simplexC.c   919    }
    000017C4 9126                   MOV.W       L1412+8,R1 ; H'0404
    000017C6 E000                   MOV         #0,R0
    000017C8 3F1C                   ADD         R1,R15
    000017CA 4F26                   LDS.L       @R15+,PR
    000017CC 68F6                   MOV.L       @R15+,R8
    000017CE 69F6                   MOV.L       @R15+,R9
    000017D0 6AF6                   MOV.L       @R15+,R10
    000017D2 6BF6                   MOV.L       @R15+,R11
    000017D4 6CF6                   MOV.L       @R15+,R12
    000017D6 6DF6                   MOV.L       @R15+,R13
    000017D8 000B                   RTS
    000017DA 6EF6                   MOV.L       @R15+,R14
      simplexC.c   920    
      simplexC.c   921    int printCValuesByIt(int itId)
    000017DC              _printCValuesByIt:               ; function: printCValuesByIt
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
    000017DC 2FE6                   MOV.L       R14,@-R15
    000017DE 6343                   MOV         R4,R3
    000017E0 9019                   MOV.W       L1412+10,R0; H'FCF8
      simplexC.c   922    {
      simplexC.c   923        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   924        int menuChoice;
      simplexC.c   925        char *uselessSring[128];
      simplexC.c   926        menuChoice=INITIALIZE_VALUE_OPT;
    000017E2 EEFF                   MOV         #-1,R14
    000017E4 2FD6                   MOV.L       R13,@-R15
    000017E6 4308                   SHLL2       R3
    000017E8 2FC6                   MOV.L       R12,@-R15
    000017EA 2FB6                   MOV.L       R11,@-R15
    000017EC 2FA6                   MOV.L       R10,@-R15
    000017EE 2F96                   MOV.L       R9,@-R15
    000017F0 2F86                   MOV.L       R8,@-R15
    000017F2 4F22                   STS.L       PR,@-R15
    000017F4 D812                   MOV.L       L1412+52,R8; _ex
    000017F6 3F0C                   ADD         R0,R15
    000017F8 D912                   MOV.L       L1412+56,R9; _sprintf
    000017FA 2F42                   MOV.L       R4,@R15
    000017FC DA09                   MOV.L       L1412+24,R10; _Bdisp_PutDisp_DD
    000017FE 9B0B                   MOV.W       L1412+12,R11; H'0288
    00001800 9C0B                   MOV.W       L1412+14,R12; H'0208
    00001802 3BFC                   ADD         R15,R11
    00001804 DD10                   MOV.L       L1412+60,R13; _PrintMini
    00001806 3CFC                   ADD         R15,R12
      simplexC.c   927        while(menuChoice!=EXIT_OPT)
    00001808 A069                   BRA         L1272
    0000180A 1F31                   MOV.L       R3,@(4,R15)
    0000180C              L1412:                            
    0000180C 0384                   .DATA.W     H'0384




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000180E 0304                   .DATA.W     H'0304
    00001810 0284                   .DATA.W     H'0284
    00001812 0080                   .DATA.W     H'0080
    00001814 0404                   .DATA.W     H'0404
    00001816 FCF8                   .DATA.W     H'FCF8
    00001818 0288                   .DATA.W     H'0288
    0000181A 0208                   .DATA.W     H'0208
    0000181C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001820 <00000000>             .DATA.L     _InputI
    00001824 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001828 <00000000>             .DATA.L     __stod
    0000182C <00000000>             .DATA.L     L754
    00001830 <00000000>             .DATA.L     L757
    00001834 <00000000>             .DATA.L     L590
    00001838 <00000000>             .DATA.L     _string_input
    0000183C <00000000>             .DATA.L     _memset
    00001840 <00000000>             .DATA.L     _ex
    00001844 <00000000>             .DATA.L     _sprintf
    00001848 <00000000>             .DATA.L     _PrintMini
    0000184C              L1273:                            
      simplexC.c   928        {
      simplexC.c   929            Bdisp_AllClr_DDVRAM();
    0000184C D140                   MOV.L       L1413+10,R1; _Bdisp_AllClr_DDVRAM
    0000184E 410B                   JSR         @R1
    00001850 0009                   NOP
      simplexC.c   930            sprintf(stroutBasicInfo, "Cvals itId %d. Vars: %d.  %d exit",itId, ex.nVariables,EXIT_OPT);
    00001852 E200                   MOV         #0,R2
    00001854 2F26                   MOV.L       R2,@-R15
    00001856 538B                   MOV.L       @(44,R8),R3
    00001858 2F36                   MOV.L       R3,@-R15
    0000185A 51F2                   MOV.L       @(8,R15),R1
    0000185C D33D                   MOV.L       L1413+14,R3; L766
    0000185E 2F16                   MOV.L       R1,@-R15
    00001860 2F36                   MOV.L       R3,@-R15
    00001862 490B                   JSR         @R9
    00001864 64B3                   MOV         R11,R4
    00001866 7F10                   ADD         #16,R15
      simplexC.c   931            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001868 E710                   MOV         #16,R7
    0000186A 66B3                   MOV         R11,R6
    0000186C E500                   MOV         #0,R5
    0000186E 4D0B                   JSR         @R13
    00001870 6453                   MOV         R5,R4
      simplexC.c   932            menuChoice = InputI(0, 7);
    00001872 E507                   MOV         #7,R5
    00001874 D238                   MOV.L       L1413+18,R2; _InputI
    00001876 420B                   JSR         @R2
    00001878 E400                   MOV         #0,R4
      simplexC.c   933            Bdisp_PutDisp_DD();
    0000187A 4A0B                   JSR         @R10
    0000187C 6E03                   MOV         R0,R14
      simplexC.c   934            if(menuChoice!=EXIT_OPT && menuChoice<= ex.nVariables)
    0000187E 2EE8                   TST         R14,R14
    00001880 8928                   BT          L1274
    00001882 D336                   MOV.L       L1413+22,R3; H'0000002C+_ex
    00001884 6232                   MOV.L       @R3,R2
    00001886 3E27                   CMP/GT      R2,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001888 8924                   BT          L1274
      simplexC.c   935            {
      simplexC.c   936                sprintf(stroutBasicInfo2, "Pos %d: %.2f",menuChoice,getCurrentCvectorValues(ex.nodes.its[itId]
                         +)[menuChoice-1]);
    0000188A 53F1                   MOV.L       @(4,R15),R3
    0000188C 5085                   MOV.L       @(20,R8),R0
    0000188E D234                   MOV.L       L1413+26,R2; _getCurrentCvectorValues
    00001890 420B                   JSR         @R2
    00001892 043E                   MOV.L       @(R0,R3),R4
    00001894 D233                   MOV.L       L1413+30,R2; __stod
    00001896 63E3                   MOV         R14,R3
    00001898 73FF                   ADD         #-1,R3
    0000189A 4308                   SHLL2       R3
    0000189C 003E                   MOV.L       @(R0,R3),R0
    0000189E 7FF8                   ADD         #-8,R15
    000018A0 420B                   JSR         @R2
    000018A2 2FF6                   MOV.L       R15,@-R15
    000018A4 2FE6                   MOV.L       R14,@-R15
    000018A6 D330                   MOV.L       L1413+34,R3; L693
    000018A8 2F36                   MOV.L       R3,@-R15
    000018AA 490B                   JSR         @R9
    000018AC 64C3                   MOV         R12,R4
    000018AE 7F10                   ADD         #16,R15
      simplexC.c   937                PrintMini(0,14,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    000018B0 E710                   MOV         #16,R7
    000018B2 66C3                   MOV         R12,R6
    000018B4 E50E                   MOV         #14,R5
    000018B6 4D0B                   JSR         @R13
    000018B8 E400                   MOV         #0,R4
      simplexC.c   938                PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    000018BA E710                   MOV         #16,R7
    000018BC D62B                   MOV.L       L1413+38,R6; L590
    000018BE E515                   MOV         #21,R5
    000018C0 4D0B                   JSR         @R13
    000018C2 E400                   MOV         #0,R4
      simplexC.c   939                string_input(0, 28, uselessSring);
    000018C4 D22A                   MOV.L       L1413+42,R2; _string_input
    000018C6 66F3                   MOV         R15,R6
    000018C8 7608                   ADD         #8,R6
    000018CA E51C                   MOV         #28,R5
    000018CC 420B                   JSR         @R2
    000018CE E400                   MOV         #0,R4
      simplexC.c   940                Bdisp_PutDisp_DD();
    000018D0 4A0B                   JSR         @R10
    000018D2 0009                   NOP
    000018D4              L1274:                            
      simplexC.c   941            }
      simplexC.c   942            memset(stroutBasicInfo2,0,128);
    000018D4 9637                   MOV.W       L1413,R6   ; H'0080
    000018D6 E500                   MOV         #0,R5
    000018D8 D326                   MOV.L       L1413+46,R3; _memset
    000018DA 430B                   JSR         @R3
    000018DC 64C3                   MOV         R12,R4
    000018DE              L1272:                            
    000018DE 2EE8                   TST         R14,R14
    000018E0 8BB4                   BF          L1273
      simplexC.c   943        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c   944        return 0;
    000018E2 E000                   MOV         #0,R0
      simplexC.c   945    }
    000018E4 9130                   MOV.W       L1413+2,R1 ; H'0308
    000018E6 3F1C                   ADD         R1,R15
    000018E8 4F26                   LDS.L       @R15+,PR
    000018EA 68F6                   MOV.L       @R15+,R8
    000018EC 69F6                   MOV.L       @R15+,R9
    000018EE 6AF6                   MOV.L       @R15+,R10
    000018F0 6BF6                   MOV.L       @R15+,R11
    000018F2 6CF6                   MOV.L       @R15+,R12
    000018F4 6DF6                   MOV.L       @R15+,R13
    000018F6 000B                   RTS
    000018F8 6EF6                   MOV.L       @R15+,R14
      simplexC.c   946    
      simplexC.c   947    int printBinvByIt(int itId)
    000018FA              _printBinvByIt:                  ; function: printBinvByIt
                                                           ; frame size=824
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c   948    {
      simplexC.c   949        char stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c   950        int menuChoiceRow,menuChoiceColumn;
      simplexC.c   951        char *uselessSring[128];
      simplexC.c   952        menuChoiceRow=INITIALIZE_VALUE_OPT;
      simplexC.c   953        menuChoiceColumn=INITIALIZE_VALUE_OPT;
      simplexC.c   954        sprintf(stroutBasicInfo, "Binv itId %d. S: %d.  %d exit",itId, ex.nodes.its[itId]->BinvSize,EXIT_OPT);
    000018FA E300                   MOV         #0,R3
    000018FC D21E                   MOV.L       L1413+50,R2; H'00000014+_ex
    000018FE 2FE6                   MOV.L       R14,@-R15
    00001900 2FD6                   MOV.L       R13,@-R15
    00001902 2FC6                   MOV.L       R12,@-R15
    00001904 2FB6                   MOV.L       R11,@-R15
    00001906 2FA6                   MOV.L       R10,@-R15
    00001908 2F96                   MOV.L       R9,@-R15
    0000190A 2F86                   MOV.L       R8,@-R15
    0000190C 4F22                   STS.L       PR,@-R15
    0000190E 901C                   MOV.W       L1413+4,R0 ; H'FCFC
    00001910 3F0C                   ADD         R0,R15
    00001912 2F42                   MOV.L       R4,@R15
    00001914 2F36                   MOV.L       R3,@-R15
    00001916 E4FF                   MOV         #-1,R4
    00001918 59F1                   MOV.L       @(4,R15),R9
    0000191A 6D43                   MOV         R4,R13
    0000191C 6022                   MOV.L       @R2,R0
    0000191E 6C43                   MOV         R4,R12
    00001920 D317                   MOV.L       L1413+58,R3; _sprintf
    00001922 4908                   SHLL2       R9
    00001924 9412                   MOV.W       L1413+6,R4 ; H'0294
    00001926 019E                   MOV.L       @(R0,R9),R1
    00001928 5019                   MOV.L       @(36,R1),R0
    0000192A 2F06                   MOV.L       R0,@-R15
    0000192C 51F2                   MOV.L       @(8,R15),R1
    0000192E 2F16                   MOV.L       R1,@-R15
    00001930 D112                   MOV.L       L1413+54,R1; L776
    00001932 2F16                   MOV.L       R1,@-R15
    00001934 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001936 34FC                   ADD         R15,R4
    00001938 9805                   MOV.W       L1413,R8   ; H'0080
    0000193A 7F10                   ADD         #16,R15
    0000193C 9A07                   MOV.W       L1413+8,R10; H'0204
    0000193E DB11                   MOV.L       L1413+62,R11; _Bdisp_PutDisp_DD
    00001940 DE11                   MOV.L       L1413+66,R14; _PrintMini
      simplexC.c   955    
      simplexC.c   956        while(menuChoiceRow!=EXIT_OPT && menuChoiceColumn!=EXIT_OPT)
    00001942 A081                   BRA         L1276
    00001944 3AFC                   ADD         R15,R10
    00001946              L1413:                            
    00001946 0080                   .DATA.W     H'0080
    00001948 0308                   .DATA.W     H'0308
    0000194A FCFC                   .DATA.W     H'FCFC
    0000194C 0294                   .DATA.W     H'0294
    0000194E 0204                   .DATA.W     H'0204
    00001950 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001954 <00000000>             .DATA.L     L766
    00001958 <00000000>             .DATA.L     _InputI
    0000195C <0000002C>             .DATA.L     H'0000002C+_ex
    00001960 <00000000>             .DATA.L     _getCurrentCvectorValues
    00001964 <00000000>             .DATA.L     __stod
    00001968 <00000000>             .DATA.L     L693
    0000196C <00000000>             .DATA.L     L590
    00001970 <00000000>             .DATA.L     _string_input
    00001974 <00000000>             .DATA.L     _memset
    00001978 <00000014>             .DATA.L     H'00000014+_ex
    0000197C <00000000>             .DATA.L     L776
    00001980 <00000000>             .DATA.L     _sprintf
    00001984 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001988 <00000000>             .DATA.L     _PrintMini
    0000198C              L1277:                            
      simplexC.c   957        {
      simplexC.c   958            Bdisp_AllClr_DDVRAM();
    0000198C D34A                   MOV.L       L1414+12,R3; _Bdisp_AllClr_DDVRAM
    0000198E 430B                   JSR         @R3
    00001990 0009                   NOP
      simplexC.c   959            PrintMini(0, 0, (unsigned char*)stroutBasicInfo, MINI_OVER);
    00001992 E710                   MOV         #16,R7
    00001994 968A                   MOV.W       L1414,R6   ; H'0284
    00001996 E500                   MOV         #0,R5
    00001998 36FC                   ADD         R15,R6
    0000199A 4E0B                   JSR         @R14
    0000199C 6453                   MOV         R5,R4
      simplexC.c   960            PrintMini(0, 7, (unsigned char*)"Row: ", MINI_OVER);
    0000199E E710                   MOV         #16,R7
    000019A0 D646                   MOV.L       L1414+16,R6; L778
    000019A2 E507                   MOV         #7,R5
    000019A4 4E0B                   JSR         @R14
    000019A6 E400                   MOV         #0,R4
      simplexC.c   961            menuChoiceRow = InputI(0, 14);
    000019A8 D245                   MOV.L       L1414+20,R2; _InputI
    000019AA E50E                   MOV         #14,R5
    000019AC 420B                   JSR         @R2
    000019AE E400                   MOV         #0,R4
      simplexC.c   962            Bdisp_PutDisp_DD();
    000019B0 4B0B                   JSR         @R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000019B2 6D03                   MOV         R0,R13
      simplexC.c   963            PrintMini(0, 21, (unsigned char*)"Column: ", MINI_OVER);
    000019B4 D643                   MOV.L       L1414+24,R6; L779
    000019B6 E515                   MOV         #21,R5
    000019B8 E710                   MOV         #16,R7
    000019BA 4E0B                   JSR         @R14
    000019BC E400                   MOV         #0,R4
      simplexC.c   964            menuChoiceColumn = InputI(0, 28);
    000019BE E51C                   MOV         #28,R5
    000019C0 D33F                   MOV.L       L1414+20,R3; _InputI
    000019C2 430B                   JSR         @R3
    000019C4 E400                   MOV         #0,R4
      simplexC.c   965            Bdisp_PutDisp_DD();
    000019C6 4B0B                   JSR         @R11
    000019C8 6C03                   MOV         R0,R12
      simplexC.c   966            if(menuChoiceRow!=EXIT_OPT && menuChoiceRow <= ex.nodes.its[itId]->BinvSize
      simplexC.c   967                && menuChoiceColumn!=EXIT_OPT && menuChoiceColumn <= ex.nodes.its[itId]->BinvSize)
    000019CA 2DD8                   TST         R13,R13
    000019CC 8937                   BT          L1278
    000019CE D33E                   MOV.L       L1414+28,R3; H'00000014+_ex
    000019D0 6032                   MOV.L       @R3,R0
    000019D2 029E                   MOV.L       @(R0,R9),R2
    000019D4 5129                   MOV.L       @(36,R2),R1
    000019D6 3D17                   CMP/GT      R1,R13
    000019D8 8931                   BT          L1278
    000019DA 2CC8                   TST         R12,R12
    000019DC 892F                   BT          L1278
    000019DE D23A                   MOV.L       L1414+28,R2; H'00000014+_ex
    000019E0 6022                   MOV.L       @R2,R0
    000019E2 019E                   MOV.L       @(R0,R9),R1
    000019E4 5119                   MOV.L       @(36,R1),R1
    000019E6 3C17                   CMP/GT      R1,R12
    000019E8 8929                   BT          L1278
      simplexC.c   968            {
      simplexC.c   969                sprintf(stroutBasicInfo2, "B[%d][%d]: %.2f",menuChoiceRow,menuChoiceColumn,ex.nodes.its[itId]-
                         +>Binv[menuChoiceRow-1][menuChoiceColumn-1]);
    000019EA 62D3                   MOV         R13,R2
    000019EC D336                   MOV.L       L1414+28,R3; H'00000014+_ex
    000019EE 61C3                   MOV         R12,R1
    000019F0 6032                   MOV.L       @R3,R0
    000019F2 72FF                   ADD         #-1,R2
    000019F4 009E                   MOV.L       @(R0,R9),R0
    000019F6 71FF                   ADD         #-1,R1
    000019F8 5008                   MOV.L       @(32,R0),R0
    000019FA 4208                   SHLL2       R2
    000019FC 002E                   MOV.L       @(R0,R2),R0
    000019FE 4108                   SHLL2       R1
    00001A00 D232                   MOV.L       L1414+32,R2; __stod
    00001A02 001E                   MOV.L       @(R0,R1),R0
    00001A04 7FF8                   ADD         #-8,R15
    00001A06 420B                   JSR         @R2
    00001A08 2FF6                   MOV.L       R15,@-R15
    00001A0A 2FC6                   MOV.L       R12,@-R15
    00001A0C 2FD6                   MOV.L       R13,@-R15
    00001A0E D130                   MOV.L       L1414+36,R1; L781
    00001A10 D230                   MOV.L       L1414+40,R2; _sprintf
    00001A12 2F16                   MOV.L       R1,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A14 420B                   JSR         @R2
    00001A16 64A3                   MOV         R10,R4
    00001A18 7F14                   ADD         #20,R15
      simplexC.c   970                PrintMini(0,35,(unsigned char*) stroutBasicInfo2,MINI_OVER);
    00001A1A E710                   MOV         #16,R7
    00001A1C 66A3                   MOV         R10,R6
    00001A1E E523                   MOV         #35,R5
    00001A20 4E0B                   JSR         @R14
    00001A22 E400                   MOV         #0,R4
      simplexC.c   971                PrintMini(0, 42, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001A24 D62C                   MOV.L       L1414+44,R6; L590
    00001A26 E52A                   MOV         #42,R5
    00001A28 E710                   MOV         #16,R7
    00001A2A 4E0B                   JSR         @R14
    00001A2C E400                   MOV         #0,R4
      simplexC.c   972                string_input(0, 49, uselessSring);
    00001A2E 66F3                   MOV         R15,R6
    00001A30 D32A                   MOV.L       L1414+48,R3; _string_input
    00001A32 E531                   MOV         #49,R5
    00001A34 7604                   ADD         #4,R6
    00001A36 430B                   JSR         @R3
    00001A38 E400                   MOV         #0,R4
      simplexC.c   973                Bdisp_PutDisp_DD();
    00001A3A 4B0B                   JSR         @R11
    00001A3C 0009                   NOP
    00001A3E              L1278:                            
      simplexC.c   974            }
      simplexC.c   975            memset(stroutBasicInfo2,0,128);
    00001A3E 6683                   MOV         R8,R6
    00001A40 D227                   MOV.L       L1414+52,R2; _memset
    00001A42 E500                   MOV         #0,R5
    00001A44 420B                   JSR         @R2
    00001A46 64A3                   MOV         R10,R4
    00001A48              L1276:                            
    00001A48 2DD8                   TST         R13,R13
    00001A4A 8901                   BT          L1279
    00001A4C 2CC8                   TST         R12,R12
    00001A4E 8B9D                   BF          L1277
    00001A50              L1279:                            
      simplexC.c   976        }
      simplexC.c   977        return 0;
      simplexC.c   978    }
    00001A50 912D                   MOV.W       L1414+2,R1 ; H'0304
    00001A52 E000                   MOV         #0,R0
    00001A54 3F1C                   ADD         R1,R15
    00001A56 4F26                   LDS.L       @R15+,PR
    00001A58 68F6                   MOV.L       @R15+,R8
    00001A5A 69F6                   MOV.L       @R15+,R9
    00001A5C 6AF6                   MOV.L       @R15+,R10
    00001A5E 6BF6                   MOV.L       @R15+,R11
    00001A60 6CF6                   MOV.L       @R15+,R12
    00001A62 6DF6                   MOV.L       @R15+,R13
    00001A64 000B                   RTS
    00001A66 6EF6                   MOV.L       @R15+,R14
      simplexC.c   979    
      simplexC.c   980    int printZjAndCjMinusZj(int itId)
    00001A68              _printZjAndCjMinusZj:            ; function: printZjAndCjMinusZj




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=1092
                                                           ; used runtime library name:
                                                           ; __stod
    00001A68 2FE6                   MOV.L       R14,@-R15
      simplexC.c   981    {
      simplexC.c   982        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128],stroutVariable[128];
      simplexC.c   983        char *uselessSring[128];
      simplexC.c   984        int menuChoice,i,idBasicVar;
      simplexC.c   985        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c   986        sprintf(stroutBasicInfo, "Zj & cj-zj itId %d. S: %d.  %d exit",itId, ex.nVariables,EXIT_OPT);
    00001A6A E300                   MOV         #0,R3
    00001A6C 9020                   MOV.W       L1414+4,R0 ; H'FBF4
    00001A6E EEFF                   MOV         #-1,R14
    00001A70 2FD6                   MOV.L       R13,@-R15
    00001A72 2FC6                   MOV.L       R12,@-R15
    00001A74 2FB6                   MOV.L       R11,@-R15
    00001A76 2FA6                   MOV.L       R10,@-R15
    00001A78 2F96                   MOV.L       R9,@-R15
    00001A7A 2F86                   MOV.L       R8,@-R15
    00001A7C 4F22                   STS.L       PR,@-R15
    00001A7E 3F0C                   ADD         R0,R15
    00001A80 D918                   MOV.L       L1414+56,R9; _ex
    00001A82 2F42                   MOV.L       R4,@R15
    00001A84 DA13                   MOV.L       L1414+40,R10; _sprintf
    00001A86 2F36                   MOV.L       R3,@-R15
    00001A88 529B                   MOV.L       @(44,R9),R2
    00001A8A 2F26                   MOV.L       R2,@-R15
    00001A8C 51F2                   MOV.L       @(8,R15),R1
    00001A8E 2F16                   MOV.L       R1,@-R15
    00001A90 D215                   MOV.L       L1414+60,R2; L793
    00001A92 2F26                   MOV.L       R2,@-R15
    00001A94 940D                   MOV.W       L1414+6,R4 ; H'031C
    00001A96 4A0B                   JSR         @R10
    00001A98 34FC                   ADD         R15,R4
    00001A9A 7F10                   ADD         #16,R15
    00001A9C D813                   MOV.L       L1414+64,R8; _Bdisp_PutDisp_DD
    00001A9E 63F2                   MOV.L       @R15,R3
    00001AA0 DC13                   MOV.L       L1414+68,R12; _PrintMini
    00001AA2 4308                   SHLL2       R3
    00001AA4 9D06                   MOV.W       L1414+8,R13; H'020C
    00001AA6 1F31                   MOV.L       R3,@(4,R15)
      simplexC.c   987    
      simplexC.c   988    
      simplexC.c   989        while(menuChoice!=EXIT_OPT)
    00001AA8 A079                   BRA         L1281
    00001AAA 3DFC                   ADD         R15,R13
    00001AAC              L1414:                            
    00001AAC 0284                   .DATA.W     H'0284
    00001AAE 0304                   .DATA.W     H'0304
    00001AB0 FBF4                   .DATA.W     H'FBF4
    00001AB2 031C                   .DATA.W     H'031C
    00001AB4 020C                   .DATA.W     H'020C
    00001AB6 0000                   .DATA.W     0
    00001AB8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001ABC <00000000>             .DATA.L     L778
    00001AC0 <00000000>             .DATA.L     _InputI
    00001AC4 <00000000>             .DATA.L     L779




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001AC8 <00000014>             .DATA.L     H'00000014+_ex
    00001ACC <00000000>             .DATA.L     __stod
    00001AD0 <00000000>             .DATA.L     L781
    00001AD4 <00000000>             .DATA.L     _sprintf
    00001AD8 <00000000>             .DATA.L     L590
    00001ADC <00000000>             .DATA.L     _string_input
    00001AE0 <00000000>             .DATA.L     _memset
    00001AE4 <00000000>             .DATA.L     _ex
    00001AE8 <00000000>             .DATA.L     L793
    00001AEC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001AF0 <00000000>             .DATA.L     _PrintMini
    00001AF4              L1282:                            
      simplexC.c   990        {
      simplexC.c   991            Bdisp_AllClr_DDVRAM();
    00001AF4 D34B                   MOV.L       L1415+12,R3; _Bdisp_AllClr_DDVRAM
    00001AF6 430B                   JSR         @R3
    00001AF8 0009                   NOP
      simplexC.c   992            
      simplexC.c   993            PrintMini(0,0,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001AFA E710                   MOV         #16,R7
    00001AFC 968C                   MOV.W       L1415,R6   ; H'030C
    00001AFE E500                   MOV         #0,R5
    00001B00 36FC                   ADD         R15,R6
    00001B02 4C0B                   JSR         @R12
    00001B04 6453                   MOV         R5,R4
      simplexC.c   994            menuChoice = InputI(0, 7);
    00001B06 E507                   MOV         #7,R5
    00001B08 D247                   MOV.L       L1415+16,R2; _InputI
    00001B0A 420B                   JSR         @R2
    00001B0C E400                   MOV         #0,R4
      simplexC.c   995            Bdisp_PutDisp_DD();
    00001B0E 480B                   JSR         @R8
    00001B10 6E03                   MOV         R0,R14
      simplexC.c   996            if(menuChoice<=ex.nVariables && menuChoice!=EXIT_OPT)
    00001B12 539B                   MOV.L       @(44,R9),R3
    00001B14 3E37                   CMP/GT      R3,R14
    00001B16 8930                   BT          L1283
    00001B18 2EE8                   TST         R14,R14
    00001B1A 892E                   BT          L1283
    00001B1C 5295                   MOV.L       @(20,R9),R2
    00001B1E 6BE3                   MOV         R14,R11
    00001B20 2F22                   MOV.L       R2,@R15
    00001B22 6023                   MOV         R2,R0
    00001B24 53F1                   MOV.L       @(4,R15),R3
    00001B26 7BFF                   ADD         #-1,R11
    00001B28 003E                   MOV.L       @(R0,R3),R0
    00001B2A 4B08                   SHLL2       R11
    00001B2C 5002                   MOV.L       @(8,R0),R0
    00001B2E 03BE                   MOV.L       @(R0,R11),R3
    00001B30 2338                   TST         R3,R3
    00001B32 8B17                   BF          L1284
      simplexC.c   997            {
      simplexC.c   998                if(!ex.nodes.its[itId]->idBasicVariables[menuChoice-1])
      simplexC.c   999                {
      simplexC.c  1000                    sprintf(stroutVariable, "Zj%d: %.2f. Cj-Zj: %.2f",menuChoice,
      simplexC.c  1001                        ex.nodes.its[itId]->zj[menuChoice-1],ex.nodes.its[itId]->cjMinusZj[menuChoice-1]);
    00001B34 51F1                   MOV.L       @(4,R15),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B36 60F2                   MOV.L       @R15,R0
    00001B38 D33C                   MOV.L       L1415+20,R3; __stod
    00001B3A 001E                   MOV.L       @(R0,R1),R0
    00001B3C 1F02                   MOV.L       R0,@(8,R15)
    00001B3E 500E                   MOV.L       @(56,R0),R0
    00001B40 00BE                   MOV.L       @(R0,R11),R0
    00001B42 7FF8                   ADD         #-8,R15
    00001B44 430B                   JSR         @R3
    00001B46 2FF6                   MOV.L       R15,@-R15
    00001B48 50F4                   MOV.L       @(16,R15),R0
    00001B4A 500D                   MOV.L       @(52,R0),R0
    00001B4C D337                   MOV.L       L1415+20,R3; __stod
    00001B4E 00BE                   MOV.L       @(R0,R11),R0
    00001B50 7FF8                   ADD         #-8,R15
    00001B52 430B                   JSR         @R3
    00001B54 2FF6                   MOV.L       R15,@-R15
    00001B56 2FE6                   MOV.L       R14,@-R15
    00001B58 D235                   MOV.L       L1415+24,R2; L797
    00001B5A 2F26                   MOV.L       R2,@-R15
    00001B5C 4A0B                   JSR         @R10
    00001B5E 64D3                   MOV         R13,R4
    00001B60 A006                   BRA         L1285
    00001B62 7F18                   ADD         #24,R15
    00001B64              L1284:                            
      simplexC.c  1002                }else
      simplexC.c  1003                {
      simplexC.c  1004                    sprintf(stroutVariable, "x%d: is a basic var",menuChoice);
    00001B64 2FE6                   MOV.L       R14,@-R15
    00001B66 D233                   MOV.L       L1415+28,R2; L799
    00001B68 2F26                   MOV.L       R2,@-R15
    00001B6A 4A0B                   JSR         @R10
    00001B6C 64D3                   MOV         R13,R4
    00001B6E 7F08                   ADD         #8,R15
    00001B70              L1285:                            
      simplexC.c  1005                }
      simplexC.c  1006                PrintMini(0,14,(unsigned char*) stroutVariable,MINI_OVER);
    00001B70 E710                   MOV         #16,R7
    00001B72 66D3                   MOV         R13,R6
    00001B74 E50E                   MOV         #14,R5
    00001B76 4C0B                   JSR         @R12
    00001B78 E400                   MOV         #0,R4
    00001B7A              L1283:                            
      simplexC.c  1007            }
      simplexC.c  1008            PrintMini(0, 21, (unsigned char*)"Press any key to continue", MINI_OVER);
    00001B7A E710                   MOV         #16,R7
    00001B7C D62E                   MOV.L       L1415+32,R6; L590
    00001B7E E515                   MOV         #21,R5
    00001B80 4C0B                   JSR         @R12
    00001B82 E400                   MOV         #0,R4
      simplexC.c  1009            string_input(0, 28, uselessSring);
    00001B84 D32D                   MOV.L       L1415+36,R3; _string_input
    00001B86 66F3                   MOV         R15,R6
    00001B88 760C                   ADD         #12,R6
    00001B8A E51C                   MOV         #28,R5
    00001B8C 430B                   JSR         @R3
    00001B8E E400                   MOV         #0,R4
      simplexC.c  1010            Bdisp_PutDisp_DD();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B90 480B                   JSR         @R8
    00001B92 0009                   NOP
      simplexC.c  1011            memset(stroutVariable,0,128);
    00001B94 9641                   MOV.W       L1415+2,R6 ; H'0080
    00001B96 E500                   MOV         #0,R5
    00001B98 D229                   MOV.L       L1415+40,R2; _memset
    00001B9A 420B                   JSR         @R2
    00001B9C 64D3                   MOV         R13,R4
    00001B9E              L1281:                            
    00001B9E 2EE8                   TST         R14,R14
    00001BA0 8BA8                   BF          L1282
      simplexC.c  1012            
      simplexC.c  1013        }
      simplexC.c  1014        return 0;
    00001BA2 E000                   MOV         #0,R0
      simplexC.c  1015    }
    00001BA4 913A                   MOV.W       L1415+4,R1 ; H'040C
    00001BA6 3F1C                   ADD         R1,R15
    00001BA8 4F26                   LDS.L       @R15+,PR
    00001BAA 68F6                   MOV.L       @R15+,R8
    00001BAC 69F6                   MOV.L       @R15+,R9
    00001BAE 6AF6                   MOV.L       @R15+,R10
    00001BB0 6BF6                   MOV.L       @R15+,R11
    00001BB2 6CF6                   MOV.L       @R15+,R12
    00001BB4 6DF6                   MOV.L       @R15+,R13
    00001BB6 000B                   RTS
    00001BB8 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1016    
      simplexC.c  1017    int printIteration(int itId)
    00001BBA              _printIteration:                 ; function: printIteration
                                                           ; frame size=312
                                                           ; used runtime library name:
                                                           ; __stod
      simplexC.c  1018    {
      simplexC.c  1019        char stroutTop[128],stroutTop2[128];
      simplexC.c  1020        int menuChoice;
      simplexC.c  1021        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c  1022        sprintf(stroutTop,"It %d.ZSol: %.2f Exit %d", itId,ex.nodes.its[itId]->zSol, EXIT_OPT);
    00001BBA E300                   MOV         #0,R3
    00001BBC D121                   MOV.L       L1415+44,R1; H'00000014+_ex
    00001BBE 2FE6                   MOV.L       R14,@-R15
    00001BC0 2FD6                   MOV.L       R13,@-R15
    00001BC2 6D43                   MOV         R4,R13
    00001BC4 2FC6                   MOV.L       R12,@-R15
    00001BC6 ECFF                   MOV         #-1,R12
    00001BC8 2FB6                   MOV.L       R11,@-R15
    00001BCA 2FA6                   MOV.L       R10,@-R15
    00001BCC 2F96                   MOV.L       R9,@-R15
    00001BCE 2F86                   MOV.L       R8,@-R15
    00001BD0 4F22                   STS.L       PR,@-R15
    00001BD2 9024                   MOV.W       L1415+6,R0 ; H'FEFC
    00001BD4 9B24                   MOV.W       L1415+8,R11; H'0084
    00001BD6 3F0C                   ADD         R0,R15
    00001BD8 3BFC                   ADD         R15,R11
    00001BDA 60D3                   MOV         R13,R0
    00001BDC 2F36                   MOV.L       R3,@-R15
    00001BDE 4008                   SHLL2       R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001BE0 1F01                   MOV.L       R0,@(4,R15)
    00001BE2 E344                   MOV         #68,R3
    00001BE4 6212                   MOV.L       @R1,R2
    00001BE6 002E                   MOV.L       @(R0,R2),R0
    00001BE8 003E                   MOV.L       @(R0,R3),R0
    00001BEA 7FF8                   ADD         #-8,R15
    00001BEC D30F                   MOV.L       L1415+20,R3; __stod
    00001BEE 430B                   JSR         @R3
    00001BF0 2FF6                   MOV.L       R15,@-R15
    00001BF2 2FD6                   MOV.L       R13,@-R15
    00001BF4 D214                   MOV.L       L1415+48,R2; L806
    00001BF6 2F26                   MOV.L       R2,@-R15
    00001BF8 D314                   MOV.L       L1415+52,R3; _sprintf
    00001BFA 430B                   JSR         @R3
    00001BFC 64B3                   MOV         R11,R4
    00001BFE 7F14                   ADD         #20,R15
      simplexC.c  1023        sprintf(stroutTop2,"VarIn: %d, VarOut: %d. %s",ex.nodes.its[itId]->idVarIn,ex.nodes.its[itId]->idVarOu
                         +t,ex.nodes.its[itId]->is2FasesActive ? "2fases": "");
    00001C00 D310                   MOV.L       L1415+44,R3; H'00000014+_ex
    00001C02 6AF3                   MOV         R15,R10
    00001C04 62F2                   MOV.L       @R15,R2
    00001C06 6032                   MOV.L       @R3,R0
    00001C08 0E2E                   MOV.L       @(R0,R2),R14
    00001C0A 51E1                   MOV.L       @(4,R14),R1
    00001C0C 2118                   TST         R1,R1
    00001C0E 8D21                   BT/S        L1287
    00001C10 7A04                   ADD         #4,R10
    00001C12 D10F                   MOV.L       L1415+56,R1; L808
    00001C14 A020                   BRA         L1288
    00001C16 2F16                   MOV.L       R1,@-R15
    00001C18              L1415:                            
    00001C18 030C                   .DATA.W     H'030C
    00001C1A 0080                   .DATA.W     H'0080
    00001C1C 040C                   .DATA.W     H'040C
    00001C1E FEFC                   .DATA.W     H'FEFC
    00001C20 0084                   .DATA.W     H'0084
    00001C22 0000                   .DATA.W     0
    00001C24 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001C28 <00000000>             .DATA.L     _InputI
    00001C2C <00000000>             .DATA.L     __stod
    00001C30 <00000000>             .DATA.L     L797
    00001C34 <00000000>             .DATA.L     L799
    00001C38 <00000000>             .DATA.L     L590
    00001C3C <00000000>             .DATA.L     _string_input
    00001C40 <00000000>             .DATA.L     _memset
    00001C44 <00000014>             .DATA.L     H'00000014+_ex
    00001C48 <00000000>             .DATA.L     L806
    00001C4C <00000000>             .DATA.L     _sprintf
    00001C50 <00000000>             .DATA.L     L808
    00001C54              L1287:                            
    00001C54 D23B                   MOV.L       L1416+2,R2 ; L809
    00001C56 2F26                   MOV.L       R2,@-R15
    00001C58              L1288:                            
    00001C58 51E6                   MOV.L       @(24,R14),R1
    00001C5A 2F16                   MOV.L       R1,@-R15
    00001C5C 53E5                   MOV.L       @(20,R14),R3
    00001C5E 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C60 D239                   MOV.L       L1416+6,R2 ; L807
    00001C62 2F26                   MOV.L       R2,@-R15
    00001C64 D339                   MOV.L       L1416+10,R3; _sprintf
    00001C66 430B                   JSR         @R3
    00001C68 64A3                   MOV         R10,R4
    00001C6A D839                   MOV.L       L1416+14,R8; L811
    00001C6C D939                   MOV.L       L1416+18,R9; _Bdisp_AllClr_DDVRAM
    00001C6E DE3A                   MOV.L       L1416+22,R14; _PrintMini
      simplexC.c  1024        while(menuChoice!=EXIT_OPT)
    00001C70 A086                   BRA         L1289
    00001C72 7F10                   ADD         #16,R15
    00001C74              L1290:                            
      simplexC.c  1025        {
      simplexC.c  1026            Bdisp_AllClr_DDVRAM();
    00001C74 490B                   JSR         @R9
    00001C76 0009                   NOP
      simplexC.c  1027            
      simplexC.c  1028            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001C78 E710                   MOV         #16,R7
    00001C7A 66B3                   MOV         R11,R6
    00001C7C E500                   MOV         #0,R5
    00001C7E 4E0B                   JSR         @R14
    00001C80 6453                   MOV         R5,R4
      simplexC.c  1029            PrintMini(0,7,  (unsigned char *)stroutTop2, MINI_OVER);
    00001C82 E710                   MOV         #16,R7
    00001C84 66A3                   MOV         R10,R6
    00001C86 E507                   MOV         #7,R5
    00001C88 4E0B                   JSR         @R14
    00001C8A E400                   MOV         #0,R4
      simplexC.c  1030            PrintMini(0,14, (unsigned char*)"1 Binv. 2 xb. 3 ct", MINI_OVER);
    00001C8C E710                   MOV         #16,R7
    00001C8E 6683                   MOV         R8,R6
    00001C90 E50E                   MOV         #14,R5
    00001C92 4E0B                   JSR         @R14
    00001C94 E400                   MOV         #0,R4
      simplexC.c  1031            PrintMini(0, 21, (unsigned char*)"4 CtBinv", MINI_OVER);
    00001C96 E710                   MOV         #16,R7
    00001C98 D630                   MOV.L       L1416+26,R6; L812
    00001C9A E515                   MOV         #21,R5
    00001C9C 4E0B                   JSR         @R14
    00001C9E E400                   MOV         #0,R4
      simplexC.c  1032            PrintMini(0, 28, (unsigned char*)"5 zj and cj-zj", MINI_OVER);
    00001CA0 D62F                   MOV.L       L1416+30,R6; L813
    00001CA2 E51C                   MOV         #28,R5
    00001CA4 E710                   MOV         #16,R7
    00001CA6 4E0B                   JSR         @R14
    00001CA8 E400                   MOV         #0,R4
      simplexC.c  1033            PrintMini(0, 35, (unsigned char*)"6 yj & xb/yj", MINI_OVER);
    00001CAA E710                   MOV         #16,R7
    00001CAC D62D                   MOV.L       L1416+34,R6; L814
    00001CAE E523                   MOV         #35,R5
    00001CB0 4E0B                   JSR         @R14
    00001CB2 E400                   MOV         #0,R4
      simplexC.c  1034            PrintMini(0, 42, (unsigned char*)"7 aj. 8 Cv", MINI_OVER);
    00001CB4 D62C                   MOV.L       L1416+38,R6; L815
    00001CB6 E52A                   MOV         #42,R5
    00001CB8 E710                   MOV         #16,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CBA 4E0B                   JSR         @R14
    00001CBC E400                   MOV         #0,R4
      simplexC.c  1035            PrintMini(0, 49, (unsigned char*)"9 basic vars B", MINI_OVER);
    00001CBE E710                   MOV         #16,R7
    00001CC0 D62A                   MOV.L       L1416+42,R6; L816
    00001CC2 E531                   MOV         #49,R5
    00001CC4 4E0B                   JSR         @R14
    00001CC6 E400                   MOV         #0,R4
      simplexC.c  1036            menuChoice = InputI(0, 56);
    00001CC8 D329                   MOV.L       L1416+46,R3; _InputI
    00001CCA E538                   MOV         #56,R5
    00001CCC 430B                   JSR         @R3
    00001CCE E400                   MOV         #0,R4
      simplexC.c  1037            Bdisp_PutDisp_DD();
    00001CD0 D228                   MOV.L       L1416+50,R2; _Bdisp_PutDisp_DD
    00001CD2 420B                   JSR         @R2
    00001CD4 6C03                   MOV         R0,R12
      simplexC.c  1038            switch (menuChoice)
    00001CD6 60C3                   MOV         R12,R0
    00001CD8 8801                   CMP/EQ      #1,R0
    00001CDA 8911                   BT          L1070
    00001CDC 8802                   CMP/EQ      #2,R0
    00001CDE 8913                   BT          L1071
    00001CE0 8803                   CMP/EQ      #3,R0
    00001CE2 8915                   BT          L1072
    00001CE4 8804                   CMP/EQ      #4,R0
    00001CE6 8917                   BT          L1073
    00001CE8 8805                   CMP/EQ      #5,R0
    00001CEA 8919                   BT          L1074
    00001CEC 8806                   CMP/EQ      #6,R0
    00001CEE 891B                   BT          L1075
    00001CF0 8807                   CMP/EQ      #7,R0
    00001CF2 891D                   BT          L1076
    00001CF4 8808                   CMP/EQ      #8,R0
    00001CF6 8920                   BT          L1077
    00001CF8 8809                   CMP/EQ      #9,R0
    00001CFA 893F                   BT          L1078
    00001CFC A040                   BRA         L1289
    00001CFE 0009                   NOP
    00001D00              L1070:                           ; case label 
      simplexC.c  1039            {
      simplexC.c  1040                case 1: printBinvByIt(itId);break;
    00001D00 BDFB                   BSR         _printBinvByIt
    00001D02 64D3                   MOV         R13,R4
    00001D04 A03C                   BRA         L1289
    00001D06 0009                   NOP
    00001D08              L1071:                           ; case label 
      simplexC.c  1041                case 2: printXbByIt(itId);break;
    00001D08 BA55                   BSR         _printXbByIt
    00001D0A 64D3                   MOV         R13,R4
    00001D0C A038                   BRA         L1289
    00001D0E 0009                   NOP
    00001D10              L1072:                           ; case label 
      simplexC.c  1042                case 3: printCtVecByIt(itId);break;
    00001D10 B9CE                   BSR         _printCtVecByIt
    00001D12 64D3                   MOV         R13,R4
    00001D14 A034                   BRA         L1289




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D16 0009                   NOP
    00001D18              L1073:                           ; case label 
      simplexC.c  1043                case 4: printCtBinvByIt(itId);break;
    00001D18 BB76                   BSR         _printCtBinvByIt
    00001D1A 64D3                   MOV         R13,R4
    00001D1C A030                   BRA         L1289
    00001D1E 0009                   NOP
    00001D20              L1074:                           ; case label 
      simplexC.c  1044                case 5: printZjAndCjMinusZj(itId);break;
    00001D20 BEA2                   BSR         _printZjAndCjMinusZj
    00001D22 64D3                   MOV         R13,R4
    00001D24 A02C                   BRA         L1289
    00001D26 0009                   NOP
    00001D28              L1075:                           ; case label 
      simplexC.c  1045                case 6: printYandXbDivYByIt(itId);break;
    00001D28 BAD5                   BSR         _printYandXbDivYByIt
    00001D2A 64D3                   MOV         R13,R4
    00001D2C A028                   BRA         L1289
    00001D2E 0009                   NOP
    00001D30              L1076:                           ; case label 
      simplexC.c  1046                case 7: printAjVec();break;
    00001D30 D311                   MOV.L       L1416+54,R3; _printAjVec
    00001D32 430B                   JSR         @R3
    00001D34 0009                   NOP
    00001D36 A023                   BRA         L1289
    00001D38 0009                   NOP
    00001D3A              L1077:                           ; case label 
      simplexC.c  1047                case 8: printCValuesByIt(itId);break;
    00001D3A BD4F                   BSR         _printCValuesByIt
    00001D3C 64D3                   MOV         R13,R4
    00001D3E A01F                   BRA         L1289
    00001D40 0009                   NOP
    00001D42              L1416:                            
    00001D42 0000                   .DATA.W     0
    00001D44 <00000000>             .DATA.L     L809
    00001D48 <00000000>             .DATA.L     L807
    00001D4C <00000000>             .DATA.L     _sprintf
    00001D50 <00000000>             .DATA.L     L811
    00001D54 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001D58 <00000000>             .DATA.L     _PrintMini
    00001D5C <00000000>             .DATA.L     L812
    00001D60 <00000000>             .DATA.L     L813
    00001D64 <00000000>             .DATA.L     L814
    00001D68 <00000000>             .DATA.L     L815
    00001D6C <00000000>             .DATA.L     L816
    00001D70 <00000000>             .DATA.L     _InputI
    00001D74 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001D78 <00000000>             .DATA.L     _printAjVec
    00001D7C              L1078:                           ; case label 
      simplexC.c  1048                case 9: printBasicVarsBbyIt(itId);break;
    00001D7C BBD3                   BSR         _printBasicVarsBbyIt
    00001D7E 64D3                   MOV         R13,R4
      simplexC.c  1049                default: break;
    00001D80              L1289:                            
    00001D80 2CC8                   TST         R12,R12
    00001D82 8901                   BT          L1417
    00001D84 AF76                   BRA         L1290




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001D86 0009                   NOP
    00001D88              L1417:                            
      simplexC.c  1050            }
      simplexC.c  1051        }
      simplexC.c  1052        return 0;
      simplexC.c  1053    }
    00001D88 9179                   MOV.W       L1418,R1   ; H'0104
    00001D8A E000                   MOV         #0,R0
    00001D8C 3F1C                   ADD         R1,R15
    00001D8E 4F26                   LDS.L       @R15+,PR
    00001D90 68F6                   MOV.L       @R15+,R8
    00001D92 69F6                   MOV.L       @R15+,R9
    00001D94 6AF6                   MOV.L       @R15+,R10
    00001D96 6BF6                   MOV.L       @R15+,R11
    00001D98 6CF6                   MOV.L       @R15+,R12
    00001D9A 6DF6                   MOV.L       @R15+,R13
    00001D9C 000B                   RTS
    00001D9E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1054    
      simplexC.c  1055    int printIts()
    00001DA0              _printIts:                       ; function: printIts
                                                           ; frame size=428
    00001DA0 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1056    {
      simplexC.c  1057    
      simplexC.c  1058        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c  1059        int menuChoice;
      simplexC.c  1060        menuChoice=INITIALIZE_VALUE_OPT_ITS_MENU;
    00001DA2 E3FE                   MOV         #-2,R3
      simplexC.c  1061        sprintf(stroutTop,"Its sel. Nits: %d. Exit %d", ex.nodes.nIterations, EXIT_OPT_ITS_MENU);
    00001DA4 D139                   MOV.L       L1418+14,R1; L824
    00001DA6 2FD6                   MOV.L       R13,@-R15
    00001DA8 2FC6                   MOV.L       R12,@-R15
    00001DAA 2FB6                   MOV.L       R11,@-R15
    00001DAC 2FA6                   MOV.L       R10,@-R15
    00001DAE 2F96                   MOV.L       R9,@-R15
    00001DB0 4F22                   STS.L       PR,@-R15
    00001DB2 9065                   MOV.W       L1418+2,R0 ; H'FE7C
    00001DB4 9C63                   MOV.W       L1418,R12  ; H'0104
    00001DB6 3F0C                   ADD         R0,R15
    00001DB8 DD33                   MOV.L       L1418+10,R13; _ex
    00001DBA 3CFC                   ADD         R15,R12
    00001DBC 2F32                   MOV.L       R3,@R15
    00001DBE E3FF                   MOV         #-1,R3
    00001DC0 2F36                   MOV.L       R3,@-R15
    00001DC2 52D4                   MOV.L       @(16,R13),R2
    00001DC4 2F26                   MOV.L       R2,@-R15
    00001DC6 2F16                   MOV.L       R1,@-R15
    00001DC8 D231                   MOV.L       L1418+18,R2; _sprintf
    00001DCA 420B                   JSR         @R2
    00001DCC 64C3                   MOV         R12,R4
    00001DCE 7F0C                   ADD         #12,R15
      simplexC.c  1062    
      simplexC.c  1063        while(menuChoice!=EXIT_OPT_ITS_MENU)
    00001DD0 D930                   MOV.L       L1418+22,R9; _Bdisp_PutDisp_DD
    00001DD2 DA31                   MOV.L       L1418+26,R10; _PrintMini
    00001DD4 DB31                   MOV.L       L1418+30,R11; _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DD6              L1294:                            
      simplexC.c  1064        {
      simplexC.c  1065            Bdisp_AllClr_DDVRAM();
    00001DD6 4B0B                   JSR         @R11
    00001DD8 0009                   NOP
      simplexC.c  1066            
      simplexC.c  1067            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001DDA E710                   MOV         #16,R7
    00001DDC 66C3                   MOV         R12,R6
    00001DDE E500                   MOV         #0,R5
    00001DE0 4A0B                   JSR         @R10
    00001DE2 6453                   MOV         R5,R4
      simplexC.c  1068            menuChoice = InputI(0, 7);
    00001DE4 D32E                   MOV.L       L1418+34,R3; _InputI
    00001DE6 E507                   MOV         #7,R5
    00001DE8 430B                   JSR         @R3
    00001DEA E400                   MOV         #0,R4
      simplexC.c  1069            Bdisp_PutDisp_DD();
    00001DEC 490B                   JSR         @R9
    00001DEE 6E03                   MOV         R0,R14
      simplexC.c  1070            if(menuChoice<=ex.nodes.nIterations && menuChoice!=EXIT_OPT_ITS_MENU)
    00001DF0 52D4                   MOV.L       @(16,R13),R2
    00001DF2 3E27                   CMP/GT      R2,R14
    00001DF4 8904                   BT          L1295
    00001DF6 60E3                   MOV         R14,R0
    00001DF8 88FF                   CMP/EQ      #-1,R0
    00001DFA 8901                   BT          L1295
      simplexC.c  1071            {
      simplexC.c  1072                printIteration(menuChoice);
    00001DFC BEDD                   BSR         _printIteration
    00001DFE 64E3                   MOV         R14,R4
    00001E00              L1295:                            
    00001E00 60E3                   MOV         R14,R0
    00001E02 88FF                   CMP/EQ      #-1,R0
    00001E04 8BE7                   BF          L1294
      simplexC.c  1073            }
      simplexC.c  1074        }
      simplexC.c  1075        return 0;
    00001E06 E000                   MOV         #0,R0
      simplexC.c  1076    }
    00001E08 913B                   MOV.W       L1418+4,R1 ; H'0184
    00001E0A 3F1C                   ADD         R1,R15
    00001E0C 4F26                   LDS.L       @R15+,PR
    00001E0E 69F6                   MOV.L       @R15+,R9
    00001E10 6AF6                   MOV.L       @R15+,R10
    00001E12 6BF6                   MOV.L       @R15+,R11
    00001E14 6CF6                   MOV.L       @R15+,R12
    00001E16 6DF6                   MOV.L       @R15+,R13
    00001E18 000B                   RTS
    00001E1A 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1077    
      simplexC.c  1078    int printSolMenu()
    00001E1C              _printSolMenu:                   ; function: printSolMenu
                                                           ; frame size=436
                                                           ; used runtime library name:
                                                           ; __stod
    00001E1C 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1079    {
      simplexC.c  1080        char stroutTop[128],stroutBasicInfo[128],stroutBasicInfo2[128];
      simplexC.c  1081        int menuChoice;
      simplexC.c  1082        menuChoice=INITIALIZE_VALUE_OPT;
      simplexC.c  1083        sprintf(stroutTop,"Problem solution, printMenu. Exit %d", EXIT_OPT);
    00001E1E E300                   MOV         #0,R3
    00001E20 D220                   MOV.L       L1418+38,R2; L833
    00001E22 2FD6                   MOV.L       R13,@-R15
    00001E24 2FC6                   MOV.L       R12,@-R15
    00001E26 EDFF                   MOV         #-1,R13
    00001E28 D119                   MOV.L       L1418+18,R1; _sprintf
    00001E2A 2FB6                   MOV.L       R11,@-R15
    00001E2C 2FA6                   MOV.L       R10,@-R15
    00001E2E 2F96                   MOV.L       R9,@-R15
    00001E30 2F86                   MOV.L       R8,@-R15
    00001E32 4F22                   STS.L       PR,@-R15
    00001E34 9024                   MOV.W       L1418+2,R0 ; H'FE7C
    00001E36 3F0C                   ADD         R0,R15
    00001E38 9B21                   MOV.W       L1418,R11  ; H'0104
    00001E3A 3BFC                   ADD         R15,R11
    00001E3C 2F36                   MOV.L       R3,@-R15
    00001E3E 2F26                   MOV.L       R2,@-R15
    00001E40 410B                   JSR         @R1
    00001E42 64B3                   MOV         R11,R4
      simplexC.c  1084        sprintf(stroutBasicInfo, "Nits: %d, ZSol: %.2f",ex.nodes.nIterations,ex.nodes.its[ex.nodes.nIterations
                         +]->zSol);
    00001E44 9C1E                   MOV.W       L1418+6,R12; H'0084
    00001E46 7F08                   ADD         #8,R15
    00001E48 D317                   MOV.L       L1418+42,R3; H'00000010+_ex
    00001E4A 3CFC                   ADD         R15,R12
    00001E4C D117                   MOV.L       L1418+46,R1; H'00000014+_ex
    00001E4E 6032                   MOV.L       @R3,R0
    00001E50 2F02                   MOV.L       R0,@R15
    00001E52 4008                   SHLL2       R0
    00001E54 6212                   MOV.L       @R1,R2
    00001E56 002E                   MOV.L       @(R0,R2),R0
    00001E58 E244                   MOV         #68,R2
    00001E5A 002E                   MOV.L       @(R0,R2),R0
    00001E5C D214                   MOV.L       L1418+50,R2; __stod
    00001E5E 7FF8                   ADD         #-8,R15
    00001E60 420B                   JSR         @R2
    00001E62 2FF6                   MOV.L       R15,@-R15
    00001E64 53F2                   MOV.L       @(8,R15),R3
    00001E66 2F36                   MOV.L       R3,@-R15
    00001E68 D212                   MOV.L       L1418+54,R2; L834
    00001E6A 2F26                   MOV.L       R2,@-R15
    00001E6C D308                   MOV.L       L1418+18,R3; _sprintf
    00001E6E 430B                   JSR         @R3
    00001E70 64C3                   MOV         R12,R4
    00001E72 D811                   MOV.L       L1418+58,R8; L837
    00001E74 D911                   MOV.L       L1418+62,R9; L836
    00001E76 DA09                   MOV.L       L1418+30,R10; _Bdisp_AllClr_DDVRAM
    00001E78 DE07                   MOV.L       L1418+26,R14; _PrintMini
      simplexC.c  1085    
      simplexC.c  1086        while(menuChoice!=EXIT_OPT)
    00001E7A A04B                   BRA         L1297
    00001E7C 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E7E              L1418:                            
    00001E7E 0104                   .DATA.W     H'0104
    00001E80 FE7C                   .DATA.W     H'FE7C
    00001E82 0184                   .DATA.W     H'0184
    00001E84 0084                   .DATA.W     H'0084
    00001E86 0000                   .DATA.W     0
    00001E88 <00000000>             .DATA.L     _ex
    00001E8C <00000000>             .DATA.L     L824
    00001E90 <00000000>             .DATA.L     _sprintf
    00001E94 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001E98 <00000000>             .DATA.L     _PrintMini
    00001E9C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001EA0 <00000000>             .DATA.L     _InputI
    00001EA4 <00000000>             .DATA.L     L833
    00001EA8 <00000010>             .DATA.L     H'00000010+_ex
    00001EAC <00000014>             .DATA.L     H'00000014+_ex
    00001EB0 <00000000>             .DATA.L     __stod
    00001EB4 <00000000>             .DATA.L     L834
    00001EB8 <00000000>             .DATA.L     L837
    00001EBC <00000000>             .DATA.L     L836
    00001EC0              L1298:                            
      simplexC.c  1087        {
      simplexC.c  1088            Bdisp_AllClr_DDVRAM();
    00001EC0 4A0B                   JSR         @R10
    00001EC2 0009                   NOP
      simplexC.c  1089            
      simplexC.c  1090            PrintMini(0,0,  (unsigned char *)stroutTop, MINI_OVER);
    00001EC4 E710                   MOV         #16,R7
    00001EC6 66B3                   MOV         R11,R6
    00001EC8 E500                   MOV         #0,R5
    00001ECA 4E0B                   JSR         @R14
    00001ECC 6453                   MOV         R5,R4
      simplexC.c  1091            PrintMini(0,7,  (unsigned char *)stroutBasicInfo, MINI_OVER);
    00001ECE E710                   MOV         #16,R7
    00001ED0 66C3                   MOV         R12,R6
    00001ED2 E507                   MOV         #7,R5
    00001ED4 4E0B                   JSR         @R14
    00001ED6 E400                   MOV         #0,R4
      simplexC.c  1092            PrintMini(0, 14, (unsigned char*)"1 Pinfo res vars", MINI_OVER);
    00001ED8 E710                   MOV         #16,R7
    00001EDA 6693                   MOV         R9,R6
    00001EDC E50E                   MOV         #14,R5
    00001EDE 4E0B                   JSR         @R14
    00001EE0 E400                   MOV         #0,R4
      simplexC.c  1093            PrintMini(0, 21, (unsigned char*)"2 Pinfo its", MINI_OVER);
    00001EE2 E710                   MOV         #16,R7
    00001EE4 6683                   MOV         R8,R6
    00001EE6 E515                   MOV         #21,R5
    00001EE8 4E0B                   JSR         @R14
    00001EEA E400                   MOV         #0,R4
      simplexC.c  1094            menuChoice = InputI(0, 28);
    00001EEC D33C                   MOV.L       L1419+8,R3 ; _InputI
    00001EEE E51C                   MOV         #28,R5
    00001EF0 430B                   JSR         @R3
    00001EF2 E400                   MOV         #0,R4
      simplexC.c  1095            Bdisp_PutDisp_DD();
    00001EF4 D23B                   MOV.L       L1419+12,R2; _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001EF6 420B                   JSR         @R2
    00001EF8 6D03                   MOV         R0,R13
      simplexC.c  1096            switch (menuChoice)
    00001EFA 60D3                   MOV         R13,R0
    00001EFC 8801                   CMP/EQ      #1,R0
    00001EFE 8903                   BT          L1085
    00001F00 8802                   CMP/EQ      #2,R0
    00001F02 8905                   BT          L1086
    00001F04 A006                   BRA         L1297
    00001F06 0009                   NOP
    00001F08              L1085:                           ; case label 
      simplexC.c  1097            {
      simplexC.c  1098                case 1: printResVariables();break;
    00001F08 BB9B                   BSR         _printResVariables
    00001F0A 0009                   NOP
    00001F0C A002                   BRA         L1297
    00001F0E 0009                   NOP
    00001F10              L1086:                           ; case label 
      simplexC.c  1099                case 2: printIts();break;
    00001F10 BF46                   BSR         _printIts
    00001F12 0009                   NOP
      simplexC.c  1100                default: break;
    00001F14              L1297:                            
    00001F14 2DD8                   TST         R13,R13
    00001F16 8BD3                   BF          L1298
      simplexC.c  1101            }
      simplexC.c  1102        }
      simplexC.c  1103        return 0;
      simplexC.c  1104    }
    00001F18 915E                   MOV.W       L1419,R1   ; H'0184
    00001F1A E000                   MOV         #0,R0
    00001F1C 3F1C                   ADD         R1,R15
    00001F1E 4F26                   LDS.L       @R15+,PR
    00001F20 68F6                   MOV.L       @R15+,R8
    00001F22 69F6                   MOV.L       @R15+,R9
    00001F24 6AF6                   MOV.L       @R15+,R10
    00001F26 6BF6                   MOV.L       @R15+,R11
    00001F28 6CF6                   MOV.L       @R15+,R12
    00001F2A 6DF6                   MOV.L       @R15+,R13
    00001F2C 000B                   RTS
    00001F2E 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1105    
      simplexC.c  1106    int getInequalitySign(int nConstraint, int *nVariablesSlope, int * nVariables2fases)
    00001F30              _getInequalitySign:              ; function: getInequalitySign
                                                           ; frame size=172
    00001F30 2FE6                   MOV.L       R14,@-R15
    00001F32 4F22                   STS.L       PR,@-R15
    00001F34 9051                   MOV.W       L1419+2,R0 ; H'FF74
    00001F36 3F0C                   ADD         R0,R15
    00001F38 2F42                   MOV.L       R4,@R15
    00001F3A 1F51                   MOV.L       R5,@(4,R15)
      simplexC.c  1107    {   
      simplexC.c  1108        char strout[128];
      simplexC.c  1109        int res;
      simplexC.c  1110        Bdisp_AllClr_DDVRAM();
    00001F3C D32A                   MOV.L       L1419+16,R3; _Bdisp_AllClr_DDVRAM
    00001F3E 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F40 1F62                   MOV.L       R6,@(8,R15)
      simplexC.c  1111        sprintf(strout, "Constraint: %d, Choose Inequality", nConstraint);
    00001F42 6EF3                   MOV         R15,R14
    00001F44 62F2                   MOV.L       @R15,R2
    00001F46 7E0C                   ADD         #12,R14
    00001F48 D328                   MOV.L       L1419+20,R3; L846
    00001F4A 2F26                   MOV.L       R2,@-R15
    00001F4C 2F36                   MOV.L       R3,@-R15
    00001F4E D228                   MOV.L       L1419+24,R2; _sprintf
    00001F50 420B                   JSR         @R2
    00001F52 64E3                   MOV         R14,R4
      simplexC.c  1112        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00001F54 1FE2                   MOV.L       R14,@(8,R15)
    00001F56 66E3                   MOV         R14,R6
    00001F58 D326                   MOV.L       L1419+28,R3; _PrintMini
    00001F5A E710                   MOV         #16,R7
    00001F5C E500                   MOV         #0,R5
    00001F5E 430B                   JSR         @R3
    00001F60 6453                   MOV         R5,R4
      simplexC.c  1113        sprintf(strout, "Press E: %d, LET %d,  GET %d", 
      simplexC.c  1114            INE_EQUAL ,INE_LESS_OR_EQUAL_THAN,INE_GREATER_OR_EQUAL_THAN);
    00001F62 E202                   MOV         #2,R2
    00001F64 2F26                   MOV.L       R2,@-R15
    00001F66 E301                   MOV         #1,R3
    00001F68 D221                   MOV.L       L1419+24,R2; _sprintf
    00001F6A E100                   MOV         #0,R1
    00001F6C 2F36                   MOV.L       R3,@-R15
    00001F6E 2F16                   MOV.L       R1,@-R15
    00001F70 D321                   MOV.L       L1419+32,R3; L847
    00001F72 2F36                   MOV.L       R3,@-R15
    00001F74 420B                   JSR         @R2
    00001F76 64E3                   MOV         R14,R4
      simplexC.c  1115        PrintMini(0, 7, (unsigned char *)strout, MINI_OVER);
    00001F78 D31E                   MOV.L       L1419+28,R3; _PrintMini
    00001F7A 7F18                   ADD         #24,R15
    00001F7C 66F2                   MOV.L       @R15,R6
    00001F7E E507                   MOV         #7,R5
    00001F80 E710                   MOV         #16,R7
    00001F82 430B                   JSR         @R3
    00001F84 E400                   MOV         #0,R4
      simplexC.c  1116        res = InputI(0,14);
    00001F86 E50E                   MOV         #14,R5
    00001F88 D215                   MOV.L       L1419+8,R2 ; _InputI
    00001F8A 420B                   JSR         @R2
    00001F8C E400                   MOV         #0,R4
      simplexC.c  1117        Bdisp_PutDisp_DD();
    00001F8E D315                   MOV.L       L1419+12,R3; _Bdisp_PutDisp_DD
    00001F90 430B                   JSR         @R3
    00001F92 6E03                   MOV         R0,R14
      simplexC.c  1118        switch (res)
    00001F94 60E3                   MOV         R14,R0
    00001F96 8800                   CMP/EQ      #0,R0
    00001F98 8905                   BT          L1090
    00001F9A 8801                   CMP/EQ      #1,R0
    00001F9C 8909                   BT          L1091
    00001F9E 8802                   CMP/EQ      #2,R0
    00001FA0 890C                   BT          L1092




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001FA2 A013                   BRA         L1301
    00001FA4 0009                   NOP
    00001FA6              L1090:                           ; case label 
      simplexC.c  1119        {
      simplexC.c  1120            case INE_EQUAL: *nVariables2fases+=1; break;
    00001FA6 52F2                   MOV.L       @(8,R15),R2
    00001FA8 6322                   MOV.L       @R2,R3
    00001FAA 7301                   ADD         #1,R3
    00001FAC 2232                   MOV.L       R3,@R2
    00001FAE A00D                   BRA         L1301
    00001FB0 0009                   NOP
    00001FB2              L1091:                           ; case label 
      simplexC.c  1121            case INE_LESS_OR_EQUAL_THAN: *nVariablesSlope+=1; break;
    00001FB2 51F1                   MOV.L       @(4,R15),R1
    00001FB4 6312                   MOV.L       @R1,R3
    00001FB6 7301                   ADD         #1,R3
    00001FB8 A008                   BRA         L1301
    00001FBA 2132                   MOV.L       R3,@R1
    00001FBC              L1092:                           ; case label 
      simplexC.c  1122            case INE_GREATER_OR_EQUAL_THAN: *nVariablesSlope+=1;*nVariables2fases+=1; break;
    00001FBC 51F1                   MOV.L       @(4,R15),R1
    00001FBE 6312                   MOV.L       @R1,R3
    00001FC0 7301                   ADD         #1,R3
    00001FC2 2132                   MOV.L       R3,@R1
    00001FC4 52F2                   MOV.L       @(8,R15),R2
    00001FC6 6322                   MOV.L       @R2,R3
    00001FC8 7301                   ADD         #1,R3
    00001FCA 2232                   MOV.L       R3,@R2
    00001FCC              L1301:                            
      simplexC.c  1123        }
      simplexC.c  1124    
      simplexC.c  1125        return res;
      simplexC.c  1126    }
    00001FCC 9106                   MOV.W       L1419+4,R1 ; H'008C
    00001FCE 60E3                   MOV         R14,R0
    00001FD0 3F1C                   ADD         R1,R15
    00001FD2 4F26                   LDS.L       @R15+,PR
    00001FD4 000B                   RTS
    00001FD6 6EF6                   MOV.L       @R15+,R14
    00001FD8              L1419:                            
    00001FD8 0184                   .DATA.W     H'0184
    00001FDA FF74                   .DATA.W     H'FF74
    00001FDC 008C                   .DATA.W     H'008C
    00001FDE 0000                   .DATA.W     0
    00001FE0 <00000000>             .DATA.L     _InputI
    00001FE4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001FE8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001FEC <00000000>             .DATA.L     L846
    00001FF0 <00000000>             .DATA.L     _sprintf
    00001FF4 <00000000>             .DATA.L     _PrintMini
    00001FF8 <00000000>             .DATA.L     L847
      simplexC.c  1127    
      simplexC.c  1128    float getRightValue(int nConstraint)
    00001FFC              _getRightValue:                  ; function: getRightValue
                                                           ; frame size=144
    00001FFC 4F22                   STS.L       PR,@-R15
    00001FFE 9074                   MOV.W       L1420,R0   ; H'FF7C




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1129    {   
      simplexC.c  1130        char strout[128];
      simplexC.c  1131        float res;
      simplexC.c  1132        Bdisp_AllClr_DDVRAM();
    00002000 D33C                   MOV.L       L1420+10,R3; _Bdisp_AllClr_DDVRAM
    00002002 3F0C                   ADD         R0,R15
    00002004 430B                   JSR         @R3
    00002006 2F42                   MOV.L       R4,@R15
      simplexC.c  1133        sprintf(strout, "Constraint: %d, Right Value", nConstraint);
    00002008 62F2                   MOV.L       @R15,R2
    0000200A 2F26                   MOV.L       R2,@-R15
    0000200C D33A                   MOV.L       L1420+14,R3; L854
    0000200E 2F36                   MOV.L       R3,@-R15
    00002010 D23A                   MOV.L       L1420+18,R2; _sprintf
    00002012 64F3                   MOV         R15,R4
    00002014 420B                   JSR         @R2
    00002016 740C                   ADD         #12,R4
      simplexC.c  1134        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002018 D339                   MOV.L       L1420+22,R3; _PrintMini
    0000201A E710                   MOV         #16,R7
    0000201C 66F3                   MOV         R15,R6
    0000201E 760C                   ADD         #12,R6
    00002020 E500                   MOV         #0,R5
    00002022 430B                   JSR         @R3
    00002024 6453                   MOV         R5,R4
      simplexC.c  1135        Bdisp_PutDisp_DD();
    00002026 D237                   MOV.L       L1420+26,R2; _Bdisp_PutDisp_DD
    00002028 420B                   JSR         @R2
    0000202A 0009                   NOP
      simplexC.c  1136        res = InputD(0,7);
    0000202C D336                   MOV.L       L1420+30,R3; _InputD
    0000202E E507                   MOV         #7,R5
    00002030 430B                   JSR         @R3
    00002032 E400                   MOV         #0,R4
      simplexC.c  1137        return res;
      simplexC.c  1138    }
    00002034 915A                   MOV.W       L1420+2,R1 ; H'008C
    00002036 3F1C                   ADD         R1,R15
    00002038 4F26                   LDS.L       @R15+,PR
    0000203A 000B                   RTS
    0000203C 0009                   NOP
      simplexC.c  1139    
      simplexC.c  1140    float *getInequation(unsigned int nVariables, int nConstraint, int *inequalitySign, float *rightValue, int
                         + *nVariablesSlope, int * nVariables2fases)
    0000203E              _getInequation:                  ; function: getInequation
                                                           ; frame size=184
    0000203E 2FE6                   MOV.L       R14,@-R15
    00002040 2FD6                   MOV.L       R13,@-R15
    00002042 2FC6                   MOV.L       R12,@-R15
    00002044 2FB6                   MOV.L       R11,@-R15
    00002046 2FA6                   MOV.L       R10,@-R15
    00002048 2F96                   MOV.L       R9,@-R15
    0000204A 6A43                   MOV         R4,R10
      simplexC.c  1141    {
      simplexC.c  1142        char strout[128];
      simplexC.c  1143        unsigned int i;
      simplexC.c  1144        float *constraintValues;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1145        constraintValues = (float *)malloc(sizeof(float) * nVariables);
    0000204C D32F                   MOV.L       L1420+34,R3; _malloc
    0000204E 6953                   MOV         R5,R9
    00002050 2F86                   MOV.L       R8,@-R15
    00002052 64A3                   MOV         R10,R4
    00002054 904B                   MOV.W       L1420+4,R0 ; H'FF74
    00002056 4F22                   STS.L       PR,@-R15
    00002058 3F0C                   ADD         R0,R15
    0000205A 1F62                   MOV.L       R6,@(8,R15)
    0000205C 1F71                   MOV.L       R7,@(4,R15)
    0000205E 430B                   JSR         @R3
    00002060 4408                   SHLL2       R4
      simplexC.c  1146        for (i = 0; i < nVariables; i++)
    00002062 EB00                   MOV         #0,R11
    00002064 D826                   MOV.L       L1420+22,R8; _PrintMini
    00002066 6CF3                   MOV         R15,R12
    00002068 2F02                   MOV.L       R0,@R15
    0000206A EE00                   MOV         #0,R14
    0000206C 3E0C                   ADD         R0,R14
    0000206E ED01                   MOV         #1,R13
    00002070 63B3                   MOV         R11,R3
    00002072 33A2                   CMP/HS      R10,R3
    00002074 8D1D                   BT/S        L1304
    00002076 7C0C                   ADD         #12,R12
    00002078              L1305:                            
      simplexC.c  1147        {
      simplexC.c  1148            Bdisp_AllClr_DDVRAM();
    00002078 D11E                   MOV.L       L1420+10,R1; _Bdisp_AllClr_DDVRAM
    0000207A 410B                   JSR         @R1
    0000207C 0009                   NOP
      simplexC.c  1149            sprintf(strout, "Constraint: %d, variable: %d", nConstraint, (i + 1));
    0000207E 2FD6                   MOV.L       R13,@-R15
    00002080 2F96                   MOV.L       R9,@-R15
    00002082 D323                   MOV.L       L1420+38,R3; L867
    00002084 D21D                   MOV.L       L1420+18,R2; _sprintf
    00002086 2F36                   MOV.L       R3,@-R15
    00002088 420B                   JSR         @R2
    0000208A 64C3                   MOV         R12,R4
    0000208C 7F0C                   ADD         #12,R15
      simplexC.c  1150            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000208E E710                   MOV         #16,R7
    00002090 66C3                   MOV         R12,R6
    00002092 E500                   MOV         #0,R5
    00002094 480B                   JSR         @R8
    00002096 6453                   MOV         R5,R4
      simplexC.c  1151            Bdisp_PutDisp_DD();
    00002098 D31A                   MOV.L       L1420+26,R3; _Bdisp_PutDisp_DD
    0000209A 430B                   JSR         @R3
    0000209C 0009                   NOP
      simplexC.c  1152            constraintValues[i] = InputD(0, 7);
    0000209E E507                   MOV         #7,R5
    000020A0 D219                   MOV.L       L1420+30,R2; _InputD
    000020A2 420B                   JSR         @R2
    000020A4 E400                   MOV         #0,R4
    000020A6 7B01                   ADD         #1,R11
    000020A8 2E02                   MOV.L       R0,@R14
    000020AA 3BA2                   CMP/HS      R10,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000020AC 7E04                   ADD         #4,R14
    000020AE 8FE3                   BF/S        L1305
    000020B0 7D01                   ADD         #1,R13
    000020B2              L1304:                            
      simplexC.c  1153        }
      simplexC.c  1154        *inequalitySign = getInequalitySign(nConstraint, nVariablesSlope,nVariables2fases);
    000020B2 52F2                   MOV.L       @(8,R15),R2
    000020B4 901C                   MOV.W       L1420+6,R0 ; H'00B4
    000020B6 2F26                   MOV.L       R2,@-R15
    000020B8 06FE                   MOV.L       @(R0,R15),R6
    000020BA 901A                   MOV.W       L1420+8,R0 ; H'00B0
    000020BC 05FE                   MOV.L       @(R0,R15),R5
    000020BE BF37                   BSR         _getInequalitySign
    000020C0 6493                   MOV         R9,R4
    000020C2 61F6                   MOV.L       @R15+,R1
    000020C4 2102                   MOV.L       R0,@R1
      simplexC.c  1155        *rightValue = getRightValue(nConstraint);
    000020C6 53F1                   MOV.L       @(4,R15),R3
    000020C8 2F36                   MOV.L       R3,@-R15
    000020CA BF97                   BSR         _getRightValue
    000020CC 6493                   MOV         R9,R4
    000020CE 62F6                   MOV.L       @R15+,R2
      simplexC.c  1156        return constraintValues;
      simplexC.c  1157    }
    000020D0 910C                   MOV.W       L1420+2,R1 ; H'008C
    000020D2 2202                   MOV.L       R0,@R2
    000020D4 60F2                   MOV.L       @R15,R0
    000020D6 3F1C                   ADD         R1,R15
    000020D8 4F26                   LDS.L       @R15+,PR
    000020DA 68F6                   MOV.L       @R15+,R8
    000020DC 69F6                   MOV.L       @R15+,R9
    000020DE 6AF6                   MOV.L       @R15+,R10
    000020E0 6BF6                   MOV.L       @R15+,R11
    000020E2 6CF6                   MOV.L       @R15+,R12
    000020E4 6DF6                   MOV.L       @R15+,R13
    000020E6 000B                   RTS
    000020E8 6EF6                   MOV.L       @R15+,R14
    000020EA              L1420:                            
    000020EA FF7C                   .DATA.W     H'FF7C
    000020EC 008C                   .DATA.W     H'008C
    000020EE FF74                   .DATA.W     H'FF74
    000020F0 00B4                   .DATA.W     H'00B4
    000020F2 00B0                   .DATA.W     H'00B0
    000020F4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000020F8 <00000000>             .DATA.L     L854
    000020FC <00000000>             .DATA.L     _sprintf
    00002100 <00000000>             .DATA.L     _PrintMini
    00002104 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002108 <00000000>             .DATA.L     _InputD
    0000210C <00000000>             .DATA.L     _malloc
    00002110 <00000000>             .DATA.L     L867
      simplexC.c  1158    
      simplexC.c  1159    struct problemStatement* getProblemInputs()
    00002114              _getProblemInputs:               ; function: getProblemInputs
                                                           ; frame size=224
    00002114 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1160    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1161        char strout[128];
      simplexC.c  1162        unsigned int nConstraints;
      simplexC.c  1163        unsigned int nVariables;
      simplexC.c  1164        unsigned int i;
      simplexC.c  1165        int nVariablesInteger;
      simplexC.c  1166        int problemType;
      simplexC.c  1167        float **constraints;
      simplexC.c  1168        float *rightValues;
      simplexC.c  1169        float *funcObjtValues;
      simplexC.c  1170        int *inequalitiesSigns;
      simplexC.c  1171        int *idIntegerVariables;
      simplexC.c  1172        int *idSlopeVariables;
      simplexC.c  1173        int *id2fasesVariables;
      simplexC.c  1174        struct problemStatement *pInput;
      simplexC.c  1175        nVariablesInteger=0;
    00002116 E300                   MOV         #0,R3
    00002118 90B0                   MOV.W       L1421,R0   ; H'FF4C
    0000211A 2FD6                   MOV.L       R13,@-R15
    0000211C 2FC6                   MOV.L       R12,@-R15
    0000211E 2FB6                   MOV.L       R11,@-R15
    00002120 2FA6                   MOV.L       R10,@-R15
    00002122 2F96                   MOV.L       R9,@-R15
    00002124 2F86                   MOV.L       R8,@-R15
    00002126 4F22                   STS.L       PR,@-R15
      simplexC.c  1176        pInput = malloc(sizeof(struct problemStatement));
    00002128 DA55                   MOV.L       L1421+4,R10; _malloc
    0000212A 3F0C                   ADD         R0,R15
    0000212C 1F37                   MOV.L       R3,@(28,R15)
    0000212E 4A0B                   JSR         @R10
    00002130 E454                   MOV         #84,R4
      simplexC.c  1177        Bdisp_AllClr_DDVRAM();
    00002132 D354                   MOV.L       L1421+8,R3 ; _Bdisp_AllClr_DDVRAM
    00002134 430B                   JSR         @R3
    00002136 6E03                   MOV         R0,R14
      simplexC.c  1178        PrintMini(0, 0, (unsigned char *)"NConstraints?", MINI_OVER);
    00002138 DB53                   MOV.L       L1421+12,R11; _PrintMini
    0000213A E710                   MOV         #16,R7
    0000213C D653                   MOV.L       L1421+16,R6; L884
    0000213E E500                   MOV         #0,R5
    00002140 4B0B                   JSR         @R11
    00002142 6453                   MOV         R5,R4
      simplexC.c  1179        Bdisp_PutDisp_DD();
    00002144 D952                   MOV.L       L1421+20,R9; _Bdisp_PutDisp_DD
    00002146 490B                   JSR         @R9
    00002148 0009                   NOP
      simplexC.c  1180        nConstraints = InputI(0, 7);
    0000214A E507                   MOV         #7,R5
    0000214C D251                   MOV.L       L1421+24,R2; _InputI
    0000214E 420B                   JSR         @R2
    00002150 E400                   MOV         #0,R4
      simplexC.c  1181        PrintMini(0, 14, (unsigned char *)"NVariables?", MINI_OVER);
    00002152 E710                   MOV         #16,R7
    00002154 D650                   MOV.L       L1421+28,R6; L885
    00002156 E50E                   MOV         #14,R5
    00002158 1F02                   MOV.L       R0,@(8,R15)
    0000215A 4B0B                   JSR         @R11
    0000215C E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1182        Bdisp_PutDisp_DD();
    0000215E 490B                   JSR         @R9
    00002160 0009                   NOP
      simplexC.c  1183        nVariables = InputI(0, 21);
    00002162 E515                   MOV         #21,R5
    00002164 D34B                   MOV.L       L1421+24,R3; _InputI
    00002166 430B                   JSR         @R3
    00002168 E400                   MOV         #0,R4
    0000216A 6C03                   MOV         R0,R12
      simplexC.c  1184        problemType = TYPE_LP;
    0000216C E201                   MOV         #1,R2
    0000216E 1F2C                   MOV.L       R2,@(48,R15)
      simplexC.c  1185        constraints = (float **)malloc(sizeof(float) * nConstraints);
    00002170 54F2                   MOV.L       @(8,R15),R4
    00002172 4408                   SHLL2       R4
    00002174 4A0B                   JSR         @R10
    00002176 2F42                   MOV.L       R4,@R15
    00002178 1F06                   MOV.L       R0,@(24,R15)
      simplexC.c  1186        rightValues=calloc(nConstraints,sizeof(float));
    0000217A E504                   MOV         #4,R5
    0000217C DD47                   MOV.L       L1421+32,R13; _calloc
    0000217E 4D0B                   JSR         @R13
    00002180 54F2                   MOV.L       @(8,R15),R4
    00002182 1F08                   MOV.L       R0,@(32,R15)
      simplexC.c  1187        inequalitiesSigns = (int *) malloc(sizeof(int)*nConstraints);
    00002184 4A0B                   JSR         @R10
    00002186 64F2                   MOV.L       @R15,R4
    00002188 1F05                   MOV.L       R0,@(20,R15)
      simplexC.c  1188        funcObjtValues = calloc(nVariables+1,sizeof(float));
    0000218A E504                   MOV         #4,R5
    0000218C 64C3                   MOV         R12,R4
    0000218E 4D0B                   JSR         @R13
    00002190 7401                   ADD         #1,R4
      simplexC.c  1189        idIntegerVariables = calloc(nVariables,sizeof(int));
    00002192 E504                   MOV         #4,R5
    00002194 1F04                   MOV.L       R0,@(16,R15)
    00002196 4D0B                   JSR         @R13
    00002198 64C3                   MOV         R12,R4
      simplexC.c  1190        idSlopeVariables = calloc(nVariables,sizeof(int));
    0000219A E504                   MOV         #4,R5
    0000219C 1F09                   MOV.L       R0,@(36,R15)
    0000219E 4D0B                   JSR         @R13
    000021A0 64C3                   MOV         R12,R4
      simplexC.c  1191        id2fasesVariables = calloc(nVariables,sizeof(int));
    000021A2 E504                   MOV         #4,R5
    000021A4 1F0B                   MOV.L       R0,@(44,R15)
    000021A6 4D0B                   JSR         @R13
    000021A8 64C3                   MOV         R12,R4
      simplexC.c  1192        pInput->nVariablesSlope=0;
    000021AA E300                   MOV         #0,R3
      simplexC.c  1193        pInput->nVariables2fases=0;
      simplexC.c  1194        for(i=0;i<nVariables;i++)
    000021AC 9867                   MOV.W       L1421+2,R8 ; H'0080
    000021AE 6DF3                   MOV         R15,R13
    000021B0 1F0A                   MOV.L       R0,@(40,R15)
    000021B2 6233                   MOV         R3,R2
    000021B4 1E38                   MOV.L       R3,@(32,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021B6 1E39                   MOV.L       R3,@(36,R14)
    000021B8 1F31                   MOV.L       R3,@(4,R15)
    000021BA E301                   MOV         #1,R3
    000021BC 5AF9                   MOV.L       @(36,R15),R10
    000021BE 2F32                   MOV.L       R3,@R15
    000021C0 E300                   MOV         #0,R3
    000021C2 3C36                   CMP/HI      R3,R12
    000021C4 8F09                   BF/S        L1307
    000021C6 7D34                   ADD         #52,R13
    000021C8              L1309:                            
    000021C8 53F1                   MOV.L       @(4,R15),R3
    000021CA 7A04                   ADD         #4,R10
    000021CC 7301                   ADD         #1,R3
    000021CE 33C2                   CMP/HS      R12,R3
    000021D0 1F31                   MOV.L       R3,@(4,R15)
    000021D2 62F2                   MOV.L       @R15,R2
    000021D4 7201                   ADD         #1,R2
    000021D6 8FF7                   BF/S        L1309
    000021D8 2F22                   MOV.L       R2,@R15
    000021DA              L1307:                            
      simplexC.c  1195        {
      simplexC.c  1196            if(problemType!=TYPE_LP)
      simplexC.c  1197            {
      simplexC.c  1198                Bdisp_AllClr_DDVRAM();
      simplexC.c  1199                sprintf(strout,"Variable x%d",i+1);
      simplexC.c  1200                PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
      simplexC.c  1201                PrintMini(0, 7, (unsigned char *)"Press 1 if Int var, 0 no", MINI_OVER);
      simplexC.c  1202                idIntegerVariables[i] = InputI(0, 14);
      simplexC.c  1203                Bdisp_PutDisp_DD();
      simplexC.c  1204                memset(strout,0,128);
      simplexC.c  1205                if(idIntegerVariables[i]==1)
      simplexC.c  1206                {
      simplexC.c  1207                    nVariablesInteger+=1;
      simplexC.c  1208                }
      simplexC.c  1209            }
      simplexC.c  1210        }
      simplexC.c  1211        for (i = 0; i < nConstraints; i++)
    000021DA E300                   MOV         #0,R3
    000021DC 1F31                   MOV.L       R3,@(4,R15)
    000021DE E201                   MOV         #1,R2
    000021E0 2F22                   MOV.L       R2,@R15
    000021E2 52F2                   MOV.L       @(8,R15),R2
    000021E4 3236                   CMP/HI      R3,R2
    000021E6 8F1D                   BF/S        L1311
    000021E8 6A33                   MOV         R3,R10
    000021EA              L1312:                            
      simplexC.c  1212        {
      simplexC.c  1213            constraints[i] = getInequation(nVariables, i + 1,&inequalitiesSigns[i],&rightValues[i],&pInput->nV
                         +ariablesSlope,&pInput->nVariables2fases);
    000021EA 63E3                   MOV         R14,R3
    000021EC 50F6                   MOV.L       @(24,R15),R0
    000021EE 7324                   ADD         #36,R3
    000021F0 30AC                   ADD         R10,R0
    000021F2 2F06                   MOV.L       R0,@-R15
    000021F4 2F36                   MOV.L       R3,@-R15
    000021F6 63E3                   MOV         R14,R3
    000021F8 7320                   ADD         #32,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000021FA 2F36                   MOV.L       R3,@-R15
    000021FC 57FB                   MOV.L       @(44,R15),R7
    000021FE 37AC                   ADD         R10,R7
    00002200 56F8                   MOV.L       @(32,R15),R6
    00002202 36AC                   ADD         R10,R6
    00002204 55F3                   MOV.L       @(12,R15),R5
    00002206 BF1A                   BSR         _getInequation
    00002208 64C3                   MOV         R12,R4
    0000220A 7F08                   ADD         #8,R15
    0000220C 63F6                   MOV.L       @R15+,R3
    0000220E 2302                   MOV.L       R0,@R3
    00002210 52F1                   MOV.L       @(4,R15),R2
    00002212 7201                   ADD         #1,R2
    00002214 1F21                   MOV.L       R2,@(4,R15)
    00002216 63F2                   MOV.L       @R15,R3
    00002218 7301                   ADD         #1,R3
    0000221A 2F32                   MOV.L       R3,@R15
    0000221C 51F2                   MOV.L       @(8,R15),R1
    0000221E 3212                   CMP/HS      R1,R2
    00002220 8FE3                   BF/S        L1312
    00002222 7A04                   ADD         #4,R10
    00002224              L1311:                            
      simplexC.c  1214        }
      simplexC.c  1215        
      simplexC.c  1216        Bdisp_AllClr_DDVRAM();
    00002224 D317                   MOV.L       L1421+8,R3 ; _Bdisp_AllClr_DDVRAM
    00002226 430B                   JSR         @R3
    00002228 0009                   NOP
      simplexC.c  1217        sprintf(strout,"OBJ. Min: %d, Max %d",FUNC_MINIMIZE,FUNC_MAXIMIZE);
    0000222A E201                   MOV         #1,R2
    0000222C D11C                   MOV.L       L1421+36,R1; L892
    0000222E E300                   MOV         #0,R3
    00002230 2F26                   MOV.L       R2,@-R15
    00002232 2F36                   MOV.L       R3,@-R15
    00002234 2F16                   MOV.L       R1,@-R15
    00002236 D31B                   MOV.L       L1421+40,R3; _sprintf
    00002238 430B                   JSR         @R3
    0000223A 64D3                   MOV         R13,R4
    0000223C 7F0C                   ADD         #12,R15
      simplexC.c  1218        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    0000223E E710                   MOV         #16,R7
    00002240 1FD3                   MOV.L       R13,@(12,R15)
    00002242 66D3                   MOV         R13,R6
    00002244 E500                   MOV         #0,R5
    00002246 4B0B                   JSR         @R11
    00002248 6453                   MOV         R5,R4
      simplexC.c  1219        pInput->funcObjectivePurpose = InputI(0, 7);
    0000224A E507                   MOV         #7,R5
    0000224C D311                   MOV.L       L1421+24,R3; _InputI
    0000224E 430B                   JSR         @R3
    00002250 E400                   MOV         #0,R4
    00002252 E144                   MOV         #68,R1
    00002254 31EC                   ADD         R14,R1
      simplexC.c  1220        Bdisp_PutDisp_DD();
    00002256 490B                   JSR         @R9
    00002258 2102                   MOV.L       R0,@R1
      simplexC.c  1221        memset(strout,0,128);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000225A 6683                   MOV         R8,R6
    0000225C D312                   MOV.L       L1421+44,R3; _memset
    0000225E E500                   MOV         #0,R5
    00002260 430B                   JSR         @R3
    00002262 64D3                   MOV         R13,R4
      simplexC.c  1222        for(i=0;i<nVariables;i++)
    00002264 E200                   MOV         #0,R2
    00002266 E301                   MOV         #1,R3
    00002268 1F21                   MOV.L       R2,@(4,R15)
    0000226A 3C26                   CMP/HI      R2,R12
    0000226C 5AF4                   MOV.L       @(16,R15),R10
    0000226E 2F32                   MOV.L       R3,@R15
    00002270 8B3D                   BF          L1313
    00002272              L1314:                            
      simplexC.c  1223        {
      simplexC.c  1224            Bdisp_AllClr_DDVRAM();
    00002272 D104                   MOV.L       L1421+8,R1 ; _Bdisp_AllClr_DDVRAM
    00002274 410B                   JSR         @R1
    00002276 0009                   NOP
      simplexC.c  1225            sprintf(strout,"Obj value var x%d",i+1);
    00002278 A018                   BRA         L1392
    0000227A 0009                   NOP
    0000227C              L1421:                            
    0000227C FF4C                   .DATA.W     H'FF4C
    0000227E 0080                   .DATA.W     H'0080
    00002280 <00000000>             .DATA.L     _malloc
    00002284 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00002288 <00000000>             .DATA.L     _PrintMini
    0000228C <00000000>             .DATA.L     L884
    00002290 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002294 <00000000>             .DATA.L     _InputI
    00002298 <00000000>             .DATA.L     L885
    0000229C <00000000>             .DATA.L     _calloc
    000022A0 <00000000>             .DATA.L     L892
    000022A4 <00000000>             .DATA.L     _sprintf
    000022A8 <00000000>             .DATA.L     _memset
    000022AC              L1392:                            
    000022AC 63F2                   MOV.L       @R15,R3
    000022AE 2F36                   MOV.L       R3,@-R15
    000022B0 D244                   MOV.L       L1422+4,R2 ; L894
    000022B2 2F26                   MOV.L       R2,@-R15
    000022B4 D344                   MOV.L       L1422+8,R3 ; _sprintf
    000022B6 430B                   JSR         @R3
    000022B8 64D3                   MOV         R13,R4
    000022BA 7F08                   ADD         #8,R15
      simplexC.c  1226            PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    000022BC 56F3                   MOV.L       @(12,R15),R6
    000022BE E500                   MOV         #0,R5
    000022C0 E710                   MOV         #16,R7
    000022C2 4B0B                   JSR         @R11
    000022C4 6453                   MOV         R5,R4
      simplexC.c  1227            funcObjtValues[i] = InputD(0, 7);
    000022C6 E507                   MOV         #7,R5
    000022C8 D340                   MOV.L       L1422+12,R3; _InputD
    000022CA 430B                   JSR         @R3
    000022CC E400                   MOV         #0,R4
      simplexC.c  1228            Bdisp_PutDisp_DD();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000022CE 490B                   JSR         @R9
    000022D0 2A02                   MOV.L       R0,@R10
      simplexC.c  1229            memset(strout,0,128);
    000022D2 6683                   MOV         R8,R6
    000022D4 D23E                   MOV.L       L1422+16,R2; _memset
    000022D6 E500                   MOV         #0,R5
    000022D8 420B                   JSR         @R2
    000022DA 64D3                   MOV         R13,R4
    000022DC 53F1                   MOV.L       @(4,R15),R3
    000022DE 7A04                   ADD         #4,R10
    000022E0 7301                   ADD         #1,R3
    000022E2 33C2                   CMP/HS      R12,R3
    000022E4 1F31                   MOV.L       R3,@(4,R15)
    000022E6 62F2                   MOV.L       @R15,R2
    000022E8 7201                   ADD         #1,R2
    000022EA 8FC2                   BF/S        L1314
    000022EC 2F22                   MOV.L       R2,@R15
    000022EE              L1313:                            
      simplexC.c  1230        }
      simplexC.c  1231        Bdisp_AllClr_DDVRAM();
    000022EE D339                   MOV.L       L1422+20,R3; _Bdisp_AllClr_DDVRAM
    000022F0 430B                   JSR         @R3
    000022F2 0009                   NOP
      simplexC.c  1232        sprintf(strout,"Obj value Independent");
    000022F4 D238                   MOV.L       L1422+24,R2; L895
    000022F6 2F26                   MOV.L       R2,@-R15
    000022F8 D333                   MOV.L       L1422+8,R3 ; _sprintf
    000022FA 430B                   JSR         @R3
    000022FC 64D3                   MOV         R13,R4
    000022FE 7F04                   ADD         #4,R15
      simplexC.c  1233        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002300 56F3                   MOV.L       @(12,R15),R6
    00002302 E500                   MOV         #0,R5
    00002304 E710                   MOV         #16,R7
    00002306 4B0B                   JSR         @R11
    00002308 6453                   MOV         R5,R4
      simplexC.c  1234        funcObjtValues[nVariables] = InputD(0, 7);
    0000230A 63C3                   MOV         R12,R3
    0000230C 50F4                   MOV.L       @(16,R15),R0
    0000230E E507                   MOV         #7,R5
    00002310 4308                   SHLL2       R3
    00002312 303C                   ADD         R3,R0
    00002314 2F06                   MOV.L       R0,@-R15
    00002316 D32D                   MOV.L       L1422+12,R3; _InputD
    00002318 430B                   JSR         @R3
    0000231A E400                   MOV         #0,R4
    0000231C 62F6                   MOV.L       @R15+,R2
      simplexC.c  1235        Bdisp_PutDisp_DD();
    0000231E 490B                   JSR         @R9
    00002320 2202                   MOV.L       R0,@R2
      simplexC.c  1236        pInput->constraints=constraints;
      simplexC.c  1237        pInput->rightValues=rightValues;
      simplexC.c  1238        pInput->inequalitySigns=inequalitiesSigns;
      simplexC.c  1239        pInput->nVariables=nVariables;
      simplexC.c  1240        pInput->nConstraints=nConstraints;
      simplexC.c  1241        pInput->idIntegerVariables=idIntegerVariables;
      simplexC.c  1242        pInput->idSlopeVariables=idSlopeVariables;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1243        pInput->id2fasesVariables=id2fasesVariables;
      simplexC.c  1244        pInput->funcObjtValues=funcObjtValues;
    00002322 E048                   MOV         #72,R0
    00002324 53F6                   MOV.L       @(24,R15),R3
    00002326 1E34                   MOV.L       R3,@(16,R14)
    00002328 52F8                   MOV.L       @(32,R15),R2
    0000232A 1E25                   MOV.L       R2,@(20,R14)
    0000232C 53F5                   MOV.L       @(20,R15),R3
    0000232E 1E36                   MOV.L       R3,@(24,R14)
    00002330 1EC7                   MOV.L       R12,@(28,R14)
    00002332 53F2                   MOV.L       @(8,R15),R3
    00002334 1E3B                   MOV.L       R3,@(44,R14)
    00002336 52F9                   MOV.L       @(36,R15),R2
    00002338 1E2C                   MOV.L       R2,@(48,R14)
    0000233A 53FB                   MOV.L       @(44,R15),R3
    0000233C 1E3D                   MOV.L       R3,@(52,R14)
    0000233E 52FA                   MOV.L       @(40,R15),R2
    00002340 1E2E                   MOV.L       R2,@(56,R14)
    00002342 53F4                   MOV.L       @(16,R15),R3
    00002344 0E36                   MOV.L       R3,@(R0,R14)
      simplexC.c  1245        pInput->nVariablesInteger=nVariablesInteger;
      simplexC.c  1246        pInput->modelType=TYPE_INPUT;
    00002346 E301                   MOV         #1,R3
    00002348 52F7                   MOV.L       @(28,R15),R2
      simplexC.c  1247        pInput->problemType=problemType;
      simplexC.c  1248        pInput->is2fasesNeeded=(pInput->nVariables2fases>0)?1:0;
      simplexC.c  1249        return pInput;
    0000234A 60E3                   MOV         R14,R0
    0000234C 1E2A                   MOV.L       R2,@(40,R14)
    0000234E 1E31                   MOV.L       R3,@(4,R14)
    00002350 52FC                   MOV.L       @(48,R15),R2
    00002352 2E22                   MOV.L       R2,@R14
    00002354 51E9                   MOV.L       @(36,R14),R1
    00002356 4115                   CMP/PL      R1
      simplexC.c  1250    }
    00002358 9132                   MOV.W       L1422,R1   ; H'00B4
    0000235A 0329                   MOVT        R3
    0000235C 1E32                   MOV.L       R3,@(8,R14)
    0000235E 3F1C                   ADD         R1,R15
    00002360 4F26                   LDS.L       @R15+,PR
    00002362 68F6                   MOV.L       @R15+,R8
    00002364 69F6                   MOV.L       @R15+,R9
    00002366 6AF6                   MOV.L       @R15+,R10
    00002368 6BF6                   MOV.L       @R15+,R11
    0000236A 6CF6                   MOV.L       @R15+,R12
    0000236C 6DF6                   MOV.L       @R15+,R13
    0000236E 000B                   RTS
    00002370 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1251    
      simplexC.c  1252    int selectExecutionMode()
    00002372              _selectExecutionMode:            ; function: selectExecutionMode
                                                           ; frame size=144
    00002372 4F22                   STS.L       PR,@-R15
      simplexC.c  1253    {
      simplexC.c  1254        char strout[128];
      simplexC.c  1255        Bdisp_AllClr_DDVRAM();
    00002374 D317                   MOV.L       L1422+20,R3; _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002376 7F80                   ADD         #-128,R15
    00002378 430B                   JSR         @R3
    0000237A 0009                   NOP
      simplexC.c  1256        sprintf(strout,"Mode. Full %d, Table %d",MODE_FULL_EXECUTION,MODE_INPUT_TABLE);
    0000237C D117                   MOV.L       L1422+28,R1; L899
    0000237E E201                   MOV         #1,R2
    00002380 2F26                   MOV.L       R2,@-R15
    00002382 E300                   MOV         #0,R3
    00002384 2F36                   MOV.L       R3,@-R15
    00002386 2F16                   MOV.L       R1,@-R15
    00002388 D30F                   MOV.L       L1422+8,R3 ; _sprintf
    0000238A 64F3                   MOV         R15,R4
    0000238C 430B                   JSR         @R3
    0000238E 740C                   ADD         #12,R4
      simplexC.c  1257        PrintMini(0, 0, (unsigned char *)strout, MINI_OVER);
    00002390 D213                   MOV.L       L1422+32,R2; _PrintMini
    00002392 E710                   MOV         #16,R7
    00002394 66F3                   MOV         R15,R6
    00002396 760C                   ADD         #12,R6
    00002398 E500                   MOV         #0,R5
    0000239A 420B                   JSR         @R2
    0000239C 6453                   MOV         R5,R4
      simplexC.c  1258        ex.mode = InputI(0, 7);
    0000239E E507                   MOV         #7,R5
    000023A0 D310                   MOV.L       L1422+36,R3; _InputI
    000023A2 430B                   JSR         @R3
    000023A4 E400                   MOV         #0,R4
    000023A6 D210                   MOV.L       L1422+40,R2; _ex
      simplexC.c  1259        Bdisp_PutDisp_DD();
    000023A8 D310                   MOV.L       L1422+44,R3; _Bdisp_PutDisp_DD
    000023AA 430B                   JSR         @R3
    000023AC 2202                   MOV.L       R0,@R2
      simplexC.c  1260        ex.nNodes=0;
    000023AE E100                   MOV         #0,R1
    000023B0 D30F                   MOV.L       L1422+48,R3; H'00000024+_ex
      simplexC.c  1261        return 0;
    000023B2 6013                   MOV         R1,R0
    000023B4 2312                   MOV.L       R1,@R3
      simplexC.c  1262    }
    000023B6 9104                   MOV.W       L1422+2,R1 ; H'008C
    000023B8 3F1C                   ADD         R1,R15
    000023BA 4F26                   LDS.L       @R15+,PR
    000023BC 000B                   RTS
    000023BE 0009                   NOP
    000023C0              L1422:                            
    000023C0 00B4                   .DATA.W     H'00B4
    000023C2 008C                   .DATA.W     H'008C
    000023C4 <00000000>             .DATA.L     L894
    000023C8 <00000000>             .DATA.L     _sprintf
    000023CC <00000000>             .DATA.L     _InputD
    000023D0 <00000000>             .DATA.L     _memset
    000023D4 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000023D8 <00000000>             .DATA.L     L895
    000023DC <00000000>             .DATA.L     L899
    000023E0 <00000000>             .DATA.L     _PrintMini
    000023E4 <00000000>             .DATA.L     _InputI
    000023E8 <00000000>             .DATA.L     _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000023EC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000023F0 <00000024>             .DATA.L     H'00000024+_ex
      simplexC.c  1263    
      simplexC.c  1264    int convertModel()
    000023F4              _convertModel:                   ; function: convertModel
                                                           ; frame size=32
    000023F4 2FE6                   MOV.L       R14,@-R15
    000023F6 2FD6                   MOV.L       R13,@-R15
    000023F8 2FC6                   MOV.L       R12,@-R15
    000023FA 2FB6                   MOV.L       R11,@-R15
    000023FC 2FA6                   MOV.L       R10,@-R15
      simplexC.c  1265    {
      simplexC.c  1266        int i,j,nextConstraintSlopeSet,nextConstraint2fasesSet;
      simplexC.c  1267        struct problemStatement *modelToSolve;
      simplexC.c  1268        nextConstraint2fasesSet=0;nextConstraintSlopeSet=0;
    000023FE EB00                   MOV         #0,R11
      simplexC.c  1269        modelToSolve = malloc(sizeof(struct problemStatement));
    00002400 D385                   MOV.L       L1423,R3   ; _malloc
    00002402 6CB3                   MOV         R11,R12
    00002404 2F96                   MOV.L       R9,@-R15
    00002406 69B3                   MOV         R11,R9
    00002408 2F86                   MOV.L       R8,@-R15
    0000240A 4F22                   STS.L       PR,@-R15
    0000240C 430B                   JSR         @R3
    0000240E E454                   MOV         #84,R4
      simplexC.c  1270        modelToSolve->problemType=ex.initialProblemStatement->problemType;
    00002410 DD82                   MOV.L       L1423+4,R13; _ex
    00002412 6E03                   MOV         R0,R14
      simplexC.c  1271        modelToSolve->nVariablesSlope=ex.initialProblemStatement->nVariablesSlope;
      simplexC.c  1272        modelToSolve->nVariables2fases=ex.initialProblemStatement->nVariables2fases;
      simplexC.c  1273        modelToSolve->nVariablesInteger=ex.initialProblemStatement->nVariablesInteger;
      simplexC.c  1274        modelToSolve->nConstraints=ex.initialProblemStatement->nConstraints;
      simplexC.c  1275        modelToSolve->funcObjectivePurpose=ex.initialProblemStatement->funcObjectivePurpose;
      simplexC.c  1276        modelToSolve->is2fasesNeeded=ex.initialProblemStatement->is2fasesNeeded;
      simplexC.c  1277        modelToSolve->nVariables=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariables
                         +Slope+ex.initialProblemStatement->nVariables2fases;
      simplexC.c  1278        modelToSolve->funcObjtValues=calloc(modelToSolve->nVariables+1,sizeof(float));
    00002414 DA82                   MOV.L       L1423+8,R10; _calloc
    00002416 E044                   MOV         #68,R0
    00002418 52D1                   MOV.L       @(4,R13),R2
    0000241A 6322                   MOV.L       @R2,R3
    0000241C 2E32                   MOV.L       R3,@R14
    0000241E 52D1                   MOV.L       @(4,R13),R2
    00002420 5328                   MOV.L       @(32,R2),R3
    00002422 1E38                   MOV.L       R3,@(32,R14)
    00002424 52D1                   MOV.L       @(4,R13),R2
    00002426 5329                   MOV.L       @(36,R2),R3
    00002428 1E39                   MOV.L       R3,@(36,R14)
    0000242A 52D1                   MOV.L       @(4,R13),R2
    0000242C 532A                   MOV.L       @(40,R2),R3
    0000242E 1E3A                   MOV.L       R3,@(40,R14)
    00002430 52D1                   MOV.L       @(4,R13),R2
    00002432 532B                   MOV.L       @(44,R2),R3
    00002434 1E3B                   MOV.L       R3,@(44,R14)
    00002436 52D1                   MOV.L       @(4,R13),R2
    00002438 032E                   MOV.L       @(R0,R2),R3
    0000243A 0E36                   MOV.L       R3,@(R0,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000243C 52D1                   MOV.L       @(4,R13),R2
    0000243E 5322                   MOV.L       @(8,R2),R3
    00002440 1E32                   MOV.L       R3,@(8,R14)
    00002442 54D1                   MOV.L       @(4,R13),R4
    00002444 5348                   MOV.L       @(32,R4),R3
    00002446 5247                   MOV.L       @(28,R4),R2
    00002448 5149                   MOV.L       @(36,R4),R1
    0000244A 323C                   ADD         R3,R2
    0000244C 321C                   ADD         R1,R2
    0000244E 1E27                   MOV.L       R2,@(28,R14)
    00002450 E504                   MOV         #4,R5
    00002452 6423                   MOV         R2,R4
    00002454 4A0B                   JSR         @R10
    00002456 7401                   ADD         #1,R4
    00002458 E148                   MOV         #72,R1
    0000245A 31EC                   ADD         R14,R1
    0000245C 2102                   MOV.L       R0,@R1
      simplexC.c  1279        if(modelToSolve->is2fasesNeeded)
    0000245E 53E2                   MOV.L       @(8,R14),R3
    00002460 2338                   TST         R3,R3
    00002462 8906                   BT          L1319
      simplexC.c  1280        {
      simplexC.c  1281            modelToSolve->funcObjtValues2Fases=calloc(modelToSolve->nVariables+1,sizeof(float));
    00002464 54E7                   MOV.L       @(28,R14),R4
    00002466 E504                   MOV         #4,R5
    00002468 4A0B                   JSR         @R10
    0000246A 7401                   ADD         #1,R4
    0000246C E14C                   MOV         #76,R1
    0000246E 31EC                   ADD         R14,R1
    00002470 2102                   MOV.L       R0,@R1
    00002472              L1319:                            
      simplexC.c  1282        }
      simplexC.c  1283        modelToSolve->idSlopeVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00002472 E504                   MOV         #4,R5
    00002474 4A0B                   JSR         @R10
    00002476 54E7                   MOV.L       @(28,R14),R4
    00002478 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1284        modelToSolve->id2fasesVariables=calloc(modelToSolve->nVariables,sizeof(int));
    0000247A E504                   MOV         #4,R5
    0000247C 4A0B                   JSR         @R10
    0000247E 54E7                   MOV.L       @(28,R14),R4
    00002480 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1285        modelToSolve->idConstraintToSlopeVar=calloc(modelToSolve->nConstraints,sizeof(int));
    00002482 E504                   MOV         #4,R5
    00002484 4A0B                   JSR         @R10
    00002486 54EB                   MOV.L       @(44,R14),R4
    00002488 1E0F                   MOV.L       R0,@(60,R14)
      simplexC.c  1286        modelToSolve->idConstraintTo2fasesVar=calloc(modelToSolve->nConstraints,sizeof(int));
    0000248A E504                   MOV         #4,R5
    0000248C 4A0B                   JSR         @R10
    0000248E 54EB                   MOV.L       @(44,R14),R4
      simplexC.c  1287        memset(modelToSolve->idConstraintTo2fasesVar,-1,sizeof(modelToSolve->idConstraintTo2fasesVar));
    00002490 D364                   MOV.L       L1423+12,R3; _memset
    00002492 E140                   MOV         #64,R1
    00002494 31EC                   ADD         R14,R1
    00002496 E604                   MOV         #4,R6
    00002498 2102                   MOV.L       R0,@R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000249A E5FF                   MOV         #-1,R5
    0000249C E040                   MOV         #64,R0
    0000249E 430B                   JSR         @R3
    000024A0 04EE                   MOV.L       @(R0,R14),R4
      simplexC.c  1288        memset(modelToSolve->idConstraintToSlopeVar,-1,sizeof(modelToSolve->idConstraintToSlopeVar));
    000024A2 E604                   MOV         #4,R6
    000024A4 D25F                   MOV.L       L1423+12,R2; _memset
    000024A6 E5FF                   MOV         #-1,R5
    000024A8 420B                   JSR         @R2
    000024AA 54EF                   MOV.L       @(60,R14),R4
      simplexC.c  1289        //SET ID TYPES OF VARIABLES
      simplexC.c  1290        for(i=0;i<modelToSolve->nVariables;i++)
    000024AC E501                   MOV         #1,R5
    000024AE A018                   BRA         L1320
    000024B0 64B3                   MOV         R11,R4
    000024B2              L1321:                            
      simplexC.c  1291        {
      simplexC.c  1292            if(i>=ex.initialProblemStatement->nVariables && i<ex.initialProblemStatement->nVariables+ex.initia
                         +lProblemStatement->nVariablesSlope)
    000024B2 57D1                   MOV.L       @(4,R13),R7
    000024B4 5677                   MOV.L       @(28,R7),R6
    000024B6 3463                   CMP/GE      R6,R4
    000024B8 8B08                   BF          L1322
    000024BA 5378                   MOV.L       @(32,R7),R3
    000024BC 336C                   ADD         R6,R3
    000024BE 3433                   CMP/GE      R3,R4
    000024C0 8904                   BT          L1322
      simplexC.c  1293            {
      simplexC.c  1294                modelToSolve->idSlopeVariables[i]=1;
    000024C2 6343                   MOV         R4,R3
    000024C4 50ED                   MOV.L       @(52,R14),R0
    000024C6 4308                   SHLL2       R3
    000024C8 A00A                   BRA         L1323
    000024CA 0356                   MOV.L       R5,@(R0,R3)
    000024CC              L1322:                            
      simplexC.c  1295            }else if(i>=ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope)
    000024CC 56D1                   MOV.L       @(4,R13),R6
    000024CE 5368                   MOV.L       @(32,R6),R3
    000024D0 5267                   MOV.L       @(28,R6),R2
    000024D2 323C                   ADD         R3,R2
    000024D4 3423                   CMP/GE      R2,R4
    000024D6 8B03                   BF          L1323
      simplexC.c  1296            {
      simplexC.c  1297                modelToSolve->id2fasesVariables[i]=1;
    000024D8 50EE                   MOV.L       @(56,R14),R0
    000024DA 6243                   MOV         R4,R2
    000024DC 4208                   SHLL2       R2
    000024DE 0256                   MOV.L       R5,@(R0,R2)
    000024E0              L1323:                            
    000024E0 7401                   ADD         #1,R4
    000024E2              L1320:                            
    000024E2 53E7                   MOV.L       @(28,R14),R3
    000024E4 3433                   CMP/GE      R3,R4
    000024E6 8BE4                   BF          L1321
      simplexC.c  1298            }
      simplexC.c  1299            
      simplexC.c  1300        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1301        for(i=0;i<modelToSolve->nVariables;i++)
    000024E8 A03D                   BRA         L1325
    000024EA 64B3                   MOV         R11,R4
    000024EC              L1326:                            
      simplexC.c  1302        {
      simplexC.c  1303            if(modelToSolve->idSlopeVariables[i])
    000024EC 50ED                   MOV.L       @(52,R14),R0
    000024EE 6243                   MOV         R4,R2
    000024F0 4208                   SHLL2       R2
    000024F2 032E                   MOV.L       @(R0,R2),R3
    000024F4 2338                   TST         R3,R3
    000024F6 8917                   BT          L1327
      simplexC.c  1304            {
      simplexC.c  1305                for(j=nextConstraintSlopeSet;j<modelToSolve->nConstraints;j++)
    000024F8 A013                   BRA         L1328
    000024FA 6593                   MOV         R9,R5
    000024FC              L1329:                            
      simplexC.c  1306                {
      simplexC.c  1307                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_LESS_OR_EQUAL_THAN ||ex.initialProb
                         +lemStatement->inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    000024FC 50D1                   MOV.L       @(4,R13),R0
    000024FE 6653                   MOV         R5,R6
    00002500 5006                   MOV.L       @(24,R0),R0
    00002502 4608                   SHLL2       R6
    00002504 066E                   MOV.L       @(R0,R6),R6
    00002506 6063                   MOV         R6,R0
    00002508 8801                   CMP/EQ      #1,R0
    0000250A 8902                   BT          L1331
    0000250C 6063                   MOV         R6,R0
    0000250E 8802                   CMP/EQ      #2,R0
    00002510 8B06                   BF          L1330
    00002512              L1331:                            
      simplexC.c  1308                    {
      simplexC.c  1309                        modelToSolve->idConstraintToSlopeVar[j]=i;
    00002512 6353                   MOV         R5,R3
    00002514 50EF                   MOV.L       @(60,R14),R0
      simplexC.c  1310                        nextConstraintSlopeSet=j+1;
    00002516 6953                   MOV         R5,R9
    00002518 4308                   SHLL2       R3
    0000251A 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1311                        break;
    0000251C A004                   BRA         L1327
    0000251E 7901                   ADD         #1,R9
    00002520              L1330:                            
    00002520 7501                   ADD         #1,R5
    00002522              L1328:                            
    00002522 53EB                   MOV.L       @(44,R14),R3
    00002524 3533                   CMP/GE      R3,R5
    00002526 8BE9                   BF          L1329
    00002528              L1327:                            
      simplexC.c  1312                    }
      simplexC.c  1313                }
      simplexC.c  1314            }
      simplexC.c  1315            if(modelToSolve->id2fasesVariables[i])
    00002528 50EE                   MOV.L       @(56,R14),R0
    0000252A 6143                   MOV         R4,R1
    0000252C 4108                   SHLL2       R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000252E 031E                   MOV.L       @(R0,R1),R3
    00002530 2338                   TST         R3,R3
    00002532 8917                   BT          L1333
      simplexC.c  1316            {
      simplexC.c  1317                for(j=nextConstraint2fasesSet;j<modelToSolve->nConstraints;j++)
    00002534 A013                   BRA         L1334
    00002536 65C3                   MOV         R12,R5
    00002538              L1335:                            
      simplexC.c  1318                {
      simplexC.c  1319                    if(ex.initialProblemStatement->inequalitySigns[j]==INE_EQUAL ||ex.initialProblemStatement-
                         +>inequalitySigns[j]==INE_GREATER_OR_EQUAL_THAN)
    00002538 50D1                   MOV.L       @(4,R13),R0
    0000253A 6653                   MOV         R5,R6
    0000253C 5006                   MOV.L       @(24,R0),R0
    0000253E 4608                   SHLL2       R6
    00002540 066E                   MOV.L       @(R0,R6),R6
    00002542 2668                   TST         R6,R6
    00002544 8902                   BT          L1337
    00002546 6063                   MOV         R6,R0
    00002548 8802                   CMP/EQ      #2,R0
    0000254A 8B07                   BF          L1336
    0000254C              L1337:                            
      simplexC.c  1320                    {
      simplexC.c  1321                        modelToSolve->idConstraintTo2fasesVar[j]=i;
    0000254C 6353                   MOV         R5,R3
    0000254E 4308                   SHLL2       R3
    00002550 E040                   MOV         #64,R0
      simplexC.c  1322                        nextConstraint2fasesSet=j+1;
    00002552 6C53                   MOV         R5,R12
    00002554 00EE                   MOV.L       @(R0,R14),R0
    00002556 0346                   MOV.L       R4,@(R0,R3)
      simplexC.c  1323                        break;
    00002558 A004                   BRA         L1333
    0000255A 7C01                   ADD         #1,R12
    0000255C              L1336:                            
    0000255C 7501                   ADD         #1,R5
    0000255E              L1334:                            
    0000255E 52EB                   MOV.L       @(44,R14),R2
    00002560 3523                   CMP/GE      R2,R5
    00002562 8BE9                   BF          L1335
    00002564              L1333:                            
    00002564 7401                   ADD         #1,R4
    00002566              L1325:                            
    00002566 52E7                   MOV.L       @(28,R14),R2
    00002568 3423                   CMP/GE      R2,R4
    0000256A 8BBF                   BF          L1326
      simplexC.c  1324                    }
      simplexC.c  1325                }
      simplexC.c  1326            }
      simplexC.c  1327        }
      simplexC.c  1328        //MODIFY THE CONSTRAINTS and copy right values
      simplexC.c  1329        modelToSolve->constraints=(float **)malloc(sizeof(float) * modelToSolve->nConstraints);
    0000256C 54EB                   MOV.L       @(44,R14),R4
    0000256E D22A                   MOV.L       L1423,R2   ; _malloc
    00002570 420B                   JSR         @R2
    00002572 4408                   SHLL2       R4
    00002574 1E04                   MOV.L       R0,@(16,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1330        modelToSolve->rightValues=calloc(modelToSolve->nConstraints,sizeof(float));
    00002576 E504                   MOV         #4,R5
    00002578 4A0B                   JSR         @R10
    0000257A 54EB                   MOV.L       @(44,R14),R4
    0000257C 1E05                   MOV.L       R0,@(20,R14)
      simplexC.c  1331        modelToSolve->inequalitySigns=calloc(modelToSolve->nConstraints,sizeof(int));
    0000257E E504                   MOV         #4,R5
    00002580 4A0B                   JSR         @R10
    00002582 54EB                   MOV.L       @(44,R14),R4
    00002584 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1332        modelToSolve->idIntegerVariables=calloc(modelToSolve->nVariables,sizeof(int));
    00002586 E504                   MOV         #4,R5
    00002588 4A0B                   JSR         @R10
    0000258A 54E7                   MOV.L       @(28,R14),R4
    0000258C 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1333    
      simplexC.c  1334        for(i=0;i<modelToSolve->nConstraints;i++)
    0000258E A070                   BRA         L1339
    00002590 69B3                   MOV         R11,R9
    00002592              L1340:                            
      simplexC.c  1335        {
      simplexC.c  1336            modelToSolve->constraints[i]=calloc(modelToSolve->nVariables,sizeof(float));
    00002592 6293                   MOV         R9,R2
    00002594 58E4                   MOV.L       @(16,R14),R8
    00002596 E504                   MOV         #4,R5
    00002598 4208                   SHLL2       R2
    0000259A 382C                   ADD         R2,R8
    0000259C 4A0B                   JSR         @R10
    0000259E 54E7                   MOV.L       @(28,R14),R4
    000025A0 2802                   MOV.L       R0,@R8
      simplexC.c  1337            for(j=0;j<modelToSolve->nVariables;j++)
    000025A2 64B3                   MOV         R11,R4
    000025A4 6C93                   MOV         R9,R12
    000025A6 A058                   BRA         L1341
    000025A8 4C08                   SHLL2       R12
    000025AA              L1342:                            
      simplexC.c  1338            {
      simplexC.c  1339                if(j<ex.initialProblemStatement->nVariables)//Copiar variables de entrada
    000025AA 52D1                   MOV.L       @(4,R13),R2
    000025AC 5327                   MOV.L       @(28,R2),R3
    000025AE 3433                   CMP/GE      R3,R4
    000025B0 8910                   BT          L1343
      simplexC.c  1340                {
      simplexC.c  1341                    modelToSolve->constraints[i][j]=ex.initialProblemStatement->constraints[i][j];
    000025B2 6543                   MOV         R4,R5
    000025B4 50E4                   MOV.L       @(16,R14),R0
    000025B6 4508                   SHLL2       R5
    000025B8 03CE                   MOV.L       @(R0,R12),R3
    000025BA 335C                   ADD         R5,R3
    000025BC 50D1                   MOV.L       @(4,R13),R0
    000025BE 5004                   MOV.L       @(16,R0),R0
    000025C0 00CE                   MOV.L       @(R0,R12),R0
    000025C2 025E                   MOV.L       @(R0,R5),R2
    000025C4 2322                   MOV.L       R2,@R3
      simplexC.c  1342                    modelToSolve->idIntegerVariables[i]=ex.initialProblemStatement->idIntegerVariables[i];
    000025C6 51EC                   MOV.L       @(48,R14),R1
    000025C8 53D1                   MOV.L       @(4,R13),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000025CA 31CC                   ADD         R12,R1
    000025CC 503C                   MOV.L       @(48,R3),R0
    000025CE 02CE                   MOV.L       @(R0,R12),R2
    000025D0 A042                   BRA         L1344
    000025D2 2122                   MOV.L       R2,@R1
    000025D4              L1343:                            
      simplexC.c  1343                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_LESS_OR_EQUAL_THAN && j==modelToS
                         +olve->idConstraintToSlopeVar[i])
    000025D4 50D1                   MOV.L       @(4,R13),R0
    000025D6 5006                   MOV.L       @(24,R0),R0
    000025D8 00CE                   MOV.L       @(R0,R12),R0
    000025DA 8801                   CMP/EQ      #1,R0
    000025DC 8B0B                   BF          L1345
    000025DE 50EF                   MOV.L       @(60,R14),R0
    000025E0 02CE                   MOV.L       @(R0,R12),R2
    000025E2 3420                   CMP/EQ      R2,R4
    000025E4 8B07                   BF          L1345
      simplexC.c  1344                {
      simplexC.c  1345                    modelToSolve->constraints[i][j]=1;
    000025E6 6343                   MOV         R4,R3
    000025E8 D10F                   MOV.L       L1423+16,R1; H'3F800000
    000025EA 4308                   SHLL2       R3
    000025EC 50E4                   MOV.L       @(16,R14),R0
    000025EE 02CE                   MOV.L       @(R0,R12),R2
    000025F0 323C                   ADD         R3,R2
    000025F2 A00F                   BRA         L1393
    000025F4 0009                   NOP
    000025F6              L1345:                            
      simplexC.c  1346                }else if(ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN && j==model
                         +ToSolve->idConstraintToSlopeVar[i])
    000025F6 50D1                   MOV.L       @(4,R13),R0
    000025F8 5006                   MOV.L       @(24,R0),R0
    000025FA 00CE                   MOV.L       @(R0,R12),R0
    000025FC 8802                   CMP/EQ      #2,R0
    000025FE 8B17                   BF          L1347
    00002600 50EF                   MOV.L       @(60,R14),R0
    00002602 02CE                   MOV.L       @(R0,R12),R2
    00002604 3420                   CMP/EQ      R2,R4
    00002606 8B13                   BF          L1347
      simplexC.c  1347                {
      simplexC.c  1348                    modelToSolve->constraints[i][j]=-1;
    00002608 50E4                   MOV.L       @(16,R14),R0
    0000260A 6343                   MOV         R4,R3
    0000260C D107                   MOV.L       L1423+20,R1; H'BF800000
    0000260E 4308                   SHLL2       R3
    00002610 02CE                   MOV.L       @(R0,R12),R2
    00002612 323C                   ADD         R3,R2
    00002614              L1393:                            
    00002614 A020                   BRA         L1344
    00002616 2212                   MOV.L       R1,@R2
    00002618              L1423:                            
    00002618 <00000000>             .DATA.L     _malloc
    0000261C <00000000>             .DATA.L     _ex
    00002620 <00000000>             .DATA.L     _calloc
    00002624 <00000000>             .DATA.L     _memset
    00002628 3F800000               .DATA.L     H'3F800000
    0000262C BF800000               .DATA.L     H'BF800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002630              L1347:                            
      simplexC.c  1349                }else if((ex.initialProblemStatement->inequalitySigns[i]==INE_GREATER_OR_EQUAL_THAN || ex.init
                         +ialProblemStatement->inequalitySigns[i]==INE_EQUAL)&& j==modelToSolve->idConstraintTo2fasesVar[i])
    00002630 50D1                   MOV.L       @(4,R13),R0
    00002632 5006                   MOV.L       @(24,R0),R0
    00002634 00CE                   MOV.L       @(R0,R12),R0
    00002636 8802                   CMP/EQ      #2,R0
    00002638 8D02                   BT/S        L1350
    0000263A 6503                   MOV         R0,R5
    0000263C 2558                   TST         R5,R5
    0000263E 8B0B                   BF          L1344
    00002640              L1350:                            
    00002640 E040                   MOV         #64,R0
    00002642 00EE                   MOV.L       @(R0,R14),R0
    00002644 03CE                   MOV.L       @(R0,R12),R3
    00002646 3430                   CMP/EQ      R3,R4
    00002648 8B06                   BF          L1344
      simplexC.c  1350                {
      simplexC.c  1351                    modelToSolve->constraints[i][j]=1;
    0000264A 6243                   MOV         R4,R2
    0000264C D17D                   MOV.L       L1424,R1   ; H'3F800000
    0000264E 4208                   SHLL2       R2
    00002650 50E4                   MOV.L       @(16,R14),R0
    00002652 03CE                   MOV.L       @(R0,R12),R3
    00002654 332C                   ADD         R2,R3
    00002656 2312                   MOV.L       R1,@R3
    00002658              L1344:                            
    00002658 7401                   ADD         #1,R4
    0000265A              L1341:                            
    0000265A 53E7                   MOV.L       @(28,R14),R3
    0000265C 3433                   CMP/GE      R3,R4
    0000265E 8BA4                   BF          L1342
      simplexC.c  1352                }
      simplexC.c  1353                //Cualquier otro caso tiene un 0 por calloc
      simplexC.c  1354            }
      simplexC.c  1355            modelToSolve->rightValues[i]=ex.initialProblemStatement->rightValues[i];
    00002660 51E5                   MOV.L       @(20,R14),R1
    00002662 6493                   MOV         R9,R4
    00002664 53D1                   MOV.L       @(4,R13),R3
    00002666 4408                   SHLL2       R4
    00002668 5035                   MOV.L       @(20,R3),R0
    0000266A 7901                   ADD         #1,R9
    0000266C 024E                   MOV.L       @(R0,R4),R2
    0000266E 314C                   ADD         R4,R1
    00002670 2122                   MOV.L       R2,@R1
    00002672              L1339:                            
    00002672 53EB                   MOV.L       @(44,R14),R3
    00002674 3933                   CMP/GE      R3,R9
    00002676 8B8C                   BF          L1340
      simplexC.c  1356        }
      simplexC.c  1357    
      simplexC.c  1358        //Create new obj funct
      simplexC.c  1359        for(i=0;i<modelToSolve->nVariables;i++)
    00002678 A01B                   BRA         L1351
    0000267A 64B3                   MOV         R11,R4
    0000267C              L1352:                            
    0000267C 5CD1                   MOV.L       @(4,R13),R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000267E 52C7                   MOV.L       @(28,R12),R2
    00002680 3423                   CMP/GE      R2,R4
    00002682 890A                   BT          L1353
      simplexC.c  1360        {
      simplexC.c  1361            if(i<ex.initialProblemStatement->nVariables)
      simplexC.c  1362            {
      simplexC.c  1363                modelToSolve->funcObjtValues[i]=ex.initialProblemStatement->funcObjtValues[i];
    00002684 6543                   MOV         R4,R5
    00002686 4508                   SHLL2       R5
    00002688 E048                   MOV         #72,R0
    0000268A 00EE                   MOV.L       @(R0,R14),R0
    0000268C 6203                   MOV         R0,R2
    0000268E 325C                   ADD         R5,R2
    00002690 E048                   MOV         #72,R0
    00002692 00CE                   MOV.L       @(R0,R12),R0
    00002694 035E                   MOV.L       @(R0,R5),R3
    00002696 A00B                   BRA         L1354
    00002698 2232                   MOV.L       R3,@R2
    0000269A              L1353:                            
      simplexC.c  1364            }else if(i>=(ex.initialProblemStatement->nVariables+ex.initialProblemStatement->nVariablesSlope))
    0000269A 53C8                   MOV.L       @(32,R12),R3
    0000269C 52C7                   MOV.L       @(28,R12),R2
    0000269E 323C                   ADD         R3,R2
    000026A0 3423                   CMP/GE      R2,R4
    000026A2 8B05                   BF          L1354
      simplexC.c  1365            {
      simplexC.c  1366                modelToSolve->funcObjtValues2Fases[i]=1;
    000026A4 D367                   MOV.L       L1424,R3   ; H'3F800000
    000026A6 6243                   MOV         R4,R2
    000026A8 4208                   SHLL2       R2
    000026AA E04C                   MOV         #76,R0
    000026AC 00EE                   MOV.L       @(R0,R14),R0
    000026AE 0236                   MOV.L       R3,@(R0,R2)
    000026B0              L1354:                            
    000026B0 7401                   ADD         #1,R4
    000026B2              L1351:                            
    000026B2 52E7                   MOV.L       @(28,R14),R2
    000026B4 3423                   CMP/GE      R2,R4
    000026B6 8BE1                   BF          L1352
      simplexC.c  1367            }
      simplexC.c  1368        }
      simplexC.c  1369    
      simplexC.c  1370        //Create aj vectors
      simplexC.c  1371        ex.ajVector=calloc(modelToSolve->nVariables,sizeof(float*));
    000026B8 E504                   MOV         #4,R5
    000026BA 4A0B                   JSR         @R10
    000026BC 54E7                   MOV.L       @(28,R14),R4
    000026BE 1D0D                   MOV.L       R0,@(52,R13)
      simplexC.c  1372        for(i=0;i<modelToSolve->nVariables;i++)
    000026C0 A018                   BRA         L1356
    000026C2 69B3                   MOV         R11,R9
    000026C4              L1357:                            
      simplexC.c  1373        {
      simplexC.c  1374            ex.ajVector[i]=calloc(modelToSolve->nConstraints,sizeof(float));
    000026C4 58DD                   MOV.L       @(52,R13),R8
    000026C6 E504                   MOV         #4,R5
    000026C8 6C93                   MOV         R9,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000026CA 4C08                   SHLL2       R12
    000026CC 38CC                   ADD         R12,R8
    000026CE 4A0B                   JSR         @R10
    000026D0 54EB                   MOV.L       @(44,R14),R4
    000026D2 2802                   MOV.L       R0,@R8
      simplexC.c  1375            for(j=0;j<modelToSolve->nConstraints;j++)
    000026D4 A00A                   BRA         L1358
    000026D6 64B3                   MOV         R11,R4
    000026D8              L1359:                            
      simplexC.c  1376            {
      simplexC.c  1377                ex.ajVector[i][j]=modelToSolve->constraints[j][i];
    000026D8 50DD                   MOV.L       @(52,R13),R0
    000026DA 6543                   MOV         R4,R5
    000026DC 02CE                   MOV.L       @(R0,R12),R2
    000026DE 4508                   SHLL2       R5
    000026E0 50E4                   MOV.L       @(16,R14),R0
    000026E2 7401                   ADD         #1,R4
    000026E4 005E                   MOV.L       @(R0,R5),R0
    000026E6 325C                   ADD         R5,R2
    000026E8 03CE                   MOV.L       @(R0,R12),R3
    000026EA 2232                   MOV.L       R3,@R2
    000026EC              L1358:                            
    000026EC 52EB                   MOV.L       @(44,R14),R2
    000026EE 3423                   CMP/GE      R2,R4
    000026F0 8BF2                   BF          L1359
    000026F2 7901                   ADD         #1,R9
    000026F4              L1356:                            
    000026F4 52E7                   MOV.L       @(28,R14),R2
    000026F6 3923                   CMP/GE      R2,R9
    000026F8 8BE4                   BF          L1357
      simplexC.c  1378            }
      simplexC.c  1379        }
      simplexC.c  1380        modelToSolve->ajVector=ex.ajVector;
    000026FA E050                   MOV         #80,R0
    000026FC 51DD                   MOV.L       @(52,R13),R1
    000026FE 0E16                   MOV.L       R1,@(R0,R14)
      simplexC.c  1381        modelToSolve->funcObjtValues[modelToSolve->nVariables]=ex.initialProblemStatement->funcObjtValues[ex.i
                         +nitialProblemStatement->nVariables];
    00002700 53E7                   MOV.L       @(28,R14),R3
    00002702 E048                   MOV         #72,R0
    00002704 54D1                   MOV.L       @(4,R13),R4
    00002706 4308                   SHLL2       R3
    00002708 00EE                   MOV.L       @(R0,R14),R0
    0000270A 330C                   ADD         R0,R3
    0000270C 5247                   MOV.L       @(28,R4),R2
    0000270E E048                   MOV         #72,R0
    00002710 004E                   MOV.L       @(R0,R4),R0
    00002712 4208                   SHLL2       R2
    00002714 012E                   MOV.L       @(R0,R2),R1
      simplexC.c  1382        modelToSolve->modelType=TYPE_SOLVE;
    00002716 E202                   MOV         #2,R2
    00002718 2312                   MOV.L       R1,@R3
      simplexC.c  1383        ex.canonicalStatement=modelToSolve;
      simplexC.c  1384        ex.nVariables=modelToSolve->nVariables;
      simplexC.c  1385        ex.nConstraints=modelToSolve->nConstraints;
      simplexC.c  1386        return 0;
    0000271A E000                   MOV         #0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000271C 1E21                   MOV.L       R2,@(4,R14)
    0000271E 1DE2                   MOV.L       R14,@(8,R13)
    00002720 53E7                   MOV.L       @(28,R14),R3
    00002722 1D3B                   MOV.L       R3,@(44,R13)
    00002724 52EB                   MOV.L       @(44,R14),R2
    00002726 1D2C                   MOV.L       R2,@(48,R13)
      simplexC.c  1387    }
    00002728 4F26                   LDS.L       @R15+,PR
    0000272A 68F6                   MOV.L       @R15+,R8
    0000272C 69F6                   MOV.L       @R15+,R9
    0000272E 6AF6                   MOV.L       @R15+,R10
    00002730 6BF6                   MOV.L       @R15+,R11
    00002732 6CF6                   MOV.L       @R15+,R12
    00002734 6DF6                   MOV.L       @R15+,R13
    00002736 000B                   RTS
    00002738 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1388    
      simplexC.c  1389    struct problemStatement* createProblemStatementToDebug2Fases()
    0000273A              _createProblemStatementToDebug2Fases:
                                                           ; function: createProblemStatementToDebug2Fases
                                                           ; frame size=28
      simplexC.c  1390    {
      simplexC.c  1391        struct problemStatement *res;
      simplexC.c  1392        int nConstraints;
      simplexC.c  1393        int nVariables;
      simplexC.c  1394        nConstraints=3;
    0000273A E303                   MOV         #3,R3
    0000273C 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1395        nVariables=2;
    0000273E E202                   MOV         #2,R2
    00002740 2FD6                   MOV.L       R13,@-R15
    00002742 2FC6                   MOV.L       R12,@-R15
    00002744 2F86                   MOV.L       R8,@-R15
    00002746 4F22                   STS.L       PR,@-R15
    00002748 7FF8                   ADD         #-8,R15
    0000274A 1F31                   MOV.L       R3,@(4,R15)
    0000274C 2F22                   MOV.L       R2,@R15
      simplexC.c  1396        res= malloc(sizeof(struct problemStatement));
    0000274E D33E                   MOV.L       L1424+4,R3 ; _malloc
    00002750 430B                   JSR         @R3
    00002752 E454                   MOV         #84,R4
      simplexC.c  1397        res->modelType=TYPE_INPUT;
      simplexC.c  1398        res->nConstraints=nConstraints;
      simplexC.c  1399        res->nVariables=nVariables;
      simplexC.c  1400        res->nVariables2fases=1;
      simplexC.c  1401        res ->nVariablesSlope=2;
      simplexC.c  1402        res->problemType=TYPE_LP;
      simplexC.c  1403        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00002754 DC3D                   MOV.L       L1424+8,R12; _calloc
    00002756 E504                   MOV         #4,R5
    00002758 6E03                   MOV         R0,R14
    0000275A ED01                   MOV         #1,R13
    0000275C 1ED1                   MOV.L       R13,@(4,R14)
    0000275E 52F1                   MOV.L       @(4,R15),R2
    00002760 1E2B                   MOV.L       R2,@(44,R14)
    00002762 63F2                   MOV.L       @R15,R3
    00002764 1E37                   MOV.L       R3,@(28,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002766 E302                   MOV         #2,R3
    00002768 1ED9                   MOV.L       R13,@(36,R14)
    0000276A 1E38                   MOV.L       R3,@(32,R14)
    0000276C 2ED2                   MOV.L       R13,@R14
    0000276E 4C0B                   JSR         @R12
    00002770 E403                   MOV         #3,R4
    00002772 E148                   MOV         #72,R1
    00002774 31EC                   ADD         R14,R1
      simplexC.c  1404        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    00002776 E504                   MOV         #4,R5
    00002778 2102                   MOV.L       R0,@R1
    0000277A 4C0B                   JSR         @R12
    0000277C E402                   MOV         #2,R4
      simplexC.c  1405        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    0000277E E504                   MOV         #4,R5
    00002780 1E0C                   MOV.L       R0,@(48,R14)
    00002782 4C0B                   JSR         @R12
    00002784 E402                   MOV         #2,R4
      simplexC.c  1406        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    00002786 E504                   MOV         #4,R5
    00002788 1E0D                   MOV.L       R0,@(52,R14)
    0000278A 4C0B                   JSR         @R12
    0000278C E402                   MOV         #2,R4
      simplexC.c  1407        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    0000278E E504                   MOV         #4,R5
    00002790 1E0E                   MOV.L       R0,@(56,R14)
    00002792 4C0B                   JSR         @R12
    00002794 E403                   MOV         #3,R4
      simplexC.c  1408        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
    00002796 6303                   MOV         R0,R3
    00002798 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1409        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1410        res->inequalitySigns[2]=INE_EQUAL;
      simplexC.c  1411        res->funcObjectivePurpose=FUNC_MAXIMIZE;
      simplexC.c  1412        res->funcObjtValues[0]=3;
      simplexC.c  1413        res->funcObjtValues[1]=5;
      simplexC.c  1414        res->funcObjtValues[2]=0;
      simplexC.c  1415        res->constraints=calloc(nConstraints,sizeof(float));
    0000279A E504                   MOV         #4,R5
    0000279C 23D2                   MOV.L       R13,@R3
    0000279E E044                   MOV         #68,R0
    000027A0 52E6                   MOV.L       @(24,R14),R2
    000027A2 12D1                   MOV.L       R13,@(4,R2)
    000027A4 53E6                   MOV.L       @(24,R14),R3
    000027A6 E200                   MOV         #0,R2
    000027A8 1322                   MOV.L       R2,@(8,R3)
    000027AA 0ED6                   MOV.L       R13,@(R0,R14)
    000027AC D228                   MOV.L       L1424+12,R2; H'40400000
    000027AE E048                   MOV         #72,R0
    000027B0 03EE                   MOV.L       @(R0,R14),R3
    000027B2 2322                   MOV.L       R2,@R3
    000027B4 03EE                   MOV.L       @(R0,R14),R3
    000027B6 D227                   MOV.L       L1424+16,R2; H'40A00000
    000027B8 1321                   MOV.L       R2,@(4,R3)
    000027BA E200                   MOV         #0,R2
    000027BC 03EE                   MOV.L       @(R0,R14),R3
    000027BE 1322                   MOV.L       R2,@(8,R3)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000027C0 4C0B                   JSR         @R12
    000027C2 E403                   MOV         #3,R4
    000027C4 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1416        res->constraints[0]=calloc(nVariables,sizeof(float));
    000027C6 6803                   MOV         R0,R8
    000027C8 E504                   MOV         #4,R5
    000027CA 4C0B                   JSR         @R12
    000027CC E402                   MOV         #2,R4
      simplexC.c  1417        res->constraints[1]=calloc(nVariables,sizeof(float));
    000027CE E504                   MOV         #4,R5
    000027D0 2802                   MOV.L       R0,@R8
    000027D2 58E4                   MOV.L       @(16,R14),R8
    000027D4 7804                   ADD         #4,R8
    000027D6 4C0B                   JSR         @R12
    000027D8 E402                   MOV         #2,R4
      simplexC.c  1418        res->constraints[2]=calloc(nVariables,sizeof(float));
    000027DA E504                   MOV         #4,R5
    000027DC 2802                   MOV.L       R0,@R8
    000027DE 58E4                   MOV.L       @(16,R14),R8
    000027E0 7808                   ADD         #8,R8
    000027E2 4C0B                   JSR         @R12
    000027E4 E402                   MOV         #2,R4
      simplexC.c  1419        res->constraints[0][0]=1;
      simplexC.c  1420        res->constraints[0][1]=0;
      simplexC.c  1421        res->constraints[1][0]=0;
      simplexC.c  1422        res->constraints[1][1]=2;
      simplexC.c  1423        res->constraints[2][0]=3;
      simplexC.c  1424        res->constraints[2][1]=2;
      simplexC.c  1425        res->rightValues=calloc(nConstraints,sizeof(float));
    000027E6 E504                   MOV         #4,R5
    000027E8 2802                   MOV.L       R0,@R8
    000027EA 53E4                   MOV.L       @(16,R14),R3
    000027EC D115                   MOV.L       L1424,R1   ; H'3F800000
    000027EE 6232                   MOV.L       @R3,R2
    000027F0 2212                   MOV.L       R1,@R2
    000027F2 E100                   MOV         #0,R1
    000027F4 53E4                   MOV.L       @(16,R14),R3
    000027F6 6232                   MOV.L       @R3,R2
    000027F8 1211                   MOV.L       R1,@(4,R2)
    000027FA 53E4                   MOV.L       @(16,R14),R3
    000027FC 5231                   MOV.L       @(4,R3),R2
    000027FE 2212                   MOV.L       R1,@R2
    00002800 53E4                   MOV.L       @(16,R14),R3
    00002802 5231                   MOV.L       @(4,R3),R2
    00002804 D114                   MOV.L       L1424+20,R1; H'40000000
    00002806 1211                   MOV.L       R1,@(4,R2)
    00002808 53E4                   MOV.L       @(16,R14),R3
    0000280A 5232                   MOV.L       @(8,R3),R2
    0000280C D110                   MOV.L       L1424+12,R1; H'40400000
    0000280E 2212                   MOV.L       R1,@R2
    00002810 53E4                   MOV.L       @(16,R14),R3
    00002812 4118                   SHLL8       R1
    00002814 5232                   MOV.L       @(8,R3),R2
    00002816 1211                   MOV.L       R1,@(4,R2)
    00002818 4C0B                   JSR         @R12
    0000281A E403                   MOV         #3,R4
    0000281C 1E05                   MOV.L       R0,@(20,R14)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1426        res->rightValues[0]=4;
    0000281E 6303                   MOV         R0,R3
    00002820 D20E                   MOV.L       L1424+24,R2; H'40800000
      simplexC.c  1427        res->rightValues[1]=12;
      simplexC.c  1428        res->rightValues[2]=18;
      simplexC.c  1429        res->nVariables2fases=1;
      simplexC.c  1430        res->is2fasesNeeded=1;
      simplexC.c  1431    
      simplexC.c  1432        return res;
    00002822 60E3                   MOV         R14,R0
    00002824 2322                   MOV.L       R2,@R3
    00002826 53E5                   MOV.L       @(20,R14),R3
    00002828 D20D                   MOV.L       L1424+28,R2; H'41400000
    0000282A 1321                   MOV.L       R2,@(4,R3)
    0000282C 53E5                   MOV.L       @(20,R14),R3
    0000282E D20D                   MOV.L       L1424+32,R2; H'41900000
    00002830 1322                   MOV.L       R2,@(8,R3)
    00002832 1ED9                   MOV.L       R13,@(36,R14)
    00002834 1ED2                   MOV.L       R13,@(8,R14)
      simplexC.c  1433    }
    00002836 7F08                   ADD         #8,R15
    00002838 4F26                   LDS.L       @R15+,PR
    0000283A 68F6                   MOV.L       @R15+,R8
    0000283C 6CF6                   MOV.L       @R15+,R12
    0000283E 6DF6                   MOV.L       @R15+,R13
    00002840 000B                   RTS
    00002842 6EF6                   MOV.L       @R15+,R14
    00002844              L1424:                            
    00002844 3F800000               .DATA.L     H'3F800000
    00002848 <00000000>             .DATA.L     _malloc
    0000284C <00000000>             .DATA.L     _calloc
    00002850 40400000               .DATA.L     H'40400000
    00002854 40A00000               .DATA.L     H'40A00000
    00002858 40000000               .DATA.L     H'40000000
    0000285C 40800000               .DATA.L     H'40800000
    00002860 41400000               .DATA.L     H'41400000
    00002864 41900000               .DATA.L     H'41900000
      simplexC.c  1434    
      simplexC.c  1435    struct problemStatement* createProblemStatementToDebug()
    00002868              _createProblemStatementToDebug:  ; function: createProblemStatementToDebug
                                                           ; frame size=32
    00002868 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1436    {
      simplexC.c  1437        struct problemStatement *res;
      simplexC.c  1438        int nConstraints;
      simplexC.c  1439        int nVariables;
      simplexC.c  1440        nConstraints=3;
    0000286A E303                   MOV         #3,R3
    0000286C 2FD6                   MOV.L       R13,@-R15
      simplexC.c  1441        nVariables=2;
    0000286E E202                   MOV         #2,R2
    00002870 2FC6                   MOV.L       R12,@-R15
    00002872 2FB6                   MOV.L       R11,@-R15
    00002874 2F86                   MOV.L       R8,@-R15
    00002876 4F22                   STS.L       PR,@-R15
    00002878 7FF8                   ADD         #-8,R15
    0000287A 1F31                   MOV.L       R3,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000287C 2F22                   MOV.L       R2,@R15
      simplexC.c  1442        res= malloc(sizeof(struct problemStatement));
    0000287E D3A0                   MOV.L       L1425+2,R3 ; _malloc
    00002880 430B                   JSR         @R3
    00002882 E454                   MOV         #84,R4
      simplexC.c  1443        res->modelType=TYPE_INPUT;
      simplexC.c  1444        res->nConstraints=nConstraints;
      simplexC.c  1445        res->nVariables=nVariables;
      simplexC.c  1446        res->nVariables2fases=0;
      simplexC.c  1447        res ->nVariablesSlope=3;
      simplexC.c  1448        res->problemType=TYPE_LP;
      simplexC.c  1449        res -> funcObjtValues = calloc(nVariables+1,sizeof(float));
    00002884 DC9F                   MOV.L       L1425+6,R12; _calloc
    00002886 E504                   MOV         #4,R5
    00002888 6E03                   MOV         R0,R14
    0000288A ED01                   MOV         #1,R13
    0000288C 1ED1                   MOV.L       R13,@(4,R14)
    0000288E EB00                   MOV         #0,R11
    00002890 52F1                   MOV.L       @(4,R15),R2
    00002892 1E2B                   MOV.L       R2,@(44,R14)
    00002894 63F2                   MOV.L       @R15,R3
    00002896 1E37                   MOV.L       R3,@(28,R14)
    00002898 1EB9                   MOV.L       R11,@(36,R14)
    0000289A E303                   MOV         #3,R3
    0000289C 1E38                   MOV.L       R3,@(32,R14)
    0000289E 2ED2                   MOV.L       R13,@R14
    000028A0 4C0B                   JSR         @R12
    000028A2 6433                   MOV         R3,R4
    000028A4 E148                   MOV         #72,R1
    000028A6 31EC                   ADD         R14,R1
    000028A8 2102                   MOV.L       R0,@R1
      simplexC.c  1450        res->idIntegerVariables=calloc(nVariables,sizeof(int));
    000028AA E504                   MOV         #4,R5
    000028AC 4C0B                   JSR         @R12
    000028AE E402                   MOV         #2,R4
    000028B0 1E0C                   MOV.L       R0,@(48,R14)
      simplexC.c  1451        res->idSlopeVariables= calloc(nVariables,sizeof(int));
    000028B2 E504                   MOV         #4,R5
    000028B4 4C0B                   JSR         @R12
    000028B6 E402                   MOV         #2,R4
    000028B8 1E0D                   MOV.L       R0,@(52,R14)
      simplexC.c  1452        res->id2fasesVariables=calloc(nVariables,sizeof(int));
    000028BA E504                   MOV         #4,R5
    000028BC 4C0B                   JSR         @R12
    000028BE E402                   MOV         #2,R4
    000028C0 1E0E                   MOV.L       R0,@(56,R14)
      simplexC.c  1453        res->inequalitySigns=calloc(nConstraints,sizeof(int));
    000028C2 E504                   MOV         #4,R5
    000028C4 4C0B                   JSR         @R12
    000028C6 E403                   MOV         #3,R4
    000028C8 1E06                   MOV.L       R0,@(24,R14)
      simplexC.c  1454        res->funcObjectivePurpose=FUNC_MINIMIZE;
      simplexC.c  1455        res->funcObjtValues[0]=-4;
      simplexC.c  1456        res->funcObjtValues[1]=-6;
      simplexC.c  1457        res->funcObjtValues[2]=0;
      simplexC.c  1458        res->constraints=calloc(nConstraints,sizeof(float));
    000028CA E504                   MOV         #4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  120


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000028CC D28E                   MOV.L       L1425+10,R2; H'C0800000
    000028CE E044                   MOV         #68,R0
    000028D0 0EB6                   MOV.L       R11,@(R0,R14)
    000028D2 E048                   MOV         #72,R0
    000028D4 03EE                   MOV.L       @(R0,R14),R3
    000028D6 2322                   MOV.L       R2,@R3
    000028D8 03EE                   MOV.L       @(R0,R14),R3
    000028DA D28C                   MOV.L       L1425+14,R2; H'C0C00000
    000028DC 1321                   MOV.L       R2,@(4,R3)
    000028DE 62B3                   MOV         R11,R2
    000028E0 03EE                   MOV.L       @(R0,R14),R3
    000028E2 13B2                   MOV.L       R11,@(8,R3)
    000028E4 4C0B                   JSR         @R12
    000028E6 E403                   MOV         #3,R4
    000028E8 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1459        res->constraints[0]=calloc(nVariables,sizeof(float));
    000028EA 6803                   MOV         R0,R8
    000028EC E504                   MOV         #4,R5
    000028EE 4C0B                   JSR         @R12
    000028F0 E402                   MOV         #2,R4
      simplexC.c  1460        res->constraints[1]=calloc(nVariables,sizeof(float));
    000028F2 E504                   MOV         #4,R5
    000028F4 2802                   MOV.L       R0,@R8
    000028F6 58E4                   MOV.L       @(16,R14),R8
    000028F8 7804                   ADD         #4,R8
    000028FA 4C0B                   JSR         @R12
    000028FC E402                   MOV         #2,R4
      simplexC.c  1461        res->constraints[2]=calloc(nVariables,sizeof(float));
    000028FE E504                   MOV         #4,R5
    00002900 2802                   MOV.L       R0,@R8
    00002902 58E4                   MOV.L       @(16,R14),R8
    00002904 7808                   ADD         #8,R8
    00002906 4C0B                   JSR         @R12
    00002908 E402                   MOV         #2,R4
      simplexC.c  1462        res->constraints[0][0]=-1;
      simplexC.c  1463        res->constraints[0][1]=1;
      simplexC.c  1464        res->constraints[1][0]=1;
      simplexC.c  1465        res->constraints[1][1]=1;
      simplexC.c  1466        res->constraints[2][0]=2;
      simplexC.c  1467        res->constraints[2][1]=5;
      simplexC.c  1468        res->inequalitySigns[0]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1469        res->inequalitySigns[1]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1470        res->inequalitySigns[2]=INE_LESS_OR_EQUAL_THAN;
      simplexC.c  1471        res->rightValues=calloc(nConstraints,sizeof(float));
    0000290A E504                   MOV         #4,R5
    0000290C 2802                   MOV.L       R0,@R8
    0000290E 53E4                   MOV.L       @(16,R14),R3
    00002910 D17F                   MOV.L       L1425+18,R1; H'BF800000
    00002912 6232                   MOV.L       @R3,R2
    00002914 2212                   MOV.L       R1,@R2
    00002916 53E4                   MOV.L       @(16,R14),R3
    00002918 D17E                   MOV.L       L1425+22,R1; H'3F800000
    0000291A 6232                   MOV.L       @R3,R2
    0000291C 1211                   MOV.L       R1,@(4,R2)
    0000291E 53E4                   MOV.L       @(16,R14),R3
    00002920 5231                   MOV.L       @(4,R3),R2
    00002922 2212                   MOV.L       R1,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  121


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002924 53E4                   MOV.L       @(16,R14),R3
    00002926 5231                   MOV.L       @(4,R3),R2
    00002928 1211                   MOV.L       R1,@(4,R2)
    0000292A 53E4                   MOV.L       @(16,R14),R3
    0000292C D17A                   MOV.L       L1425+26,R1; H'40000000
    0000292E 5232                   MOV.L       @(8,R3),R2
    00002930 2212                   MOV.L       R1,@R2
    00002932 53E4                   MOV.L       @(16,R14),R3
    00002934 D179                   MOV.L       L1425+30,R1; H'40A00000
    00002936 5232                   MOV.L       @(8,R3),R2
    00002938 1211                   MOV.L       R1,@(4,R2)
    0000293A 53E6                   MOV.L       @(24,R14),R3
    0000293C 23D2                   MOV.L       R13,@R3
    0000293E 52E6                   MOV.L       @(24,R14),R2
    00002940 12D1                   MOV.L       R13,@(4,R2)
    00002942 53E6                   MOV.L       @(24,R14),R3
    00002944 13D2                   MOV.L       R13,@(8,R3)
    00002946 4C0B                   JSR         @R12
    00002948 E403                   MOV         #3,R4
      simplexC.c  1472        res->rightValues[0]=11;
    0000294A 6203                   MOV         R0,R2
    0000294C D374                   MOV.L       L1425+34,R3; H'41300000
    0000294E 1E05                   MOV.L       R0,@(20,R14)
    00002950 2232                   MOV.L       R3,@R2
      simplexC.c  1473        res->rightValues[1]=27;
      simplexC.c  1474        res->rightValues[2]=90;
      simplexC.c  1475        res->nVariables2fases=0;
      simplexC.c  1476        res->is2fasesNeeded=0;
      simplexC.c  1477    
      simplexC.c  1478        return res;
    00002952 60E3                   MOV         R14,R0
    00002954 52E5                   MOV.L       @(20,R14),R2
    00002956 D373                   MOV.L       L1425+38,R3; H'41D80000
    00002958 1231                   MOV.L       R3,@(4,R2)
    0000295A 52E5                   MOV.L       @(20,R14),R2
    0000295C D372                   MOV.L       L1425+42,R3; H'42B40000
    0000295E 1232                   MOV.L       R3,@(8,R2)
    00002960 1EB9                   MOV.L       R11,@(36,R14)
    00002962 1EB2                   MOV.L       R11,@(8,R14)
      simplexC.c  1479    }
    00002964 7F08                   ADD         #8,R15
    00002966 4F26                   LDS.L       @R15+,PR
    00002968 68F6                   MOV.L       @R15+,R8
    0000296A 6BF6                   MOV.L       @R15+,R11
    0000296C 6CF6                   MOV.L       @R15+,R12
    0000296E 6DF6                   MOV.L       @R15+,R13
    00002970 000B                   RTS
    00002972 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1480    
      simplexC.c  1481    struct iteration *convertToSecondPhase(int nodeId, int firsItId)
    00002974              _convertToSecondPhase:           ; function: convertToSecondPhase
                                                           ; frame size=32
    00002974 2FE6                   MOV.L       R14,@-R15
    00002976 2FD6                   MOV.L       R13,@-R15
    00002978 2FC6                   MOV.L       R12,@-R15
      simplexC.c  1482    {
      simplexC.c  1483        int i,j;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  122


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1484        struct iteration *it,*originalIt;
      simplexC.c  1485        originalIt=ex.nodes.its[firsItId];
    0000297A 6D53                   MOV         R5,R13
      simplexC.c  1486        it = malloc(sizeof(struct iteration));
    0000297C D360                   MOV.L       L1425+2,R3 ; _malloc
    0000297E 4D08                   SHLL2       R13
    00002980 2FA6                   MOV.L       R10,@-R15
    00002982 2F96                   MOV.L       R9,@-R15
    00002984 2F86                   MOV.L       R8,@-R15
    00002986 4F22                   STS.L       PR,@-R15
    00002988 D968                   MOV.L       L1425+46,R9; _ex
    0000298A 5095                   MOV.L       @(20,R9),R0
    0000298C 0DDE                   MOV.L       @(R0,R13),R13
    0000298E 430B                   JSR         @R3
    00002990 E448                   MOV         #72,R4
    00002992 6E03                   MOV         R0,R14
      simplexC.c  1487        it->BinvSize=originalIt->BinvSize;
    00002994 52D9                   MOV.L       @(36,R13),R2
      simplexC.c  1488        it->Binv=calloc(it->BinvSize,sizeof(float));
    00002996 E504                   MOV         #4,R5
    00002998 D85A                   MOV.L       L1425+6,R8 ; _calloc
    0000299A 1E29                   MOV.L       R2,@(36,R14)
    0000299C 480B                   JSR         @R8
    0000299E 6423                   MOV         R2,R4
    000029A0 1E08                   MOV.L       R0,@(32,R14)
      simplexC.c  1489        for(i=0;i<it->BinvSize;i++)
    000029A2 EA00                   MOV         #0,R10
    000029A4 A01C                   BRA         L1363
    000029A6 6CA3                   MOV         R10,R12
    000029A8              L1364:                            
      simplexC.c  1490        {
      simplexC.c  1491            it->Binv[i]=calloc(it->BinvSize,sizeof(float));
    000029A8 50E8                   MOV.L       @(32,R14),R0
    000029AA E504                   MOV         #4,R5
    000029AC 62C3                   MOV         R12,R2
    000029AE 4208                   SHLL2       R2
    000029B0 302C                   ADD         R2,R0
    000029B2 2F06                   MOV.L       R0,@-R15
    000029B4 480B                   JSR         @R8
    000029B6 54E9                   MOV.L       @(36,R14),R4
    000029B8 63F6                   MOV.L       @R15+,R3
      simplexC.c  1492            for(j=0;j<it->BinvSize;j++)
    000029BA 64A3                   MOV         R10,R4
    000029BC 2302                   MOV.L       R0,@R3
    000029BE 61C3                   MOV         R12,R1
    000029C0 A00A                   BRA         L1365
    000029C2 4108                   SHLL2       R1
    000029C4              L1366:                            
      simplexC.c  1493            {
      simplexC.c  1494                it->Binv[i][j]=originalIt->Binv[i][j];
    000029C4 50E8                   MOV.L       @(32,R14),R0
    000029C6 6543                   MOV         R4,R5
    000029C8 031E                   MOV.L       @(R0,R1),R3
    000029CA 4508                   SHLL2       R5
    000029CC 50D8                   MOV.L       @(32,R13),R0
    000029CE 7401                   ADD         #1,R4
    000029D0 001E                   MOV.L       @(R0,R1),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  123


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000029D2 335C                   ADD         R5,R3
    000029D4 025E                   MOV.L       @(R0,R5),R2
    000029D6 2322                   MOV.L       R2,@R3
    000029D8              L1365:                            
    000029D8 53E9                   MOV.L       @(36,R14),R3
    000029DA 3433                   CMP/GE      R3,R4
    000029DC 8BF2                   BF          L1366
    000029DE 7C01                   ADD         #1,R12
    000029E0              L1363:                            
    000029E0 53E9                   MOV.L       @(36,R14),R3
    000029E2 3C33                   CMP/GE      R3,R12
    000029E4 8BE0                   BF          L1364
      simplexC.c  1495            }
      simplexC.c  1496            
      simplexC.c  1497        }
      simplexC.c  1498        it->idBasicVariables=calloc(ex.nVariables,sizeof(int));
    000029E6 E504                   MOV         #4,R5
    000029E8 480B                   JSR         @R8
    000029EA 549B                   MOV.L       @(44,R9),R4
    000029EC 1E02                   MOV.L       R0,@(8,R14)
      simplexC.c  1499        it->idByRowOfBasicVarsInBInv=calloc(it->BinvSize,sizeof(int));
    000029EE E504                   MOV         #4,R5
    000029F0 480B                   JSR         @R8
    000029F2 54E9                   MOV.L       @(36,R14),R4
    000029F4 1E03                   MOV.L       R0,@(12,R14)
      simplexC.c  1500        for(i=0;i<it->BinvSize;i++)
    000029F6 A008                   BRA         L1367
    000029F8 64A3                   MOV         R10,R4
    000029FA              L1368:                            
      simplexC.c  1501        {
      simplexC.c  1502            it->idByRowOfBasicVarsInBInv[i]=originalIt->idByRowOfBasicVarsInBInv[i];
    000029FA 6543                   MOV         R4,R5
    000029FC 53E3                   MOV.L       @(12,R14),R3
    000029FE 4508                   SHLL2       R5
    00002A00 50D3                   MOV.L       @(12,R13),R0
    00002A02 7401                   ADD         #1,R4
    00002A04 025E                   MOV.L       @(R0,R5),R2
    00002A06 335C                   ADD         R5,R3
    00002A08 2322                   MOV.L       R2,@R3
    00002A0A              L1367:                            
    00002A0A 52E9                   MOV.L       @(36,R14),R2
    00002A0C 3423                   CMP/GE      R2,R4
    00002A0E 8BF4                   BF          L1368
      simplexC.c  1503        }
      simplexC.c  1504        for(i=0;i<ex.nVariables;i++)
    00002A10 A008                   BRA         L1369
    00002A12 64A3                   MOV         R10,R4
    00002A14              L1370:                            
      simplexC.c  1505        {
      simplexC.c  1506            it->idBasicVariables[i]=originalIt->idBasicVariables[i];
    00002A14 52E2                   MOV.L       @(8,R14),R2
    00002A16 6543                   MOV         R4,R5
    00002A18 50D2                   MOV.L       @(8,R13),R0
    00002A1A 4508                   SHLL2       R5
    00002A1C 035E                   MOV.L       @(R0,R5),R3
    00002A1E 7401                   ADD         #1,R4
    00002A20 325C                   ADD         R5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  124


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A22 2232                   MOV.L       R3,@R2
    00002A24              L1369:                            
    00002A24 539B                   MOV.L       @(44,R9),R3
    00002A26 3433                   CMP/GE      R3,R4
    00002A28 8BF4                   BF          L1370
      simplexC.c  1507        }
      simplexC.c  1508        return it;
    00002A2A 60E3                   MOV         R14,R0
      simplexC.c  1509    }
    00002A2C 4F26                   LDS.L       @R15+,PR
    00002A2E 68F6                   MOV.L       @R15+,R8
    00002A30 69F6                   MOV.L       @R15+,R9
    00002A32 6AF6                   MOV.L       @R15+,R10
    00002A34 6CF6                   MOV.L       @R15+,R12
    00002A36 6DF6                   MOV.L       @R15+,R13
    00002A38 000B                   RTS
    00002A3A 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1510    
      simplexC.c  1511    int solveSimplexLPOneFase(int nodeId, int firsItId)
    00002A3C              _solveSimplexLPOneFase:          ; function: solveSimplexLPOneFase
                                                           ; frame size=20
    00002A3C 2FE6                   MOV.L       R14,@-R15
      simplexC.c  1512    {
      simplexC.c  1513        int itId, nId;
      simplexC.c  1514        float zSol;
      simplexC.c  1515        itId=firsItId;
      simplexC.c  1516        ex.nodes.its[itId]->numIteration=itId;
    00002A3E 6353                   MOV         R5,R3
    00002A40 2FD6                   MOV.L       R13,@-R15
    00002A42 4308                   SHLL2       R3
    00002A44 DE39                   MOV.L       L1425+46,R14; _ex
    00002A46 6D53                   MOV         R5,R13
    00002A48 2FC6                   MOV.L       R12,@-R15
    00002A4A 2FB6                   MOV.L       R11,@-R15
    00002A4C 4F22                   STS.L       PR,@-R15
    00002A4E 50E5                   MOV.L       @(20,R14),R0
    00002A50 023E                   MOV.L       @(R0,R3),R2
      simplexC.c  1517        while(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1)
    00002A52 A015                   BRA         L1372
    00002A54 2252                   MOV.L       R5,@R2
    00002A56              L1373:                            
      simplexC.c  1518        {
      simplexC.c  1519            calculateIteration(ex.nodes.its[itId]);
    00002A56 6CD3                   MOV         R13,R12
    00002A58 50E5                   MOV.L       @(20,R14),R0
    00002A5A 4C08                   SHLL2       R12
    00002A5C D234                   MOV.L       L1425+50,R2; _calculateIteration
    00002A5E 420B                   JSR         @R2
    00002A60 04CE                   MOV.L       @(R0,R12),R4
      simplexC.c  1520            if(ex.nodes.its[itId]->idVarIn!=-1 && ex.nodes.its[itId]->idVarOut!=-1){
    00002A62 50E5                   MOV.L       @(20,R14),R0
    00002A64 04CE                   MOV.L       @(R0,R12),R4
    00002A66 5045                   MOV.L       @(20,R4),R0
    00002A68 88FF                   CMP/EQ      #-1,R0
    00002A6A 8909                   BT          L1372
    00002A6C 5046                   MOV.L       @(24,R4),R0
    00002A6E 88FF                   CMP/EQ      #-1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  125


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002A70 8906                   BT          L1372
      simplexC.c  1521                ex.nodes.its[itId+1]=createNewIteration(ex.nodes.its[itId]);
    00002A72 5BE5                   MOV.L       @(20,R14),R11
    00002A74 D32F                   MOV.L       L1425+54,R3; _createNewIteration
    00002A76 3BCC                   ADD         R12,R11
    00002A78 430B                   JSR         @R3
    00002A7A 64B2                   MOV.L       @R11,R4
    00002A7C 1B01                   MOV.L       R0,@(4,R11)
      simplexC.c  1522                zSol= ex.nodes.its[itId]->zSol;
      simplexC.c  1523                    itId++;
    00002A7E 7D01                   ADD         #1,R13
    00002A80              L1372:                            
    00002A80 50E5                   MOV.L       @(20,R14),R0
    00002A82 64D3                   MOV         R13,R4
    00002A84 4408                   SHLL2       R4
    00002A86 044E                   MOV.L       @(R0,R4),R4
    00002A88 5045                   MOV.L       @(20,R4),R0
    00002A8A 88FF                   CMP/EQ      #-1,R0
    00002A8C 8902                   BT          L1375
    00002A8E 5046                   MOV.L       @(24,R4),R0
    00002A90 88FF                   CMP/EQ      #-1,R0
    00002A92 8BE0                   BF          L1373
    00002A94              L1375:                            
      simplexC.c  1524            }
      simplexC.c  1525                
      simplexC.c  1526        }
      simplexC.c  1527        return itId;
      simplexC.c  1528    }
    00002A94 4F26                   LDS.L       @R15+,PR
    00002A96 60D3                   MOV         R13,R0
    00002A98 6BF6                   MOV.L       @R15+,R11
    00002A9A 6CF6                   MOV.L       @R15+,R12
    00002A9C 6DF6                   MOV.L       @R15+,R13
    00002A9E 000B                   RTS
    00002AA0 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1529    
      simplexC.c  1530    int solveSimplexLP(int nodeId)
    00002AA2              _solveSimplexLP:                 ; function: solveSimplexLP
                                                           ; frame size=148
    00002AA2 2FE6                   MOV.L       R14,@-R15
    00002AA4 2FD6                   MOV.L       R13,@-R15
    00002AA6 6D43                   MOV         R4,R13
      simplexC.c  1531    {
      simplexC.c  1532        int itId,lastItId;
      simplexC.c  1533        char strSol[128];
      simplexC.c  1534        itId=0;
      simplexC.c  1535        ex.nodes.id=nodeId;
    00002AA8 DE20                   MOV.L       L1425+46,R14; _ex
    00002AAA 2FC6                   MOV.L       R12,@-R15
    00002AAC 2F86                   MOV.L       R8,@-R15
    00002AAE 4F22                   STS.L       PR,@-R15
      simplexC.c  1536        ex.nodes.its=malloc(10*sizeof(struct iteration*));
    00002AB0 D313                   MOV.L       L1425+2,R3 ; _malloc
    00002AB2 7F80                   ADD         #-128,R15
    00002AB4 1E43                   MOV.L       R4,@(12,R14)
    00002AB6 430B                   JSR         @R3
    00002AB8 E428                   MOV         #40,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  126


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1537        ex.nodes.its[0]=modelToIteration(ex.canonicalStatement);
    00002ABA 6803                   MOV         R0,R8
    00002ABC D31E                   MOV.L       L1425+58,R3; _modelToIteration
    00002ABE 1E05                   MOV.L       R0,@(20,R14)
    00002AC0 430B                   JSR         @R3
    00002AC2 54E2                   MOV.L       @(8,R14),R4
    00002AC4 2802                   MOV.L       R0,@R8
      simplexC.c  1538        if(ex.canonicalStatement->is2fasesActive)
    00002AC6 53E2                   MOV.L       @(8,R14),R3
    00002AC8 5233                   MOV.L       @(12,R3),R2
    00002ACA 2228                   TST         R2,R2
    00002ACC 8936                   BT          L1377
      simplexC.c  1539        {
      simplexC.c  1540            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00002ACE E500                   MOV         #0,R5
    00002AD0 BFB4                   BSR         _solveSimplexLPOneFase
    00002AD2 64D3                   MOV         R13,R4
      simplexC.c  1541            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;//CAMBIAR
    00002AD4 52E2                   MOV.L       @(8,R14),R2
    00002AD6 6C03                   MOV         R0,R12
    00002AD8 E044                   MOV         #68,R0
      simplexC.c  1542            //NO SE SI HACE FALTA MAS
      simplexC.c  1543            ex.canonicalStatement->is2fasesActive=0;
      simplexC.c  1544            ex.nodes.its[lastItId+1]=convertToSecondPhase(nodeId, lastItId);
    00002ADA 65C3                   MOV         R12,R5
    00002ADC 032E                   MOV.L       @(R0,R2),R3
    00002ADE 1E3A                   MOV.L       R3,@(40,R14)
    00002AE0 52E2                   MOV.L       @(8,R14),R2
    00002AE2 E300                   MOV         #0,R3
    00002AE4 1233                   MOV.L       R3,@(12,R2)
    00002AE6 62C3                   MOV         R12,R2
    00002AE8 53E5                   MOV.L       @(20,R14),R3
    00002AEA 4208                   SHLL2       R2
    00002AEC 323C                   ADD         R3,R2
    00002AEE 6823                   MOV         R2,R8
    00002AF0 7804                   ADD         #4,R8
    00002AF2 BF3F                   BSR         _convertToSecondPhase
    00002AF4 64D3                   MOV         R13,R4
      simplexC.c  1545            lastItId=solveSimplexLPOneFase(nodeId, lastItId+1);
    00002AF6 65C3                   MOV         R12,R5
    00002AF8 2802                   MOV.L       R0,@R8
    00002AFA A020                   BRA         L1394
    00002AFC 7501                   ADD         #1,R5
    00002AFE              L1425:                            
    00002AFE 0000                   .DATA.W     0
    00002B00 <00000000>             .DATA.L     _malloc
    00002B04 <00000000>             .DATA.L     _calloc
    00002B08 C0800000               .DATA.L     H'C0800000
    00002B0C C0C00000               .DATA.L     H'C0C00000
    00002B10 BF800000               .DATA.L     H'BF800000
    00002B14 3F800000               .DATA.L     H'3F800000
    00002B18 40000000               .DATA.L     H'40000000
    00002B1C 40A00000               .DATA.L     H'40A00000
    00002B20 41300000               .DATA.L     H'41300000
    00002B24 41D80000               .DATA.L     H'41D80000
    00002B28 42B40000               .DATA.L     H'42B40000
    00002B2C <00000000>             .DATA.L     _ex




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  127


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B30 <00000000>             .DATA.L     _calculateIteration
    00002B34 <00000000>             .DATA.L     _createNewIteration
    00002B38 <00000000>             .DATA.L     _modelToIteration
    00002B3C              L1377:                            
      simplexC.c  1546        }else
      simplexC.c  1547        {
      simplexC.c  1548            lastItId=solveSimplexLPOneFase(nodeId, 0);
    00002B3C E500                   MOV         #0,R5
    00002B3E              L1394:                            
    00002B3E BF7D                   BSR         _solveSimplexLPOneFase
    00002B40 64D3                   MOV         R13,R4
    00002B42 6403                   MOV         R0,R4
      simplexC.c  1549        }
      simplexC.c  1550        ex.nodes.nIterations=lastItId;
    00002B44 1E04                   MOV.L       R0,@(16,R14)
      simplexC.c  1551    
      simplexC.c  1552        return 0;
    00002B46 E000                   MOV         #0,R0
      simplexC.c  1553    }
    00002B48 9168                   MOV.W       L1426,R1   ; H'0080
    00002B4A 3F1C                   ADD         R1,R15
    00002B4C 4F26                   LDS.L       @R15+,PR
    00002B4E 68F6                   MOV.L       @R15+,R8
    00002B50 6CF6                   MOV.L       @R15+,R12
    00002B52 6DF6                   MOV.L       @R15+,R13
    00002B54 000B                   RTS
    00002B56 6EF6                   MOV.L       @R15+,R14
      simplexC.c  1554    
      simplexC.c  1555    
      simplexC.c  1556    int initializeExecution()
    00002B58              _initializeExecution:            ; function: initializeExecution
                                                           ; frame size=0
      simplexC.c  1557    {
      simplexC.c  1558        ex.bVectorValues=ex.canonicalStatement->rightValues;
    00002B58 D432                   MOV.L       L1426+8,R4 ; _ex
    00002B5A 5342                   MOV.L       @(8,R4),R3
    00002B5C 5235                   MOV.L       @(20,R3),R2
    00002B5E 1426                   MOV.L       R2,@(24,R4)
    00002B60 5542                   MOV.L       @(8,R4),R5
    00002B62 6353                   MOV         R5,R3
    00002B64 5232                   MOV.L       @(8,R3),R2
    00002B66 2228                   TST         R2,R2
    00002B68 8904                   BT          L1380
      simplexC.c  1559        if(ex.canonicalStatement->is2fasesNeeded)
      simplexC.c  1560        {
      simplexC.c  1561            ex.canonicalStatement->is2fasesActive=1;
    00002B6A E201                   MOV         #1,R2
    00002B6C 1523                   MOV.L       R2,@(12,R5)
      simplexC.c  1562            ex.currentFuncObjectivePurpose=FUNC_MINIMIZE;
    00002B6E E300                   MOV         #0,R3
    00002B70 A003                   BRA         L1381
    00002B72 143A                   MOV.L       R3,@(40,R4)
    00002B74              L1380:                            
      simplexC.c  1563        }else
      simplexC.c  1564        {
      simplexC.c  1565            ex.currentFuncObjectivePurpose=ex.canonicalStatement->funcObjectivePurpose;
    00002B74 E044                   MOV         #68,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  128


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002B76 015E                   MOV.L       @(R0,R5),R1
    00002B78 141A                   MOV.L       R1,@(40,R4)
    00002B7A              L1381:                            
      simplexC.c  1566        }
      simplexC.c  1567        ex.inputCvectorValues=ex.canonicalStatement->funcObjtValues;
    00002B7A E048                   MOV         #72,R0
    00002B7C 5342                   MOV.L       @(8,R4),R3
    00002B7E 023E                   MOV.L       @(R0,R3),R2
    00002B80 1427                   MOV.L       R2,@(28,R4)
      simplexC.c  1568        ex.fases2CvectorValues=ex.canonicalStatement->funcObjtValues2Fases;
    00002B82 E04C                   MOV         #76,R0
    00002B84 5342                   MOV.L       @(8,R4),R3
    00002B86 023E                   MOV.L       @(R0,R3),R2
    00002B88 1428                   MOV.L       R2,@(32,R4)
      simplexC.c  1569        return 0;
      simplexC.c  1570    }
    00002B8A 000B                   RTS
    00002B8C E000                   MOV         #0,R0
      simplexC.c  1571    
      simplexC.c  1572    int AddIn_main(int isAppli, unsigned short OptionNum)
    00002B8E              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=192
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    00002B8E 2FE6                   MOV.L       R14,@-R15
    00002B90 4F22                   STS.L       PR,@-R15
    00002B92 7F80                   ADD         #-128,R15
      simplexC.c  1573    {
      simplexC.c  1574        char str[128];
      simplexC.c  1575        selectExecutionMode();
    00002B94 BBED                   BSR         _selectExecutionMode
    00002B96 0009                   NOP
    00002B98 DE22                   MOV.L       L1426+8,R14; _ex
    00002B9A 64E2                   MOV.L       @R14,R4
    00002B9C 2448                   TST         R4,R4
    00002B9E 8B1C                   BF          L1383
      simplexC.c  1576        if(ex.mode==MODE_FULL_EXECUTION)
      simplexC.c  1577        {
      simplexC.c  1578            // ex.initialProblemStatement=createProblemStatementToDebug2Fases();
      simplexC.c  1579            // 
      simplexC.c  1580            // 
      simplexC.c  1581            // sprintf(str,"nSlope %d, N2F %d",ex.initialProblemStatement->nVariablesSlope,ex.initialProblemSt
                         +atement->nVariables2fases);
      simplexC.c  1582            // PrintMini(0, 0, (unsigned char *)str, MINI_OVER);    
      simplexC.c  1583            // Bdisp_PutDisp_DD();
      simplexC.c  1584            // Sleep(3000);
      simplexC.c  1585            Bdisp_AllClr_DDVRAM();
    00002BA0 D321                   MOV.L       L1426+12,R3; _Bdisp_AllClr_DDVRAM
    00002BA2 430B                   JSR         @R3
    00002BA4 0009                   NOP
      simplexC.c  1586            ex.initialProblemStatement=getProblemInputs();
    00002BA6 BAB5                   BSR         _getProblemInputs
    00002BA8 0009                   NOP
    00002BAA 1E01                   MOV.L       R0,@(4,R14)
      simplexC.c  1587            printStatementMenu(ex.initialProblemStatement);
    00002BAC D31F                   MOV.L       L1426+16,R3; _printStatementMenu
    00002BAE 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  129


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00002BB0 6403                   MOV         R0,R4
      simplexC.c  1588            convertModel(ex);
    00002BB2 62E3                   MOV         R14,R2
    00002BB4 D31E                   MOV.L       L1426+20,R3; __quick_evn_mvn
    00002BB6 E038                   MOV         #56,R0
    00002BB8 3F08                   SUB         R0,R15
    00002BBA 430B                   JSR         @R3
    00002BBC 61F3                   MOV         R15,R1
    00002BBE BC19                   BSR         _convertModel
    00002BC0 0009                   NOP
    00002BC2 7F38                   ADD         #56,R15
      simplexC.c  1589            printStatementMenu(ex.canonicalStatement);
    00002BC4 D319                   MOV.L       L1426+16,R3; _printStatementMenu
    00002BC6 430B                   JSR         @R3
    00002BC8 54E2                   MOV.L       @(8,R14),R4
      simplexC.c  1590            initializeExecution();
    00002BCA BFC5                   BSR         _initializeExecution
    00002BCC 0009                   NOP
      simplexC.c  1591            solveSimplexLP(0);
    00002BCE BF68                   BSR         _solveSimplexLP
    00002BD0 E400                   MOV         #0,R4
      simplexC.c  1592            printSolMenu();
    00002BD2 B923                   BSR         _printSolMenu
    00002BD4 0009                   NOP
    00002BD6 A013                   BRA         L1384
    00002BD8 0009                   NOP
    00002BDA              L1383:                            
      simplexC.c  1593    
      simplexC.c  1594        }else if(ex.mode==MODE_INPUT_TABLE)
    00002BDA 6043                   MOV         R4,R0
    00002BDC 8801                   CMP/EQ      #1,R0
    00002BDE 890F                   BT          L1384
      simplexC.c  1595        {
      simplexC.c  1596            //TODO
      simplexC.c  1597        }else
      simplexC.c  1598        {
      simplexC.c  1599            Bdisp_AllClr_DDVRAM();
    00002BE0 D211                   MOV.L       L1426+12,R2; _Bdisp_AllClr_DDVRAM
    00002BE2 420B                   JSR         @R2
    00002BE4 0009                   NOP
      simplexC.c  1600            PrintMini(0, 0, (unsigned char *)"ERROR", MINI_OVER);
    00002BE6 E710                   MOV         #16,R7
    00002BE8 D612                   MOV.L       L1426+24,R6; L557
    00002BEA E500                   MOV         #0,R5
    00002BEC D312                   MOV.L       L1426+28,R3; _PrintMini
    00002BEE 430B                   JSR         @R3
    00002BF0 6453                   MOV         R5,R4
      simplexC.c  1601            Bdisp_PutDisp_DD();
    00002BF2 D212                   MOV.L       L1426+32,R2; _Bdisp_PutDisp_DD
    00002BF4 420B                   JSR         @R2
    00002BF6 0009                   NOP
      simplexC.c  1602            Sleep(3000);
    00002BF8 9411                   MOV.W       L1426+2,R4 ; H'0BB8
    00002BFA D311                   MOV.L       L1426+36,R3; _Sleep
    00002BFC 430B                   JSR         @R3
    00002BFE 0009                   NOP
    00002C00              L1384:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  130


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplexC.c  1603        }
      simplexC.c  1604        freeMemoryExecution(ex);
    00002C00 D30B                   MOV.L       L1426+20,R3; __quick_evn_mvn
    00002C02 62E3                   MOV         R14,R2
    00002C04 E038                   MOV         #56,R0
    00002C06 3F08                   SUB         R0,R15
    00002C08 430B                   JSR         @R3
    00002C0A 61F3                   MOV         R15,R1
    00002C0C D20D                   MOV.L       L1426+40,R2; _freeMemoryExecution
    00002C0E 420B                   JSR         @R2
    00002C10 0009                   NOP
      simplexC.c  1605        
      simplexC.c  1606    }
    00002C12 9105                   MOV.W       L1426+4,R1 ; H'00B8
    00002C14 3F1C                   ADD         R1,R15
    00002C16 4F26                   LDS.L       @R15+,PR
    00002C18 000B                   RTS
    00002C1A 6EF6                   MOV.L       @R15+,R14
    00002C1C              L1426:                            
    00002C1C 0080                   .DATA.W     H'0080
    00002C1E 0BB8                   .DATA.W     H'0BB8
    00002C20 00B8                   .DATA.W     H'00B8
    00002C22 0000                   .DATA.W     0
    00002C24 <00000000>             .DATA.L     _ex
    00002C28 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00002C2C <00000000>             .DATA.L     _printStatementMenu
    00002C30 <00000000>             .DATA.L     __quick_evn_mvn
    00002C34 <00000000>             .DATA.L     L557
    00002C38 <00000000>             .DATA.L     _PrintMini
    00002C3C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00002C40 <00000000>             .DATA.L     _Sleep
    00002C44 <00000000>             .DATA.L     _freeMemoryExecution
      simplexC.c  1607    
      simplexC.c  1608    #pragma section _BR_Size
      simplexC.c  1609    unsigned long BR_Size;
      simplexC.c  1610    #pragma section
      simplexC.c  1611    
      simplexC.c  1612    #pragma section _TOP
      simplexC.c  1613    
      simplexC.c  1614    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
      simplexC.c  1615    {
      simplexC.c  1616        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L1427+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1427:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
      simplexC.c  1617    }
      simplexC.c  1618    
      simplexC.c  1619    #pragma section
C   00000000              L554:
    00000000 3D                     .SDATA      "="
    00000001 00                     .DATA.B     H'00
    00000002 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  131


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000004              L555:
    00000004 3C3D                   .SDATA      "<="
    00000006 00                     .DATA.B     H'00
    00000007 00000001               .RES.B      1
    00000008              L556:
    00000008 3E3D                   .SDATA      ">="
    0000000A 00                     .DATA.B     H'00
    0000000B 00000001               .RES.B      1
    0000000C              L557:
    0000000C 4552524F52             .SDATA      "ERROR"
    00000011 00                     .DATA.B     H'00
    00000012 00000002               .RES.W      1
    00000014              L563:
    00000014 4D494E                 .SDATA      "MIN"
    00000017 00                     .DATA.B     H'00
    00000018              L564:
    00000018 4D4158                 .SDATA      "MAX"
    0000001B 00                     .DATA.B     H'00
    0000001C              L576:
    0000001C 50726F626C             .SDATA      "Problem statement %s, OBJ. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C204F424A   
             2E20457869   
             74202564     
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L577:
    00000040 494E505554             .SDATA      "INPUT"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L578:
    00000048 534F4C5645             .SDATA      "SOLVE"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L579:
    00000050 4E436F6E73             .SDATA      "NConstraints: %d, NVariables: %d"
             747261696E   
             74733A2025   
             642C204E56   
             6172696162   
             6C65733A20   
             2564         
    00000070 00                     .DATA.B     H'00
    00000071 00000001               .RES.B      1
    00000072 00000002               .RES.W      1
    00000074              L581:
    00000074 4F424A2025             .SDATA      "OBJ %s"
             73           
    0000007A 00                     .DATA.B     H'00
    0000007B 00000001               .RES.B      1
    0000007C              L582:
    0000007C 496E642074             .SDATA      "Ind term: %.2f. Sel var"
             65726D3A20   
             252E32662E   
             2053656C20   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  132


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             766172       
    00000093 00                     .DATA.B     H'00
    00000094              L584:
    00000094 4F424A204D             .SDATA      "OBJ MIN"
             494E         
    0000009B 00                     .DATA.B     H'00
    0000009C              L588:
    0000009C 4F626A2076             .SDATA      "Obj val x%d: %.2f"
             616C207825   
             643A20252E   
             3266         
    000000AD 00                     .DATA.B     H'00
    000000AE 00000002               .RES.W      1
    000000B0              L590:
    000000B0 5072657373             .SDATA      "Press any key to continue"
             20616E7920   
             6B65792074   
             6F20636F6E   
             74696E7565   
    000000C9 00                     .DATA.B     H'00
    000000CA 00000002               .RES.W      1
    000000CC              L598:
    000000CC 417825642E             .SDATA      "Ax%d. nConstraints: %d, Exit %d"
             206E436F6E   
             7374726169   
             6E74733A20   
             25642C2045   
             7869742025   
             64           
    000000EB 00                     .DATA.B     H'00
    000000EC              L601:
    000000EC 417825642E             .SDATA      "Ax%d. %.2f Pos %d"
             20252E3266   
             20506F7320   
             2564         
    000000FD 00                     .DATA.B     H'00
    000000FE 00000002               .RES.W      1
    00000100              L608:
    00000100 41786A2070             .SDATA      "Axj pMenu Vars %d.  %d exit"
             4D656E7520   
             5661727320   
             25642E2020   
             2564206578   
             6974         
    0000011B 00                     .DATA.B     H'00
    0000011C              L620:
    0000011C 436F6E7374             .SDATA      "Constraint %d. Vars: %d, Exit %d"
             7261696E74   
             2025642E20   
             566172733A   
             2025642C20   
             4578697420   
             2564         
    0000013C 00                     .DATA.B     H'00
    0000013D 00000001               .RES.B      1
    0000013E 00000002               .RES.W      1
    00000140              L622:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  133


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000140 436F6E7374             .SDATA      "Const %d. %.2f x%d"
             2025642E20   
             252E326620   
             782564       
    00000152 00                     .DATA.B     H'00
    00000153 00000001               .RES.B      1
    00000154              L624:
    00000154 20536C6F70             .SDATA      " Slope"
             65           
    0000015A 00                     .DATA.B     H'00
    0000015B 00000001               .RES.B      1
    0000015C              L626:
    0000015C 204475616C             .SDATA      " Dual"
    00000161 00                     .DATA.B     H'00
    00000162 00000002               .RES.W      1
    00000164              L628:
    00000164 20496E74               .SDATA      " Int"
    00000168 00                     .DATA.B     H'00
    00000169 00000001               .RES.B      1
    0000016A 00000002               .RES.W      1
    0000016C              L635:
    0000016C 436F6E7374             .SDATA      "Constraint %d. Ine: %s"
             7261696E74   
             2025642E20   
             496E653A20   
             2573         
    00000182 00                     .DATA.B     H'00
    00000183 00000001               .RES.B      1
    00000184              L642:
    00000184 436F6E7374             .SDATA      "Constraint %d. Rval: %.2f"
             7261696E74   
             2025642E20   
             5276616C3A   
             20252E3266   
    0000019D 00                     .DATA.B     H'00
    0000019E 00000002               .RES.W      1
    000001A0              L650:
    000001A0 436F6E7374             .SDATA      "Constraint %d printMenu. %d exit"
             7261696E74   
             2025642070   
             72696E744D   
             656E752E20   
             2564206578   
             6974         
    000001C0 00                     .DATA.B     H'00
    000001C1 00000001               .RES.B      1
    000001C2 00000002               .RES.W      1
    000001C4              L651:
    000001C4 312050696E             .SDATA      "1 Pinfo var"
             666F207661   
             72           
    000001CF 00                     .DATA.B     H'00
    000001D0              L652:
    000001D0 322050696E             .SDATA      "2 Pinfo ine"
             666F20696E   
             65           
    000001DB 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  134


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001DC              L653:
    000001DC 332050696E             .SDATA      "3 Pinfo RVal"
             666F205256   
             616C         
    000001E8 00                     .DATA.B     H'00
    000001E9 00000001               .RES.B      1
    000001EA 00000002               .RES.W      1
    000001EC              L662:
    000001EC 704D656E75             .SDATA      "pMenu Consts %d.  %d exit"
             20436F6E73   
             7473202564   
             2E20202564   
             2065786974   
    00000205 00                     .DATA.B     H'00
    00000206 00000002               .RES.W      1
    00000208              L671:
    00000208 50726F626C             .SDATA      "Problem statement %s, printMenu. Exit %d"
             656D207374   
             6174656D65   
             6E74202573   
             2C20707269   
             6E744D656E   
             752E204578   
             6974202564   
    00000230 00                     .DATA.B     H'00
    00000231 00000001               .RES.B      1
    00000232 00000002               .RES.W      1
    00000234              L673:
    00000234 322050696E             .SDATA      "2 Pinfo obj func. 3 Pinfo 2fases"
             666F206F62   
             6A2066756E   
             632E203320   
             50696E666F   
             2032666173   
             6573         
    00000254 00                     .DATA.B     H'00
    00000255 00000001               .RES.B      1
    00000256 00000002               .RES.W      1
    00000258              L675:
    00000258 322050696E             .SDATA      "2 Pinfo obj func."
             666F206F62   
             6A2066756E   
             632E         
    00000269 00                     .DATA.B     H'00
    0000026A 00000002               .RES.W      1
    0000026C              L677:
    0000026C 312050696E             .SDATA      "1 Pinfo constraint"
             666F20636F   
             6E73747261   
             696E74       
    0000027E 00                     .DATA.B     H'00
    0000027F 00000001               .RES.B      1
    00000280              L679:
    00000280 342050696E             .SDATA      "4 Pinfo aj vec"
             666F20616A   
             20766563     
    0000028E 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  135


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028F 00000001               .RES.B      1
    00000290              L691:
    00000290 4374206974             .SDATA      "Ct itId %d. S: %d.  %d exit"
             4964202564   
             2E20533A20   
             25642E2020   
             2564206578   
             6974         
    000002AB 00                     .DATA.B     H'00
    000002AC              L693:
    000002AC 506F732025             .SDATA      "Pos %d: %.2f"
             643A20252E   
             3266         
    000002B8 00                     .DATA.B     H'00
    000002B9 00000001               .RES.B      1
    000002BA 00000002               .RES.W      1
    000002BC              L702:
    000002BC 5862206974             .SDATA      "Xb itId %d. S: %d.  %d exit"
             4964202564   
             2E20533A20   
             25642E2020   
             2564206578   
             6974         
    000002D7 00                     .DATA.B     H'00
    000002D8              L712:
    000002D8 5920262078             .SDATA      "Y & xb/y itId %d. S: %d.  %d exit"
             622F792069   
             7449642025   
             642E20533A   
             2025642E20   
             2025642065   
             786974       
    000002F9 00                     .DATA.B     H'00
    000002FA 00000002               .RES.W      1
    000002FC              L714:
    000002FC 506F732025             .SDATA      "Pos %d: Y: %.2f xb/y: %.2f"
             643A20593A   
             20252E3266   
             2078622F79   
             3A20252E32   
             66           
    00000316 00                     .DATA.B     H'00
    00000317 00000001               .RES.B      1
    00000318              L723:
    00000318 437442696E             .SDATA      "CtBinv itId %d. S: %d.  %d exit"
             7620697449   
             642025642E   
             20533A2025   
             642E202025   
             6420657869   
             74           
    00000337 00                     .DATA.B     H'00
    00000338              L733:
    00000338 4256617273             .SDATA      "BVars itId %d. S: %d.  %d exit"
             2069744964   
             2025642E20   
             533A202564   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  136


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2E20202564   
             2065786974   
    00000356 00                     .DATA.B     H'00
    00000357 00000001               .RES.B      1
    00000358              L735:
    00000358 506F732025             .SDATA      "Pos %d: %d"
             643A202564   
    00000362 00                     .DATA.B     H'00
    00000363 00000001               .RES.B      1
    00000364              L746:
    00000364 5661722072             .SDATA      "Var res, printMenu. Exit %d"
             65732C2070   
             72696E744D   
             656E752E20   
             4578697420   
             2564         
    0000037F 00                     .DATA.B     H'00
    00000380              L747:
    00000380 4E76617273             .SDATA      "Nvars: %d, NVB: %d"
             3A2025642C   
             204E56423A   
             202564       
    00000392 00                     .DATA.B     H'00
    00000393 00000001               .RES.B      1
    00000394              L748:
    00000394 53656C6563             .SDATA      "Select a var:"
             7420612076   
             61723A       
    000003A1 00                     .DATA.B     H'00
    000003A2 00000002               .RES.W      1
    000003A4              L754:
    000003A4 7825643A20             .SDATA      "x%d: %.2f"
             252E3266     
    000003AD 00                     .DATA.B     H'00
    000003AE 00000002               .RES.W      1
    000003B0              L757:
    000003B0 4E6F207661             .SDATA      "No var found"
             7220666F75   
             6E64         
    000003BC 00                     .DATA.B     H'00
    000003BD 00000001               .RES.B      1
    000003BE 00000002               .RES.W      1
    000003C0              L766:
    000003C0 4376616C73             .SDATA      "Cvals itId %d. Vars: %d.  %d exit"
             2069744964   
             2025642E20   
             566172733A   
             2025642E20   
             2025642065   
             786974       
    000003E1 00                     .DATA.B     H'00
    000003E2 00000002               .RES.W      1
    000003E4              L776:
    000003E4 42696E7620             .SDATA      "Binv itId %d. S: %d.  %d exit"
             6974496420   
             25642E2053   
             3A2025642E   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  137


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             2020256420   
             65786974     
    00000401 00                     .DATA.B     H'00
    00000402 00000002               .RES.W      1
    00000404              L778:
    00000404 526F773A20             .SDATA      "Row: "
    00000409 00                     .DATA.B     H'00
    0000040A 00000002               .RES.W      1
    0000040C              L779:
    0000040C 436F6C756D             .SDATA      "Column: "
             6E3A20       
    00000414 00                     .DATA.B     H'00
    00000415 00000001               .RES.B      1
    00000416 00000002               .RES.W      1
    00000418              L781:
    00000418 425B25645D             .SDATA      "B[%d][%d]: %.2f"
             5B25645D3A   
             20252E3266   
    00000427 00                     .DATA.B     H'00
    00000428              L793:
    00000428 5A6A202620             .SDATA      "Zj & cj-zj itId %d. S: %d.  %d exit"
             636A2D7A6A   
             2069744964   
             2025642E20   
             533A202564   
             2E20202564   
             2065786974   
    0000044B 00                     .DATA.B     H'00
    0000044C              L797:
    0000044C 5A6A25643A             .SDATA      "Zj%d: %.2f. Cj-Zj: %.2f"
             20252E3266   
             2E20436A2D   
             5A6A3A2025   
             2E3266       
    00000463 00                     .DATA.B     H'00
    00000464              L799:
    00000464 7825643A20             .SDATA      "x%d: is a basic var"
             6973206120   
             6261736963   
             20766172     
    00000477 00                     .DATA.B     H'00
    00000478              L806:
    00000478 4974202564             .SDATA      "It %d.ZSol: %.2f Exit %d"
             2E5A536F6C   
             3A20252E32   
             6620457869   
             74202564     
    00000490 00                     .DATA.B     H'00
    00000491 00000001               .RES.B      1
    00000492 00000002               .RES.W      1
    00000494              L807:
    00000494 566172496E             .SDATA      "VarIn: %d, VarOut: %d. %s"
             3A2025642C   
             205661724F   
             75743A2025   
             642E202573   
    000004AD 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  138


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004AE 00000002               .RES.W      1
    000004B0              L808:
    000004B0 3266617365             .SDATA      "2fases"
             73           
    000004B6 00                     .DATA.B     H'00
    000004B7 00000001               .RES.B      1
    000004B8              L809:
    000004B8 00                     .DATA.B     H'00
    000004B9 00000001               .RES.B      1
    000004BA 00000002               .RES.W      1
    000004BC              L811:
    000004BC 312042696E             .SDATA      "1 Binv. 2 xb. 3 ct"
             762E203220   
             78622E2033   
             206374       
    000004CE 00                     .DATA.B     H'00
    000004CF 00000001               .RES.B      1
    000004D0              L812:
    000004D0 3420437442             .SDATA      "4 CtBinv"
             696E76       
    000004D8 00                     .DATA.B     H'00
    000004D9 00000001               .RES.B      1
    000004DA 00000002               .RES.W      1
    000004DC              L813:
    000004DC 35207A6A20             .SDATA      "5 zj and cj-zj"
             616E642063   
             6A2D7A6A     
    000004EA 00                     .DATA.B     H'00
    000004EB 00000001               .RES.B      1
    000004EC              L814:
    000004EC 3620796A20             .SDATA      "6 yj & xb/yj"
             262078622F   
             796A         
    000004F8 00                     .DATA.B     H'00
    000004F9 00000001               .RES.B      1
    000004FA 00000002               .RES.W      1
    000004FC              L815:
    000004FC 3720616A2E             .SDATA      "7 aj. 8 Cv"
             2038204376   
    00000506 00                     .DATA.B     H'00
    00000507 00000001               .RES.B      1
    00000508              L816:
    00000508 3920626173             .SDATA      "9 basic vars B"
             6963207661   
             72732042     
    00000516 00                     .DATA.B     H'00
    00000517 00000001               .RES.B      1
    00000518              L824:
    00000518 4974732073             .SDATA      "Its sel. Nits: %d. Exit %d"
             656C2E204E   
             6974733A20   
             25642E2045   
             7869742025   
             64           
    00000532 00                     .DATA.B     H'00
    00000533 00000001               .RES.B      1
    00000534              L833:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  139


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000534 50726F626C             .SDATA      "Problem solution, printMenu. Exit %d"
             656D20736F   
             6C7574696F   
             6E2C207072   
             696E744D65   
             6E752E2045   
             7869742025   
             64           
    00000558 00                     .DATA.B     H'00
    00000559 00000001               .RES.B      1
    0000055A 00000002               .RES.W      1
    0000055C              L834:
    0000055C 4E6974733A             .SDATA      "Nits: %d, ZSol: %.2f"
             2025642C20   
             5A536F6C3A   
             20252E3266   
    00000570 00                     .DATA.B     H'00
    00000571 00000001               .RES.B      1
    00000572 00000002               .RES.W      1
    00000574              L836:
    00000574 312050696E             .SDATA      "1 Pinfo res vars"
             666F207265   
             7320766172   
             73           
    00000584 00                     .DATA.B     H'00
    00000585 00000001               .RES.B      1
    00000586 00000002               .RES.W      1
    00000588              L837:
    00000588 322050696E             .SDATA      "2 Pinfo its"
             666F206974   
             73           
    00000593 00                     .DATA.B     H'00
    00000594              L846:
    00000594 436F6E7374             .SDATA      "Constraint: %d, Choose Inequality"
             7261696E74   
             3A2025642C   
             2043686F6F   
             736520496E   
             657175616C   
             697479       
    000005B5 00                     .DATA.B     H'00
    000005B6 00000002               .RES.W      1
    000005B8              L847:
    000005B8 5072657373             .SDATA      "Press E: %d, LET %d,  GET %d"
             20453A2025   
             642C204C45   
             542025642C   
             2020474554   
             202564       
    000005D4 00                     .DATA.B     H'00
    000005D5 00000001               .RES.B      1
    000005D6 00000002               .RES.W      1
    000005D8              L854:
    000005D8 436F6E7374             .SDATA      "Constraint: %d, Right Value"
             7261696E74   
             3A2025642C   
             2052696768   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  140


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             742056616C   
             7565         
    000005F3 00                     .DATA.B     H'00
    000005F4              L867:
    000005F4 436F6E7374             .SDATA      "Constraint: %d, variable: %d"
             7261696E74   
             3A2025642C   
             2076617269   
             61626C653A   
             202564       
    00000610 00                     .DATA.B     H'00
    00000611 00000001               .RES.B      1
    00000612 00000002               .RES.W      1
    00000614              L884:
    00000614 4E436F6E73             .SDATA      "NConstraints?"
             747261696E   
             74733F       
    00000621 00                     .DATA.B     H'00
    00000622 00000002               .RES.W      1
    00000624              L885:
    00000624 4E56617269             .SDATA      "NVariables?"
             61626C6573   
             3F           
    0000062F 00                     .DATA.B     H'00
    00000630              L888:
    00000630 5661726961             .SDATA      "Variable x%d"
             626C652078   
             2564         
    0000063C 00                     .DATA.B     H'00
    0000063D 00000001               .RES.B      1
    0000063E 00000002               .RES.W      1
    00000640              L889:
    00000640 5072657373             .SDATA      "Press 1 if Int var, 0 no"
             2031206966   
             20496E7420   
             7661722C20   
             30206E6F     
    00000658 00                     .DATA.B     H'00
    00000659 00000001               .RES.B      1
    0000065A 00000002               .RES.W      1
    0000065C              L892:
    0000065C 4F424A2E20             .SDATA      "OBJ. Min: %d, Max %d"
             4D696E3A20   
             25642C204D   
             6178202564   
    00000670 00                     .DATA.B     H'00
    00000671 00000001               .RES.B      1
    00000672 00000002               .RES.W      1
    00000674              L894:
    00000674 4F626A2076             .SDATA      "Obj value var x%d"
             616C756520   
             7661722078   
             2564         
    00000685 00                     .DATA.B     H'00
    00000686 00000002               .RES.W      1
    00000688              L895:
    00000688 4F626A2076             .SDATA      "Obj value Independent"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE  141


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             616C756520   
             496E646570   
             656E64656E   
             74           
    0000069D 00                     .DATA.B     H'00
    0000069E 00000002               .RES.W      1
    000006A0              L899:
    000006A0 4D6F64652E             .SDATA      "Mode. Full %d, Table %d"
             2046756C6C   
             2025642C20   
             5461626C65   
             202564       
    000006B7 00                     .DATA.B     H'00
B   00000000              _ex:                             ; static: ex
    00000000 00000038               .RES.L      14
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1












































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 25-Dec-2020 21:28:59  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        67




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1619



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00002C48 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               000006B8 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000038 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003348 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          55
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           422






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\pillo\AppData\Local\Temp\hmk8B97.tmp 

